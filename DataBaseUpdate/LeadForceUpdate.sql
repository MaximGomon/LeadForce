/*******************************************************************************
!!!Внимание!!! Этот скрипт обязателен для правильного функционирования скриптов с проверкой на версии
	Обязательный скрипт для версий базы.
	Создает две необходимые хранимые процедуры и одну функцию.
*******************************************************************************/

/* FUNCTION [dbo].[LBC_Version] */
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LBC_Version]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'
CREATE FUNCTION [dbo].[LBC_Version]() RETURNS int AS
BEGIN
	declare @version int
	if ( exists(select 1 from fn_listextendedproperty( ''lbc-version'', default, default, default, default, default, default ) ))
		select @version=cast(value as int) from fn_listextendedproperty( ''lbc-version'', default, default, default, default, default, default )
	else
		set @version = 0 
	
	return (@version)
END' 
END

/* PROCEDURE [dbo].[LBC_GetVersion] */
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LBC_GetVersion]') AND type in (N'P', N'PC', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[LBC_GetVersion] AS
BEGIN
	if ( exists(select 1 from fn_listextendedproperty( ''lbc-version'', default, default, default, default, default, default ) ))
		select value as version from fn_listextendedproperty( ''lbc-version'', default, default, default, default, default, default )
	else
		select 0 as version
END' 
END

/* PROCEDURE [dbo].[LBC_SetVersion] */
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LBC_SetVersion]') AND type in (N'P', N'PC', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[LBC_SetVersion] @version int AS
BEGIN
	if ( exists(select 1 from fn_listextendedproperty( ''lbc-version'', default, default, default, default, default, default ) ))
		exec sp_updateextendedproperty ''lbc-version'', @version
	else
		exec sp_addextendedproperty ''lbc-version'', @version
END' 
END

/**************************************************************************************************
	!!!Внимание!!!
	Все скрипты должны содержать проверку на версию, и ее установку после выполнения скрипта!!!
	
if ( dbo.LBC_Version() < V )
BEGIN
begin tran
	...
commit
exec LBC_SetVersion V
END
	
	где: ... - сам скрипт, V - версия базы.
	
	Новый скрипт добавляется в конец файла, и проверяет/устанавливает версию на 1 больше предыдущего
***************************************************************************************************/


/*******************************************************************************
	2012-03-30
	Обновление вкладки оценка трудоемкости в модуле требований
*******************************************************************************/
if ( dbo.LBC_Version() < 150 )
BEGIN
begin tran

ALTER TABLE [tbl_Requirement] ADD InternalQuantity decimal(18,4) NOT NULL DEFAULT((0))
ALTER TABLE [tbl_Requirement] ADD InternalUnitID uniqueidentifier NULL
ALTER TABLE [tbl_Requirement] ADD EstimateCommentInternal nvarchar(2048) NULL
ALTER TABLE [tbl_Requirement] ADD EstimateCommentForClient nvarchar(2048) NULL

ALTER TABLE [dbo].[tbl_Requirement]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Requirement_tbl_Unit_Internal] FOREIGN KEY([InternalUnitID])
REFERENCES [dbo].[tbl_Unit] ([ID])
ALTER TABLE [dbo].[tbl_Requirement] CHECK CONSTRAINT [FK_tbl_Requirement_tbl_Unit_Internal]

ALTER TABLE tbl_RequirementTransition ADD IsReviewRequired bit NOT NULL DEFAULT((0))

commit
exec LBC_SetVersion 150
END

/*******************************************************************************
	2012-04-02
	Обновление мониторинга
*******************************************************************************/
if ( dbo.LBC_Version() < 151 )
BEGIN
begin tran

ALTER TABLE [tbl_SourceMonitoring] ADD IsProceedOnlyServiceLevelContacts bit NOT NULL DEFAULT((0))
ALTER TABLE [tbl_SourceMonitoring] ADD ContactID uniqueidentifier NULL
ALTER TABLE [dbo].[tbl_SourceMonitoring]  WITH CHECK ADD  CONSTRAINT [FK_tbl_SourceMonitoring_tbl_Contact] FOREIGN KEY([ContactID])
REFERENCES [dbo].[tbl_Contact] ([ID])
ALTER TABLE [dbo].[tbl_SourceMonitoring] CHECK CONSTRAINT [FK_tbl_SourceMonitoring_tbl_Contact]

commit
exec LBC_SetVersion 151
END


/*******************************************************************************
	2012-04-02
	Обновление мониторинга
*******************************************************************************/
if ( dbo.LBC_Version() < 152 )
BEGIN
begin tran

EXEC sp_rename '[tbl_SourceMonitoring].[ContactID]','ReceiverContactID','COLUMN'
EXEC sp_rename 'FK_tbl_SourceMonitoring_tbl_Contact', 'FK_tbl_SourceMonitoring_tbl_ReceiverContact', 'OBJECT'

commit
exec LBC_SetVersion 152
END


/*******************************************************************************
	2012-04-05
	Добавлена аналитика
*******************************************************************************/
if ( dbo.LBC_Version() < 153 )
BEGIN
begin tran

CREATE TABLE [dbo].[tbl_Analytic](
	[ID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](512) NOT NULL,
	[Query] [ntext] NOT NULL,
 CONSTRAINT [PK_tbl_Analytic] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
INSERT [dbo].[tbl_Analytic] ([ID], [Title], [Query]) VALUES (N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Посещения', N'
DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''

IF @GroupByDays = 1
BEGIN		
	SELECT A.CreatedAt AS Period, A.[Views], A.Visitors, A.Visits, A.PotentialViews, A.PerspectiveViews,
 	ISNULL(B.PotentialVisitors,0) AS PotentialVisitors, ISNULL(B.PotentialVisits,0) AS PotentialVisits,
 	ISNULL(C.PerspectiveVisitors,0) AS PerspectiveVisitors, ISNULL(C.PerspectiveVisits,0) AS PerspectiveVisits
	FROM (SELECT CAST(ca.CreatedAt AS DATE) AS CreatedAt, 
	COUNT(*) AS [Views],
	COUNT(DISTINCT(ContactID)) AS [Visitors],
	COUNT(DISTINCT(ContactSessionID)) AS [Visits],
	COUNT(CASE WHEN C.UserFullName IS NOT NULL AND C.UserFullName <> '''' THEN 1 ELSE NULL END) AS [PotentialViews],
	COUNT(CASE WHEN C.UserFullName IS NULL OR C.UserFullName = '''' THEN 1 ELSE NULL END) AS [PerspectiveViews]	
	FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS C ON C.ID = CA.ContactID
	WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate
	GROUP BY CAST(ca.CreatedAt AS DATE)
	) AS A LEFT JOIN
	(SELECT CAST(ca.CreatedAt AS DATE) AS CreatedAt, 
	COUNT(DISTINCT(ContactID)) AS [PotentialVisitors],
	COUNT(DISTINCT(ContactSessionID)) AS [PotentialVisits]
	FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS C ON C.ID = CA.ContactID
	WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate
	AND C.UserFullName IS NOT NULL AND C.UserFullName <> ''''
	GROUP BY CAST(ca.CreatedAt AS DATE)
	) AS B ON A.CreatedAt = B.CreatedAt
	LEFT JOIN
	(SELECT CAST(ca.CreatedAt AS DATE) AS CreatedAt, 
	COUNT(DISTINCT(ContactID)) AS [PerspectiveVisitors],
	COUNT(DISTINCT(ContactSessionID)) AS [PerspectiveVisits]
	FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS C ON C.ID = CA.ContactID
	WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate
	AND (C.UserFullName IS NULL OR C.UserFullName = '''')
	GROUP BY CAST(ca.CreatedAt AS DATE)) AS C ON A.CreatedAt = C.CreatedAt	
	ORDER BY CAST(A.CreatedAt AS DATE)	
END
ELSE
BEGIN
 	SELECT A.CreatedAt AS Period, A.[Views], A.Visitors, A.Visits, A.PotentialViews, A.PerspectiveViews,
 	ISNULL(B.PotentialVisitors,0) AS PotentialVisitors, ISNULL(B.PotentialVisits,0) AS PotentialVisits,
 	ISNULL(C.PerspectiveVisitors,0) AS PerspectiveVisitors, ISNULL(C.PerspectiveVisits,0) AS PerspectiveVisits
	FROM (SELECT DATEPART(HOUR, ca.CreatedAt) AS CreatedAt, 
	COUNT(*) AS [Views],
	COUNT(DISTINCT(ContactID)) AS [Visitors],
	COUNT(DISTINCT(ContactSessionID)) AS [Visits],
	COUNT(CASE WHEN C.UserFullName IS NOT NULL AND C.UserFullName <> '''' THEN 1 ELSE NULL END) AS [PotentialViews],
	COUNT(CASE WHEN C.UserFullName IS NULL OR C.UserFullName = '''' THEN 1 ELSE NULL END) AS [PerspectiveViews]	
	FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS C ON C.ID = CA.ContactID
	WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate
	GROUP BY DATEPART(HOUR, ca.CreatedAt)
	) AS A LEFT JOIN
	(SELECT DATEPART(HOUR, ca.CreatedAt) AS CreatedAt, 
	COUNT(DISTINCT(ContactID)) AS [PotentialVisitors],
	COUNT(DISTINCT(ContactSessionID)) AS [PotentialVisits]
	FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS C ON C.ID = CA.ContactID
	WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate
	AND C.UserFullName IS NOT NULL AND C.UserFullName <> ''''
	GROUP BY DATEPART(HOUR, ca.CreatedAt)
	) AS B ON A.CreatedAt = B.CreatedAt
	LEFT JOIN
	(SELECT DATEPART(HOUR, ca.CreatedAt) AS CreatedAt, 
	COUNT(DISTINCT(ContactID)) AS [PerspectiveVisitors],
	COUNT(DISTINCT(ContactSessionID)) AS [PerspectiveVisits]
	FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS C ON C.ID = CA.ContactID
	WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate
	AND (C.UserFullName IS NULL OR C.UserFullName = '''')
	GROUP BY DATEPART(HOUR, ca.CreatedAt)) AS C ON A.CreatedAt = C.CreatedAt	
	ORDER BY DATEPART(HOUR, A.CreatedAt)	
END')
CREATE TABLE [dbo].[tbl_AnalyticReport](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteID] [uniqueidentifier] NOT NULL,
	[AnalyticID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
	[Description] [nvarchar](1024) NULL,
	[ModuleID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_tbl_AnalyticReport] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
--INSERT [dbo].[tbl_AnalyticReport] ([ID], [SiteID], [AnalyticID], [Title], [Description], [ModuleID]) VALUES (N'7dbb7f01-d4a4-4c88-bbc7-932d3c47e73e', N'acada40f-be80-417f-a73b-dcc52de40edd', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Статистика посетителей, визитов и просмотров ', N'Статистика посетителей, визитов и просмотров ', NULL)

CREATE TABLE [dbo].[tbl_AnalyticAxis](
	[ID] [uniqueidentifier] NOT NULL,
	[AnalyticID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
	[SystemName] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_tbl_AnalyticAxis] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName]) VALUES (N'5bf65c8c-1846-44ef-a4af-266324573f29', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Перспективные визиты', N'PerspectiveVisits')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName]) VALUES (N'ec3ec097-b8dd-40c8-baa8-2d06da095825', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Перспективные просмотры', N'PerspectiveViews')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName]) VALUES (N'227097b8-af87-4835-a889-2e55d776c3e4', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Потенциальные визиты', N'PotentialVisits')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName]) VALUES (N'f6467518-9394-4db6-8c1d-5aee2310a0fc', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Потенциальные посетители', N'PotentialVisitors')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName]) VALUES (N'ef217f28-7b65-4ae9-9677-6d113186aadc', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Просмотры', N'Views')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName]) VALUES (N'c9b1832a-ecec-47db-8fe8-922ce0242bbf', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Посетители', N'Visitors')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName]) VALUES (N'0b34a8df-1b3b-402a-9bff-c38c4ae4a969', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Потенциальные просмотры', N'PotentialViews')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName]) VALUES (N'f217a91b-d2fb-44eb-aec5-c6e7c7396d77', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Дата', N'Period')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName]) VALUES (N'e394ee4b-5705-4154-9cb7-da19c38b6f56', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Перспективные посетители', N'PerspectiveVisitors')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName]) VALUES (N'efeb0b5a-1744-44b4-90a3-ecc067f14342', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Визиты', N'Visits')

CREATE TABLE [dbo].[tbl_AnalyticSeries](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteID] [uniqueidentifier] NULL,
	[AnalyticID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
	[XAxis] [uniqueidentifier] NOT NULL,
	[YAxis] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_tbl_AnalyticSeries] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

--INSERT [dbo].[tbl_AnalyticSeries] ([ID], [SiteID], [AnalyticID], [Title], [XAxis], [YAxis]) VALUES (N'51abf8e6-5f13-4e5b-a029-485252f5b0f3', N'acada40f-be80-417f-a73b-dcc52de40edd', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Просмотры', N'f217a91b-d2fb-44eb-aec5-c6e7c7396d77', N'ef217f28-7b65-4ae9-9677-6d113186aadc')
--INSERT [dbo].[tbl_AnalyticSeries] ([ID], [SiteID], [AnalyticID], [Title], [XAxis], [YAxis]) VALUES (N'18f79148-a2d2-4a1b-9707-731a663cde6d', N'acada40f-be80-417f-a73b-dcc52de40edd', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Визиты', N'f217a91b-d2fb-44eb-aec5-c6e7c7396d77', N'efeb0b5a-1744-44b4-90a3-ecc067f14342')
--INSERT [dbo].[tbl_AnalyticSeries] ([ID], [SiteID], [AnalyticID], [Title], [XAxis], [YAxis]) VALUES (N'7a4b7365-97c1-44b9-88e2-e130fffc471a', N'acada40f-be80-417f-a73b-dcc52de40edd', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Посетители', N'f217a91b-d2fb-44eb-aec5-c6e7c7396d77', N'c9b1832a-ecec-47db-8fe8-922ce0242bbf')

CREATE TABLE [dbo].[tbl_AnalyticReportToAnalyticSeries](
	[AnalyticReportID] [uniqueidentifier] NOT NULL,
	[AnalyticSeriesID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_tbl_AnalyticReportToAnalyticSeries] PRIMARY KEY CLUSTERED 
(
	[AnalyticReportID] ASC,
	[AnalyticSeriesID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

INSERT [dbo].[tbl_AnalyticReportToAnalyticSeries] ([AnalyticReportID], [AnalyticSeriesID]) VALUES (N'7dbb7f01-d4a4-4c88-bbc7-932d3c47e73e', N'51abf8e6-5f13-4e5b-a029-485252f5b0f3')
INSERT [dbo].[tbl_AnalyticReportToAnalyticSeries] ([AnalyticReportID], [AnalyticSeriesID]) VALUES (N'7dbb7f01-d4a4-4c88-bbc7-932d3c47e73e', N'18f79148-a2d2-4a1b-9707-731a663cde6d')
INSERT [dbo].[tbl_AnalyticReportToAnalyticSeries] ([AnalyticReportID], [AnalyticSeriesID]) VALUES (N'7dbb7f01-d4a4-4c88-bbc7-932d3c47e73e', N'7a4b7365-97c1-44b9-88e2-e130fffc471a')
ALTER TABLE [dbo].[tbl_Analytic] ADD  CONSTRAINT [DF_tbl_Analytic_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_AnalyticAxis] ADD  CONSTRAINT [DF_tbl_AnalyticAxis_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_AnalyticReport] ADD  CONSTRAINT [DF_tbl_AnalyticReport_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_AnalyticSeries] ADD  CONSTRAINT [DF_tbl_AnalyticSeries_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_AnalyticAxis]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AnalyticAxis_tbl_Analytic] FOREIGN KEY([AnalyticID])
REFERENCES [dbo].[tbl_Analytic] ([ID])
ALTER TABLE [dbo].[tbl_AnalyticAxis] CHECK CONSTRAINT [FK_tbl_AnalyticAxis_tbl_Analytic]
ALTER TABLE [dbo].[tbl_AnalyticReport]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AnalyticReport_tbl_Analytic] FOREIGN KEY([AnalyticID])
REFERENCES [dbo].[tbl_Analytic] ([ID])
ALTER TABLE [dbo].[tbl_AnalyticReport] CHECK CONSTRAINT [FK_tbl_AnalyticReport_tbl_Analytic]
ALTER TABLE [dbo].[tbl_AnalyticReport]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AnalyticReport_tbl_Module] FOREIGN KEY([ModuleID])
REFERENCES [dbo].[tbl_Module] ([ID])
ALTER TABLE [dbo].[tbl_AnalyticReport] CHECK CONSTRAINT [FK_tbl_AnalyticReport_tbl_Module]
ALTER TABLE [dbo].[tbl_AnalyticReport]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AnalyticReport_tbl_Sites] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_Sites] ([ID])
ALTER TABLE [dbo].[tbl_AnalyticReport] CHECK CONSTRAINT [FK_tbl_AnalyticReport_tbl_Sites]
ALTER TABLE [dbo].[tbl_AnalyticReportToAnalyticSeries]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AnalyticReportToAnalyticSeries_tbl_AnalyticReport] FOREIGN KEY([AnalyticReportID])
REFERENCES [dbo].[tbl_AnalyticReport] ([ID])
ALTER TABLE [dbo].[tbl_AnalyticReportToAnalyticSeries] CHECK CONSTRAINT [FK_tbl_AnalyticReportToAnalyticSeries_tbl_AnalyticReport]
ALTER TABLE [dbo].[tbl_AnalyticReportToAnalyticSeries]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AnalyticReportToAnalyticSeries_tbl_AnalyticSeries] FOREIGN KEY([AnalyticSeriesID])
REFERENCES [dbo].[tbl_AnalyticSeries] ([ID])
ALTER TABLE [dbo].[tbl_AnalyticReportToAnalyticSeries] CHECK CONSTRAINT [FK_tbl_AnalyticReportToAnalyticSeries_tbl_AnalyticSeries]
ALTER TABLE [dbo].[tbl_AnalyticSeries]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AnalyticSeries_tbl_Analytic] FOREIGN KEY([AnalyticID])
REFERENCES [dbo].[tbl_Analytic] ([ID])
ALTER TABLE [dbo].[tbl_AnalyticSeries] CHECK CONSTRAINT [FK_tbl_AnalyticSeries_tbl_Analytic]
ALTER TABLE [dbo].[tbl_AnalyticSeries]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AnalyticSeries_tbl_AnalyticAxis_XAxis] FOREIGN KEY([XAxis])
REFERENCES [dbo].[tbl_AnalyticAxis] ([ID])
ALTER TABLE [dbo].[tbl_AnalyticSeries] CHECK CONSTRAINT [FK_tbl_AnalyticSeries_tbl_AnalyticAxis_XAxis]
ALTER TABLE [dbo].[tbl_AnalyticSeries]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AnalyticSeries_tbl_AnalyticAxis_YAxis] FOREIGN KEY([YAxis])
REFERENCES [dbo].[tbl_AnalyticAxis] ([ID])
ALTER TABLE [dbo].[tbl_AnalyticSeries] CHECK CONSTRAINT [FK_tbl_AnalyticSeries_tbl_AnalyticAxis_YAxis]
ALTER TABLE [dbo].[tbl_AnalyticSeries]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AnalyticSeries_tbl_Sites] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_Sites] ([ID])
ALTER TABLE [dbo].[tbl_AnalyticSeries] CHECK CONSTRAINT [FK_tbl_AnalyticSeries_tbl_Sites]

commit
exec LBC_SetVersion 153
END


/*******************************************************************************
	2012-04-06
	Добавлена аналитика для сообщений
*******************************************************************************/
if ( dbo.LBC_Version() < 154 )
BEGIN
begin tran

INSERT [dbo].[tbl_Analytic] ([ID], [Title], [Query]) VALUES (N'00CEECBA-800D-11E1-9887-F00B4924019B', N'Сообщения', N'
DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''

IF @GroupByDays = 1
BEGIN		
	SELECT CAST(SA.ActionDate AS DATE) AS Period, 
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 0 THEN 1 ELSE NULL END) AS [Base],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 1 THEN 1 ELSE NULL END) AS [MassMail],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 2 THEN 1 ELSE NULL END) AS [Event],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 3 THEN 1 ELSE NULL END) AS [Workflow]
	FROM tbl_SiteAction AS SA LEFT JOIN tbl_SiteActionTemplate AS SAT ON SA.SiteActionTemplateID = SAT.ID
	WHERE SA.SiteID = @SiteID AND SA.ActionDate >= @StartDate AND SA.ActionDate <= @EndDate
	GROUP BY CAST(SA.ActionDate AS DATE)
END
ELSE
BEGIN
 	SELECT DATEPART(HOUR, SA.ActionDate) AS Period, 
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 0 THEN 1 ELSE NULL END) AS [Base],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 1 THEN 1 ELSE NULL END) AS [MassMail],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 2 THEN 1 ELSE NULL END) AS [Event],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 3 THEN 1 ELSE NULL END) AS [Workflow]
	FROM tbl_SiteAction AS SA LEFT JOIN tbl_SiteActionTemplate AS SAT ON SA.SiteActionTemplateID = SAT.ID
	WHERE SA.SiteID = @SiteID AND SA.ActionDate >= @StartDate AND SA.ActionDate <= @EndDate
	GROUP BY DATEPART(HOUR, SA.ActionDate)		
END')

--INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName]) VALUES (N'3DCCE7DE-800D-11E1-81C1-340C4924019B', N'00CEECBA-800D-11E1-9887-F00B4924019B', N'Дата', N'Period')
--INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName]) VALUES (N'43B4D2D8-800D-11E1-BF7F-380C4924019B', N'00CEECBA-800D-11E1-9887-F00B4924019B', N'Базовый шаблон', N'Base')
--INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName]) VALUES (N'4A30204A-800D-11E1-998C-390C4924019B', N'00CEECBA-800D-11E1-9887-F00B4924019B', N'Рассылка', N'MassMail')
--INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName]) VALUES (N'820AFEAE-800D-11E1-8834-C00C4924019B', N'00CEECBA-800D-11E1-9887-F00B4924019B', N'Событие', N'Event')
--INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName]) VALUES (N'886E6452-800D-11E1-B22B-C10C4924019B', N'00CEECBA-800D-11E1-9887-F00B4924019B', N'Бизнес процесс', N'Workflow')

--INSERT [dbo].[tbl_AnalyticReport] ([ID], [SiteID], [AnalyticID], [Title], [Description], [ModuleID]) VALUES (N'F6B6684C-800D-11E1-91E0-160D4924019B', N'acada40f-be80-417f-a73b-dcc52de40edd', N'00CEECBA-800D-11E1-9887-F00B4924019B', N'Статистика сообщений', N'Статистика сообщений', NULL)

--INSERT [dbo].[tbl_AnalyticSeries] ([ID], [SiteID], [AnalyticID], [Title], [XAxis], [YAxis]) VALUES (N'55D9F532-800E-11E1-93C1-7F0D4924019B', N'acada40f-be80-417f-a73b-dcc52de40edd', N'00CEECBA-800D-11E1-9887-F00B4924019B', N'Базовый шаблон', N'3DCCE7DE-800D-11E1-81C1-340C4924019B', N'43B4D2D8-800D-11E1-BF7F-380C4924019B')
--INSERT [dbo].[tbl_AnalyticSeries] ([ID], [SiteID], [AnalyticID], [Title], [XAxis], [YAxis]) VALUES (N'5C7C2838-800E-11E1-A1FD-800D4924019B', N'acada40f-be80-417f-a73b-dcc52de40edd', N'00CEECBA-800D-11E1-9887-F00B4924019B', N'Рассылка', N'3DCCE7DE-800D-11E1-81C1-340C4924019B', N'4A30204A-800D-11E1-998C-390C4924019B')
--INSERT [dbo].[tbl_AnalyticSeries] ([ID], [SiteID], [AnalyticID], [Title], [XAxis], [YAxis]) VALUES (N'629EBAE6-800E-11E1-8F3A-840D4924019B', N'acada40f-be80-417f-a73b-dcc52de40edd', N'00CEECBA-800D-11E1-9887-F00B4924019B', N'Событие', N'3DCCE7DE-800D-11E1-81C1-340C4924019B', N'820AFEAE-800D-11E1-8834-C00C4924019B')
--INSERT [dbo].[tbl_AnalyticSeries] ([ID], [SiteID], [AnalyticID], [Title], [XAxis], [YAxis]) VALUES (N'6A1BD4DE-800E-11E1-AA0C-850D4924019B', N'acada40f-be80-417f-a73b-dcc52de40edd', N'00CEECBA-800D-11E1-9887-F00B4924019B', N'Бизнес процесс', N'3DCCE7DE-800D-11E1-81C1-340C4924019B', N'886E6452-800D-11E1-B22B-C10C4924019B')

--INSERT [dbo].[tbl_AnalyticReportToAnalyticSeries] ([AnalyticReportID], [AnalyticSeriesID]) VALUES (N'F6B6684C-800D-11E1-91E0-160D4924019B', N'55D9F532-800E-11E1-93C1-7F0D4924019B')
--INSERT [dbo].[tbl_AnalyticReportToAnalyticSeries] ([AnalyticReportID], [AnalyticSeriesID]) VALUES (N'F6B6684C-800D-11E1-91E0-160D4924019B', N'5C7C2838-800E-11E1-A1FD-800D4924019B')
--INSERT [dbo].[tbl_AnalyticReportToAnalyticSeries] ([AnalyticReportID], [AnalyticSeriesID]) VALUES (N'F6B6684C-800D-11E1-91E0-160D4924019B', N'629EBAE6-800E-11E1-8F3A-840D4924019B')
--INSERT [dbo].[tbl_AnalyticReportToAnalyticSeries] ([AnalyticReportID], [AnalyticSeriesID]) VALUES (N'F6B6684C-800D-11E1-91E0-160D4924019B', N'6A1BD4DE-800E-11E1-AA0C-850D4924019B')

commit
exec LBC_SetVersion 154
END

/*******************************************************************************
	2012-04-08
	Добавлено поле WorkflowXml для шаблонов процессов
*******************************************************************************/
if ( dbo.LBC_Version() < 155 )
BEGIN
begin tran

ALTER TABLE [dbo].[tbl_WorkflowTemplate] ADD [WorkflowXml] ntext NULL

commit
exec LBC_SetVersion 155
END


/*******************************************************************************
	2012-04-09
	Добавлен реквизит для POP3
*******************************************************************************/
if ( dbo.LBC_Version() < 156 )
BEGIN
begin tran

ALTER TABLE [dbo].[tbl_SourceMonitoring] ADD [StartDate] DATETIME NULL

commit
exec LBC_SetVersion 156
END

/*******************************************************************************
	2012-04-09
	Добавлен системный тип шаблонов
*******************************************************************************/
if ( dbo.LBC_Version() < 157 )
BEGIN
begin tran

UPDATE tbl_SiteActionTemplate SET SiteActionTemplateCategoryID = 4
WHERE SystemName IS NOT NULL

UPDATE [tbl_Analytic] SET [Query] = N'
DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''

IF @GroupByDays = 1
BEGIN		
	SELECT CAST(SA.ActionDate AS DATE) AS Period, 
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 0 THEN 1 ELSE NULL END) AS [Base],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 1 THEN 1 ELSE NULL END) AS [MassMail],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 2 THEN 1 ELSE NULL END) AS [Event],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 3 THEN 1 ELSE NULL END) AS [Workflow],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 4 THEN 1 ELSE NULL END) AS [System]
	FROM tbl_SiteAction AS SA LEFT JOIN tbl_SiteActionTemplate AS SAT ON SA.SiteActionTemplateID = SAT.ID
	WHERE SA.SiteID = @SiteID AND SA.ActionDate >= @StartDate AND SA.ActionDate <= @EndDate
	GROUP BY CAST(SA.ActionDate AS DATE)
END
ELSE
BEGIN
 	SELECT DATEPART(HOUR, SA.ActionDate) AS Period, 
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 0 THEN 1 ELSE NULL END) AS [Base],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 1 THEN 1 ELSE NULL END) AS [MassMail],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 2 THEN 1 ELSE NULL END) AS [Event],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 3 THEN 1 ELSE NULL END) AS [Workflow],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 4 THEN 1 ELSE NULL END) AS [System]
	FROM tbl_SiteAction AS SA LEFT JOIN tbl_SiteActionTemplate AS SAT ON SA.SiteActionTemplateID = SAT.ID
	WHERE SA.SiteID = @SiteID AND SA.ActionDate >= @StartDate AND SA.ActionDate <= @EndDate
	GROUP BY DATEPART(HOUR, SA.ActionDate)		
END' WHERE ID = '00CEECBA-800D-11E1-9887-F00B4924019B'

INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName]) VALUES (N'DF6E5CD0-8233-11E1-B56E-EA9C4824019B', N'00CEECBA-800D-11E1-9887-F00B4924019B', N'Системные', N'System')

commit
exec LBC_SetVersion 157
END


/*******************************************************************************
	2012-04-10
	Добавлена процедура для выбора требования
*******************************************************************************/
if ( dbo.LBC_Version() < 158 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[API_GetRequirements]
	(
	    @SiteID uniqueidentifier,
	    @ParamsXml xml
	)
AS
BEGIN
	
	DECLARE @Responsible nvarchar(255) = NULL
	SET @Responsible = @ParamsXml.value(''(/LeadForceRequest/Requirement/Params/Responsible/@value)[1]'',''nvarchar(255)'')
	
	DECLARE @RequirementType nvarchar(256) = NULL
	SET @RequirementType = @ParamsXml.value(''(/LeadForceRequest/Requirement/Params/RequirementType/@value)[1]'',''nvarchar(256)'')
	
	DECLARE @RequirementStatus nvarchar(256) = NULL
	SET @RequirementStatus = @ParamsXml.value(''(/LeadForceRequest/Requirement/Params/Status/@value)[1]'',''nvarchar(256)'')
	
	DECLARE @Company nvarchar(255) = NULL
	SET @Company = @ParamsXml.value(''(/LeadForceRequest/Requirement/Params/Company/@value)[1]'',''nvarchar(255)'')
	
	SELECT RQMNT.ID as ''@RequirementID'',
	       RQMNT.CreatedAt AS ''@CreatedAt'',
	       RQMNT.Number AS ''@Number'',
	       RQMNT.ParentID AS ''@ParentID'',
	       RQMNTSTS.Title AS ''Status'',
	       RCNCT.UserFullName AS ''Responsible'',
	       RQMNT.RealizationDatePlanned AS ''RealizationDatePlanned'',
	       RQMNT.RealizationDateActual AS ''RealizationDateActual'',
	       RQMNT.ShortDescription AS ''ShortDescription'',
	       RST.Title AS ''Source/RequestType'',
	       RQST.Number AS ''Source/Request'',
	       CMPNY.Name AS ''Source/Company'',
	       CNCT.UserFullName AS ''Source/Contact'',
	       PRCT.Title AS ''Source/Product'',
	       RQMNT.ProductSeriesNumber AS ''Source/ProductSeriesNumber'',
	       RQMNTTYPE.Title AS ''Classification/RequirementType'',
	       SL.Title AS ''Classification/ServiceLevel'',
	       RSOE.Title AS ''Classification/SeverityOfExposure'',
	       RQMNTPRTY.Title AS ''Classification/Priority'',
	       RQMNTCXTY.Title AS ''Classification/Complexity'',
	       PC.Title AS ''Classification/Category'',
	       CNTRCT.Number AS ''Relationship/Contract'',
	       ORDR.Number AS ''Relationship/Order'',
	       INV.Number AS ''Relationship/Invoice'',
	       RQMNTIMPLCMPLTE.Title  AS ''ClientReview/ImplementationComplete'',
	       RQMNTSPEED.Title  AS ''ClientReview/SpeedTime'',
	       RQMNTSAT.Title  AS ''ClientReview/Satisfaction'',
	       RQMNT.EstimationComment AS ''ClientReview/Comment'',
	       EPRCT.Title AS ''EstimateForClient/Product'',
	       RQMNT.AnyProductName AS ''EstimateForClient/AnyProductName'',
	       RQMNT.Quantity AS ''EstimateForClient/Quantity'',
	       UNIT.Title AS ''EstimateForClient/Unit'',
	       CURR.Name AS ''EstimateForClient/Currency'',
	       RQMNT.Rate AS ''EstimateForClient/Rate'',
	       RQMNT.CurrencyPrice AS ''EstimateForClient/CurrencyPrice'',
	       RQMNT.CurrencyAmount AS ''EstimateForClient/CurrencyAmount'',
	       RQMNT.Price AS ''EstimateForClient/Price'',
	       RQMNT.Amount AS ''EstimateForClient/Amount'',
	       RQMNT.EstimateCommentForClient AS ''EstimateForClient/Comment'',
	       RQMNT.InternalQuantity AS ''InternalEstimate/Quantity'',
	       IUNIT.Title AS ''InternalEstimate/Unit'',
	       RQMNT.EstimateCommentInternal AS ''InternalEstimate/Comment'',
	       (
				SELECT RC.ID AS ''@CommentID'',
					   RC.UserID AS ''@UserID'',
					   RC.CreatedAt AS ''@CreatedAt'',
					   RC.IsOfficialAnswer AS ''@IsOfficialAnswer'',
					   RC.DestinationUserID AS ''@DestinationUserID'',
					   RC.ReplyToID AS ''@ReplyToID'',					   
					   RC.Comment AS ''Text''
				FROM tbl_RequirementComment AS RC
				WHERE ContentID = RQMNT.ID
				ORDER BY RC.CreatedAt
				FOR XML PATH(''Comment''), TYPE, ELEMENTS, ROOT(''Comments'')
	       ),
	       (
				SELECT R.ID AS ''@RequestID'',					   
					   R.CreatedAt AS ''@CreatedAt'',					   
					   R.Number AS ''@Number''
				FROM tbl_RequestToRequirement AS RTR LEFT JOIN tbl_Request AS R ON RTR.RequestID = R.ID
				WHERE RTR.RequirementID = RQMNT.ID
				FOR XML PATH(''Request''), TYPE, ELEMENTS, ROOT(''RelatedRequests'')
	       )	       
	FROM tbl_Requirement as RQMNT LEFT JOIN tbl_Request AS RQST ON RQMNT.RequestID = RQST.ID
		 LEFT JOIN tbl_Company AS CMPNY ON RQMNT.CompanyID = CMPNY.ID
		 LEFT JOIN tbl_Contact AS CNCT ON RQMNT.ContactID = CNCT.ID
		 LEFT JOIN tbl_Product AS PRCT ON RQMNT.ProductID = PRCT.ID
		 LEFT JOIN tbl_RequirementType AS RQMNTTYPE ON RQMNT.RequirementTypeID = RQMNTTYPE.ID 
		 LEFT JOIN tbl_ServiceLevel AS SL ON RQMNT.ServiceLevelID = SL.ID
	     LEFT JOIN tbl_RequirementSeverityOfExposure AS RSOE ON RQMNT.RequirementSeverityOfExposureID = RSOE.ID
	     LEFT JOIN tbl_RequirementPriority AS RQMNTPRTY ON RQMNT.RequirementPriorityID = RQMNTPRTY.ID
	     LEFT JOIN tbl_RequirementComplexity AS RQMNTCXTY ON RQMNT.RequirementComplexityID = RQMNTCXTY.ID
	     LEFT JOIN tbl_PublicationCategory AS PC ON RQMNT.PublicationCategoryID = PC.ID
	     LEFT JOIN tbl_RequirementStatus AS RQMNTSTS ON RQMNT.RequirementStatusID = RQMNTSTS.ID
	     LEFT JOIN tbl_Contact AS RCNCT ON RQMNT.ResponsibleID = RCNCT.ID
	     LEFT JOIN tbl_Contract AS CNTRCT ON RQMNT.ContractID = CNTRCT.ID
	     LEFT JOIN tbl_Order AS ORDR ON RQMNT.OrderID = ORDR.ID
	     LEFT JOIN tbl_Invoice AS INV ON RQMNT.InvoiceID = INV.ID
	     LEFT JOIN tbl_Product AS EPRCT ON RQMNT.EvaluationRequirementsProductID = EPRCT.ID
	     LEFT JOIN tbl_Unit AS UNIT ON RQMNT.UnitID = UNIT.ID
	     LEFT JOIN tbl_Currency AS CURR ON RQMNT.CurrencyID = CURR.ID
	     LEFT JOIN tbl_RequirementImplementationComplete AS RQMNTIMPLCMPLTE ON RQMNT.RequirementImplementationCompleteID = RQMNTIMPLCMPLTE.ID
	     LEFT JOIN tbl_RequirementSpeedTime AS RQMNTSPEED ON RQMNT.RequirementSpeedTimeID = RQMNTSPEED.ID
	     LEFT JOIN tbl_RequirementSatisfaction AS RQMNTSAT ON RQMNT.RequirementSatisfactionID = RQMNTSAT.ID
	     LEFT JOIN tbl_RequestSourceType AS RST ON RQMNT.RequestSourceTypeID = RST.ID
	     LEFT JOIN tbl_Unit AS IUNIT ON RQMNT.InternalUnitID = IUNIT.ID
	WHERE RQMNT.SiteID = @SiteID
	      AND (@Responsible IS NULL OR RCNCT.UserFullName LIKE N''%'' + @Responsible + ''%'')
	      AND (@RequirementType IS NULL OR RQMNTTYPE.Title LIKE N''%'' + @RequirementType + ''%'')
	      AND (@RequirementStatus IS NULL OR RQMNTSTS.Title LIKE N''%'' + @RequirementStatus + ''%'')
	      AND (@Company IS NULL OR CMPNY.Name LIKE N''%'' + @Company + ''%'')	      
	FOR XML PATH(''Requirement''), TYPE, ELEMENTS, ROOT(''Requirements'')
END
' 

commit
exec LBC_SetVersion 158
END

/*******************************************************************************
	2012-04-10
	Обновление API
*******************************************************************************/
if ( dbo.LBC_Version() < 159 )
BEGIN
begin tran

ALTER TABLE tbl_Requirement ALTER COLUMN EstimationComment nvarchar(2048) NULL

EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[API_UpdateRequirement]
	(
		@SiteID uniqueidentifier,    
	    @ParamsXml xml
	)
AS
BEGIN
	DECLARE @IsNew int = 0

	DECLARE @RequirementID uniqueidentifier = NULL
	SET @RequirementID = @ParamsXml.value(''(/LeadForceRequest/Requirement/@RequirementID)[1]'',''uniqueidentifier'')
	
	IF @RequirementID IS NULL
	    RETURN 0
	    
	DECLARE @ParentID uniqueidentifier = NULL
	SET @ParentID = @ParamsXml.value(''(/LeadForceRequest/Requirement/@ParentID)[1]'',''uniqueidentifier'')
	
	DECLARE @Status nvarchar(256) = NULL
	SET @Status = @ParamsXml.value(''(/LeadForceRequest/Requirement/Status)[1]'',''nvarchar(256)'')
	DECLARE @RequirementStatusID uniqueidentifier = NULL	
	IF @Status IS NOT NULL AND @Status <> ''''
	    SELECT TOP 1 @RequirementStatusID = ID FROM tbl_RequirementStatus WHERE Title = @Status AND SiteID = @SiteID
	
	DECLARE @Responsible nvarchar(255) = NULL
	SET @Responsible = @ParamsXml.value(''(/LeadForceRequest/Requirement/Responsible)[1]'',''nvarchar(255)'')
	DECLARE @ResponsibleID uniqueidentifier = NULL	
	IF @Responsible IS NOT NULL AND @Responsible <> ''''
	    SELECT TOP 1 @ResponsibleID = ID FROM tbl_Contact WHERE UserFullName = @Responsible AND SiteID = @SiteID
	    
	DECLARE @RealizationDatePlanned datetime = NULL
	SET @RealizationDatePlanned = @ParamsXml.value(''(/LeadForceRequest/Requirement/RealizationDatePlanned)[1]'',''datetime'')
	
	DECLARE @RealizationDateActual datetime = NULL
	SET @RealizationDateActual = @ParamsXml.value(''(/LeadForceRequest/Requirement/RealizationDateActual)[1]'',''datetime'')
	
	DECLARE @ShortDescription nvarchar(2048) = NULL
	SET @ShortDescription = @ParamsXml.value(''(/LeadForceRequest/Requirement/ShortDescription)[1]'',''nvarchar(2048)'')
	
    DECLARE @RequestSourceType nvarchar(256) = NULL
	SET @RequestSourceType = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/RequestType)[1]'',''nvarchar(256)'')
	DECLARE @RequestSourceTypeID uniqueidentifier = NULL	
	IF @RequestSourceType IS NOT NULL AND @RequestSourceType <> ''''
	    SELECT TOP 1 @RequestSourceTypeID = ID FROM tbl_RequestSourceType WHERE Title = @RequestSourceType AND SiteID = @SiteID
	    
	DECLARE @Request nvarchar(256) = NULL
	SET @Request = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/Request)[1]'',''nvarchar(256)'')
	DECLARE @RequestID uniqueidentifier = NULL	
	IF @Request IS NOT NULL AND @Request <> ''''
	    SELECT TOP 1 @RequestID = ID FROM tbl_Request WHERE Number = @Request AND SiteID = @SiteID
	    
	DECLARE @Company nvarchar(255) = NULL
	SET @Company = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/Company)[1]'',''nvarchar(255)'')
	DECLARE @CompanyID uniqueidentifier = NULL	
	IF @Company IS NOT NULL AND @Company <> ''''
	    SELECT TOP 1 @CompanyID = ID FROM tbl_Company WHERE Name = @Company AND SiteID = @SiteID

	DECLARE @Contact nvarchar(255) = NULL
	SET @Contact = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/Contact)[1]'',''nvarchar(255)'')
	DECLARE @ContactID uniqueidentifier = NULL	
	IF @Contact IS NOT NULL AND @Contact <> ''''
	    SELECT TOP 1 @ContactID = ID FROM tbl_Contact WHERE UserFullName = @Contact AND SiteID = @SiteID
	    
	DECLARE @Product nvarchar(250) = NULL
	SET @Product = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/Product)[1]'',''nvarchar(255)'')
	DECLARE @ProductID uniqueidentifier = NULL	
	IF @Product IS NOT NULL AND @Product <> ''''
	    SELECT TOP 1 @ProductID = ID FROM tbl_Product WHERE Title = @Product AND SiteID = @SiteID
	    
	DECLARE @ProductSeriesNumber nvarchar(256) = NULL
	SET @ProductSeriesNumber = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/ProductSeriesNumber)[1]'',''nvarchar(256)'')
	
	DECLARE @RequirementType nvarchar(256) = NULL
	SET @RequirementType = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/RequirementType)[1]'',''nvarchar(256)'')
	DECLARE @RequirementTypeID uniqueidentifier = NULL	
	IF @RequirementType IS NOT NULL AND @RequirementType <> ''''
	    SELECT TOP 1 @RequirementTypeID = ID FROM tbl_RequirementType WHERE Title = @RequirementType AND SiteID = @SiteID
	    
	DECLARE @ServiceLevel nvarchar(256) = NULL
	SET @ServiceLevel = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/ServiceLevel)[1]'',''nvarchar(256)'')
	DECLARE @ServiceLevelID uniqueidentifier = NULL	
	IF @ServiceLevel IS NOT NULL AND @ServiceLevel <> ''''
	    SELECT TOP 1 @ServiceLevelID = ID FROM tbl_ServiceLevel WHERE Title = @ServiceLevel AND SiteID = @SiteID
	    
	DECLARE @SeverityOfExposure nvarchar(256) = NULL
	SET @SeverityOfExposure = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/SeverityOfExposure)[1]'',''nvarchar(256)'')
	DECLARE @RequirementSeverityOfExposureID uniqueidentifier = NULL	
	IF @SeverityOfExposure IS NOT NULL AND @SeverityOfExposure <> ''''
	    SELECT TOP 1 @RequirementSeverityOfExposureID = ID FROM tbl_RequirementSeverityOfExposure WHERE Title = @SeverityOfExposure AND SiteID = @SiteID
	    
	DECLARE @Priority nvarchar(256) = NULL
	SET @Priority = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/Priority)[1]'',''nvarchar(256)'')
	DECLARE @RequirementPriorityID uniqueidentifier = NULL	
	IF @Priority IS NOT NULL AND @Priority <> ''''
	    SELECT TOP 1 @RequirementPriorityID = ID FROM tbl_RequirementPriority WHERE Title = @Priority AND SiteID = @SiteID	    
	    	    
	DECLARE @Complexity nvarchar(256) = NULL
	SET @Complexity = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/Complexity)[1]'',''nvarchar(256)'')
	DECLARE @RequirementComplexityID uniqueidentifier = NULL	
	IF @Complexity IS NOT NULL AND @Complexity <> ''''
	    SELECT TOP 1 @RequirementComplexityID = ID FROM tbl_RequirementComplexity WHERE Title = @Complexity AND SiteID = @SiteID
	
	DECLARE @Category nvarchar(250) = NULL
	SET @Category = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/Category)[1]'',''nvarchar(250)'')
	DECLARE @PublicationCategoryID uniqueidentifier = NULL	
	IF @Category IS NOT NULL AND @Category <> ''''
	    SELECT TOP 1 @PublicationCategoryID = ID FROM tbl_PublicationCategory WHERE Title = @Category AND SiteID = @SiteID	    
	
	DECLARE @Contract nvarchar(256) = NULL
	SET @Contract = @ParamsXml.value(''(/LeadForceRequest/Requirement/Relationship/Contract)[1]'',''nvarchar(256)'')
	DECLARE @ContractID uniqueidentifier = NULL	
	IF @Contract IS NOT NULL AND @Contract <> ''''
	    SELECT TOP 1 @ContractID = ID FROM tbl_Contract WHERE Number = @Contract AND SiteID = @SiteID	    
	    
	DECLARE @Order nvarchar(256) = NULL
	SET @Order = @ParamsXml.value(''(/LeadForceRequest/Requirement/Relationship/Order)[1]'',''nvarchar(256)'')
	DECLARE @OrderID uniqueidentifier = NULL	
	IF @Order IS NOT NULL AND @Order <> ''''
	    SELECT TOP 1 @OrderID = ID FROM tbl_Order WHERE Number = @Order AND SiteID = @SiteID
			    
	DECLARE @Invoice nvarchar(256) = NULL
	SET @Invoice = @ParamsXml.value(''(/LeadForceRequest/Requirement/Relationship/Invoice)[1]'',''nvarchar(256)'')
	DECLARE @InvoiceID uniqueidentifier = NULL	
	IF @Invoice IS NOT NULL AND @Invoice <> ''''
	    SELECT TOP 1 @InvoiceID = ID FROM tbl_Invoice WHERE Number = @Invoice AND SiteID = @SiteID
	    
	DECLARE @ImplementationComplete nvarchar(256) = NULL
	SET @ImplementationComplete = @ParamsXml.value(''(/LeadForceRequest/Requirement/ClientReview/ImplementationComplete)[1]'',''nvarchar(256)'')
	DECLARE @RequirementImplementationCompleteID uniqueidentifier = NULL	
	IF @ImplementationComplete IS NOT NULL AND @ImplementationComplete <> ''''
	    SELECT TOP 1 @RequirementImplementationCompleteID = ID FROM tbl_RequirementImplementationComplete WHERE Title = @ImplementationComplete AND SiteID = @SiteID
	
	DECLARE @SpeedTime nvarchar(256) = NULL
	SET @SpeedTime = @ParamsXml.value(''(/LeadForceRequest/Requirement/ClientReview/SpeedTime)[1]'',''nvarchar(256)'')
	DECLARE @RequirementSpeedTimeID uniqueidentifier = NULL	
	IF @SpeedTime IS NOT NULL AND @SpeedTime <> ''''
	    SELECT TOP 1 @RequirementSpeedTimeID = ID FROM tbl_RequirementSpeedTime WHERE Title = @SpeedTime AND SiteID = @SiteID
	    		
	DECLARE @Satisfaction nvarchar(256) = NULL
	SET @Satisfaction = @ParamsXml.value(''(/LeadForceRequest/Requirement/ClientReview/Satisfaction)[1]'',''nvarchar(256)'')
	DECLARE @RequirementSatisfactionID uniqueidentifier = NULL	
	IF @Satisfaction IS NOT NULL AND @Satisfaction <> ''''
	    SELECT TOP 1 @RequirementSatisfactionID = ID FROM tbl_RequirementSatisfaction WHERE Title = @Satisfaction AND SiteID = @SiteID
 
 	DECLARE @EstimationComment nvarchar(2048) = NULL
	SET @EstimationComment = @ParamsXml.value(''(/LeadForceRequest/Requirement/ClientReview/Comment)[1]'',''nvarchar(2048)'')
	
	DECLARE @EvaluationRequirementsProduct nvarchar(250) = NULL
	SET @EvaluationRequirementsProduct = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Product)[1]'',''nvarchar(255)'')
	DECLARE @EvaluationRequirementsProductID uniqueidentifier = NULL	
	IF @EvaluationRequirementsProduct IS NOT NULL AND @EvaluationRequirementsProduct <> ''''
	    SELECT TOP 1 @EvaluationRequirementsProductID = ID FROM tbl_Product WHERE Title = @EvaluationRequirementsProduct AND SiteID = @SiteID
 
	DECLARE @AnyProductName nvarchar(255) = NULL
	SET @AnyProductName = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/AnyProductName)[1]'',''nvarchar(255)'')
	
	DECLARE @Quantity decimal(18,4) = 0
	SET @Quantity = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Quantity)[1]'',''decimal(18,4)'')
 
 	DECLARE @Unit nvarchar(50) = NULL
	SET @Unit = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Unit)[1]'',''nvarchar(50)'')
	DECLARE @UnitID uniqueidentifier = NULL	
	IF @Unit IS NOT NULL AND @Unit <> ''''
	    SELECT TOP 1 @UnitID = ID FROM tbl_Unit WHERE Title = @Unit AND SiteID = @SiteID
	    
	DECLARE @Currency nvarchar(255) = NULL
	SET @Currency = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Currency)[1]'',''nvarchar(255)'')
	DECLARE @CurrencyID uniqueidentifier = NULL	
	IF @Currency IS NOT NULL AND @Currency <> ''''
	    SELECT TOP 1 @CurrencyID = ID FROM tbl_Currency WHERE Name = @Currency AND SiteID = @SiteID
	    
	DECLARE @Rate money = 1
	SET @Rate = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Quantity)[1]'',''money'')
	
	SET @Rate = (CASE WHEN @Rate = 0 THEN 1 ELSE @Rate END)
	
	DECLARE @CurrencyPrice money = 0
	SET @CurrencyPrice = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/CurrencyPrice)[1]'',''money'')
		
	DECLARE @CurrencyAmount money = 0
	SET @CurrencyAmount = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/CurrencyAmount)[1]'',''money'')
	
	DECLARE @Price money = 0
	SET @Price = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Price)[1]'',''money'')	
	
	DECLARE @Amount money = 0
	SET @Amount = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Amount)[1]'',''money'')
	
	DECLARE @EstimateCommentForClient nvarchar(2048) = 0
	SET @EstimateCommentForClient = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Comment)[1]'',''nvarchar(2048)'')
	    
	DECLARE @InternalQuantity decimal(18,4) = 0
	SET @InternalQuantity = @ParamsXml.value(''(/LeadForceRequest/Requirement/InternalEstimate/Quantity)[1]'',''decimal(18,4)'')
 
 	DECLARE @InternalUnit nvarchar(50) = NULL
	SET @InternalUnit = @ParamsXml.value(''(/LeadForceRequest/Requirement/InternalEstimate/Unit)[1]'',''nvarchar(50)'')
	DECLARE @InternalUnitID uniqueidentifier = NULL	
	IF @InternalUnit IS NOT NULL AND @InternalUnit <> ''''
	    SELECT TOP 1 @InternalUnitID = ID FROM tbl_Unit WHERE Title = @InternalUnit AND SiteID = @SiteID    
	    
	DECLARE @EstimateCommentInternal nvarchar(2048) = 0
	SET @EstimateCommentInternal = @ParamsXml.value(''(/LeadForceRequest/Requirement/InternalEstimate/Comment)[1]'',''nvarchar(2048)'')	    
	    	    
	IF (SELECT COUNT(*) FROM tbl_Requirement WHERE ID = @RequirementID AND SiteID = @SiteID) = 0
    BEGIN	    
	    INSERT [dbo].[tbl_Requirement] (
			[ID], 
			[SiteID], 
			[Number], 
			[SerialNumber], 
			[CreatedAt], 
			[ShortDescription], 
			[RequestID], 
			[CompanyID], 
			[ContactID], 
			[ProductID], 
			[ProductSeriesNumber], 
			[RequirementTypeID], 
			[ServiceLevelID], 
			[RequirementSeverityOfExposureID], 
			[ParentID], 
			[RequirementPriorityID], 
			[RequirementComplexityID], 
			[PublicationCategoryID], 
			[RequirementStatusID], 
			[ResponsibleID], 
			[RealizationDatePlanned], 
			[RealizationDateActual], 
			[ContractID], 
			[OrderID], 
			[InvoiceID], 
			[EvaluationRequirementsProductID], 
			[AnyProductName], 
			[Quantity], 
			[UnitID], 
			[CurrencyID], 
			[Rate], 
			[CurrencyPrice], 
			[CurrencyAmount], 
			[Price], 
			[Amount], 
			[RequirementImplementationCompleteID], 
			[RequirementSpeedTimeID], 
			[RequirementSatisfactionID], 
			[EstimationComment], 	    
			[RequestSourceTypeID], 
			[InternalQuantity], 
			[InternalUnitID], 
			[EstimateCommentInternal], 
			[EstimateCommentForClient]) 
	    VALUES (
			@RequirementID, 
			@SiteID, 
			'''', 
			0, 
			GETDATE(), 
			@ShortDescription, 
			@RequestID, 
			@CompanyID, 
			@ContactID, 
			@ProductID, 
			@ProductSeriesNumber, 
			@RequirementTypeID, 
			@ServiceLevelID,
			@RequirementSeverityOfExposureID, 
			@ParentID,
			@RequirementPriorityID,
			@RequirementComplexityID, 
			@PublicationCategoryID, 
			@RequirementStatusID, 
			@ResponsibleID, 
			@RealizationDatePlanned, 
			@RealizationDateActual, 
			@ContractID, 
			@OrderID, 
			@InvoiceID, 
			@EvaluationRequirementsProductID, 
			@AnyProductName, 
			@Quantity, 
			@UnitID, 
			@CurrencyID, 
			@Rate, 
			@CurrencyPrice, 
			@CurrencyAmount, 
			@Price, 
			@Amount, 
			@RequirementImplementationCompleteID, 
			@RequirementSpeedTimeID, 
			@RequirementSatisfactionID, 
			@EstimationComment, 	    
			@RequestSourceTypeID, 
			@InternalQuantity, 
			@InternalUnitID, 
			@EstimateCommentInternal,
			@EstimateCommentForClient
	    )
	    
	    SET @IsNew = 1
	END
	ELSE
	BEGIN
		UPDATE tbl_Requirement
		SET [ShortDescription] = @ShortDescription, 
			[RequestID] = @RequestID, 
			[CompanyID] = @CompanyID, 
			[ContactID] = @ContactID, 
			[ProductID] = @ProductID, 
			[ProductSeriesNumber] = @ProductSeriesNumber, 
			[RequirementTypeID] = @RequirementTypeID, 
			[ServiceLevelID] = @ServiceLevelID, 
			[RequirementSeverityOfExposureID] = @RequirementSeverityOfExposureID, 
			[ParentID] = @ParentID, 
			[RequirementPriorityID] = @RequirementPriorityID, 
			[RequirementComplexityID] = @RequirementComplexityID, 
			[PublicationCategoryID] = @PublicationCategoryID, 
			[RequirementStatusID] = @RequirementStatusID, 
			[ResponsibleID] = @ResponsibleID, 
			[RealizationDatePlanned] = @RealizationDatePlanned, 
			[RealizationDateActual] = @RealizationDateActual, 
			[ContractID] = @ContractID, 
			[OrderID] = @OrderID, 
			[InvoiceID] = @InvoiceID, 
			[EvaluationRequirementsProductID] = @EvaluationRequirementsProductID, 
			[AnyProductName] = @AnyProductName, 
			[Quantity] = @Quantity, 
			[UnitID] = @UnitID, 
			[CurrencyID] = @CurrencyID, 
			[Rate] = @Rate, 
			[CurrencyPrice] = @CurrencyPrice, 
			[CurrencyAmount] = @CurrencyAmount, 
			[Price] = @Price, 
			[Amount] = @Amount, 
			[RequirementImplementationCompleteID] = @RequirementImplementationCompleteID, 
			[RequirementSpeedTimeID] = @RequirementSpeedTimeID, 
			[RequirementSatisfactionID] = @RequirementSatisfactionID, 
			[EstimationComment] = @EstimationComment,
			[RequestSourceTypeID] = @RequestSourceTypeID, 
			[InternalQuantity] = @InternalQuantity, 
			[InternalUnitID] = @InternalUnitID, 
			[EstimateCommentInternal] = @EstimateCommentInternal, 
			[EstimateCommentForClient] = @EstimateCommentForClient
		WHERE ID = @RequirementID AND SiteID = @SiteID
	END
	
	DECLARE @CommentID uniqueidentifier
	DECLARE @UserID uniqueidentifier
	DECLARE @Comment nvarchar(max)
	DECLARE @IsOfficialAnswer bit
	DECLARE @DestinationUserID uniqueidentifier
	DECLARE @ReplyToID uniqueidentifier
	
	DECLARE @Comments_Cursor xml
	DECLARE Comments_Cursor CURSOR FOR
	SELECT T.c.query(''.'') AS result
	FROM   @ParamsXml.nodes(''/LeadForceRequest/Requirement/Comments/Comment'') T(c)
	OPEN Comments_Cursor
	FETCH NEXT FROM Comments_Cursor INTO @Comments_Cursor
	WHILE @@FETCH_STATUS = 0
	BEGIN	
		SET @CommentID =null
		SET @UserID = null		
		SET @IsOfficialAnswer = 0
		SET @DestinationUserID = null
		SET @ReplyToID = null
		SET @Comment = null			
				
		SET @CommentID = @Comments_Cursor.value(''(/Comment/@CommentID)[1]'',''uniqueidentifier'')
		SET @UserID = @Comments_Cursor.value(''(/Comment/@UserID)[1]'',''uniqueidentifier'')
		SET @IsOfficialAnswer = @Comments_Cursor.value(''(/Comment/@IsOfficialAnswer)[1]'',''bit'')
		SET @DestinationUserID = @Comments_Cursor.value(''(/Comment/@DestinationUserID)[1]'',''uniqueidentifier'')
		SET @ReplyToID = @Comments_Cursor.value(''(/Comment/@ReplyToID)[1]'',''uniqueidentifier'')
		SET @Comment = @Comments_Cursor.value(''(/Comment/Text)[1]'',''nvarchar(max)'')
		
		IF @CommentID IS NOT NULL AND (SELECT COUNT(*) FROM tbl_RequirementComment WHERE ID = @CommentID AND ContentID = @RequirementID) = 0
		BEGIN
			INSERT INTO tbl_RequirementComment ([ID], [SiteID], [CreatedAt], [ContentID], [UserID], [Comment], [IsOfficialAnswer], [DestinationUserID], [ReplyToID])
			VALUES (@CommentID, @SiteID, GETDATE(), @RequirementID, @UserID, @Comment, @IsOfficialAnswer, @DestinationUserID, @ReplyToID)
		END
		ELSE
		BEGIN
			UPDATE tbl_RequirementComment
			SET [Comment] = @Comment, [IsOfficialAnswer] = @IsOfficialAnswer
			WHERE ContentID = @RequirementID
		END
		
		FETCH NEXT FROM Comments_Cursor INTO @Comments_Cursor
	END
	CLOSE Comments_Cursor
	DEALLOCATE Comments_Cursor
	
	SELECT (CASE WHEN @IsNew = 1 THEN @RequirementID ELSE NULL END)
END' 

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[API_GetRequirements]
	(
	    @SiteID uniqueidentifier,
	    @ParamsXml xml
	)
AS
BEGIN
	
	DECLARE @ResponsibleID uniqueidentifier = NULL
	SET @ResponsibleID = @ParamsXml.value(''(/LeadForceRequest/Requirement/Params/ResponsibleID/@value)[1]'',''uniqueidentifier'')
	
	DECLARE @CompanyID uniqueidentifier = NULL
	SET @CompanyID = @ParamsXml.value(''(/LeadForceRequest/Requirement/Params/CompanyID/@value)[1]'',''uniqueidentifier'')
	
	DECLARE @RequirementType nvarchar(256) = NULL
	SET @RequirementType = @ParamsXml.value(''(/LeadForceRequest/Requirement/Params/RequirementType/@value)[1]'',''nvarchar(256)'')
	
	DECLARE @RequirementStatus nvarchar(256) = NULL
	SET @RequirementStatus = @ParamsXml.value(''(/LeadForceRequest/Requirement/Params/Status/@value)[1]'',''nvarchar(256)'')		
	
	SELECT RQMNT.ID as ''@RequirementID'',
	       RQMNT.CreatedAt AS ''@CreatedAt'',
	       RQMNT.Number AS ''@Number'',
	       RQMNT.ParentID AS ''@ParentID'',
	       RQMNTSTS.Title AS ''Status'',
	       RCNCT.UserFullName AS ''Responsible'',
	       RQMNT.RealizationDatePlanned AS ''RealizationDatePlanned'',
	       RQMNT.RealizationDateActual AS ''RealizationDateActual'',
	       RQMNT.ShortDescription AS ''ShortDescription'',
	       RST.Title AS ''Source/RequestType'',
	       RQST.Number AS ''Source/Request'',
	       CMPNY.Name AS ''Source/Company'',
	       CNCT.UserFullName AS ''Source/Contact'',
	       PRCT.Title AS ''Source/Product'',
	       RQMNT.ProductSeriesNumber AS ''Source/ProductSeriesNumber'',
	       RQMNTTYPE.Title AS ''Classification/RequirementType'',
	       SL.Title AS ''Classification/ServiceLevel'',
	       RSOE.Title AS ''Classification/SeverityOfExposure'',
	       RQMNTPRTY.Title AS ''Classification/Priority'',
	       RQMNTCXTY.Title AS ''Classification/Complexity'',
	       PC.Title AS ''Classification/Category'',
	       CNTRCT.Number AS ''Relationship/Contract'',
	       ORDR.Number AS ''Relationship/Order'',
	       INV.Number AS ''Relationship/Invoice'',
	       RQMNTIMPLCMPLTE.Title  AS ''ClientReview/ImplementationComplete'',
	       RQMNTSPEED.Title  AS ''ClientReview/SpeedTime'',
	       RQMNTSAT.Title  AS ''ClientReview/Satisfaction'',
	       RQMNT.EstimationComment AS ''ClientReview/Comment'',
	       EPRCT.Title AS ''EstimateForClient/Product'',
	       RQMNT.AnyProductName AS ''EstimateForClient/AnyProductName'',
	       RQMNT.Quantity AS ''EstimateForClient/Quantity'',
	       UNIT.Title AS ''EstimateForClient/Unit'',
	       CURR.Name AS ''EstimateForClient/Currency'',
	       RQMNT.Rate AS ''EstimateForClient/Rate'',
	       RQMNT.CurrencyPrice AS ''EstimateForClient/CurrencyPrice'',
	       RQMNT.CurrencyAmount AS ''EstimateForClient/CurrencyAmount'',
	       RQMNT.Price AS ''EstimateForClient/Price'',
	       RQMNT.Amount AS ''EstimateForClient/Amount'',
	       RQMNT.EstimateCommentForClient AS ''EstimateForClient/Comment'',
	       RQMNT.InternalQuantity AS ''InternalEstimate/Quantity'',
	       IUNIT.Title AS ''InternalEstimate/Unit'',
	       RQMNT.EstimateCommentInternal AS ''InternalEstimate/Comment'',
	       (
				SELECT RC.ID AS ''@CommentID'',
					   RC.UserID AS ''@UserID'',
					   RC.CreatedAt AS ''@CreatedAt'',
					   RC.IsOfficialAnswer AS ''@IsOfficialAnswer'',
					   RC.DestinationUserID AS ''@DestinationUserID'',
					   RC.ReplyToID AS ''@ReplyToID'',					   
					   RC.Comment AS ''Text''
				FROM tbl_RequirementComment AS RC
				WHERE ContentID = RQMNT.ID
				ORDER BY RC.CreatedAt
				FOR XML PATH(''Comment''), TYPE, ELEMENTS, ROOT(''Comments'')
	       ),
	       (
				SELECT R.ID AS ''@RequestID'',					   
					   R.CreatedAt AS ''@CreatedAt'',					   
					   R.Number AS ''@Number''
				FROM tbl_RequestToRequirement AS RTR LEFT JOIN tbl_Request AS R ON RTR.RequestID = R.ID
				WHERE RTR.RequirementID = RQMNT.ID
				FOR XML PATH(''Request''), TYPE, ELEMENTS, ROOT(''RelatedRequests'')
	       )	       
	FROM tbl_Requirement as RQMNT LEFT JOIN tbl_Request AS RQST ON RQMNT.RequestID = RQST.ID
		 LEFT JOIN tbl_Company AS CMPNY ON RQMNT.CompanyID = CMPNY.ID
		 LEFT JOIN tbl_Contact AS CNCT ON RQMNT.ContactID = CNCT.ID
		 LEFT JOIN tbl_Product AS PRCT ON RQMNT.ProductID = PRCT.ID
		 LEFT JOIN tbl_RequirementType AS RQMNTTYPE ON RQMNT.RequirementTypeID = RQMNTTYPE.ID 
		 LEFT JOIN tbl_ServiceLevel AS SL ON RQMNT.ServiceLevelID = SL.ID
	     LEFT JOIN tbl_RequirementSeverityOfExposure AS RSOE ON RQMNT.RequirementSeverityOfExposureID = RSOE.ID
	     LEFT JOIN tbl_RequirementPriority AS RQMNTPRTY ON RQMNT.RequirementPriorityID = RQMNTPRTY.ID
	     LEFT JOIN tbl_RequirementComplexity AS RQMNTCXTY ON RQMNT.RequirementComplexityID = RQMNTCXTY.ID
	     LEFT JOIN tbl_PublicationCategory AS PC ON RQMNT.PublicationCategoryID = PC.ID
	     LEFT JOIN tbl_RequirementStatus AS RQMNTSTS ON RQMNT.RequirementStatusID = RQMNTSTS.ID
	     LEFT JOIN tbl_Contact AS RCNCT ON RQMNT.ResponsibleID = RCNCT.ID
	     LEFT JOIN tbl_Contract AS CNTRCT ON RQMNT.ContractID = CNTRCT.ID
	     LEFT JOIN tbl_Order AS ORDR ON RQMNT.OrderID = ORDR.ID
	     LEFT JOIN tbl_Invoice AS INV ON RQMNT.InvoiceID = INV.ID
	     LEFT JOIN tbl_Product AS EPRCT ON RQMNT.EvaluationRequirementsProductID = EPRCT.ID
	     LEFT JOIN tbl_Unit AS UNIT ON RQMNT.UnitID = UNIT.ID
	     LEFT JOIN tbl_Currency AS CURR ON RQMNT.CurrencyID = CURR.ID
	     LEFT JOIN tbl_RequirementImplementationComplete AS RQMNTIMPLCMPLTE ON RQMNT.RequirementImplementationCompleteID = RQMNTIMPLCMPLTE.ID
	     LEFT JOIN tbl_RequirementSpeedTime AS RQMNTSPEED ON RQMNT.RequirementSpeedTimeID = RQMNTSPEED.ID
	     LEFT JOIN tbl_RequirementSatisfaction AS RQMNTSAT ON RQMNT.RequirementSatisfactionID = RQMNTSAT.ID
	     LEFT JOIN tbl_RequestSourceType AS RST ON RQMNT.RequestSourceTypeID = RST.ID
	     LEFT JOIN tbl_Unit AS IUNIT ON RQMNT.InternalUnitID = IUNIT.ID
	WHERE RQMNT.SiteID = @SiteID
	      AND (@ResponsibleID IS NULL OR RQMNT.ResponsibleID = @ResponsibleID)
	      AND (@CompanyID IS NULL OR RQMNT.CompanyID = @CompanyID)
	      AND (@RequirementType IS NULL OR RQMNTTYPE.Title LIKE N''%'' + @RequirementType + ''%'')
	      AND (@RequirementStatus IS NULL OR RQMNTSTS.Title LIKE N''%'' + @RequirementStatus + ''%'')	      
	FOR XML PATH(''Requirement''), TYPE, ELEMENTS, ROOT(''Requirements'')
END' 

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[API_UpdateContact]
	(
	    @SiteID uniqueidentifier,
	    @UserID uniqueidentifier,
	    @ParamsXml xml
	)
AS
BEGIN

    DECLARE @ContactID uniqueidentifier = NULL
	SET @ContactID = @ParamsXml.value(''(/LeadForceRequest/Contact/@ContactID)[1]'',''uniqueidentifier'')
	
	IF @ContactID IS NULL
	    RETURN 0
	
	DECLARE @UserFullName nvarchar(255) = NULL
	SET @UserFullName = @ParamsXml.value(''(/LeadForceRequest/Contact/UserFullName)[1]'',''nvarchar(255)'')
	
	DECLARE @Email nvarchar(255) = NULL
	SET @Email = @ParamsXml.value(''(/LeadForceRequest/Contact/Email)[1]'',''nvarchar(255)'')
	
	DECLARE @Phone nvarchar(50) = NULL
	SET @Phone = @ParamsXml.value(''(/LeadForceRequest/Contact/Phone)[1]'',''nvarchar(50)'')
		
	DECLARE @Status nvarchar(250) = NULL
	SET @Status = @ParamsXml.value(''(/LeadForceRequest/Contact/Status)[1]'',''nvarchar(250)'')
	DECLARE @StatusID uniqueidentifier = NULL	
	IF @Status IS NOT NULL    
       SELECT @StatusID = ID FROM tbl_Status WHERE SiteID = @SiteID AND Title = @Status        
    IF @StatusID IS NULL   
       SELECT TOP 1 @StatusID = ID FROM tbl_Status WHERE SiteID = @SiteID AND IsDefault = 1	
	
	DECLARE @IsNameChecked bit = NULL
	SET @IsNameChecked = @ParamsXml.value(''(/LeadForceRequest/Contact/IsNameChecked)[1]'',''bit'')
	
	DECLARE @Surname nvarchar(255) = NULL
	SET @Surname = @ParamsXml.value(''(/LeadForceRequest/Contact/Surname)[1]'',''nvarchar(255)'')
	
	DECLARE @Name nvarchar(255) = NULL
	SET @Name = @ParamsXml.value(''(/LeadForceRequest/Contact/Name)[1]'',''nvarchar(255)'')
	
	DECLARE @Patronymic nvarchar(255) = NULL
	SET @Patronymic = @ParamsXml.value(''(/LeadForceRequest/Contact/Patronymic)[1]'',''nvarchar(255)'')
	
	DECLARE @CellularPhone varchar(50) = NULL
	SET @CellularPhone = @ParamsXml.value(''(/LeadForceRequest/Contact/CellularPhone)[1]'',''varchar(50)'')
	
	DECLARE @CellularPhoneStatusID int = NULL
	SET @CellularPhoneStatusID = @ParamsXml.value(''(/LeadForceRequest/Contact/CellularPhoneStatus)[1]'',''int'')
	
	DECLARE @EmailStatusID int = NULL
	SET @EmailStatusID = @ParamsXml.value(''(/LeadForceRequest/Contact/EmailStatus)[1]'',''int'')
	
	DECLARE @ContactType nvarchar(250) = NULL
	SET @ContactType = @ParamsXml.value(''(/LeadForceRequest/Contact/ContactType)[1]'',''nvarchar(250)'')
	DECLARE @ContactTypeID uniqueidentifier = NULL	
	IF @ContactType IS NOT NULL AND @ContactType <> ''''
	    SELECT @ContactTypeID = ID FROM tbl_ContactType WHERE Name = @ContactType AND SiteID = @SiteID
	    
	DECLARE @JobTitle nvarchar(250) = NULL
	SET @JobTitle = @ParamsXml.value(''(/LeadForceRequest/Contact/JobTitle)[1]'',''nvarchar(250)'')
	
	DECLARE @Company nvarchar(255) = NULL
	SET @Company = @ParamsXml.value(''(/LeadForceRequest/Contact/Company)[1]'',''nvarchar(255)'')
	DECLARE @CompanyID uniqueidentifier = NULL	
	IF @Company IS NOT NULL AND @Company <> ''''
	    SELECT TOP 1 @CompanyID = ID FROM tbl_Company WHERE Name = @Company AND SiteID = @SiteID
	    
	DECLARE @Owner nvarchar(255) = NULL
	SET @Owner = @ParamsXml.value(''(/LeadForceRequest/Contact/Owner)[1]'',''nvarchar(255)'')
	DECLARE @OwnerID uniqueidentifier = NULL	
	IF @Owner IS NOT NULL AND @Owner <> ''''
	    SELECT TOP 1 @OwnerID = ID FROM tbl_Contact WHERE UserFullName = @Owner AND SiteID = @SiteID
	
	DECLARE @BirthDate datetime = NULL
	SET @BirthDate = @ParamsXml.value(''(/LeadForceRequest/Contact/BirthDate)[1]'',''datetime'')
	
	DECLARE @ContactFunctionInCompany nvarchar(250) = NULL
	SET @ContactFunctionInCompany = @ParamsXml.value(''(/LeadForceRequest/Contact/ContactFunctionInCompany)[1]'',''nvarchar(250)'')
	DECLARE @ContactFunctionInCompanyID uniqueidentifier = NULL	
	IF @ContactFunctionInCompany IS NOT NULL AND @ContactFunctionInCompany <> ''''
	    SELECT TOP 1 @ContactFunctionInCompanyID = ID FROM tbl_ContactFunctionInCompany WHERE Name = @ContactFunctionInCompany AND SiteID = @SiteID
	
	DECLARE @ContactJobLevel nvarchar(250) = NULL
	SET @ContactJobLevel = @ParamsXml.value(''(/LeadForceRequest/Contact/ContactJobLevel)[1]'',''nvarchar(250)'')
	DECLARE @ContactJobLevelID uniqueidentifier = NULL	
	IF @ContactJobLevel IS NOT NULL AND @ContactJobLevel <> ''''
	    SELECT TOP 1 @ContactJobLevelID = ID FROM tbl_ContactJobLevel WHERE Name = @ContactJobLevel AND SiteID = @SiteID
	    
	DECLARE @Address nvarchar(max) = NULL
	SET @Address = @ParamsXml.value(''(/LeadForceRequest/Contact/Address/@Address)[1]'',''nvarchar(max)'')
	
	DECLARE @Country nvarchar(255) = NULL
	SET @Country = @ParamsXml.value(''(/LeadForceRequest/Contact/Address/Country)[1]'',''nvarchar(255)'')
	DECLARE @CountryID uniqueidentifier = NULL	
	IF @Country IS NOT NULL AND @Country <> ''''
	    SELECT TOP 1 @CountryID = ID FROM tbl_Country WHERE Name = @Country
	
	DECLARE @Region nvarchar(255) = NULL
	SET @Region = @ParamsXml.value(''(/LeadForceRequest/Contact/Address/Region)[1]'',''nvarchar(255)'')
	DECLARE @RegionID uniqueidentifier = NULL	
	IF @Region IS NOT NULL AND @Region <> ''''
	    SELECT TOP 1 @RegionID = ID FROM tbl_Region WHERE Name = @Region
	    
	DECLARE @District nvarchar(255) = NULL
	SET @District = @ParamsXml.value(''(/LeadForceRequest/Contact/Address/District)[1]'',''nvarchar(255)'')
	DECLARE @DistrictID uniqueidentifier = NULL	
	IF @District IS NOT NULL AND @District <> ''''
	    SELECT TOP 1 @DistrictID = ID FROM tbl_District WHERE Name = @District
	    
	DECLARE @City nvarchar(255) = NULL
	SET @City = @ParamsXml.value(''(/LeadForceRequest/Contact/Address/City)[1]'',''nvarchar(255)'')
	DECLARE @CityID uniqueidentifier = NULL	
	IF @City IS NOT NULL AND @City <> ''''
	    SELECT TOP 1 @CityID = ID FROM tbl_City WHERE Name = @City
	
	DECLARE @Reffer nvarchar(255) = NULL
	SET @Reffer = @ParamsXml.value(''(/LeadForceRequest/Contact/Reffer)[1]'',''nvarchar(255)'')
	DECLARE @RefferID uniqueidentifier = NULL	
	IF @Reffer IS NOT NULL AND @Reffer <> ''''
	    SELECT TOP 1 @RefferID = ID FROM tbl_Contact WHERE UserFullName = @Reffer AND SiteID = @SiteID
	    
	DECLARE @Tags nvarchar(max) = NULL
	SET @Tags = @ParamsXml.value(''(/LeadForceRequest/Contact/Tags)[1]'',''nvarchar(max)'')
	
	
	IF (SELECT COUNT(*) FROM tbl_Contact WHERE ID = @ContactID AND SiteID = @SiteID) = 0
	    BEGIN
    	    INSERT INTO tbl_Contact (ID, 
    	                             SiteID, 
    	                             CreatedAt, 
    	                             UserFullName, 
    	                             Email, 
    	                             Phone,
    	                             StatusID,
    	                             IsNameChecked,
    	                             Surname,
    	                             Name,
    	                             Patronymic,
    	                             CellularPhone,
    	                             CellularPhoneStatusID,
    	                             EmailStatusID,
    	                             ContactTypeID,
    	                             JobTitle,
    	                             CompanyID,
    	                             OwnerID,
    	                             BirthDate,
    	                             ContactFunctionInCompanyID,
    	                             ContactJobLevelID,
    	                             RefferID,
    	                             RefferURL,
    	                             UserIP)
    	                     VALUES  (@ContactID, 
    	                             @SiteID, 
    	                             GETDATE(), 
    	                             @UserFullName, 
    	                             @Email, 
    	                             @Phone,
    	                             @StatusID,
    	                             @IsNameChecked,
    	                             @Surname,
    	                             @Name,
    	                             @Patronymic,
    	                             @CellularPhone,
    	                             @CellularPhoneStatusID,
    	                             @EmailStatusID,
    	                             @ContactTypeID,
    	                             @JobTitle,
    	                             @CompanyID,
    	                             @OwnerID,
    	                             @BirthDate,
    	                             @ContactFunctionInCompanyID,
    	                             @ContactJobLevelID,
    	                             @RefferID,
    	                             '''',
    	                             '''')
	    END
	ELSE
	    BEGIN	
    	    UPDATE tbl_Contact
    	    SET  UserFullName = @UserFullName, 
                 Email = @Email, 
                 Phone = @Phone,
                 StatusID = @StatusID,
                 IsNameChecked = @IsNameChecked,
                 Surname = @Surname,
                 Name = @Name,
                 Patronymic = @Patronymic,
                 CellularPhone = @CellularPhone,
                 CellularPhoneStatusID = @CellularPhoneStatusID,
                 EmailStatusID = @EmailStatusID,
                 ContactTypeID = @ContactTypeID,
                 JobTitle = @JobTitle,
                 CompanyID = @CompanyID,
                 OwnerID = @OwnerID,
                 BirthDate = @BirthDate,
                 ContactFunctionInCompanyID = @ContactFunctionInCompanyID,
                 ContactJobLevelID = @ContactJobLevelID,
                 RefferID = @RefferID
    	    WHERE ID = @ContactID
	    END
	
	DECLARE @AddressID uniqueidentifier = NULL
	
	SELECT @AddressID = AddressID FROM tbl_Contact WHERE ID = @ContactID
	IF @AddressID IS NULL
	    BEGIN
	        SET @AddressID = NEWID()
	        INSERT INTO tbl_Address (ID, [Address], CountryID, CityID, DistrictID, RegionID)
	                        VALUES  (@AddressID, @Address, @CountryID, @CityID, @DistrictID, @RegionID)
	                        
	        UPDATE tbl_Contact
	        SET AddressID = @AddressID
	        WHERE ID = @ContactID
	    END
	ELSE
	    BEGIN
	        UPDATE tbl_Address
	        SET [Address] = @Address, CountryID = @CountryID, CityID = @CityID, DistrictID = @DistrictID, RegionID = @RegionID
	        WHERE ID = @AddressID
	    END	
	    
    IF @Tags IS NOT NULL
    BEGIN    
        DECLARE @ObjectTypeID int = NULL
        DECLARE @SiteTagID uniqueidentifier = NULL        
        SELECT @ObjectTypeID = ID FROM tbl_ObjectTypes WHERE Name = N''tbl_Contact''
        
        DELETE FROM tbl_SiteTagObjects WHERE ObjectID = @ContactID
        
        DECLARE @Tag nvarchar(255)
	
        DECLARE tagCursor CURSOR READ_ONLY
        FOR SELECT val FROM Split(@Tags, '','')
        OPEN tagCursor
        FETCH NEXT FROM tagCursor INTO @Tag
        WHILE @@FETCH_STATUS = 0
        BEGIN	                    
            SET @SiteTagID = NULL
            
	        SELECT @SiteTagID = ID FROM tbl_SiteTags WHERE Name = @Tag AND UserID = @UserID AND ObjectTypeID = @ObjectTypeID	        	        
	        
	        IF @SiteTagID IS NULL
	        BEGIN
	            SET @SiteTagID = NEWID()
	            INSERT INTO tbl_SiteTags (ID, UserID, Name, ObjectTypeID)
	            VALUES (@SiteTagID, @UserID, @Tag, @ObjectTypeID)
	        END
	        
	        INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID)
	        VALUES (@SiteTagID, @ContactID)

	        FETCH NEXT FROM tagCursor
	        INTO @Tag
        END
        CLOSE tagCursor
        DEALLOCATE tagCursor
    END
END' 

commit
exec LBC_SetVersion 159
END

/*******************************************************************************
	2012-04-11
	Обновление мониторинга
*******************************************************************************/
if ( dbo.LBC_Version() < 160 )
BEGIN
begin tran

ALTER TABLE tbl_SourceMonitoring DROP CONSTRAINT DF__tbl_Sourc__IsPro__0CF0BDF8 
ALTER TABLE tbl_SourceMonitoring DROP COLUMN IsProceedOnlyServiceLevelContacts

commit
exec LBC_SetVersion 160
END


/*******************************************************************************
	2012-04-12
	Обновлена история изменения требований
*******************************************************************************/
if ( dbo.LBC_Version() < 161 )
BEGIN
begin tran

ALTER TABLE [tbl_RequirementHistory] ADD ResponsibleID uniqueidentifier NULL
ALTER TABLE [dbo].[tbl_RequirementHistory]  WITH CHECK ADD  CONSTRAINT [FK_tbl_RequirementHistory_tbl_ResponsibleContact] FOREIGN KEY([ResponsibleID])
REFERENCES [dbo].[tbl_Contact] ([ID])
ALTER TABLE [dbo].[tbl_RequirementHistory] CHECK CONSTRAINT [FK_tbl_RequirementHistory_tbl_ResponsibleContact]

DELETE FROM tbl_UserSettings
WHERE ClassName = 'WebCounter.AdminPanel.RequirementHistory'

commit
exec LBC_SetVersion 161
END

/*******************************************************************************
	2012-04-12
	Обновлена история изменения требований
*******************************************************************************/
if ( dbo.LBC_Version() < 162 )
BEGIN
begin tran

CREATE TABLE [dbo].[tbl_ServiceLevelRole](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_tbl_ServiceLevelRole] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[tbl_ServiceLevelRole]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ServiceLevelRole_tbl_Sites] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_Sites] ([ID])
ALTER TABLE [dbo].[tbl_ServiceLevelRole] CHECK CONSTRAINT [FK_tbl_ServiceLevelRole_tbl_Sites]
ALTER TABLE [dbo].[tbl_ServiceLevelRole] ADD  CONSTRAINT [DF_tbl_ServiceLevelRole_ID]  DEFAULT (newid()) FOR [ID]

INSERT INTO tbl_Dictionary ([Title], [DataSet], [AccessLevelID]) VALUES (N'Роль в обслуживании', N'tbl_ServiceLevelRole', 0)

ALTER TABLE [tbl_ServiceLevelContact] ADD ServiceLevelRoleID uniqueidentifier NULL
ALTER TABLE [dbo].[tbl_ServiceLevelContact]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ServiceLevelContact_tbl_ServiceLevelRole] FOREIGN KEY([ServiceLevelRoleID])
REFERENCES [dbo].[tbl_ServiceLevelRole] ([ID])
ALTER TABLE [dbo].[tbl_ServiceLevelContact] CHECK CONSTRAINT [FK_tbl_ServiceLevelContact_tbl_ServiceLevelRole]

ALTER TABLE [tbl_RequirementStatus] ADD ServiceLevelRoleID uniqueidentifier NULL
ALTER TABLE [dbo].[tbl_RequirementStatus]  WITH CHECK ADD  CONSTRAINT [FK_tbl_RequirementStatus_tbl_ServiceLevelRole] FOREIGN KEY([ServiceLevelRoleID])
REFERENCES [dbo].[tbl_ServiceLevelRole] ([ID])
ALTER TABLE [dbo].[tbl_RequirementStatus] CHECK CONSTRAINT [FK_tbl_RequirementStatus_tbl_ServiceLevelRole]

commit
exec LBC_SetVersion 162
END

/*******************************************************************************
	2012-04-18
	Добавлены комментарии к запросам
*******************************************************************************/
if ( dbo.LBC_Version() < 163 )
BEGIN
begin tran

CREATE TABLE [dbo].[tbl_RequestComment](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteID] [uniqueidentifier] NOT NULL,
	[CreatedAt] [datetime] NOT NULL,
	[ContentID] [uniqueidentifier] NOT NULL,
	[UserID] [uniqueidentifier] NOT NULL,
	[Comment] [ntext] NOT NULL,
	[FileName] [nvarchar](256) NULL,
	[IsOfficialAnswer] [bit] NULL,
	[DestinationUserID] [uniqueidentifier] NULL,
	[ReplyToID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_tbl_RequestComment] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

CREATE TABLE [dbo].[tbl_RequestCommentMark](
	[ID] [uniqueidentifier] NOT NULL,
	[CreatedAt] [datetime] NOT NULL,
	[ContentCommentID] [uniqueidentifier] NOT NULL,
	[UserID] [uniqueidentifier] NOT NULL,
	[TypeID] [int] NOT NULL,
	[Rank] [int] NOT NULL,
 CONSTRAINT [PK_tbl_RequestCommentMark] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[tbl_RequestComment] ADD  CONSTRAINT [DF_tbl_RequestComment_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_RequestComment] ADD  CONSTRAINT [DF_tbl_RequestComment_CreatedAt]  DEFAULT (getdate()) FOR [CreatedAt]
ALTER TABLE [dbo].[tbl_RequestCommentMark] ADD  CONSTRAINT [DF_tbl_RequestCommentMark_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_RequestCommentMark] ADD  CONSTRAINT [DF_tbl_RequestCommentMark_CreatedAt]  DEFAULT (getdate()) FOR [CreatedAt]
ALTER TABLE [dbo].[tbl_RequestComment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_RequestComment_tbl_Request] FOREIGN KEY([ContentID])
REFERENCES [dbo].[tbl_Request] ([ID])
ALTER TABLE [dbo].[tbl_RequestComment] CHECK CONSTRAINT [FK_tbl_RequestComment_tbl_Request]
ALTER TABLE [dbo].[tbl_RequestComment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_RequestComment_tbl_RequestComment] FOREIGN KEY([ReplyToID])
REFERENCES [dbo].[tbl_RequestComment] ([ID])
ALTER TABLE [dbo].[tbl_RequestComment] CHECK CONSTRAINT [FK_tbl_RequestComment_tbl_RequestComment]
ALTER TABLE [dbo].[tbl_RequestComment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_RequestComment_tbl_Sites] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_Sites] ([ID])
ALTER TABLE [dbo].[tbl_RequestComment] CHECK CONSTRAINT [FK_tbl_RequestComment_tbl_Sites]
ALTER TABLE [dbo].[tbl_RequestComment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_RequestComment_tbl_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[tbl_User] ([ID])
ALTER TABLE [dbo].[tbl_RequestComment] CHECK CONSTRAINT [FK_tbl_RequestComment_tbl_User]
ALTER TABLE [dbo].[tbl_RequestComment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_RequestComment_tbl_User_Destination] FOREIGN KEY([DestinationUserID])
REFERENCES [dbo].[tbl_User] ([ID])
ALTER TABLE [dbo].[tbl_RequestComment] CHECK CONSTRAINT [FK_tbl_RequestComment_tbl_User_Destination]
ALTER TABLE [dbo].[tbl_RequestCommentMark]  WITH CHECK ADD  CONSTRAINT [FK_tbl_RequestCommentMark_tbl_RequestComment] FOREIGN KEY([ContentCommentID])
REFERENCES [dbo].[tbl_RequestComment] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_RequestCommentMark] CHECK CONSTRAINT [FK_tbl_RequestCommentMark_tbl_RequestComment]
ALTER TABLE [dbo].[tbl_RequestCommentMark]  WITH CHECK ADD  CONSTRAINT [FK_tbl_RequestCommentMark_tbl_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[tbl_User] ([ID])
ALTER TABLE [dbo].[tbl_RequestCommentMark] CHECK CONSTRAINT [FK_tbl_RequestCommentMark_tbl_User]

commit
exec LBC_SetVersion 163
END

/*******************************************************************************
	2012-04-20
	Добавлен модуль аналитики
*******************************************************************************/
if ( dbo.LBC_Version() < 164 )
BEGIN
begin tran

INSERT INTO tbl_Module (Title, Name, TableName)
VALUES (N'Аналитика', 'Analytics','tbl_Analytic')
INSERT INTO tbl_ObjectTypes (Name) VALUES (N'tbl_Analytic')

commit
exec LBC_SetVersion 164
END

/*******************************************************************************
	2012-04-24
	Добавлены таблицы для хранения фильтров
*******************************************************************************/
if ( dbo.LBC_Version() < 165 )
BEGIN
begin tran

CREATE TABLE [dbo].[tbl_AnalyticFilter](
	[ID] [uniqueidentifier] NOT NULL,
	[AnalyticReportID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
	[DataSet] [varchar](256) NULL,
 CONSTRAINT [PK_tbl_AnalyticFilter] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

EXEC dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[Analytic_GetFilterQuery]
(
	@SQL nvarchar(max),
	@ColumnName varchar(100),
	@Value nvarchar(256),
	@IsEqual bit
)
RETURNS nvarchar(max)
AS
BEGIN
	IF @ColumnName IS NOT NULL AND @ColumnName <> ''''
	BEGIN
		IF @IsEqual = 1
		BEGIN
			SET @SQL = @SQL + '' AND ('' + @ColumnName + '' = N'''''' + @Value + ''''''''
			IF @Value = ''''
				SET @SQL = @SQL + '' OR '' + @ColumnName + '' IS NULL''
			SET @SQL = @SQL + '')''
		END
		ELSE
		BEGIN
			SET @SQL = @SQL + '' AND ('' + @ColumnName + '' <> N'''''' + @Value + ''''''''
			IF @Value = ''''
				SET @SQL = @SQL + '' OR '' + @ColumnName + '' IS NOT NULL''
			SET @SQL = @SQL + '')''
		END
	END
	
	RETURN @SQL
END'

CREATE TABLE [dbo].[tbl_AnalyticFilterValues](
	[ID] [uniqueidentifier] NOT NULL,
	[AnalyticFilterID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
	[ColumnName] [varchar](100) NULL,
	[Value] [nvarchar](256) NULL,
	[DisplayOrder] [int] NOT NULL,
	[IsEqual] [bit] NOT NULL
) ON [PRIMARY]

ALTER TABLE [dbo].[tbl_AnalyticFilter] ADD  CONSTRAINT [DF_tbl_AnalyticFilter_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_AnalyticFilterValues] ADD  CONSTRAINT [DF_tbl_AnalyticFilterValues_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_AnalyticFilterValues] ADD  CONSTRAINT [DF_tbl_AnalyticFilterValues_DisplayOrder]  DEFAULT ((0)) FOR [DisplayOrder]
ALTER TABLE [dbo].[tbl_AnalyticFilterValues] ADD  CONSTRAINT [DF_tbl_AnalyticFilterValues_IsEqual]  DEFAULT ((0)) FOR [IsEqual]
ALTER TABLE [dbo].[tbl_AnalyticFilterValues]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AnalyticFilterValues_tbl_AnalyticFilter] FOREIGN KEY([AnalyticFilterID])
REFERENCES [dbo].[tbl_AnalyticFilter] ([ID])
ALTER TABLE [dbo].[tbl_AnalyticFilterValues] CHECK CONSTRAINT [FK_tbl_AnalyticFilterValues_tbl_AnalyticFilter]

UPDATE tbl_Analytic
SET Query = '
DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName varchar(100) = ''#FilterColumnName#''
DECLARE @Value nvarchar(256) = ''#FilterColumnValue#''
DECLARE @IsEqual bit = #FilterColumnIsEqual#
DECLARE @SQL nvarchar(max)
DECLARE @Period nvarchar(256)

IF @GroupByDays = 1
	SET @Period = ''CAST(ca.CreatedAt AS DATE)''
ELSE
	SET @Period = ''DATEPART(HOUR, ca.CreatedAt)''

SET @SQL = ''SELECT A.CreatedAt AS Period, A.[Views], A.Visitors, A.Visits, A.PotentialViews, A.PerspectiveViews,
ISNULL(B.PotentialVisitors,0) AS PotentialVisitors, ISNULL(B.PotentialVisits,0) AS PotentialVisits,
ISNULL(C.PerspectiveVisitors,0) AS PerspectiveVisitors, ISNULL(C.PerspectiveVisits,0) AS PerspectiveVisits
FROM (SELECT '' + @Period + '' AS CreatedAt, 
COUNT(*) AS [Views],
COUNT(DISTINCT(ContactID)) AS [Visitors],
COUNT(DISTINCT(ContactSessionID)) AS [Visits],
COUNT(CASE WHEN TBLContact.UserFullName IS NOT NULL AND TBLContact.UserFullName <> '''''''' THEN 1 ELSE NULL END) AS [PotentialViews],
COUNT(CASE WHEN TBLContact.UserFullName IS NULL OR TBLContact.UserFullName = '''''''' THEN 1 ELSE NULL END) AS [PerspectiveViews]	
FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS TBLContact ON TBLContact.ID = CA.ContactID
WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @IsEqual
	
SET @SQL = @SQL + '' GROUP BY '' + @Period + '' ) 
AS A LEFT JOIN (SELECT '' + @Period + '' AS CreatedAt,
COUNT(DISTINCT(ContactID)) AS [PotentialVisitors],
COUNT(DISTINCT(ContactSessionID)) AS [PotentialVisits]
FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS C ON C.ID = CA.ContactID
WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate
AND C.UserFullName IS NOT NULL AND C.UserFullName <> ''''''''
GROUP BY '' + @Period + ''
) AS B ON A.CreatedAt = B.CreatedAt 
LEFT JOIN (SELECT '' + @Period + '' AS CreatedAt, 
COUNT(DISTINCT(ContactID)) AS [PerspectiveVisitors],
COUNT(DISTINCT(ContactSessionID)) AS [PerspectiveVisits]
FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS C ON C.ID = CA.ContactID
WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate
AND (C.UserFullName IS NULL OR C.UserFullName = '''''''')
GROUP BY ''+ @Period +'' ) AS C ON A.CreatedAt = C.CreatedAt ''

IF @GroupByDays = 1
	SET @SQL = @SQL + ''ORDER BY CAST(A.CreatedAt AS DATE)''
ELSE
	SET @SQL = @SQL + ''ORDER BY DATEPART(HOUR, A.CreatedAt)''


EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate'

WHERE Title = N'Посещения'

commit
exec LBC_SetVersion 165
END


/*******************************************************************************
	2012-04-25
	Обновление API
*******************************************************************************/
if ( dbo.LBC_Version() < 166 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[API_UpdateRequirement]
	(
		@SiteID uniqueidentifier, 
		@UserID uniqueidentifier,   
	    @ParamsXml xml
	)
AS
BEGIN
	DECLARE @IsNew int = 0

	DECLARE @RequirementID uniqueidentifier = NULL
	SET @RequirementID = @ParamsXml.value(''(/LeadForceRequest/Requirement/@RequirementID)[1]'',''uniqueidentifier'')
	
	IF @RequirementID IS NULL
	    RETURN 0
	    
	DECLARE @ParentID uniqueidentifier = NULL
	SET @ParentID = @ParamsXml.value(''(/LeadForceRequest/Requirement/@ParentID)[1]'',''uniqueidentifier'')
	
	DECLARE @Status nvarchar(256) = NULL
	SET @Status = @ParamsXml.value(''(/LeadForceRequest/Requirement/Status)[1]'',''nvarchar(256)'')
	DECLARE @RequirementStatusID uniqueidentifier = NULL	
	IF @Status IS NOT NULL AND @Status <> ''''
	    SELECT TOP 1 @RequirementStatusID = ID FROM tbl_RequirementStatus WHERE Title = @Status AND SiteID = @SiteID
	
	DECLARE @Responsible nvarchar(255) = NULL
	SET @Responsible = @ParamsXml.value(''(/LeadForceRequest/Requirement/Responsible)[1]'',''nvarchar(255)'')
	DECLARE @ResponsibleID uniqueidentifier = NULL	
	IF @Responsible IS NOT NULL AND @Responsible <> ''''
	    SELECT TOP 1 @ResponsibleID = ID FROM tbl_Contact WHERE UserFullName = @Responsible AND SiteID = @SiteID
	    
	DECLARE @RealizationDatePlanned datetime = NULL
	SET @RealizationDatePlanned = @ParamsXml.value(''(/LeadForceRequest/Requirement/RealizationDatePlanned)[1]'',''datetime'')
	
	DECLARE @RealizationDateActual datetime = NULL
	SET @RealizationDateActual = @ParamsXml.value(''(/LeadForceRequest/Requirement/RealizationDateActual)[1]'',''datetime'')
	
	DECLARE @ShortDescription nvarchar(2048) = NULL
	SET @ShortDescription = @ParamsXml.value(''(/LeadForceRequest/Requirement/ShortDescription)[1]'',''nvarchar(2048)'')
	
    DECLARE @RequestSourceType nvarchar(256) = NULL
	SET @RequestSourceType = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/RequestType)[1]'',''nvarchar(256)'')
	DECLARE @RequestSourceTypeID uniqueidentifier = NULL	
	IF @RequestSourceType IS NOT NULL AND @RequestSourceType <> ''''
	    SELECT TOP 1 @RequestSourceTypeID = ID FROM tbl_RequestSourceType WHERE Title = @RequestSourceType AND SiteID = @SiteID
	    
	DECLARE @Request nvarchar(256) = NULL
	SET @Request = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/Request)[1]'',''nvarchar(256)'')
	DECLARE @RequestID uniqueidentifier = NULL	
	IF @Request IS NOT NULL AND @Request <> ''''
	    SELECT TOP 1 @RequestID = ID FROM tbl_Request WHERE Number = @Request AND SiteID = @SiteID
	    
	DECLARE @Company nvarchar(255) = NULL
	SET @Company = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/Company)[1]'',''nvarchar(255)'')
	DECLARE @CompanyID uniqueidentifier = NULL	
	IF @Company IS NOT NULL AND @Company <> ''''
	    SELECT TOP 1 @CompanyID = ID FROM tbl_Company WHERE Name = @Company AND SiteID = @SiteID

	DECLARE @Contact nvarchar(255) = NULL
	SET @Contact = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/Contact)[1]'',''nvarchar(255)'')
	DECLARE @ContactID uniqueidentifier = NULL	
	IF @Contact IS NOT NULL AND @Contact <> ''''
	    SELECT TOP 1 @ContactID = ID FROM tbl_Contact WHERE UserFullName = @Contact AND SiteID = @SiteID
	    
	DECLARE @Product nvarchar(250) = NULL
	SET @Product = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/Product)[1]'',''nvarchar(255)'')
	DECLARE @ProductID uniqueidentifier = NULL	
	IF @Product IS NOT NULL AND @Product <> ''''
	    SELECT TOP 1 @ProductID = ID FROM tbl_Product WHERE Title = @Product AND SiteID = @SiteID
	    
	DECLARE @ProductSeriesNumber nvarchar(256) = NULL
	SET @ProductSeriesNumber = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/ProductSeriesNumber)[1]'',''nvarchar(256)'')
	
	DECLARE @RequirementType nvarchar(256) = NULL
	SET @RequirementType = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/RequirementType)[1]'',''nvarchar(256)'')
	DECLARE @RequirementTypeID uniqueidentifier = NULL	
	IF @RequirementType IS NOT NULL AND @RequirementType <> ''''
	    SELECT TOP 1 @RequirementTypeID = ID FROM tbl_RequirementType WHERE Title = @RequirementType AND SiteID = @SiteID
	    
	DECLARE @ServiceLevel nvarchar(256) = NULL
	SET @ServiceLevel = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/ServiceLevel)[1]'',''nvarchar(256)'')
	DECLARE @ServiceLevelID uniqueidentifier = NULL	
	IF @ServiceLevel IS NOT NULL AND @ServiceLevel <> ''''
	    SELECT TOP 1 @ServiceLevelID = ID FROM tbl_ServiceLevel WHERE Title = @ServiceLevel AND SiteID = @SiteID
	    
	DECLARE @SeverityOfExposure nvarchar(256) = NULL
	SET @SeverityOfExposure = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/SeverityOfExposure)[1]'',''nvarchar(256)'')
	DECLARE @RequirementSeverityOfExposureID uniqueidentifier = NULL	
	IF @SeverityOfExposure IS NOT NULL AND @SeverityOfExposure <> ''''
	    SELECT TOP 1 @RequirementSeverityOfExposureID = ID FROM tbl_RequirementSeverityOfExposure WHERE Title = @SeverityOfExposure AND SiteID = @SiteID
	    
	DECLARE @Priority nvarchar(256) = NULL
	SET @Priority = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/Priority)[1]'',''nvarchar(256)'')
	DECLARE @RequirementPriorityID uniqueidentifier = NULL	
	IF @Priority IS NOT NULL AND @Priority <> ''''
	    SELECT TOP 1 @RequirementPriorityID = ID FROM tbl_RequirementPriority WHERE Title = @Priority AND SiteID = @SiteID	    
	    	    
	DECLARE @Complexity nvarchar(256) = NULL
	SET @Complexity = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/Complexity)[1]'',''nvarchar(256)'')
	DECLARE @RequirementComplexityID uniqueidentifier = NULL	
	IF @Complexity IS NOT NULL AND @Complexity <> ''''
	    SELECT TOP 1 @RequirementComplexityID = ID FROM tbl_RequirementComplexity WHERE Title = @Complexity AND SiteID = @SiteID
	
	DECLARE @Category nvarchar(250) = NULL
	SET @Category = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/Category)[1]'',''nvarchar(250)'')
	DECLARE @PublicationCategoryID uniqueidentifier = NULL	
	IF @Category IS NOT NULL AND @Category <> ''''
	    SELECT TOP 1 @PublicationCategoryID = ID FROM tbl_PublicationCategory WHERE Title = @Category AND SiteID = @SiteID	    
	
	DECLARE @Contract nvarchar(256) = NULL
	SET @Contract = @ParamsXml.value(''(/LeadForceRequest/Requirement/Relationship/Contract)[1]'',''nvarchar(256)'')
	DECLARE @ContractID uniqueidentifier = NULL	
	IF @Contract IS NOT NULL AND @Contract <> ''''
	    SELECT TOP 1 @ContractID = ID FROM tbl_Contract WHERE Number = @Contract AND SiteID = @SiteID	    
	    
	DECLARE @Order nvarchar(256) = NULL
	SET @Order = @ParamsXml.value(''(/LeadForceRequest/Requirement/Relationship/Order)[1]'',''nvarchar(256)'')
	DECLARE @OrderID uniqueidentifier = NULL	
	IF @Order IS NOT NULL AND @Order <> ''''
	    SELECT TOP 1 @OrderID = ID FROM tbl_Order WHERE Number = @Order AND SiteID = @SiteID
			    
	DECLARE @Invoice nvarchar(256) = NULL
	SET @Invoice = @ParamsXml.value(''(/LeadForceRequest/Requirement/Relationship/Invoice)[1]'',''nvarchar(256)'')
	DECLARE @InvoiceID uniqueidentifier = NULL	
	IF @Invoice IS NOT NULL AND @Invoice <> ''''
	    SELECT TOP 1 @InvoiceID = ID FROM tbl_Invoice WHERE Number = @Invoice AND SiteID = @SiteID
	    
	DECLARE @ImplementationComplete nvarchar(256) = NULL
	SET @ImplementationComplete = @ParamsXml.value(''(/LeadForceRequest/Requirement/ClientReview/ImplementationComplete)[1]'',''nvarchar(256)'')
	DECLARE @RequirementImplementationCompleteID uniqueidentifier = NULL	
	IF @ImplementationComplete IS NOT NULL AND @ImplementationComplete <> ''''
	    SELECT TOP 1 @RequirementImplementationCompleteID = ID FROM tbl_RequirementImplementationComplete WHERE Title = @ImplementationComplete AND SiteID = @SiteID
	
	DECLARE @SpeedTime nvarchar(256) = NULL
	SET @SpeedTime = @ParamsXml.value(''(/LeadForceRequest/Requirement/ClientReview/SpeedTime)[1]'',''nvarchar(256)'')
	DECLARE @RequirementSpeedTimeID uniqueidentifier = NULL	
	IF @SpeedTime IS NOT NULL AND @SpeedTime <> ''''
	    SELECT TOP 1 @RequirementSpeedTimeID = ID FROM tbl_RequirementSpeedTime WHERE Title = @SpeedTime AND SiteID = @SiteID
	    		
	DECLARE @Satisfaction nvarchar(256) = NULL
	SET @Satisfaction = @ParamsXml.value(''(/LeadForceRequest/Requirement/ClientReview/Satisfaction)[1]'',''nvarchar(256)'')
	DECLARE @RequirementSatisfactionID uniqueidentifier = NULL	
	IF @Satisfaction IS NOT NULL AND @Satisfaction <> ''''
	    SELECT TOP 1 @RequirementSatisfactionID = ID FROM tbl_RequirementSatisfaction WHERE Title = @Satisfaction AND SiteID = @SiteID
 
 	DECLARE @EstimationComment nvarchar(2048) = NULL
	SET @EstimationComment = @ParamsXml.value(''(/LeadForceRequest/Requirement/ClientReview/Comment)[1]'',''nvarchar(2048)'')
	
	DECLARE @EvaluationRequirementsProduct nvarchar(250) = NULL
	SET @EvaluationRequirementsProduct = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Product)[1]'',''nvarchar(255)'')
	DECLARE @EvaluationRequirementsProductID uniqueidentifier = NULL	
	IF @EvaluationRequirementsProduct IS NOT NULL AND @EvaluationRequirementsProduct <> ''''
	    SELECT TOP 1 @EvaluationRequirementsProductID = ID FROM tbl_Product WHERE Title = @EvaluationRequirementsProduct AND SiteID = @SiteID
 
	DECLARE @AnyProductName nvarchar(255) = NULL
	SET @AnyProductName = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/AnyProductName)[1]'',''nvarchar(255)'')
	
	DECLARE @Quantity decimal(18,4) = 0
	SET @Quantity = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Quantity)[1]'',''decimal(18,4)'')
 
 	DECLARE @Unit nvarchar(50) = NULL
	SET @Unit = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Unit)[1]'',''nvarchar(50)'')
	DECLARE @UnitID uniqueidentifier = NULL	
	IF @Unit IS NOT NULL AND @Unit <> ''''
	    SELECT TOP 1 @UnitID = ID FROM tbl_Unit WHERE Title = @Unit AND SiteID = @SiteID
	    
	DECLARE @Currency nvarchar(255) = NULL
	SET @Currency = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Currency)[1]'',''nvarchar(255)'')
	DECLARE @CurrencyID uniqueidentifier = NULL	
	IF @Currency IS NOT NULL AND @Currency <> ''''
	    SELECT TOP 1 @CurrencyID = ID FROM tbl_Currency WHERE Name = @Currency AND SiteID = @SiteID
	    
	DECLARE @Rate money = 1
	SET @Rate = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Quantity)[1]'',''money'')
	
	SET @Rate = (CASE WHEN @Rate = 0 THEN 1 ELSE @Rate END)
	
	DECLARE @CurrencyPrice money = 0
	SET @CurrencyPrice = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/CurrencyPrice)[1]'',''money'')
		
	DECLARE @CurrencyAmount money = 0
	SET @CurrencyAmount = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/CurrencyAmount)[1]'',''money'')
	
	DECLARE @Price money = 0
	SET @Price = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Price)[1]'',''money'')	
	
	DECLARE @Amount money = 0
	SET @Amount = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Amount)[1]'',''money'')
	
	DECLARE @EstimateCommentForClient nvarchar(2048) = 0
	SET @EstimateCommentForClient = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Comment)[1]'',''nvarchar(2048)'')
	    
	DECLARE @InternalQuantity decimal(18,4) = 0
	SET @InternalQuantity = @ParamsXml.value(''(/LeadForceRequest/Requirement/InternalEstimate/Quantity)[1]'',''decimal(18,4)'')
 
 	DECLARE @InternalUnit nvarchar(50) = NULL
	SET @InternalUnit = @ParamsXml.value(''(/LeadForceRequest/Requirement/InternalEstimate/Unit)[1]'',''nvarchar(50)'')
	DECLARE @InternalUnitID uniqueidentifier = NULL	
	IF @InternalUnit IS NOT NULL AND @InternalUnit <> ''''
	    SELECT TOP 1 @InternalUnitID = ID FROM tbl_Unit WHERE Title = @InternalUnit AND SiteID = @SiteID    
	    
	DECLARE @EstimateCommentInternal nvarchar(2048) = 0
	SET @EstimateCommentInternal = @ParamsXml.value(''(/LeadForceRequest/Requirement/InternalEstimate/Comment)[1]'',''nvarchar(2048)'')	    
	    	    
	IF (SELECT COUNT(*) FROM tbl_Requirement WHERE ID = @RequirementID AND SiteID = @SiteID) = 0
    BEGIN	    
	    INSERT [dbo].[tbl_Requirement] (
			[ID], 
			[SiteID], 
			[Number], 
			[SerialNumber], 
			[CreatedAt], 
			[ShortDescription], 
			[RequestID], 
			[CompanyID], 
			[ContactID], 
			[ProductID], 
			[ProductSeriesNumber], 
			[RequirementTypeID], 
			[ServiceLevelID], 
			[RequirementSeverityOfExposureID], 
			[ParentID], 
			[RequirementPriorityID], 
			[RequirementComplexityID], 
			[PublicationCategoryID], 
			[RequirementStatusID], 
			[ResponsibleID], 
			[RealizationDatePlanned], 
			[RealizationDateActual], 
			[ContractID], 
			[OrderID], 
			[InvoiceID], 
			[EvaluationRequirementsProductID], 
			[AnyProductName], 
			[Quantity], 
			[UnitID], 
			[CurrencyID], 
			[Rate], 
			[CurrencyPrice], 
			[CurrencyAmount], 
			[Price], 
			[Amount], 
			[RequirementImplementationCompleteID], 
			[RequirementSpeedTimeID], 
			[RequirementSatisfactionID], 
			[EstimationComment], 	    
			[RequestSourceTypeID], 
			[InternalQuantity], 
			[InternalUnitID], 
			[EstimateCommentInternal], 
			[EstimateCommentForClient]) 
	    VALUES (
			@RequirementID, 
			@SiteID, 
			'''', 
			0, 
			GETDATE(), 
			@ShortDescription, 
			@RequestID, 
			@CompanyID, 
			@ContactID, 
			@ProductID, 
			@ProductSeriesNumber, 
			@RequirementTypeID, 
			@ServiceLevelID,
			@RequirementSeverityOfExposureID, 
			@ParentID,
			@RequirementPriorityID,
			@RequirementComplexityID, 
			@PublicationCategoryID, 
			@RequirementStatusID, 
			@ResponsibleID, 
			@RealizationDatePlanned, 
			@RealizationDateActual, 
			@ContractID, 
			@OrderID, 
			@InvoiceID, 
			@EvaluationRequirementsProductID, 
			@AnyProductName, 
			@Quantity, 
			@UnitID, 
			@CurrencyID, 
			@Rate, 
			@CurrencyPrice, 
			@CurrencyAmount, 
			@Price, 
			@Amount, 
			@RequirementImplementationCompleteID, 
			@RequirementSpeedTimeID, 
			@RequirementSatisfactionID, 
			@EstimationComment, 	    
			@RequestSourceTypeID, 
			@InternalQuantity, 
			@InternalUnitID, 
			@EstimateCommentInternal,
			@EstimateCommentForClient
	    )
	    
	    SET @IsNew = 1
	END
	ELSE
	BEGIN
		UPDATE tbl_Requirement
		SET [ShortDescription] = @ShortDescription, 
			[RequestID] = @RequestID, 
			[CompanyID] = @CompanyID, 
			[ContactID] = @ContactID, 
			[ProductID] = @ProductID, 
			[ProductSeriesNumber] = @ProductSeriesNumber, 
			[RequirementTypeID] = @RequirementTypeID, 
			[ServiceLevelID] = @ServiceLevelID, 
			[RequirementSeverityOfExposureID] = @RequirementSeverityOfExposureID, 
			[ParentID] = @ParentID, 
			[RequirementPriorityID] = @RequirementPriorityID, 
			[RequirementComplexityID] = @RequirementComplexityID, 
			[PublicationCategoryID] = @PublicationCategoryID, 
			[RequirementStatusID] = @RequirementStatusID, 
			[ResponsibleID] = @ResponsibleID, 
			[RealizationDatePlanned] = @RealizationDatePlanned, 
			[RealizationDateActual] = @RealizationDateActual, 
			[ContractID] = @ContractID, 
			[OrderID] = @OrderID, 
			[InvoiceID] = @InvoiceID, 
			[EvaluationRequirementsProductID] = @EvaluationRequirementsProductID, 
			[AnyProductName] = @AnyProductName, 
			[Quantity] = @Quantity, 
			[UnitID] = @UnitID, 
			[CurrencyID] = @CurrencyID, 
			[Rate] = @Rate, 
			[CurrencyPrice] = @CurrencyPrice, 
			[CurrencyAmount] = @CurrencyAmount, 
			[Price] = @Price, 
			[Amount] = @Amount, 
			[RequirementImplementationCompleteID] = @RequirementImplementationCompleteID, 
			[RequirementSpeedTimeID] = @RequirementSpeedTimeID, 
			[RequirementSatisfactionID] = @RequirementSatisfactionID, 
			[EstimationComment] = @EstimationComment,
			[RequestSourceTypeID] = @RequestSourceTypeID, 
			[InternalQuantity] = @InternalQuantity, 
			[InternalUnitID] = @InternalUnitID, 
			[EstimateCommentInternal] = @EstimateCommentInternal, 
			[EstimateCommentForClient] = @EstimateCommentForClient
		WHERE ID = @RequirementID AND SiteID = @SiteID
	END
	
	DECLARE @CommentID uniqueidentifier
	DECLARE @CommentatorUserID uniqueidentifier
	DECLARE @Comment nvarchar(max)
	DECLARE @IsOfficialAnswer bit
	DECLARE @DestinationUserID uniqueidentifier
	DECLARE @ReplyToID uniqueidentifier
	
	DECLARE @Comments_Cursor xml
	DECLARE Comments_Cursor CURSOR FOR
	SELECT T.c.query(''.'') AS result
	FROM   @ParamsXml.nodes(''/LeadForceRequest/Requirement/Comments/Comment'') T(c)
	OPEN Comments_Cursor
	FETCH NEXT FROM Comments_Cursor INTO @Comments_Cursor
	WHILE @@FETCH_STATUS = 0
	BEGIN	
		SET @CommentID =null
		SET @CommentatorUserID = null		
		SET @IsOfficialAnswer = 0
		SET @DestinationUserID = null
		SET @ReplyToID = null
		SET @Comment = null			
				
		SET @CommentID = @Comments_Cursor.value(''(/Comment/@CommentID)[1]'',''uniqueidentifier'')
		SET @CommentatorUserID = @Comments_Cursor.value(''(/Comment/@UserID)[1]'',''uniqueidentifier'')
		SET @IsOfficialAnswer = @Comments_Cursor.value(''(/Comment/@IsOfficialAnswer)[1]'',''bit'')
		SET @DestinationUserID = @Comments_Cursor.value(''(/Comment/@DestinationUserID)[1]'',''uniqueidentifier'')
		SET @ReplyToID = @Comments_Cursor.value(''(/Comment/@ReplyToID)[1]'',''uniqueidentifier'')
		SET @Comment = @Comments_Cursor.value(''(/Comment/Text)[1]'',''nvarchar(max)'')
		
		IF @CommentatorUserID IS NULL
			SET @CommentatorUserID = @UserID
		
		IF @CommentID IS NOT NULL AND (SELECT COUNT(*) FROM tbl_RequirementComment WHERE ID = @CommentID AND ContentID = @RequirementID) = 0
		BEGIN
			INSERT INTO tbl_RequirementComment ([ID], [SiteID], [CreatedAt], [ContentID], [UserID], [Comment], [IsOfficialAnswer], [DestinationUserID], [ReplyToID])
			VALUES (@CommentID, @SiteID, GETDATE(), @RequirementID, @CommentatorUserID, @Comment, @IsOfficialAnswer, @DestinationUserID, @ReplyToID)
		END
		ELSE
		BEGIN
			UPDATE tbl_RequirementComment
			SET [Comment] = @Comment, [IsOfficialAnswer] = @IsOfficialAnswer
			WHERE ContentID = @RequirementID AND ID = @CommentID
		END
		
		FETCH NEXT FROM Comments_Cursor INTO @Comments_Cursor
	END
	CLOSE Comments_Cursor
	DEALLOCATE Comments_Cursor
	
	SELECT (CASE WHEN @IsNew = 1 THEN @RequirementID ELSE NULL END)
END' 

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[API_GetRequirements]
	(
	    @SiteID uniqueidentifier,
	    @ParamsXml xml
	)
AS
BEGIN
	
	DECLARE @RequirementID uniqueidentifier = NULL
	SET @RequirementID = @ParamsXml.value(''(/LeadForceRequest/Requirement/Params/RequirementID/@value)[1]'',''uniqueidentifier'')
	
	DECLARE @ResponsibleID uniqueidentifier = NULL
	SET @ResponsibleID = @ParamsXml.value(''(/LeadForceRequest/Requirement/Params/ResponsibleID/@value)[1]'',''uniqueidentifier'')
	
	DECLARE @CompanyID uniqueidentifier = NULL
	SET @CompanyID = @ParamsXml.value(''(/LeadForceRequest/Requirement/Params/CompanyID/@value)[1]'',''uniqueidentifier'')
	
	DECLARE @RequirementType nvarchar(256) = NULL
	SET @RequirementType = @ParamsXml.value(''(/LeadForceRequest/Requirement/Params/RequirementType/@value)[1]'',''nvarchar(256)'')
	
	DECLARE @RequirementStatus nvarchar(256) = NULL
	SET @RequirementStatus = @ParamsXml.value(''(/LeadForceRequest/Requirement/Params/Status/@value)[1]'',''nvarchar(256)'')		
	
	SELECT RQMNT.ID as ''@RequirementID'',
	       RQMNT.CreatedAt AS ''@CreatedAt'',
	       RQMNT.Number AS ''@Number'',
	       RQMNT.ParentID AS ''@ParentID'',
	       RQMNTSTS.Title AS ''Status'',
	       RCNCT.UserFullName AS ''Responsible'',
	       RQMNT.RealizationDatePlanned AS ''RealizationDatePlanned'',
	       RQMNT.RealizationDateActual AS ''RealizationDateActual'',
	       RQMNT.ShortDescription AS ''ShortDescription'',
	       RST.Title AS ''Source/RequestType'',
	       RQST.Number AS ''Source/Request'',
	       CMPNY.Name AS ''Source/Company'',
	       CNCT.UserFullName AS ''Source/Contact'',
	       PRCT.Title AS ''Source/Product'',
	       RQMNT.ProductSeriesNumber AS ''Source/ProductSeriesNumber'',
	       RQMNTTYPE.Title AS ''Classification/RequirementType'',
	       SL.Title AS ''Classification/ServiceLevel'',
	       RSOE.Title AS ''Classification/SeverityOfExposure'',
	       RQMNTPRTY.Title AS ''Classification/Priority'',
	       RQMNTCXTY.Title AS ''Classification/Complexity'',
	       PC.Title AS ''Classification/Category'',
	       CNTRCT.Number AS ''Relationship/Contract'',
	       ORDR.Number AS ''Relationship/Order'',
	       INV.Number AS ''Relationship/Invoice'',
	       RQMNTIMPLCMPLTE.Title  AS ''ClientReview/ImplementationComplete'',
	       RQMNTSPEED.Title  AS ''ClientReview/SpeedTime'',
	       RQMNTSAT.Title  AS ''ClientReview/Satisfaction'',
	       RQMNT.EstimationComment AS ''ClientReview/Comment'',
	       EPRCT.Title AS ''EstimateForClient/Product'',
	       RQMNT.AnyProductName AS ''EstimateForClient/AnyProductName'',
	       RQMNT.Quantity AS ''EstimateForClient/Quantity'',
	       UNIT.Title AS ''EstimateForClient/Unit'',
	       CURR.Name AS ''EstimateForClient/Currency'',
	       RQMNT.Rate AS ''EstimateForClient/Rate'',
	       RQMNT.CurrencyPrice AS ''EstimateForClient/CurrencyPrice'',
	       RQMNT.CurrencyAmount AS ''EstimateForClient/CurrencyAmount'',
	       RQMNT.Price AS ''EstimateForClient/Price'',
	       RQMNT.Amount AS ''EstimateForClient/Amount'',
	       RQMNT.EstimateCommentForClient AS ''EstimateForClient/Comment'',
	       RQMNT.InternalQuantity AS ''InternalEstimate/Quantity'',
	       IUNIT.Title AS ''InternalEstimate/Unit'',
	       RQMNT.EstimateCommentInternal AS ''InternalEstimate/Comment'',
	       (
				SELECT RC.ID AS ''@CommentID'',
					   RC.UserID AS ''@UserID'',
					   RC.CreatedAt AS ''@CreatedAt'',
					   RC.IsOfficialAnswer AS ''@IsOfficialAnswer'',
					   RC.DestinationUserID AS ''@DestinationUserID'',
					   RC.ReplyToID AS ''@ReplyToID'',					   
					   RC.Comment AS ''Text''
				FROM tbl_RequirementComment AS RC
				WHERE ContentID = RQMNT.ID
				ORDER BY RC.CreatedAt
				FOR XML PATH(''Comment''), TYPE, ELEMENTS, ROOT(''Comments'')
	       ),
	       (
				SELECT R.ID AS ''@RequestID'',					   
					   R.CreatedAt AS ''@CreatedAt'',					   
					   R.Number AS ''@Number''
				FROM tbl_RequestToRequirement AS RTR LEFT JOIN tbl_Request AS R ON RTR.RequestID = R.ID
				WHERE RTR.RequirementID = RQMNT.ID
				FOR XML PATH(''Request''), TYPE, ELEMENTS, ROOT(''RelatedRequests'')
	       )	       
	FROM tbl_Requirement as RQMNT LEFT JOIN tbl_Request AS RQST ON RQMNT.RequestID = RQST.ID
		 LEFT JOIN tbl_Company AS CMPNY ON RQMNT.CompanyID = CMPNY.ID
		 LEFT JOIN tbl_Contact AS CNCT ON RQMNT.ContactID = CNCT.ID
		 LEFT JOIN tbl_Product AS PRCT ON RQMNT.ProductID = PRCT.ID
		 LEFT JOIN tbl_RequirementType AS RQMNTTYPE ON RQMNT.RequirementTypeID = RQMNTTYPE.ID 
		 LEFT JOIN tbl_ServiceLevel AS SL ON RQMNT.ServiceLevelID = SL.ID
	     LEFT JOIN tbl_RequirementSeverityOfExposure AS RSOE ON RQMNT.RequirementSeverityOfExposureID = RSOE.ID
	     LEFT JOIN tbl_RequirementPriority AS RQMNTPRTY ON RQMNT.RequirementPriorityID = RQMNTPRTY.ID
	     LEFT JOIN tbl_RequirementComplexity AS RQMNTCXTY ON RQMNT.RequirementComplexityID = RQMNTCXTY.ID
	     LEFT JOIN tbl_PublicationCategory AS PC ON RQMNT.PublicationCategoryID = PC.ID
	     LEFT JOIN tbl_RequirementStatus AS RQMNTSTS ON RQMNT.RequirementStatusID = RQMNTSTS.ID
	     LEFT JOIN tbl_Contact AS RCNCT ON RQMNT.ResponsibleID = RCNCT.ID
	     LEFT JOIN tbl_Contract AS CNTRCT ON RQMNT.ContractID = CNTRCT.ID
	     LEFT JOIN tbl_Order AS ORDR ON RQMNT.OrderID = ORDR.ID
	     LEFT JOIN tbl_Invoice AS INV ON RQMNT.InvoiceID = INV.ID
	     LEFT JOIN tbl_Product AS EPRCT ON RQMNT.EvaluationRequirementsProductID = EPRCT.ID
	     LEFT JOIN tbl_Unit AS UNIT ON RQMNT.UnitID = UNIT.ID
	     LEFT JOIN tbl_Currency AS CURR ON RQMNT.CurrencyID = CURR.ID
	     LEFT JOIN tbl_RequirementImplementationComplete AS RQMNTIMPLCMPLTE ON RQMNT.RequirementImplementationCompleteID = RQMNTIMPLCMPLTE.ID
	     LEFT JOIN tbl_RequirementSpeedTime AS RQMNTSPEED ON RQMNT.RequirementSpeedTimeID = RQMNTSPEED.ID
	     LEFT JOIN tbl_RequirementSatisfaction AS RQMNTSAT ON RQMNT.RequirementSatisfactionID = RQMNTSAT.ID
	     LEFT JOIN tbl_RequestSourceType AS RST ON RQMNT.RequestSourceTypeID = RST.ID
	     LEFT JOIN tbl_Unit AS IUNIT ON RQMNT.InternalUnitID = IUNIT.ID
	WHERE RQMNT.SiteID = @SiteID
	      AND (@ResponsibleID IS NULL OR RQMNT.ResponsibleID = @ResponsibleID)
	      AND (@CompanyID IS NULL OR RQMNT.CompanyID = @CompanyID)
	      AND (@RequirementType IS NULL OR RQMNTTYPE.Title LIKE N''%'' + @RequirementType + ''%'')
	      AND (@RequirementStatus IS NULL OR RQMNTSTS.Title LIKE N''%'' + @RequirementStatus + ''%'')
	      AND (@RequirementID IS NULL OR RQMNT.ID = @RequirementID)
	FOR XML PATH(''Requirement''), TYPE, ELEMENTS, ROOT(''Requirements'')
END' 

commit
exec LBC_SetVersion 166
END

/*******************************************************************************
	2012-04-26
	Обновления
*******************************************************************************/
if ( dbo.LBC_Version() < 167 )
BEGIN
begin tran

DELETE FROM tbl_UserSettings
WHERE ClassName=N'WebCounter.AdminPanel.WorkflowTemplates'


DELETE FROM tbl_UserSettings
WHERE ClassName=N'WebCounter.AdminPanel.Requests'

commit
exec LBC_SetVersion 167
END

/*******************************************************************************
	2012-04-26
	Обновления
*******************************************************************************/
if ( dbo.LBC_Version() < 168 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[API_UpdateRequirement]
	(
		@SiteID uniqueidentifier, 
		@UserID uniqueidentifier,   
	    @ParamsXml xml
	)
AS
BEGIN
	DECLARE @IsNew int = 0

	DECLARE @RequirementID uniqueidentifier = NULL
	SET @RequirementID = @ParamsXml.value(''(/LeadForceRequest/Requirement/@RequirementID)[1]'',''uniqueidentifier'')
	
	IF @RequirementID IS NULL
	    RETURN 0
	    
	DECLARE @ParentID uniqueidentifier = NULL
	SET @ParentID = @ParamsXml.value(''(/LeadForceRequest/Requirement/@ParentID)[1]'',''uniqueidentifier'')
	
	DECLARE @Status nvarchar(256) = NULL
	SET @Status = @ParamsXml.value(''(/LeadForceRequest/Requirement/Status)[1]'',''nvarchar(256)'')
	DECLARE @RequirementStatusID uniqueidentifier = NULL	
	IF @Status IS NOT NULL AND @Status <> ''''
	    SELECT TOP 1 @RequirementStatusID = ID FROM tbl_RequirementStatus WHERE Title = @Status AND SiteID = @SiteID
	
	DECLARE @Responsible nvarchar(255) = NULL
	SET @Responsible = @ParamsXml.value(''(/LeadForceRequest/Requirement/Responsible)[1]'',''nvarchar(255)'')
	DECLARE @ResponsibleID uniqueidentifier = NULL	
	IF @Responsible IS NOT NULL AND @Responsible <> ''''
	    SELECT TOP 1 @ResponsibleID = ID FROM tbl_Contact WHERE UserFullName = @Responsible AND SiteID = @SiteID
	    
	DECLARE @RealizationDatePlanned datetime = NULL
	SET @RealizationDatePlanned = @ParamsXml.value(''(/LeadForceRequest/Requirement/RealizationDatePlanned)[1]'',''datetime'')
	
	DECLARE @RealizationDateActual datetime = NULL
	SET @RealizationDateActual = @ParamsXml.value(''(/LeadForceRequest/Requirement/RealizationDateActual)[1]'',''datetime'')
	
	DECLARE @ShortDescription nvarchar(2048) = NULL
	SET @ShortDescription = @ParamsXml.value(''(/LeadForceRequest/Requirement/ShortDescription)[1]'',''nvarchar(2048)'')
	
    DECLARE @RequestSourceType nvarchar(256) = NULL
	SET @RequestSourceType = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/RequestType)[1]'',''nvarchar(256)'')
	DECLARE @RequestSourceTypeID uniqueidentifier = NULL	
	IF @RequestSourceType IS NOT NULL AND @RequestSourceType <> ''''
	    SELECT TOP 1 @RequestSourceTypeID = ID FROM tbl_RequestSourceType WHERE Title = @RequestSourceType AND SiteID = @SiteID
	    
	DECLARE @Request nvarchar(256) = NULL
	SET @Request = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/Request)[1]'',''nvarchar(256)'')
	DECLARE @RequestID uniqueidentifier = NULL	
	IF @Request IS NOT NULL AND @Request <> ''''
	    SELECT TOP 1 @RequestID = ID FROM tbl_Request WHERE Number = @Request AND SiteID = @SiteID
	    
	DECLARE @Company nvarchar(255) = NULL
	SET @Company = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/Company)[1]'',''nvarchar(255)'')
	DECLARE @CompanyID uniqueidentifier = NULL	
	IF @Company IS NOT NULL AND @Company <> ''''
	    SELECT TOP 1 @CompanyID = ID FROM tbl_Company WHERE Name = @Company AND SiteID = @SiteID

	DECLARE @Contact nvarchar(255) = NULL
	SET @Contact = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/Contact)[1]'',''nvarchar(255)'')
	DECLARE @ContactID uniqueidentifier = NULL	
	IF @Contact IS NOT NULL AND @Contact <> ''''
	    SELECT TOP 1 @ContactID = ID FROM tbl_Contact WHERE UserFullName = @Contact AND SiteID = @SiteID
	    
	DECLARE @Product nvarchar(250) = NULL
	SET @Product = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/Product)[1]'',''nvarchar(255)'')
	DECLARE @ProductID uniqueidentifier = NULL	
	IF @Product IS NOT NULL AND @Product <> ''''
	    SELECT TOP 1 @ProductID = ID FROM tbl_Product WHERE Title = @Product AND SiteID = @SiteID
	    
	DECLARE @ProductSeriesNumber nvarchar(256) = NULL
	SET @ProductSeriesNumber = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/ProductSeriesNumber)[1]'',''nvarchar(256)'')
	
	DECLARE @RequirementType nvarchar(256) = NULL
	SET @RequirementType = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/RequirementType)[1]'',''nvarchar(256)'')
	DECLARE @RequirementTypeID uniqueidentifier = NULL	
	IF @RequirementType IS NOT NULL AND @RequirementType <> ''''
	    SELECT TOP 1 @RequirementTypeID = ID FROM tbl_RequirementType WHERE Title = @RequirementType AND SiteID = @SiteID
	    
	DECLARE @ServiceLevel nvarchar(256) = NULL
	SET @ServiceLevel = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/ServiceLevel)[1]'',''nvarchar(256)'')
	DECLARE @ServiceLevelID uniqueidentifier = NULL	
	IF @ServiceLevel IS NOT NULL AND @ServiceLevel <> ''''
	    SELECT TOP 1 @ServiceLevelID = ID FROM tbl_ServiceLevel WHERE Title = @ServiceLevel AND SiteID = @SiteID
	    
	DECLARE @SeverityOfExposure nvarchar(256) = NULL
	SET @SeverityOfExposure = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/SeverityOfExposure)[1]'',''nvarchar(256)'')
	DECLARE @RequirementSeverityOfExposureID uniqueidentifier = NULL	
	IF @SeverityOfExposure IS NOT NULL AND @SeverityOfExposure <> ''''
	    SELECT TOP 1 @RequirementSeverityOfExposureID = ID FROM tbl_RequirementSeverityOfExposure WHERE Title = @SeverityOfExposure AND SiteID = @SiteID
	    
	DECLARE @Priority nvarchar(256) = NULL
	SET @Priority = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/Priority)[1]'',''nvarchar(256)'')
	DECLARE @RequirementPriorityID uniqueidentifier = NULL	
	IF @Priority IS NOT NULL AND @Priority <> ''''
	    SELECT TOP 1 @RequirementPriorityID = ID FROM tbl_RequirementPriority WHERE Title = @Priority AND SiteID = @SiteID	    
	    	    
	DECLARE @Complexity nvarchar(256) = NULL
	SET @Complexity = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/Complexity)[1]'',''nvarchar(256)'')
	DECLARE @RequirementComplexityID uniqueidentifier = NULL	
	IF @Complexity IS NOT NULL AND @Complexity <> ''''
	    SELECT TOP 1 @RequirementComplexityID = ID FROM tbl_RequirementComplexity WHERE Title = @Complexity AND SiteID = @SiteID
	
	DECLARE @Category nvarchar(250) = NULL
	SET @Category = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/Category)[1]'',''nvarchar(250)'')
	DECLARE @PublicationCategoryID uniqueidentifier = NULL	
	IF @Category IS NOT NULL AND @Category <> ''''
	    SELECT TOP 1 @PublicationCategoryID = ID FROM tbl_PublicationCategory WHERE Title = @Category AND SiteID = @SiteID	    
	
	DECLARE @Contract nvarchar(256) = NULL
	SET @Contract = @ParamsXml.value(''(/LeadForceRequest/Requirement/Relationship/Contract)[1]'',''nvarchar(256)'')
	DECLARE @ContractID uniqueidentifier = NULL	
	IF @Contract IS NOT NULL AND @Contract <> ''''
	    SELECT TOP 1 @ContractID = ID FROM tbl_Contract WHERE Number = @Contract AND SiteID = @SiteID	    
	    
	DECLARE @Order nvarchar(256) = NULL
	SET @Order = @ParamsXml.value(''(/LeadForceRequest/Requirement/Relationship/Order)[1]'',''nvarchar(256)'')
	DECLARE @OrderID uniqueidentifier = NULL	
	IF @Order IS NOT NULL AND @Order <> ''''
	    SELECT TOP 1 @OrderID = ID FROM tbl_Order WHERE Number = @Order AND SiteID = @SiteID
			    
	DECLARE @Invoice nvarchar(256) = NULL
	SET @Invoice = @ParamsXml.value(''(/LeadForceRequest/Requirement/Relationship/Invoice)[1]'',''nvarchar(256)'')
	DECLARE @InvoiceID uniqueidentifier = NULL	
	IF @Invoice IS NOT NULL AND @Invoice <> ''''
	    SELECT TOP 1 @InvoiceID = ID FROM tbl_Invoice WHERE Number = @Invoice AND SiteID = @SiteID
	    
	DECLARE @ImplementationComplete nvarchar(256) = NULL
	SET @ImplementationComplete = @ParamsXml.value(''(/LeadForceRequest/Requirement/ClientReview/ImplementationComplete)[1]'',''nvarchar(256)'')
	DECLARE @RequirementImplementationCompleteID uniqueidentifier = NULL	
	IF @ImplementationComplete IS NOT NULL AND @ImplementationComplete <> ''''
	    SELECT TOP 1 @RequirementImplementationCompleteID = ID FROM tbl_RequirementImplementationComplete WHERE Title = @ImplementationComplete AND SiteID = @SiteID
	
	DECLARE @SpeedTime nvarchar(256) = NULL
	SET @SpeedTime = @ParamsXml.value(''(/LeadForceRequest/Requirement/ClientReview/SpeedTime)[1]'',''nvarchar(256)'')
	DECLARE @RequirementSpeedTimeID uniqueidentifier = NULL	
	IF @SpeedTime IS NOT NULL AND @SpeedTime <> ''''
	    SELECT TOP 1 @RequirementSpeedTimeID = ID FROM tbl_RequirementSpeedTime WHERE Title = @SpeedTime AND SiteID = @SiteID
	    		
	DECLARE @Satisfaction nvarchar(256) = NULL
	SET @Satisfaction = @ParamsXml.value(''(/LeadForceRequest/Requirement/ClientReview/Satisfaction)[1]'',''nvarchar(256)'')
	DECLARE @RequirementSatisfactionID uniqueidentifier = NULL	
	IF @Satisfaction IS NOT NULL AND @Satisfaction <> ''''
	    SELECT TOP 1 @RequirementSatisfactionID = ID FROM tbl_RequirementSatisfaction WHERE Title = @Satisfaction AND SiteID = @SiteID
 
 	DECLARE @EstimationComment nvarchar(2048) = NULL
	SET @EstimationComment = @ParamsXml.value(''(/LeadForceRequest/Requirement/ClientReview/Comment)[1]'',''nvarchar(2048)'')
	
	DECLARE @EvaluationRequirementsProduct nvarchar(250) = NULL
	SET @EvaluationRequirementsProduct = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Product)[1]'',''nvarchar(255)'')
	DECLARE @EvaluationRequirementsProductID uniqueidentifier = NULL	
	IF @EvaluationRequirementsProduct IS NOT NULL AND @EvaluationRequirementsProduct <> ''''
	    SELECT TOP 1 @EvaluationRequirementsProductID = ID FROM tbl_Product WHERE Title = @EvaluationRequirementsProduct AND SiteID = @SiteID
 
	DECLARE @AnyProductName nvarchar(255) = NULL
	SET @AnyProductName = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/AnyProductName)[1]'',''nvarchar(255)'')
	
	DECLARE @Quantity decimal(18,4) = 0
	SET @Quantity = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Quantity)[1]'',''decimal(18,4)'')
 
 	DECLARE @Unit nvarchar(50) = NULL
	SET @Unit = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Unit)[1]'',''nvarchar(50)'')
	DECLARE @UnitID uniqueidentifier = NULL	
	IF @Unit IS NOT NULL AND @Unit <> ''''
	    SELECT TOP 1 @UnitID = ID FROM tbl_Unit WHERE Title = @Unit AND SiteID = @SiteID
	    
	DECLARE @Currency nvarchar(255) = NULL
	SET @Currency = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Currency)[1]'',''nvarchar(255)'')
	DECLARE @CurrencyID uniqueidentifier = NULL	
	IF @Currency IS NOT NULL AND @Currency <> ''''
	    SELECT TOP 1 @CurrencyID = ID FROM tbl_Currency WHERE Name = @Currency AND SiteID = @SiteID
	    
	DECLARE @Rate money = 1
	SET @Rate = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Quantity)[1]'',''money'')
	
	SET @Rate = (CASE WHEN @Rate = 0 THEN 1 ELSE @Rate END)
	
	DECLARE @CurrencyPrice money = 0
	SET @CurrencyPrice = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/CurrencyPrice)[1]'',''money'')
		
	DECLARE @CurrencyAmount money = 0
	SET @CurrencyAmount = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/CurrencyAmount)[1]'',''money'')
	
	DECLARE @Price money = 0
	SET @Price = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Price)[1]'',''money'')	
	
	DECLARE @Amount money = 0
	SET @Amount = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Amount)[1]'',''money'')
	
	DECLARE @EstimateCommentForClient nvarchar(2048) = 0
	SET @EstimateCommentForClient = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Comment)[1]'',''nvarchar(2048)'')
	    
	DECLARE @InternalQuantity decimal(18,4) = 0
	SET @InternalQuantity = @ParamsXml.value(''(/LeadForceRequest/Requirement/InternalEstimate/Quantity)[1]'',''decimal(18,4)'')
 
 	DECLARE @InternalUnit nvarchar(50) = NULL
	SET @InternalUnit = @ParamsXml.value(''(/LeadForceRequest/Requirement/InternalEstimate/Unit)[1]'',''nvarchar(50)'')
	DECLARE @InternalUnitID uniqueidentifier = NULL	
	IF @InternalUnit IS NOT NULL AND @InternalUnit <> ''''
	    SELECT TOP 1 @InternalUnitID = ID FROM tbl_Unit WHERE Title = @InternalUnit AND SiteID = @SiteID    
	    
	DECLARE @EstimateCommentInternal nvarchar(2048) = 0
	SET @EstimateCommentInternal = @ParamsXml.value(''(/LeadForceRequest/Requirement/InternalEstimate/Comment)[1]'',''nvarchar(2048)'')	    
	    	    
	IF (SELECT COUNT(*) FROM tbl_Requirement WHERE ID = @RequirementID AND SiteID = @SiteID) = 0
    BEGIN	    
	    INSERT [dbo].[tbl_Requirement] (
			[ID], 
			[SiteID], 
			[Number], 
			[SerialNumber], 
			[CreatedAt], 
			[ShortDescription], 
			[RequestID], 
			[CompanyID], 
			[ContactID], 
			[ProductID], 
			[ProductSeriesNumber], 
			[RequirementTypeID], 
			[ServiceLevelID], 
			[RequirementSeverityOfExposureID], 
			[ParentID], 
			[RequirementPriorityID], 
			[RequirementComplexityID], 
			[PublicationCategoryID], 
			[RequirementStatusID], 
			[ResponsibleID], 
			[RealizationDatePlanned], 
			[RealizationDateActual], 
			[ContractID], 
			[OrderID], 
			[InvoiceID], 
			[EvaluationRequirementsProductID], 
			[AnyProductName], 
			[Quantity], 
			[UnitID], 
			[CurrencyID], 
			[Rate], 
			[CurrencyPrice], 
			[CurrencyAmount], 
			[Price], 
			[Amount], 
			[RequirementImplementationCompleteID], 
			[RequirementSpeedTimeID], 
			[RequirementSatisfactionID], 
			[EstimationComment], 	    
			[RequestSourceTypeID], 
			[InternalQuantity], 
			[InternalUnitID], 
			[EstimateCommentInternal], 
			[EstimateCommentForClient]) 
	    VALUES (
			@RequirementID, 
			@SiteID, 
			'''', 
			0, 
			GETDATE(), 
			@ShortDescription, 
			@RequestID, 
			@CompanyID, 
			@ContactID, 
			@ProductID, 
			@ProductSeriesNumber, 
			@RequirementTypeID, 
			@ServiceLevelID,
			@RequirementSeverityOfExposureID, 
			@ParentID,
			@RequirementPriorityID,
			@RequirementComplexityID, 
			@PublicationCategoryID, 
			@RequirementStatusID, 
			@ResponsibleID, 
			@RealizationDatePlanned, 
			@RealizationDateActual, 
			@ContractID, 
			@OrderID, 
			@InvoiceID, 
			@EvaluationRequirementsProductID, 
			@AnyProductName, 
			@Quantity, 
			@UnitID, 
			@CurrencyID, 
			@Rate, 
			@CurrencyPrice, 
			@CurrencyAmount, 
			@Price, 
			@Amount, 
			@RequirementImplementationCompleteID, 
			@RequirementSpeedTimeID, 
			@RequirementSatisfactionID, 
			@EstimationComment, 	    
			@RequestSourceTypeID, 
			@InternalQuantity, 
			@InternalUnitID, 
			@EstimateCommentInternal,
			@EstimateCommentForClient
	    )
	    
	    SET @IsNew = 1
	END
	ELSE
	BEGIN
		UPDATE tbl_Requirement
		SET [ShortDescription] = @ShortDescription, 
			[RequestID] = @RequestID, 
			[CompanyID] = @CompanyID, 
			[ContactID] = @ContactID, 
			[ProductID] = @ProductID, 
			[ProductSeriesNumber] = @ProductSeriesNumber, 
			[RequirementTypeID] = @RequirementTypeID, 
			[ServiceLevelID] = @ServiceLevelID, 
			[RequirementSeverityOfExposureID] = @RequirementSeverityOfExposureID, 
			[ParentID] = @ParentID, 
			[RequirementPriorityID] = @RequirementPriorityID, 
			[RequirementComplexityID] = @RequirementComplexityID, 
			[PublicationCategoryID] = @PublicationCategoryID, 
			[RequirementStatusID] = @RequirementStatusID, 
			[ResponsibleID] = @ResponsibleID, 
			[RealizationDatePlanned] = @RealizationDatePlanned, 
			[RealizationDateActual] = @RealizationDateActual, 
			[ContractID] = @ContractID, 
			[OrderID] = @OrderID, 
			[InvoiceID] = @InvoiceID, 
			[EvaluationRequirementsProductID] = @EvaluationRequirementsProductID, 
			[AnyProductName] = @AnyProductName, 
			[Quantity] = @Quantity, 
			[UnitID] = @UnitID, 
			[CurrencyID] = @CurrencyID, 
			[Rate] = @Rate, 
			[CurrencyPrice] = @CurrencyPrice, 
			[CurrencyAmount] = @CurrencyAmount, 
			[Price] = @Price, 
			[Amount] = @Amount, 
			[RequirementImplementationCompleteID] = @RequirementImplementationCompleteID, 
			[RequirementSpeedTimeID] = @RequirementSpeedTimeID, 
			[RequirementSatisfactionID] = @RequirementSatisfactionID, 
			[EstimationComment] = @EstimationComment,
			[RequestSourceTypeID] = @RequestSourceTypeID, 
			[InternalQuantity] = @InternalQuantity, 
			[InternalUnitID] = @InternalUnitID, 
			[EstimateCommentInternal] = @EstimateCommentInternal, 
			[EstimateCommentForClient] = @EstimateCommentForClient
		WHERE ID = @RequirementID AND SiteID = @SiteID
	END
	
	DECLARE @CommentID uniqueidentifier
	DECLARE @CommentatorUserID uniqueidentifier
	DECLARE @Comment nvarchar(max)
	DECLARE @IsOfficialAnswer bit
	DECLARE @DestinationUserID uniqueidentifier
	DECLARE @ReplyToID uniqueidentifier
	
	DECLARE @Comments_Cursor xml
	DECLARE Comments_Cursor CURSOR FOR
	SELECT T.c.query(''.'') AS result
	FROM   @ParamsXml.nodes(''/LeadForceRequest/Requirement/Comments/Comment'') T(c)
	OPEN Comments_Cursor
	FETCH NEXT FROM Comments_Cursor INTO @Comments_Cursor
	WHILE @@FETCH_STATUS = 0
	BEGIN	
		SET @CommentID =null
		SET @CommentatorUserID = null		
		SET @IsOfficialAnswer = 0
		SET @DestinationUserID = null
		SET @ReplyToID = null
		SET @Comment = null			
				
		SET @CommentID = @Comments_Cursor.value(''(/Comment/@CommentID)[1]'',''uniqueidentifier'')
		SET @CommentatorUserID = @Comments_Cursor.value(''(/Comment/@UserID)[1]'',''uniqueidentifier'')
		SET @IsOfficialAnswer = @Comments_Cursor.value(''(/Comment/@IsOfficialAnswer)[1]'',''bit'')
		SET @DestinationUserID = @Comments_Cursor.value(''(/Comment/@DestinationUserID)[1]'',''uniqueidentifier'')
		SET @ReplyToID = @Comments_Cursor.value(''(/Comment/@ReplyToID)[1]'',''uniqueidentifier'')
		SET @Comment = @Comments_Cursor.value(''(/Comment/Text)[1]'',''nvarchar(max)'')
		
		IF @CommentatorUserID IS NULL
			SET @CommentatorUserID = @UserID

		IF @IsOfficialAnswer IS NULL
			SET @IsOfficialAnswer = 0
		
		IF @CommentID IS NOT NULL AND (SELECT COUNT(*) FROM tbl_RequirementComment WHERE ID = @CommentID AND ContentID = @RequirementID) = 0
		BEGIN
			INSERT INTO tbl_RequirementComment ([ID], [SiteID], [CreatedAt], [ContentID], [UserID], [Comment], [IsOfficialAnswer], [DestinationUserID], [ReplyToID])
			VALUES (@CommentID, @SiteID, GETDATE(), @RequirementID, @CommentatorUserID, @Comment, @IsOfficialAnswer, @DestinationUserID, @ReplyToID)
		END
		ELSE
		BEGIN
			UPDATE tbl_RequirementComment
			SET [Comment] = @Comment, [IsOfficialAnswer] = @IsOfficialAnswer
			WHERE ContentID = @RequirementID AND ID = @CommentID
		END
		
		FETCH NEXT FROM Comments_Cursor INTO @Comments_Cursor
	END
	CLOSE Comments_Cursor
	DEALLOCATE Comments_Cursor
	
	SELECT (CASE WHEN @IsNew = 1 THEN @RequirementID ELSE NULL END)
END' 


commit
exec LBC_SetVersion 168
END


/*******************************************************************************
	2012-04-26
	Обновление аналитики
*******************************************************************************/
if ( dbo.LBC_Version() < 169 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER FUNCTION [dbo].[Analytic_GetFilterQuery]
(
	@SQL nvarchar(max),
	@ColumnName varchar(100),
	@Value nvarchar(256),
	@FilterOperator int
)
RETURNS nvarchar(max)
AS
BEGIN
	IF @ColumnName IS NOT NULL AND @ColumnName <> ''''
	BEGIN
		IF @FilterOperator = 0
		BEGIN
			SET @SQL = @SQL + '' AND ('' + @ColumnName + '' = N'''''' + @Value + ''''''''
			IF @Value = ''''
				SET @SQL = @SQL + '' OR '' + @ColumnName + '' IS NULL''
			SET @SQL = @SQL + '')''
		END
		IF @FilterOperator = 1
		BEGIN
			SET @SQL = @SQL + '' AND ('' + @ColumnName + '' <> N'''''' + @Value + ''''''''
			IF @Value = ''''
				SET @SQL = @SQL + '' OR '' + @ColumnName + '' IS NOT NULL''
			SET @SQL = @SQL + '')''
		END
		IF @FilterOperator = 2
		BEGIN
			SET @SQL = @SQL + '' AND ('' + @ColumnName + '' LIKE N''''%'''''' + @Value + ''''''%''
			SET @SQL = @SQL + '')''
		END
	END
	
	RETURN @SQL
END'

UPDATE tbl_Analytic
SET Query = '
DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName varchar(100) = ''#FilterColumnName#''
DECLARE @Value nvarchar(256) = ''#FilterColumnValue#''
DECLARE @FilterOperator int = #FilterOperator#
DECLARE @SQL nvarchar(max)
DECLARE @Period nvarchar(256)

IF @GroupByDays = 1
	SET @Period = ''CAST(ca.CreatedAt AS DATE)''
ELSE
	SET @Period = ''DATEPART(HOUR, ca.CreatedAt)''

SET @SQL = ''SELECT A.CreatedAt AS Period, A.[Views], A.Visitors, A.Visits, A.PotentialViews, A.PerspectiveViews,
ISNULL(B.PotentialVisitors,0) AS PotentialVisitors, ISNULL(B.PotentialVisits,0) AS PotentialVisits,
ISNULL(C.PerspectiveVisitors,0) AS PerspectiveVisitors, ISNULL(C.PerspectiveVisits,0) AS PerspectiveVisits
FROM (SELECT '' + @Period + '' AS CreatedAt, 
COUNT(*) AS [Views],
COUNT(DISTINCT(ContactID)) AS [Visitors],
COUNT(DISTINCT(ContactSessionID)) AS [Visits],
COUNT(CASE WHEN TBLContact.UserFullName IS NOT NULL AND TBLContact.UserFullName <> '''''''' THEN 1 ELSE NULL END) AS [PotentialViews],
COUNT(CASE WHEN TBLContact.UserFullName IS NULL OR TBLContact.UserFullName = '''''''' THEN 1 ELSE NULL END) AS [PerspectiveViews]	
FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS TBLContact ON TBLContact.ID = CA.ContactID
WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator
	
SET @SQL = @SQL + '' GROUP BY '' + @Period + '' ) 
AS A LEFT JOIN (SELECT '' + @Period + '' AS CreatedAt,
COUNT(DISTINCT(ContactID)) AS [PotentialVisitors],
COUNT(DISTINCT(ContactSessionID)) AS [PotentialVisits]
FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS C ON C.ID = CA.ContactID
WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate
AND C.UserFullName IS NOT NULL AND C.UserFullName <> ''''''''
GROUP BY '' + @Period + ''
) AS B ON A.CreatedAt = B.CreatedAt 
LEFT JOIN (SELECT '' + @Period + '' AS CreatedAt, 
COUNT(DISTINCT(ContactID)) AS [PerspectiveVisitors],
COUNT(DISTINCT(ContactSessionID)) AS [PerspectiveVisits]
FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS C ON C.ID = CA.ContactID
WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate
AND (C.UserFullName IS NULL OR C.UserFullName = '''''''')
GROUP BY ''+ @Period +'' ) AS C ON A.CreatedAt = C.CreatedAt ''

IF @GroupByDays = 1
	SET @SQL = @SQL + ''ORDER BY CAST(A.CreatedAt AS DATE)''
ELSE
	SET @SQL = @SQL + ''ORDER BY DATEPART(HOUR, A.CreatedAt)''


EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate'

WHERE Title = N'Посещения'

ALTER TABLE tbl_AnalyticFilterValues DROP CONSTRAINT DF_tbl_AnalyticFilterValues_IsEqual
ALTER TABLE tbl_AnalyticFilterValues DROP COLUMN IsEqual

ALTER TABLE tbl_AnalyticFilterValues ADD FilterOperatorID int NOT NULL DEFAULT((0))

commit
exec LBC_SetVersion 169
END

GO

/*******************************************************************************
	2012-04-26
	Обновления
*******************************************************************************/
if ( dbo.LBC_Version() < 170 )
BEGIN
begin tran

UPDATE tbl_AnalyticFilterValues
SET FilterOperatorID = 1

UPDATE tbl_AnalyticFilterValues
SET FilterOperatorID = 0
WHERE Title = N'Перспективные клиенты'

commit
exec LBC_SetVersion 170
END

/*******************************************************************************
	2012-04-26
	Обновление аналитики
*******************************************************************************/
if ( dbo.LBC_Version() < 171 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[SplitExtended]
(
    @string NVARCHAR(max),
    @delimiter CHAR(1),
    @row int
)
RETURNS @output TABLE(
    data NVARCHAR(256)
)
BEGIN
    DECLARE @start INT, @end INT, @number INT
    SELECT @start = 1, @end = CHARINDEX(@delimiter, @string)
	
	SET @number = 1
	
    WHILE @start < LEN(@string) + 1 BEGIN
        IF @end = 0 
            SET @end = LEN(@string) + 1

		IF @row = 0 OR (@row <> 0 AND @number = @row)
		BEGIN
			INSERT INTO @output (data) 
			VALUES(SUBSTRING(@string, @start, @end - @start))
		END
        SET @start = @end + 1
        SET @end = CHARINDEX(@delimiter, @string, @start)
        
        SET @number = @number + 1
    END
    RETURN
END'

EXEC dbo.sp_executesql @statement = N'ALTER FUNCTION [dbo].[Analytic_GetFilterQuery]
(
	@SQL nvarchar(max),
	@ColumnName nvarchar(max),
	@Value nvarchar(max),
	@FilterOperator nvarchar(100)
)
RETURNS nvarchar(max)
AS
BEGIN
	DECLARE @Number int = 1
	DECLARE @CN nvarchar(256)
	DECLARE @V nvarchar(256)
	DECLARE @FO nvarchar(1)

	IF @ColumnName IS NOT NULL AND @ColumnName <> ''''
	BEGIN
		WHILE @Number <= (SELECT COUNT(*) FROM SplitExtended(@ColumnName, '','', 0))
		BEGIN
			SELECT TOP 1 @FO = data FROM SplitExtended(@FilterOperator, '','', @Number)
			SELECT TOP 1 @CN = data FROM SplitExtended(@ColumnName, '','', @Number)
			SELECT TOP 1 @V = data FROM SplitExtended(@Value, '','', @Number)
			
			IF @V IS NULL SET @V = ''''

			IF @FO = ''0''
			BEGIN
				SET @SQL = @SQL + '' AND ('' + @CN + '' = N'''''' + @V + ''''''''
				IF @Value = ''''
					SET @SQL = @SQL + '' OR '' + @CN + '' IS NULL''
				SET @SQL = @SQL + '')''
			END
			IF @FO = ''1''
			BEGIN
				SET @SQL = @SQL + '' AND ('' + @CN + '' <> N'''''' + @V + ''''''''
				IF @Value = ''''
					SET @SQL = @SQL + '' OR '' + @CN + '' IS NOT NULL''
				SET @SQL = @SQL + '')''
			END
			IF @FO = ''2''
			BEGIN
				SET @SQL = @SQL + '' AND ('' + @CN + '' LIKE N''''%'''''' + @V + ''''''%''
				SET @SQL = @SQL + '')''
			END
			
			SET @Number = @Number + 1
		END			
	END
	
	RETURN @SQL
END'

UPDATE tbl_Analytic
SET Query = '
DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = N''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)
DECLARE @Period nvarchar(256)

IF @GroupByDays = 1
	SET @Period = ''CAST(ca.CreatedAt AS DATE)''
ELSE
	SET @Period = ''DATEPART(HOUR, ca.CreatedAt)''

SET @SQL = ''SELECT A.CreatedAt AS Period, A.[Views], A.Visitors, A.Visits, A.PotentialViews, A.PerspectiveViews,
ISNULL(B.PotentialVisitors,0) AS PotentialVisitors, ISNULL(B.PotentialVisits,0) AS PotentialVisits,
ISNULL(C.PerspectiveVisitors,0) AS PerspectiveVisitors, ISNULL(C.PerspectiveVisits,0) AS PerspectiveVisits
FROM (SELECT '' + @Period + '' AS CreatedAt, 
COUNT(*) AS [Views],
COUNT(DISTINCT(ContactID)) AS [Visitors],
COUNT(DISTINCT(ContactSessionID)) AS [Visits],
COUNT(CASE WHEN TBLContact.UserFullName IS NOT NULL AND TBLContact.UserFullName <> '''''''' THEN 1 ELSE NULL END) AS [PotentialViews],
COUNT(CASE WHEN TBLContact.UserFullName IS NULL OR TBLContact.UserFullName = '''''''' THEN 1 ELSE NULL END) AS [PerspectiveViews]	
FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS TBLContact ON TBLContact.ID = CA.ContactID
WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator
	
SET @SQL = @SQL + '' GROUP BY '' + @Period + '' ) 
AS A LEFT JOIN (SELECT '' + @Period + '' AS CreatedAt,
COUNT(DISTINCT(ContactID)) AS [PotentialVisitors],
COUNT(DISTINCT(ContactSessionID)) AS [PotentialVisits]
FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS C ON C.ID = CA.ContactID
WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate
AND C.UserFullName IS NOT NULL AND C.UserFullName <> ''''''''
GROUP BY '' + @Period + ''
) AS B ON A.CreatedAt = B.CreatedAt 
LEFT JOIN (SELECT '' + @Period + '' AS CreatedAt, 
COUNT(DISTINCT(ContactID)) AS [PerspectiveVisitors],
COUNT(DISTINCT(ContactSessionID)) AS [PerspectiveVisits]
FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS C ON C.ID = CA.ContactID
WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate
AND (C.UserFullName IS NULL OR C.UserFullName = '''''''')
GROUP BY ''+ @Period +'' ) AS C ON A.CreatedAt = C.CreatedAt ''

IF @GroupByDays = 1
	SET @SQL = @SQL + ''ORDER BY CAST(A.CreatedAt AS DATE)''
ELSE
	SET @SQL = @SQL + ''ORDER BY DATEPART(HOUR, A.CreatedAt)''


EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate'

WHERE Title = N'Посещения'

INSERT [dbo].[tbl_Analytic] ([ID], [Title], [Query]) VALUES (N'5e7183b5-3800-45ad-b314-530ff5ae3022', N'Новые клиенты', N'DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = N''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)
DECLARE @Period nvarchar(256)

IF @GroupByDays = 1
	SET @Period = ''CAST(C.CreatedAt AS DATE)''
ELSE
	SET @Period = ''DATEPART(HOUR, C.CreatedAt)''

SET @SQL = ''SELECT '' + @Period + '' AS Period, TBLAdvertisingType.Title AS AdvertisingType, TBLAdvertisingPlatform.Title AS AdvertisingPlatform, 
TBLAdvertisingCampaign.Title AS AdvertisingCampaign, COUNT(*) AS RegisteredCount
FROM tbl_Contact AS C LEFT JOIN tbl_AdvertisingType AS TBLAdvertisingType ON C.AdvertisingTypeID = TBLAdvertisingType.ID
LEFT JOIN tbl_AdvertisingPlatform AS TBLAdvertisingPlatform ON C.AdvertisingPlatformID = TBLAdvertisingPlatform.ID
LEFT JOIN tbl_AdvertisingCampaign AS TBLAdvertisingCampaign ON C.AdvertisingCampaignID = TBLAdvertisingCampaign.ID
WHERE (C.AdvertisingTypeID IS NOT NULL OR C.AdvertisingPlatformID IS NOT NULL OR C.AdvertisingCampaignID IS NOT NULL) 
AND C.CreatedAt >= @StartDate AND C.CreatedAt <= @EndDate AND C.SiteID = @SiteID ''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + ''GROUP BY '' + @Period +'', TBLAdvertisingType.Title, TBLAdvertisingPlatform.Title, TBLAdvertisingCampaign.Title
ORDER BY '' + @Period

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate')

commit
exec LBC_SetVersion 171
END

/*******************************************************************************
	2012-05-04
	Обновление API
*******************************************************************************/
if ( dbo.LBC_Version() < 172 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[API_GetContacts]
	(
	    @SiteID uniqueidentifier,
	    @ParamsXml xml
	)
AS
BEGIN

	DECLARE @ContactID uniqueidentifier = NULL
	SELECT @ContactID = ContactID.V.value(''@value'',''uniqueidentifier'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/ContactID'') as ContactID(V)

    DECLARE @CreatedAtStart DATETIME = NULL
    DECLARE @CreatedAtEnd DATETIME = NULL        
	SELECT @CreatedAtStart = CreateDate.Dates.value(''@start'',''datetime''), @CreatedAtEnd = CreateDate.Dates.value(''@end'',''datetime'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/CreatedAt'') as CreateDate(Dates)
	
	DECLARE @LastActivityAtStart DATETIME = NULL
    DECLARE @LastActivityAtEnd DATETIME = NULL
	SELECT @LastActivityAtStart = LastActivityAt.Dates.value(''@start'',''datetime''), @LastActivityAtEnd = LastActivityAt.Dates.value(''@end'',''datetime'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/LastActivityAt'') as LastActivityAt(Dates)
	
	DECLARE @RefferURL nvarchar(2000) = NULL
	SELECT @RefferURL = RefferUrl.V.value(''@value'',''nvarchar(2000)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/RefferURL'') as RefferUrl(V)
	
	DECLARE @UserIP nvarchar(15) = NULL
	SELECT @UserIP = UserIP.V.value(''@value'',''nvarchar(15)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/UserIP'') as UserIP(V)
	
	DECLARE @UserFullName nvarchar(255) = NULL
	SELECT @UserFullName = UserFullName.V.value(''@value'',''nvarchar(255)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/UserFullName'') as UserFullName(V)
	
	DECLARE @Email nvarchar(255) = NULL
	SELECT @Email = Email.V.value(''@value'',''nvarchar(255)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/Email'') as Email(V)
	
	DECLARE @Phone nvarchar(50) = NULL
	SELECT @Phone = Phone.V.value(''@value'',''nvarchar(50)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/Phone'') as Phone(V)
	
	DECLARE @ReadyToSell nvarchar(250) = NULL
	SELECT @ReadyToSell = ReadyToSell.V.value(''@value'',''nvarchar(250)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/ReadyToSell'') as ReadyToSell(V)
	
	DECLARE @Priority nvarchar(255) = NULL
	SELECT @Priority = Priorities.V.value(''@value'',''nvarchar(255)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/Priority'') as Priorities(V)
	
	DECLARE @Status nvarchar(250) = NULL
	SELECT @Status = Statuses.V.value(''@value'',''nvarchar(255)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/Status'') as Statuses(V)
	
	DECLARE @Score int = NULL
	SELECT @Score = Score.V.value(''@value'',''int'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/Score'') as Score(V)
	
	DECLARE @BehaviorScore int = NULL
	SELECT @BehaviorScore = BehaviorScore.V.value(''@value'',''int'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/BehaviorScore'') as BehaviorScore(V)
	
	DECLARE @CharacteristicsScore int = NULL
	SELECT @CharacteristicsScore = CharacteristicsScore.V.value(''@value'',''int'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/CharacteristicsScore'') as CharacteristicsScore(V)
	
	DECLARE @IsNameChecked bit = NULL
	SELECT @IsNameChecked = IsNameChecked.V.value(''@value'',''bit'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/IsNameChecked'') as IsNameChecked(V)
	
	DECLARE @Surname nvarchar(255) = NULL
	SELECT @Surname = Surname.V.value(''@value'',''nvarchar(255)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/Surname'') as Surname(V)
	
	DECLARE @Name nvarchar(255) = NULL
	SELECT @Name = Name.V.value(''@value'',''nvarchar(255)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/Name'') as Name(V)
	
	DECLARE @Patronymic nvarchar(255) = NULL
	SELECT @Patronymic = Patronymic.V.value(''@value'',''nvarchar(255)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/Patronymic'') as Patronymic(V)
	
	DECLARE @CellularPhone nvarchar(50) = NULL
	SELECT @CellularPhone = CellularPhone.V.value(''@value'',''nvarchar(50)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/CellularPhone'') as CellularPhone(V)
	
	DECLARE @CellularPhoneStatus int = NULL
	SELECT @CellularPhoneStatus = CellularPhoneStatus.V.value(''@value'',''int'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/CellularPhoneStatus'') as CellularPhoneStatus(V)	
	
	DECLARE @EmailStatus int = NULL
	SELECT @EmailStatus = EmailStatus.V.value(''@value'',''int'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/EmailStatus'') as EmailStatus(V)	
	
	DECLARE @Gender int = NULL
	SELECT @Gender = Gender.V.value(''@value'',''int'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/Gender'') as Gender(V)	
	
	DECLARE @ContactType nvarchar(250) = NULL
	SELECT @ContactType = ContactType.V.value(''@value'',''nvarchar(250)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/ContactType'') as ContactType(V)
	
	DECLARE @JobTitle nvarchar(250) = NULL
	SELECT @JobTitle = JobTitle.V.value(''@value'',''nvarchar(250)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/JobTitle'') as JobTitle(V)
	
	DECLARE @Company nvarchar(255) = NULL
	SELECT @Company = Company.V.value(''@value'',''nvarchar(255)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/Company'') as Company(V)
	
	DECLARE @Owner nvarchar(255) = NULL
	SELECT @Owner = Owners.V.value(''@value'',''nvarchar(255)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/Owner'') as Owners(V)
	
	DECLARE @BirthDateStart DATETIME = NULL
    DECLARE @BirthDateEnd DATETIME = NULL
	SELECT @BirthDateStart = BirthDate.Dates.value(''@start'',''datetime''), @BirthDateEnd = BirthDate.Dates.value(''@end'',''datetime'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/BirthDate'') as BirthDate(Dates)
	
	DECLARE @ContactFunctionInCompany nvarchar(250) = NULL
	SELECT @ContactFunctionInCompany = ContactFunctionInCompany.V.value(''@value'',''nvarchar(250)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/ContactFunctionInCompany'') as ContactFunctionInCompany(V)
	
	DECLARE @ContactJobLevel nvarchar(250) = NULL
	SELECT @ContactJobLevel = ContactJobLevel.V.value(''@value'',''nvarchar(250)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/ContactJobLevel'') as ContactJobLevel(V)
	
	DECLARE @Address nvarchar(max) = NULL
	SELECT @Address = Addresses.V.value(''@value'',''nvarchar(max)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/Address'') as Addresses(V)
	
	DECLARE @Country nvarchar(255) = NULL
	SELECT @Country = Country.V.value(''@value'',''nvarchar(255)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/Country'') as Country(V)
	
	DECLARE @Region nvarchar(255) = NULL
	SELECT @Region = Region.V.value(''@value'',''nvarchar(255)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/Region'') as Region(V)
	
	DECLARE @District nvarchar(255) = NULL
	SELECT @District = District.V.value(''@value'',''nvarchar(255)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/District'') as District(V)
	
	DECLARE @City nvarchar(255) = NULL
	SELECT @City = City.V.value(''@value'',''nvarchar(255)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/City'') as City(V)
	
	DECLARE @Reffer nvarchar(255) = NULL
	SELECT @Reffer = Reffer.V.value(''@value'',''nvarchar(255)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/Reffer'') as Reffer(V)
	
	DECLARE @AdvertisingType nvarchar(256) = NULL
	SELECT @AdvertisingType = AdvertisingType.V.value(''@value'',''nvarchar(256)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/AdvertisingType'') as AdvertisingType(V)
		
	DECLARE @AdvertisingPlatform nvarchar(256) = NULL
	SELECT @AdvertisingPlatform = AdvertisingPlatform.V.value(''@value'',''nvarchar(256)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/AdvertisingPlatform'') as AdvertisingPlatform(V)
		
	DECLARE @AdvertisingCampaign nvarchar(256) = NULL
	SELECT @AdvertisingCampaign = AdvertisingCampaign.V.value(''@value'',''nvarchar(256)'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Contact/Params/AdvertisingCampaign'') as AdvertisingCampaign(V)
	
	SELECT ctct.ID as ''@ContactID'',
	       ctct.CreatedAt AS ''@CreatedAt'',	       
	       ctct.LastActivityAt AS ''@LastActivityAt'',
	       ctct.UserFullName AS ''UserFullName'',
	       ctct.Surname AS ''Surname'',
	       ctct.Name AS ''Name'',
	       ctct.Gender AS ''Gender'',
	       ctct.Patronymic AS ''Patronymic'',
	       ctct.RefferURL AS ''RefferUrl'',
	       ctct.UserIP AS ''UserIP'',	       
	       ctct.Email AS ''Email'',
	       ctct.Phone AS ''Phone'',
	       rts.Title AS ''ReadyToSell'',
	       prts.Title AS ''Priority'',
	       sts.Title AS ''Status'',
	       ctct.Score AS ''Score'',
	       ctct.BehaviorScore AS ''BehaviorScore'',
	       ctct.CharacteristicsScore AS ''CharacteristicsScore'',
	       ctct.IsNameChecked AS ''IsNameChecked'',	       
	       ctct.CellularPhone AS ''CellularPhone'',
	       ctct.CellularPhoneStatusID AS ''CellularPhoneStatus'',
	       ctct.EmailStatusID AS ''EmailStatus'',
	       ctcttype.Name AS ''ContactType'',
	       ctct.JobTitle AS ''JobTitle'',
	       cmpny.Name AS ''Company'',
	       ownerctct.UserFullName AS ''Owner'',
	       ctct.BirthDate AS ''BirthDate'',
	       ctctfnincmpny.Name AS ''ContactFunctionInCompany'',
	       ctctjoblvl.Name AS ''ContactJobLevel'',
	       refferctct.UserFullName AS ''Reffer'',
	       advtype.Title AS ''AdvertisingType'',
	       advplatform.Title AS ''AdvertisingPlatform'',
	       advcampaign.Title AS ''AdvertisingCampaign'',
	       addr.[Address] as ''Address/@Address'',
	       cntry.Name as ''Address/Country'',
	       region.Name as ''Address/Region'',
	       district.Name as ''Address/District'',	       
	       city.Name as ''Address/City''
	FROM tbl_Contact as ctct LEFT JOIN tbl_Address AS addr ON ctct.AddressID = addr.ID
	LEFT JOIN tbl_Country as cntry ON addr.CountryID = cntry.ID
	LEFT JOIN tbl_City as city ON addr.CityID = city.ID
	LEFT JOIN tbl_District as district ON addr.DistrictID = district.ID
	LEFT JOIN tbl_Region as region ON addr.RegionID = region.ID	
	LEFT JOIN tbl_ReadyToSell as rts ON ctct.ReadyToSellID = rts.ID
	LEFT JOIN tbl_Priorities as prts ON ctct.PriorityID = prts.ID
	LEFT JOIN tbl_Status as sts ON ctct.StatusID = sts.ID
	LEFT JOIN tbl_ContactType as ctcttype ON ctct.ContactTypeID = ctcttype.ID
	LEFT JOIN tbl_Company as cmpny ON ctct.CompanyID = cmpny.ID
	LEFT JOIN tbl_Contact as ownerctct ON ctct.OwnerID = ownerctct.ID
	LEFT JOIN tbl_ContactFunctionInCompany as ctctfnincmpny ON ctct.ContactFunctionInCompanyID = ctctfnincmpny.ID
	LEFT JOIN tbl_ContactJobLevel as ctctjoblvl ON ctct.ContactJobLevelID = ctctjoblvl.ID
	LEFT JOIN tbl_Contact as refferctct ON ctct.OwnerID = refferctct.ID
	LEFT JOIN tbl_AdvertisingType as advtype ON ctct.AdvertisingTypeID = advtype.ID
	LEFT JOIN tbl_AdvertisingPlatform as advplatform ON ctct.AdvertisingPlatformID = advplatform.ID
	LEFT JOIN tbl_AdvertisingCampaign as advcampaign ON ctct.AdvertisingCampaignID = advcampaign.ID
	WHERE ctct.SiteID = @SiteID
			AND (@ContactID IS NULL OR ctct.ID = @ContactID)
	        AND (@CreatedAtStart IS NULL AND @CreatedAtEnd IS NULL OR (@CreatedAtStart IS NOT NULL AND @CreatedAtEnd IS NOT NULL AND ctct.CreatedAt >= @CreatedAtStart AND ctct.CreatedAt <= @CreatedAtEnd))
	        AND (@LastActivityAtStart IS NULL AND @LastActivityAtEnd IS NULL OR (@LastActivityAtStart IS NOT NULL AND @LastActivityAtEnd IS NOT NULL AND ctct.LastActivityAt >= @LastActivityAtStart AND ctct.LastActivityAt <= @LastActivityAtEnd))
	        AND (@RefferURL IS NULL OR ctct.RefferURL LIKE N''%'' + @RefferURL + ''%'')
	        AND (@UserIP IS NULL OR ctct.UserIP LIKE N''%'' + @UserIP + ''%'')
	        AND (@UserFullName IS NULL OR ctct.UserFullName LIKE N''%'' + @UserFullName + ''%'')
	        AND (@Email IS NULL OR ctct.Email LIKE N''%'' + @Email + ''%'')
	        AND (@Phone IS NULL OR ctct.Phone LIKE N''%'' + @Phone + ''%'')
	        AND (@ReadyToSell IS NULL OR rts.Title LIKE N''%'' + @ReadyToSell + ''%'')
	        AND (@Priority IS NULL OR prts.Title LIKE N''%'' + @Priority + ''%'')
	        AND (@Status IS NULL OR sts.Title LIKE N''%'' + @Status + ''%'')
	        AND (@Score IS NULL OR ctct.Score = @Score)
	        AND (@BehaviorScore IS NULL OR ctct.BehaviorScore = @BehaviorScore)
	        AND (@CharacteristicsScore IS NULL OR ctct.CharacteristicsScore = @CharacteristicsScore)
	        AND (@IsNameChecked IS NULL OR ctct.IsNameChecked = @IsNameChecked)
	        AND (@Surname IS NULL OR ctct.Surname LIKE N''%'' + @Surname + ''%'')
	        AND (@Name IS NULL OR ctct.Name LIKE N''%'' + @Name + ''%'')
	        AND (@Patronymic IS NULL OR ctct.Patronymic LIKE N''%'' + @Patronymic + ''%'')
	        AND (@CellularPhone IS NULL OR ctct.CellularPhone LIKE N''%'' + @CellularPhone + ''%'')
	        AND (@CellularPhoneStatus IS NULL OR ctct.CellularPhoneStatusID = @CellularPhoneStatus)
	        AND (@EmailStatus IS NULL OR ctct.EmailStatusID = @EmailStatus)
	        AND (@ContactType IS NULL OR ctcttype.Name LIKE N''%'' + @ContactType + ''%'')
	        AND (@JobTitle IS NULL OR ctct.JobTitle LIKE N''%'' + @JobTitle + ''%'')
	        AND (@Company IS NULL OR cmpny.Name LIKE N''%'' + @Company + ''%'')
	        AND (@Owner IS NULL OR ownerctct.UserFullName LIKE N''%'' + @Owner + ''%'')
	        AND (@BirthDateStart IS NULL AND @BirthDateEnd IS NULL OR (@BirthDateStart IS NOT NULL AND @BirthDateEnd IS NOT NULL AND ctct.BirthDate >= @BirthDateStart AND ctct.BirthDate <= @BirthDateEnd))
	        AND (@ContactFunctionInCompany IS NULL OR ctctfnincmpny.Name LIKE N''%'' + @ContactFunctionInCompany + ''%'')
	        AND (@ContactJobLevel IS NULL OR ctctjoblvl.Name LIKE N''%'' + @ContactJobLevel + ''%'')
	        AND (@Address IS NULL OR addr.[Address] LIKE N''%'' + @Address + ''%'')
	        AND (@Country IS NULL OR cntry.Name LIKE N''%'' + @Country + ''%'')
	        AND (@Region IS NULL OR region.Name LIKE N''%'' + @Region + ''%'')
	        AND (@District IS NULL OR district.Name LIKE N''%'' + @District + ''%'')
	        AND (@City IS NULL OR city.Name LIKE N''%'' + @City + ''%'')
	        AND (@Reffer IS NULL OR refferctct.UserFullName LIKE N''%'' + @Reffer + ''%'')
	        AND (@AdvertisingType IS NULL OR advtype.Title LIKE N''%'' + @AdvertisingType + ''%'')
	        AND (@AdvertisingPlatform IS NULL OR advplatform.Title LIKE N''%'' + @AdvertisingPlatform + ''%'')
	        AND (@AdvertisingCampaign IS NULL OR advcampaign.Title LIKE N''%'' + @AdvertisingCampaign + ''%'')	       
	        AND (@Gender IS NULL OR ctct.Gender = @Gender)
	        	      
	FOR XML PATH(''Contact''), TYPE, ELEMENTS, ROOT(''Contacts'')    
	
END' 

commit
exec LBC_SetVersion 172
END

/*******************************************************************************
	2012-05-05
	Добавление элемента процесса "Сегментация"
*******************************************************************************/
if ( dbo.LBC_Version() < 173 )
BEGIN
begin tran

CREATE TABLE [dbo].[tbl_WorkflowTemplateElementTag](
	[ID] [uniqueidentifier] NOT NULL,
	[WorkflowTemplateElementID] [uniqueidentifier] NOT NULL,
	[SiteTagID] [uniqueidentifier] NOT NULL,
	[Operation] [int] NOT NULL,
 CONSTRAINT [PK_tbl_WorkflowTemplateElementTag] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[tbl_WorkflowTemplateElementTag]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WorkflowTemplateElementTag_tbl_WorkflowTemplateElement] FOREIGN KEY([WorkflowTemplateElementID])
REFERENCES [dbo].[tbl_WorkflowTemplateElement] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_WorkflowTemplateElementTag] CHECK CONSTRAINT [FK_tbl_WorkflowTemplateElementTag_tbl_WorkflowTemplateElement]
ALTER TABLE [dbo].[tbl_WorkflowTemplateElementTag] ADD  CONSTRAINT [DF_tbl_WorkflowTemplateElementTag_ID]  DEFAULT (newid()) FOR [ID]

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[WorkflowProcessing]
(
	@_WorkflowElementID uniqueidentifier, -- Входящий элемент
	@_StartElementResult nvarchar(255) = NULL -- Результат выполнения элемента процесса
)
AS
BEGIN
	DECLARE @_SiteID uniqueidentifier
	DECLARE @_WorkflowStartDate datetime
	DECLARE @_WorkflowID uniqueidentifier
	DECLARE @_WorkflowTemplateContactID uniqueidentifier
	DECLARE @_WorkflowTemplateElementID uniqueidentifier
	DECLARE @_WorkflowParameterID uniqueidentifier
	DECLARE @_ControlDate datetime
	DECLARE @_WorkflowStatus int = 0
	DECLARE @_WorkflowResult nvarchar(255)
	
	DECLARE @_StartAfter int
	DECLARE @_StartPeriod int
	DECLARE @_DurationHours int
	DECLARE @_DurationMinutes int
	DECLARE @_ControlAfter int
	DECLARE @_ControlPeriod int
	DECLARE @_ControlFromBeginProccess bit
	
	SELECT @_WorkflowID=w.WorkflowID,
		   @_WorkflowTemplateElementID=w.WorkflowTemplateElementID,
		   @_ControlDate=w.ControlDate,
		   @_WorkflowTemplateContactID=wt.ContactID
		   --@_StartAfter=t.StartAfter,
		   --@_StartPeriod=t.StartPeriod,
		   --@_ControlAfter=t.ControlAfter,
		   --@_ControlPeriod=t.ControlPeriod,
		   --@_ControlFromBeginProccess=t.ControlFromBeginProccess
	FROM tbl_WorkflowElement AS w
	LEFT JOIN tbl_WorkflowTemplateElement AS t ON t.ID=w.WorkflowTemplateElementID
	LEFT JOIN tbl_WorkflowTemplate AS wt ON wt.ID=t.WorkflowTemplateID
	WHERE w.ID=@_WorkflowElementID AND (t.ElementType<>1 OR (t.ElementType=1 AND w.[Status]=0))
	
	SELECT @_SiteID=SiteID, @_WorkflowStartDate=StartDate
	FROM tbl_Workflow
	WHERE ID=@_WorkflowID
	
	

	
	-- Выбираем все элементы по связям, где входящий элемент является начальным
	-- и с выходящим результатом
	SELECT EndElementID
	INTO #WorkflowTemplateElementRelation
	FROM tbl_WorkflowTemplateElementRelation
	WHERE StartElementID=@_WorkflowTemplateElementID AND (StartElementResult=@_StartElementResult OR @_StartElementResult IS NULL)
	
	-- Если выходы с элемента есть
	IF ((SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0)
	BEGIN
		SET @_WorkflowStatus = 1
		
		-- Входящие элемент не просрочен
		IF ((@_ControlDate IS NULL) OR (@_ControlDate > GETDATE()))
		BEGIN
					WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0
					BEGIN
						SELECT TOP 1 @_WorkflowTemplateElementID=EndElementID
						FROM #WorkflowTemplateElementRelation
						
						IF ((SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND WorkflowTemplateElementID=@_WorkflowTemplateElementID) = 0)
						BEGIN
							DECLARE @_WorkflowTemplateElementType int
							DECLARE @_WorkflowTemplateElementName nvarchar(255)
							SELECT @_WorkflowTemplateElementType=ElementType, @_WorkflowTemplateElementName=Name
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							DECLARE @_InsertedWorkflowElementID uniqueidentifier = NEWID()
							
	SELECT @_StartAfter=StartAfter,
		   @_StartPeriod=StartPeriod,
		   @_DurationHours=DurationHours,
		   @_DurationMinutes=DurationMinutes,
		   @_ControlAfter=ControlAfter,
		   @_ControlPeriod=ControlPeriod,
		   @_ControlFromBeginProccess=ControlFromBeginProccess
	FROM tbl_WorkflowTemplateElement
	WHERE ID=@_WorkflowTemplateElementID
							
							-- Тип элемента "Окончание процесса"
							IF (@_WorkflowTemplateElementType=6)
							BEGIN
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 1)
								
								UPDATE tbl_Workflow
								SET EndDate=GETDATE()
								WHERE ID=@_WorkflowID
							END
							
							-- определяем параметер
							SET @_WorkflowParameterID =
							(SELECT tbl_WorkflowParameter.[Value]
							FROM tbl_WorkflowParameter
							LEFT JOIN tbl_WorkflowTemplateParameter ON tbl_WorkflowTemplateParameter.ID=tbl_WorkflowParameter.WorkflowTemplateParameterID
							WHERE tbl_WorkflowParameter.WorkflowID=@_WorkflowID
								  AND tbl_WorkflowTemplateParameter.Name=N''Контакт''
								  AND tbl_WorkflowTemplateParameter.IsSystem=1)
								  
							-- определяем через сколько запускать элемент, если 0 то сразу
							DECLARE @_ActionDate datetime = GETDATE()
							IF (@_StartAfter <> 0)
							BEGIN
								SET @_ActionDate = CASE
									WHEN @_StartPeriod = 0 THEN DATEADD(minute, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 1 THEN DATEADD(hour, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 2 THEN DATEADD(day, @_StartAfter, @_ActionDate)
								END
							END
							
							-- дата контроля
							SET @_ControlDate = GETDATE()
							IF (@_ControlFromBeginProccess=1) -- От начала процесса
							BEGIN
								SET @_ControlDate = @_WorkflowStartDate
							END
							
							SET @_ControlDate = CASE
								WHEN @_ControlPeriod = 0 THEN DATEADD(minute, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 1 THEN DATEADD(hour, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 2 THEN DATEADD(day, @_ControlAfter, @_ControlDate)
							END
							
							
							-- Тип элемента "Сообщение"
							IF (@_WorkflowTemplateElementType = 0)
							BEGIN
								-- Начало добавления сообщения в очередь
								DECLARE @_SiteActionTemplateID uniqueidentifier = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActionTemplateID'')
								
								DECLARE @MessageTitle nvarchar(255)
								DECLARE @MessageText nvarchar(max)
								SELECT @MessageTitle=MessageCaption, @MessageText=MessageBody
								FROM tbl_SiteActionTemplate
								WHERE ID=@_SiteActionTemplateID
								
								DECLARE @_SiteActionID uniqueidentifier = NEWID()
								INSERT INTO tbl_SiteAction (ID, SiteID, SiteActionTemplateID, ContactID, ActionStatusID, ActionDate, MessageTitle, MessageText)
								VALUES (@_SiteActionID, @_SiteID, @_SiteActionTemplateID, @_WorkflowParameterID, 1, @_ActionDate, @MessageTitle, @MessageText)
								-- Конец добавления сообщения в очередь
								
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_SiteActionID)
							END
							
							-- Тип элемента "Ожидание события"
							IF (@_WorkflowTemplateElementType = 2)
							BEGIN
								IF (@_ControlAfter<>0)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], ControlDate)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_ControlDate)
								END
								ELSE
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0)
								END
							END
							
							-- Тип элемента "Действие"
							IF (@_WorkflowTemplateElementType = 3)
							BEGIN
								-- Начало добавления действия
								DECLARE @_ContactActivityDescription nvarchar(255) = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ContactActivityDescription'')
								
								DECLARE @_ContactActivityID uniqueidentifier = NEWID()
								INSERT INTO tbl_ContactActivity (ID, SiteID, ContactID, CreatedAt, ActivityTypeID, ActivityCode)
								VALUES (@_ContactActivityID, @_SiteID, @_WorkflowParameterID, GETDATE(), 13, @_ContactActivityDescription)
								-- Конец добавления действия
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1, @_ContactActivityID)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Задача"
							IF (@_WorkflowTemplateElementType = 1)
							BEGIN
								-- Начало добавления задачи
								DECLARE @_TaskID uniqueidentifier = NEWID()
								DECLARE @_TaskTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskType'') AS uniqueidentifier)
								
								DECLARE @_IsImportantTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsImportantTask'') AS bit)
								
								DECLARE @_IsUrgentTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsUrgentTask'') AS bit)
								
								DECLARE @_TaskEndDate datetime = @_ActionDate
								SET @_TaskEndDate = DATEADD(hour, @_DurationHours, @_TaskEndDate)
								SET @_TaskEndDate = DATEADD(minute, @_DurationMinutes, @_TaskEndDate)
								INSERT INTO tbl_Task (ID, SiteID, Title, TaskTypeID, StartDate, EndDate, DateOfControl, IsImportantTask, PlanDurationMinutes, PlanDurationHours, ResponsibleID, CreatorID, IsUrgentTask, TaskStatusID)
								VALUES (@_TaskID, @_SiteID, @_WorkflowTemplateElementName, @_TaskTypeID, @_ActionDate, @_TaskEndDate, @_ControlDate, @_IsImportantTask, @_DurationMinutes, @_DurationHours, @_WorkflowTemplateContactID, @_WorkflowTemplateContactID, @_IsUrgentTask, 1)
								-- Конец добавления задачи
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, ControlDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), @_ControlDate, 0, @_TaskID)
							END
							
							-- Тип элемента "Сегментация"
							IF (@_WorkflowTemplateElementType = 7)
							BEGIN
								SELECT ID
								INTO #WorkflowTemplateElementTag
								FROM tbl_WorkflowTemplateElementTag
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID
								
								DECLARE @_WorkflowTemplateElementTagID uniqueidentifier
								DECLARE @_SiteTagID uniqueidentifier
								DECLARE @_Operation int
								WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementTag) > 0
								BEGIN
									SELECT TOP 1 @_WorkflowTemplateElementTagID=ID
									FROM #WorkflowTemplateElementTag
									
									SELECT @_SiteTagID=SiteTagID, @_Operation=Operation
									FROM tbl_WorkflowTemplateElementTag
									WHERE ID=@_WorkflowTemplateElementTagID
									
									IF (@_Operation = 0)
									BEGIN
										DELETE FROM tbl_SiteTagObjects
										WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID
									END
									ELSE
									BEGIN
										IF (SELECT COUNT(*) FROM tbl_SiteTagObjects WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID) = 0
										BEGIN
											INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID)
											VALUES (@_SiteTagID, @_WorkflowParameterID)
										END
									END
									
									DELETE #WorkflowTemplateElementTag WHERE ID=@_WorkflowTemplateElementTagID
								END
								DROP TABLE #WorkflowTemplateElementTag

								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
						END
						
						DELETE #WorkflowTemplateElementRelation WHERE EndElementID=@_WorkflowTemplateElementID
					END
					DROP TABLE #WorkflowTemplateElementRelation
		END
		-- Входящие элемент просрочен
		ELSE
		BEGIN
			SET @_WorkflowStatus = 3
		END
	END
	-- Если нет выходов с элемента
	ELSE
	BEGIN
		SET @_WorkflowStatus = 2
	END
	
	
	-- Обновление статуса элемента процесса
	UPDATE tbl_WorkflowElement
	SET EndDate=GETDATE(),
		[Status]=@_WorkflowStatus,
		Result=@_StartElementResult
	WHERE ID=@_WorkflowElementID
END
'
commit
exec LBC_SetVersion 173
END

/*******************************************************************************
	2012-05-07
	Убрана привязка отчетов к SiteId
*******************************************************************************/
if ( dbo.LBC_Version() < 174 )
BEGIN
begin tran

--DELETE FROM tbl_AnalyticReportToAnalyticSeries
--WHERE AnalyticReportID IN (SELECT ID FROM tbl_AnalyticReport WHERE SiteID <> '9ad82292-465b-4697-b3b3-8bb66e7ff04b')

--DELETE FROM tbl_AnalyticReportToAnalyticSeries
--WHERE AnalyticSeriesID IN (SELECT ID FROM tbl_AnalyticSeries WHERE SiteID <> '9ad82292-465b-4697-b3b3-8bb66e7ff04b')

--DELETE FROM tbl_AnalyticReport WHERE SiteID <> '9ad82292-465b-4697-b3b3-8bb66e7ff04b'

--DELETE FROM tbl_AnalyticSeries WHERE SiteID <> '9ad82292-465b-4697-b3b3-8bb66e7ff04b'

--ALTER TABLE tbl_AnalyticReport DROP CONSTRAINT FK_tbl_AnalyticReport_tbl_Sites
--ALTER TABLE tbl_AnalyticReport DROP COLUMN SiteID

--ALTER TABLE tbl_AnalyticSeries DROP CONSTRAINT FK_tbl_AnalyticSeries_tbl_Sites
--ALTER TABLE tbl_AnalyticSeries DROP COLUMN SiteID

commit
exec LBC_SetVersion 174
END

/*******************************************************************************
	2012-05-08
	Обновление аналитики
*******************************************************************************/
if ( dbo.LBC_Version() < 175 )
BEGIN
begin tran

DROP TABLE tbl_AnalyticReportToAnalyticSeries
DROP TABLE tbl_AnalyticSeries
DROP TABLE tbl_AnalyticReport
DROP TABLE tbl_AnalyticFilterValues
DROP TABLE tbl_AnalyticFilter
DROP TABLE tbl_AnalyticAxis
DROP TABLE tbl_Analytic

CREATE TABLE [dbo].[tbl_Analytic](
	[ID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](512) NOT NULL,
	[Query] [ntext] NOT NULL,
 CONSTRAINT [PK_tbl_Analytic] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

INSERT [dbo].[tbl_Analytic] ([ID], [Title], [Query]) VALUES (N'5e7183b5-3800-45ad-b314-530ff5ae3022', N'Новые клиенты', N'DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = N''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)
DECLARE @Period nvarchar(256)

IF @GroupByDays = 1
	SET @Period = ''CAST(C.CreatedAt AS DATE)''
ELSE
	SET @Period = ''DATEPART(HOUR, C.CreatedAt)''

SET @SQL = ''SELECT '' + @Period + '' AS Period, TBLAdvertisingType.Title AS AdvertisingType, TBLAdvertisingPlatform.Title AS AdvertisingPlatform, 
TBLAdvertisingCampaign.Title AS AdvertisingCampaign, COUNT(*) AS RegisteredCount
FROM tbl_Contact AS C LEFT JOIN tbl_AdvertisingType AS TBLAdvertisingType ON C.AdvertisingTypeID = TBLAdvertisingType.ID
LEFT JOIN tbl_AdvertisingPlatform AS TBLAdvertisingPlatform ON C.AdvertisingPlatformID = TBLAdvertisingPlatform.ID
LEFT JOIN tbl_AdvertisingCampaign AS TBLAdvertisingCampaign ON C.AdvertisingCampaignID = TBLAdvertisingCampaign.ID
WHERE (C.AdvertisingTypeID IS NOT NULL OR C.AdvertisingPlatformID IS NOT NULL OR C.AdvertisingCampaignID IS NOT NULL) 
AND C.CreatedAt >= @StartDate AND C.CreatedAt <= @EndDate AND C.SiteID = @SiteID ''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + ''GROUP BY '' + @Period +'', TBLAdvertisingType.Title, TBLAdvertisingPlatform.Title, TBLAdvertisingCampaign.Title
ORDER BY '' + @Period

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate')
INSERT [dbo].[tbl_Analytic] ([ID], [Title], [Query]) VALUES (N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Посещения', N'
DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = N''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)
DECLARE @Period nvarchar(256)

IF @GroupByDays = 1
	SET @Period = ''CAST(ca.CreatedAt AS DATE)''
ELSE
	SET @Period = ''DATEPART(HOUR, ca.CreatedAt)''

SET @SQL = ''SELECT A.CreatedAt AS Period, A.[Views], A.Visitors, A.Visits, A.PotentialViews, A.PerspectiveViews,
ISNULL(B.PotentialVisitors,0) AS PotentialVisitors, ISNULL(B.PotentialVisits,0) AS PotentialVisits,
ISNULL(C.PerspectiveVisitors,0) AS PerspectiveVisitors, ISNULL(C.PerspectiveVisits,0) AS PerspectiveVisits
FROM (SELECT '' + @Period + '' AS CreatedAt, 
COUNT(*) AS [Views],
COUNT(DISTINCT(ContactID)) AS [Visitors],
COUNT(DISTINCT(ContactSessionID)) AS [Visits],
COUNT(CASE WHEN TBLContact.UserFullName IS NOT NULL AND TBLContact.UserFullName <> '''''''' THEN 1 ELSE NULL END) AS [PotentialViews],
COUNT(CASE WHEN TBLContact.UserFullName IS NULL OR TBLContact.UserFullName = '''''''' THEN 1 ELSE NULL END) AS [PerspectiveViews]	
FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS TBLContact ON TBLContact.ID = CA.ContactID
WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator
	
SET @SQL = @SQL + '' GROUP BY '' + @Period + '' ) 
AS A LEFT JOIN (SELECT '' + @Period + '' AS CreatedAt,
COUNT(DISTINCT(ContactID)) AS [PotentialVisitors],
COUNT(DISTINCT(ContactSessionID)) AS [PotentialVisits]
FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS C ON C.ID = CA.ContactID
WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate
AND C.UserFullName IS NOT NULL AND C.UserFullName <> ''''''''
GROUP BY '' + @Period + ''
) AS B ON A.CreatedAt = B.CreatedAt 
LEFT JOIN (SELECT '' + @Period + '' AS CreatedAt, 
COUNT(DISTINCT(ContactID)) AS [PerspectiveVisitors],
COUNT(DISTINCT(ContactSessionID)) AS [PerspectiveVisits]
FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS C ON C.ID = CA.ContactID
WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate
AND (C.UserFullName IS NULL OR C.UserFullName = '''''''')
GROUP BY ''+ @Period +'' ) AS C ON A.CreatedAt = C.CreatedAt ''

IF @GroupByDays = 1
	SET @SQL = @SQL + ''ORDER BY CAST(A.CreatedAt AS DATE)''
ELSE
	SET @SQL = @SQL + ''ORDER BY DATEPART(HOUR, A.CreatedAt)''


EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate')
INSERT [dbo].[tbl_Analytic] ([ID], [Title], [Query]) VALUES (N'00ceecba-800d-11e1-9887-f00b4924019b', N'Сообщения', N'
DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''

IF @GroupByDays = 1
BEGIN		
	SELECT CAST(SA.ActionDate AS DATE) AS Period, 
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 0 THEN 1 ELSE NULL END) AS [Base],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 1 THEN 1 ELSE NULL END) AS [MassMail],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 2 THEN 1 ELSE NULL END) AS [Event],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 3 THEN 1 ELSE NULL END) AS [Workflow],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 4 THEN 1 ELSE NULL END) AS [System]
	FROM tbl_SiteAction AS SA LEFT JOIN tbl_SiteActionTemplate AS SAT ON SA.SiteActionTemplateID = SAT.ID
	WHERE SA.SiteID = @SiteID AND SA.ActionDate >= @StartDate AND SA.ActionDate <= @EndDate
	GROUP BY CAST(SA.ActionDate AS DATE)
END
ELSE
BEGIN
 	SELECT DATEPART(HOUR, SA.ActionDate) AS Period, 
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 0 THEN 1 ELSE NULL END) AS [Base],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 1 THEN 1 ELSE NULL END) AS [MassMail],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 2 THEN 1 ELSE NULL END) AS [Event],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 3 THEN 1 ELSE NULL END) AS [Workflow],
	COUNT(CASE WHEN SiteActionTemplateCategoryID = 4 THEN 1 ELSE NULL END) AS [System]
	FROM tbl_SiteAction AS SA LEFT JOIN tbl_SiteActionTemplate AS SAT ON SA.SiteActionTemplateID = SAT.ID
	WHERE SA.SiteID = @SiteID AND SA.ActionDate >= @StartDate AND SA.ActionDate <= @EndDate
	GROUP BY DATEPART(HOUR, SA.ActionDate)		
END')

CREATE TABLE [dbo].[tbl_AnalyticReport](
	[ID] [uniqueidentifier] NOT NULL,
	[AnalyticID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
	[Description] [nvarchar](1024) NULL,
	[ModuleID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_tbl_AnalyticReport] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

INSERT [dbo].[tbl_AnalyticReport] ([ID], [AnalyticID], [Title], [Description], [ModuleID]) VALUES (N'67e0f054-f41b-4157-8ed5-054b64958528', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Статистика посетителей по типам клиентов', N'Статистика посетителей по типам клиентов', N'3e8d5dff-00e3-4ec4-bb8d-a7d78cf20640')
INSERT [dbo].[tbl_AnalyticReport] ([ID], [AnalyticID], [Title], [Description], [ModuleID]) VALUES (N'f6b6684c-800d-11e1-91e0-160d4924019b', N'00ceecba-800d-11e1-9887-f00b4924019b', N'Статистика сообщений', N'Статистика сообщений', N'd53e2ece-8e17-4327-9fc2-8609918785b4')
INSERT [dbo].[tbl_AnalyticReport] ([ID], [AnalyticID], [Title], [Description], [ModuleID]) VALUES (N'ffb3e5f5-f76a-4e0e-b6ce-90b0e2bc4cfa', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Статистика просмотров по типам клиентов', N'Статистика просмотров по типам клиентов', N'3e8d5dff-00e3-4ec4-bb8d-a7d78cf20640')
INSERT [dbo].[tbl_AnalyticReport] ([ID], [AnalyticID], [Title], [Description], [ModuleID]) VALUES (N'7dbb7f01-d4a4-4c88-bbc7-932d3c47e73e', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Статистика посетителей, визитов и просмотров ', N'Статистика посетителей, визитов и просмотров ', N'3e8d5dff-00e3-4ec4-bb8d-a7d78cf20640')
INSERT [dbo].[tbl_AnalyticReport] ([ID], [AnalyticID], [Title], [Description], [ModuleID]) VALUES (N'1830007b-c79e-4e2f-ad89-960782911c4d', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Статистика визитов по типам клиентов', N'Статистика визитов по типам клиентов', N'3e8d5dff-00e3-4ec4-bb8d-a7d78cf20640')
INSERT [dbo].[tbl_AnalyticReport] ([ID], [AnalyticID], [Title], [Description], [ModuleID]) VALUES (N'a92a28a6-3650-477d-8b22-b5802f704abb', N'5e7183b5-3800-45ad-b314-530ff5ae3022', N'Новые клиенты по рекламным площадкам, по типам рекламы, по рекламным кампаниям', N'Новые клиенты по рекламным площадкам, по типам рекламы, по рекламным кампаниям', N'3e8d5dff-00e3-4ec4-bb8d-a7d78cf20640')

CREATE TABLE [dbo].[tbl_AnalyticAxis](
	[ID] [uniqueidentifier] NOT NULL,
	[AnalyticID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
	[SystemName] [nvarchar](256) NOT NULL,
	[AxisRoleID] [int] NOT NULL,
	[DataSet] [varchar](256) NULL,
 CONSTRAINT [PK_tbl_AnalyticAxis] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]


CREATE TABLE [dbo].[tbl_AnalyticReportSystem](
	[ID] [uniqueidentifier] NOT NULL,
	[AnalyticReportID] [uniqueidentifier] NOT NULL,
	[AnalyticAxisID] [uniqueidentifier] NOT NULL,
	[AxisTypeID] [int] NOT NULL,
	[IsDefault] [bit] NOT NULL,
 CONSTRAINT [PK_tbl_AnalyticReportSystem] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]


CREATE TABLE [dbo].[tbl_AnalyticAxisFilterValues](
	[ID] [uniqueidentifier] NOT NULL,
	[AnalyticAxisID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
	[ColumnName] [varchar](100) NULL,
	[Value] [nvarchar](256) NULL,
	[DisplayOrder] [int] NOT NULL,
	[FilterOperatorID] [int] NOT NULL
) ON [PRIMARY]

ALTER TABLE [dbo].[tbl_Analytic] ADD  CONSTRAINT [DF_tbl_Analytic_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_AnalyticAxis] ADD  CONSTRAINT [DF_tbl_AnalyticAxis_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_AnalyticAxis] ADD  CONSTRAINT [DF_tbl_AnalyticAxis_AxisTypeID]  DEFAULT ((0)) FOR [AxisRoleID]
ALTER TABLE [dbo].[tbl_AnalyticAxisFilterValues] ADD  CONSTRAINT [DF_tbl_AnalyticFilterValues_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_AnalyticAxisFilterValues] ADD  CONSTRAINT [DF_tbl_AnalyticFilterValues_DisplayOrder]  DEFAULT ((0)) FOR [DisplayOrder]
ALTER TABLE [dbo].[tbl_AnalyticAxisFilterValues] ADD  DEFAULT ((0)) FOR [FilterOperatorID]
ALTER TABLE [dbo].[tbl_AnalyticReport] ADD  CONSTRAINT [DF_tbl_AnalyticReport_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_AnalyticReportSystem] ADD  CONSTRAINT [DF_tbl_AnalyticReportBase_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_AnalyticReportSystem] ADD  CONSTRAINT [DF_tbl_AnalyticReportSystem_AxisTypeID]  DEFAULT ((0)) FOR [AxisTypeID]
ALTER TABLE [dbo].[tbl_AnalyticReportSystem] ADD  CONSTRAINT [DF_tbl_AnalyticReportSystem_IsDefault]  DEFAULT ((0)) FOR [IsDefault]
ALTER TABLE [dbo].[tbl_AnalyticAxis]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AnalyticAxis_tbl_Analytic] FOREIGN KEY([AnalyticID])
REFERENCES [dbo].[tbl_Analytic] ([ID])
ALTER TABLE [dbo].[tbl_AnalyticAxis] CHECK CONSTRAINT [FK_tbl_AnalyticAxis_tbl_Analytic]
ALTER TABLE [dbo].[tbl_AnalyticAxisFilterValues]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AnalyticAxisFilterValues_tbl_AnalyticAxis] FOREIGN KEY([AnalyticAxisID])
REFERENCES [dbo].[tbl_AnalyticAxis] ([ID])
ALTER TABLE [dbo].[tbl_AnalyticAxisFilterValues] CHECK CONSTRAINT [FK_tbl_AnalyticAxisFilterValues_tbl_AnalyticAxis]
ALTER TABLE [dbo].[tbl_AnalyticReport]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AnalyticReport_tbl_Analytic] FOREIGN KEY([AnalyticID])
REFERENCES [dbo].[tbl_Analytic] ([ID])
ALTER TABLE [dbo].[tbl_AnalyticReport] CHECK CONSTRAINT [FK_tbl_AnalyticReport_tbl_Analytic]
ALTER TABLE [dbo].[tbl_AnalyticReport]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AnalyticReport_tbl_Module] FOREIGN KEY([ModuleID])
REFERENCES [dbo].[tbl_Module] ([ID])
ALTER TABLE [dbo].[tbl_AnalyticReport] CHECK CONSTRAINT [FK_tbl_AnalyticReport_tbl_Module]
ALTER TABLE [dbo].[tbl_AnalyticReportSystem]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AnalyticReportSystem_tbl_AnalyticAxis] FOREIGN KEY([AnalyticAxisID])
REFERENCES [dbo].[tbl_AnalyticAxis] ([ID])
ALTER TABLE [dbo].[tbl_AnalyticReportSystem] CHECK CONSTRAINT [FK_tbl_AnalyticReportSystem_tbl_AnalyticAxis]
ALTER TABLE [dbo].[tbl_AnalyticReportSystem]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AnalyticReportSystem_tbl_AnalyticReport] FOREIGN KEY([AnalyticReportID])
REFERENCES [dbo].[tbl_AnalyticReport] ([ID])
ALTER TABLE [dbo].[tbl_AnalyticReportSystem] CHECK CONSTRAINT [FK_tbl_AnalyticReportSystem_tbl_AnalyticReport]

commit
exec LBC_SetVersion 175
END

GO

/*******************************************************************************
	2012-05-08
	Убрана привязка отчетов к SiteId
*******************************************************************************/
if ( dbo.LBC_Version() < 176 )
BEGIN
begin tran

INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'dddb7049-a7ac-4222-804e-04317510f2bb', N'5e7183b5-3800-45ad-b314-530ff5ae3022', N'Дата', N'Period', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'cfff0d3b-b74b-4074-a258-134480b4be0e', N'5e7183b5-3800-45ad-b314-530ff5ae3022', N'Тип рекламы', N'AdvertisingType', 2, N'tbl_AdvertisingType')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'5bf65c8c-1846-44ef-a4af-266324573f29', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Перспективные визиты', N'PerspectiveVisits', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'ec3ec097-b8dd-40c8-baa8-2d06da095825', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Перспективные просмотры', N'PerspectiveViews', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'227097b8-af87-4835-a889-2e55d776c3e4', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Потенциальные визиты', N'PotentialVisits', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'3dcce7de-800d-11e1-81c1-340c4924019b', N'00ceecba-800d-11e1-9887-f00b4924019b', N'Дата', N'Period', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'43b4d2d8-800d-11e1-bf7f-380c4924019b', N'00ceecba-800d-11e1-9887-f00b4924019b', N'Базовый шаблон', N'Base', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'4a30204a-800d-11e1-998c-390c4924019b', N'00ceecba-800d-11e1-9887-f00b4924019b', N'Рассылка', N'MassMail', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'f6467518-9394-4db6-8c1d-5aee2310a0fc', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Потенциальные посетители', N'PotentialVisitors', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'ef217f28-7b65-4ae9-9677-6d113186aadc', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Просмотры', N'Views', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'c9b1832a-ecec-47db-8fe8-922ce0242bbf', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Посетители', N'Visitors', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'62ae8769-e55f-402c-8a99-9bf68a46799a', N'5e7183b5-3800-45ad-b314-530ff5ae3022', N'Количество новых пользователей', N'RegisteredCount', 3, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'820afeae-800d-11e1-8834-c00c4924019b', N'00ceecba-800d-11e1-9887-f00b4924019b', N'Событие', N'Event', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'886e6452-800d-11e1-b22b-c10c4924019b', N'00ceecba-800d-11e1-9887-f00b4924019b', N'Бизнес процесс', N'Workflow', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'0b34a8df-1b3b-402a-9bff-c38c4ae4a969', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Потенциальные просмотры', N'PotentialViews', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'f217a91b-d2fb-44eb-aec5-c6e7c7396d77', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Дата', N'Period', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'aea0b7f3-7afb-43c6-a047-cbdf906fde71', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Тип клиента', N'ClientType', 1, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'e394ee4b-5705-4154-9cb7-da19c38b6f56', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Перспективные посетители', N'PerspectiveVisitors', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'7c94931a-fa5c-4323-82b9-db23ab61e242', N'5e7183b5-3800-45ad-b314-530ff5ae3022', N'Рекламная кампания', N'AdvertisingCampaign', 2, N'tbl_AdvertisingCampaign')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'df6e5cd0-8233-11e1-b56e-ea9c4824019b', N'00ceecba-800d-11e1-9887-f00b4924019b', N'Системные', N'System', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'efeb0b5a-1744-44b4-90a3-ecc067f14342', N'7dd817de-0ebe-4583-b2a7-dadfd1642148', N'Визиты', N'Visits', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'feefe13c-7884-4eed-850e-f308f4761435', N'5e7183b5-3800-45ad-b314-530ff5ae3022', N'Рекламная площадка', N'AdvertisingPlatform', 2, N'tbl_AdvertisingPlatform')

INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'51b3c602-cc33-4a09-aff2-0f39880ca63a', N'f6b6684c-800d-11e1-91e0-160d4924019b', N'43b4d2d8-800d-11e1-bf7f-380c4924019b', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'07dee8bf-8cfc-41b1-9faf-14da2cf75dac', N'67e0f054-f41b-4157-8ed5-054b64958528', N'e394ee4b-5705-4154-9cb7-da19c38b6f56', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'4b3701ce-77fc-4558-84fd-273810f84a1e', N'7dbb7f01-d4a4-4c88-bbc7-932d3c47e73e', N'aea0b7f3-7afb-43c6-a047-cbdf906fde71', 0, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'68e3bf53-1610-4940-8357-27ccb7721a43', N'a92a28a6-3650-477d-8b22-b5802f704abb', N'7c94931a-fa5c-4323-82b9-db23ab61e242', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'944a4ea0-8d0f-40af-879d-29e0b9eae8b7', N'67e0f054-f41b-4157-8ed5-054b64958528', N'f6467518-9394-4db6-8c1d-5aee2310a0fc', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'c7e57086-66f0-49f5-8f44-30cdd4a7d8a2', N'a92a28a6-3650-477d-8b22-b5802f704abb', N'62ae8769-e55f-402c-8a99-9bf68a46799a', 0, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'4cc24b39-95c0-4da1-93f7-3639f21df44b', N'f6b6684c-800d-11e1-91e0-160d4924019b', N'df6e5cd0-8233-11e1-b56e-ea9c4824019b', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'2ac03c49-75fa-4d34-ab94-36fbcadae103', N'f6b6684c-800d-11e1-91e0-160d4924019b', N'886e6452-800d-11e1-b22b-c10c4924019b', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'228b7efa-efd2-41c4-aa71-4327ca69c1f5', N'67e0f054-f41b-4157-8ed5-054b64958528', N'f217a91b-d2fb-44eb-aec5-c6e7c7396d77', 1, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'186de758-2cb9-42da-94d1-472f317bda02', N'7dbb7f01-d4a4-4c88-bbc7-932d3c47e73e', N'c9b1832a-ecec-47db-8fe8-922ce0242bbf', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'2e639c69-5b6e-451c-8b2f-47c1f45fed61', N'1830007b-c79e-4e2f-ad89-960782911c4d', N'f217a91b-d2fb-44eb-aec5-c6e7c7396d77', 1, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'd3d096a9-0e49-4886-830b-493b995bdede', N'7dbb7f01-d4a4-4c88-bbc7-932d3c47e73e', N'ef217f28-7b65-4ae9-9677-6d113186aadc', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'ec86143d-fdbb-40a7-b876-5b28d75a0499', N'7dbb7f01-d4a4-4c88-bbc7-932d3c47e73e', N'efeb0b5a-1744-44b4-90a3-ecc067f14342', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'1ec9a4e9-1d8c-4fce-9c4c-5f3ac3049c1d', N'f6b6684c-800d-11e1-91e0-160d4924019b', N'4a30204a-800d-11e1-998c-390c4924019b', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'd8fda034-21ca-493f-baab-631806e460da', N'7dbb7f01-d4a4-4c88-bbc7-932d3c47e73e', N'f217a91b-d2fb-44eb-aec5-c6e7c7396d77', 1, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'aed6660f-265b-4465-8342-6f3c05081ddf', N'f6b6684c-800d-11e1-91e0-160d4924019b', N'3dcce7de-800d-11e1-81c1-340c4924019b', 1, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'377098d3-7e66-4006-9791-71ff3ae3a1da', N'1830007b-c79e-4e2f-ad89-960782911c4d', N'5bf65c8c-1846-44ef-a4af-266324573f29', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'afebea6a-d40f-417f-849f-84d808f93afe', N'ffb3e5f5-f76a-4e0e-b6ce-90b0e2bc4cfa', N'ec3ec097-b8dd-40c8-baa8-2d06da095825', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'176bcc78-c3f3-4c34-acae-875d169986e2', N'a92a28a6-3650-477d-8b22-b5802f704abb', N'feefe13c-7884-4eed-850e-f308f4761435', 2, 1)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'23b50a25-cf5f-4b64-b819-a742ac18cbde', N'1830007b-c79e-4e2f-ad89-960782911c4d', N'227097b8-af87-4835-a889-2e55d776c3e4', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'1e1567c1-a07f-4d21-a615-c435b31d4417', N'ffb3e5f5-f76a-4e0e-b6ce-90b0e2bc4cfa', N'0b34a8df-1b3b-402a-9bff-c38c4ae4a969', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'0bb43fd5-8621-4fda-b3f8-d3c0ccfafdff', N'a92a28a6-3650-477d-8b22-b5802f704abb', N'dddb7049-a7ac-4222-804e-04317510f2bb', 1, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'f5121943-f8ca-4cd1-99b4-d4aaadafb49a', N'f6b6684c-800d-11e1-91e0-160d4924019b', N'820afeae-800d-11e1-8834-c00c4924019b', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'7535a102-24ce-4a08-be9b-d91977365121', N'ffb3e5f5-f76a-4e0e-b6ce-90b0e2bc4cfa', N'f217a91b-d2fb-44eb-aec5-c6e7c7396d77', 1, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'da874e46-3632-4ad0-b08b-ec062e2a93ae', N'a92a28a6-3650-477d-8b22-b5802f704abb', N'cfff0d3b-b74b-4074-a258-134480b4be0e', 2, 0)

INSERT [dbo].[tbl_AnalyticAxisFilterValues] ([ID], [AnalyticAxisID], [Title], [ColumnName], [Value], [DisplayOrder], [FilterOperatorID]) VALUES (N'f0b67f3f-d3a5-4be0-8ebf-32f11da3419a', N'aea0b7f3-7afb-43c6-a047-cbdf906fde71', N'Все', NULL, NULL, 0, 1)
INSERT [dbo].[tbl_AnalyticAxisFilterValues] ([ID], [AnalyticAxisID], [Title], [ColumnName], [Value], [DisplayOrder], [FilterOperatorID]) VALUES (N'5d6876e6-ca8d-4c70-8272-5b66c85f87c3', N'aea0b7f3-7afb-43c6-a047-cbdf906fde71', N'Перспективные клиенты', N'TBLContact.UserFullName', N'', 1, 0)
INSERT [dbo].[tbl_AnalyticAxisFilterValues] ([ID], [AnalyticAxisID], [Title], [ColumnName], [Value], [DisplayOrder], [FilterOperatorID]) VALUES (N'87f34a17-9a21-4b4e-8be7-43c0cf0fd77a', N'aea0b7f3-7afb-43c6-a047-cbdf906fde71', N'Потенциальные клиенты', N'TBLContact.UserFullName', N'', 2, 1)

commit
exec LBC_SetVersion 176
END

/*******************************************************************************
	2012-05-10
	Доабвлен новый отчет
*******************************************************************************/
if ( dbo.LBC_Version() < 177 )
BEGIN
begin tran

INSERT [dbo].[tbl_Analytic] ([ID], [Title], [Query]) VALUES (N'a5ce0434-d70c-4b9f-91ff-179f9180edde', N'Статистика действий', N'DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = ''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)
DECLARE @Period nvarchar(256)

IF @GroupByDays = 1
	SET @Period = ''CAST(TBLContactActivity.CreatedAt AS DATE)''
ELSE
	SET @Period = ''DATEPART(HOUR, TBLContactActivity.CreatedAt)''

SET @SQL = ''SELECT '' + @Period + '' AS Period, TBLActivityTypes.Title AS ActivityType, COUNT(*) AS ActivityCount
FROM tbl_ContactActivity AS TBLContactActivity LEFT JOIN tbl_ActivityTypes AS TBLActivityTypes ON TBLContactActivity.ActivityTypeID = TBLActivityTypes.ID
WHERE TBLContactActivity.CreatedAt >= @StartDate AND TBLContactActivity.CreatedAt <= @EndDate AND SiteID = @SiteID ''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + ''GROUP BY '' + @Period +'', TBLActivityTypes.Title
ORDER BY '' + @Period

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate')

INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'16390871-a753-4af5-b5e2-172ac9c662a4', N'a5ce0434-d70c-4b9f-91ff-179f9180edde', N'Дата', N'Period', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'874df442-7ed7-43d9-ba5b-c89bedf4f54c', N'a5ce0434-d70c-4b9f-91ff-179f9180edde', N'Тип действия', N'ActivityType', 2, N'tbl_ActivityTypes')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'ebcc1e49-9560-4c84-a5f2-1372f2070723', N'a5ce0434-d70c-4b9f-91ff-179f9180edde', N'Количество действий', N'ActivityCount', 3, NULL)

INSERT [dbo].[tbl_AnalyticReport] ([ID], [AnalyticID], [Title], [Description], [ModuleID]) VALUES (N'b25a647c-97a4-4b55-bcca-0c84d61e5717', N'a5ce0434-d70c-4b9f-91ff-179f9180edde', N'Статистика действий', N'Статистика действий', (SELECT TOP 1 ID FROM tbl_Module WHERE Name = 'ContactActivity'))

INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'f3a65342-9619-424c-b5f6-7492f857560a', N'b25a647c-97a4-4b55-bcca-0c84d61e5717', N'16390871-a753-4af5-b5e2-172ac9c662a4', 1, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'bffa27d5-47ab-4f8e-a4bf-64c50e93ba17', N'b25a647c-97a4-4b55-bcca-0c84d61e5717', N'874df442-7ed7-43d9-ba5b-c89bedf4f54c', 2, 1)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'9ab8287c-d005-486f-8b15-f589b57d3498', N'b25a647c-97a4-4b55-bcca-0c84d61e5717', N'ebcc1e49-9560-4c84-a5f2-1372f2070723', 0, 0)

commit
exec LBC_SetVersion 177
END

/*******************************************************************************
	2012-05-10
	Доабвлен новый отчет
*******************************************************************************/
if ( dbo.LBC_Version() < 178 )
BEGIN
begin tran

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tbl_AnalyticReportUserSettings]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tbl_AnalyticReportUserSettings](
	[ID] [uniqueidentifier] NOT NULL,
	[UserID] [uniqueidentifier] NOT NULL,
	[AnalyticReportID] [uniqueidentifier] NOT NULL,
	[AxisToBuildID] [uniqueidentifier] NULL,
	[DataSetValues] [nvarchar](max) NULL,
 CONSTRAINT [PK_tbl_AnalyticReportUserSettings] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_tbl_AnalyticReportUserSettings_ID]') AND parent_object_id = OBJECT_ID(N'[dbo].[tbl_AnalyticReportUserSettings]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_tbl_AnalyticReportUserSettings_ID]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[tbl_AnalyticReportUserSettings] ADD  CONSTRAINT [DF_tbl_AnalyticReportUserSettings_ID]  DEFAULT (newid()) FOR [ID]
END
END


UPDATE tbl_Analytic SET Query =  N'DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = ''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)
DECLARE @Period nvarchar(256)

IF @GroupByDays = 1
	SET @Period = ''CAST(TBLContactActivity.CreatedAt AS DATE)''
ELSE
	SET @Period = ''DATEPART(HOUR, TBLContactActivity.CreatedAt)''

SET @SQL = ''SELECT '' + @Period + '' AS Period, TBLActivityTypes.Title AS ActivityType, COUNT(*) AS ActivityCount
FROM tbl_ContactActivity AS TBLContactActivity LEFT JOIN tbl_ActivityTypes AS TBLActivityTypes ON TBLContactActivity.ActivityTypeID = TBLActivityTypes.ID
LEFT JOIN tbl_Contact AS TBLContact ON TBLContactActivity.ContactID = TBLContact.ID
WHERE TBLContactActivity.CreatedAt >= @StartDate AND TBLContactActivity.CreatedAt <= @EndDate AND TBLContactActivity.SiteID = @SiteID ''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + ''GROUP BY '' + @Period +'', TBLActivityTypes.Title
ORDER BY '' + @Period

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate'

WHERE ID = N'a5ce0434-d70c-4b9f-91ff-179f9180edde'

INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'6d8164a1-dce5-4d5b-adf0-8acdf458c914', N'a5ce0434-d70c-4b9f-91ff-179f9180edde', N'Тип клиента', N'ClientType', 1, NULL)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'2d51c183-99cf-4b43-9e23-9e7b8c7ef82a', N'b25a647c-97a4-4b55-bcca-0c84d61e5717', N'6d8164a1-dce5-4d5b-adf0-8acdf458c914', 0, 0)

INSERT [dbo].[tbl_AnalyticAxisFilterValues] ([ID], [AnalyticAxisID], [Title], [ColumnName], [Value], [DisplayOrder], [FilterOperatorID]) VALUES (N'50e03c58-1207-4b31-9e1d-3a1db76372ef', N'6d8164a1-dce5-4d5b-adf0-8acdf458c914', N'Все', NULL, NULL, 0, 1)
INSERT [dbo].[tbl_AnalyticAxisFilterValues] ([ID], [AnalyticAxisID], [Title], [ColumnName], [Value], [DisplayOrder], [FilterOperatorID]) VALUES (N'fb2badf8-ee4f-4bbb-a24d-8039dd3a5cde', N'6d8164a1-dce5-4d5b-adf0-8acdf458c914', N'Перспективные клиенты', N'TBLContact.UserFullName', N'', 1, 0)
INSERT [dbo].[tbl_AnalyticAxisFilterValues] ([ID], [AnalyticAxisID], [Title], [ColumnName], [Value], [DisplayOrder], [FilterOperatorID]) VALUES (N'ec793c39-6a1a-451a-8569-afd8f48011cb', N'6d8164a1-dce5-4d5b-adf0-8acdf458c914', N'Потенциальные клиенты', N'TBLContact.UserFullName', N'', 2, 1)

commit
exec LBC_SetVersion 178
END

/*******************************************************************************
	2012-05-14
	Обновление в нотификации по запросам
*******************************************************************************/
if ( dbo.LBC_Version() < 179 )
BEGIN
begin tran

UPDATE tbl_SiteActionTemplate
SET MessageBody = REPLACE(MessageBody, N'<p>Дополнительно за период следующие требования были выполнены:</p>', N'')

commit
exec LBC_SetVersion 179
END

/*******************************************************************************
	2012-05-15
	Добавлена таблица хранения истории запросов
*******************************************************************************/
if ( dbo.LBC_Version() < 180 )
BEGIN
begin tran

CREATE TABLE [dbo].[tbl_RequestHistory](
	[ID] [uniqueidentifier] NOT NULL,
	[RequestID] [uniqueidentifier] NOT NULL,
	[CreatedAt] [datetime] NOT NULL,
	[RequestStatusID] [int] NOT NULL,
	[ContactID] [uniqueidentifier] NOT NULL,
	[ResponsibleID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_tbl_RequestHistory] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[tbl_RequestHistory]  WITH CHECK ADD  CONSTRAINT [FK_tbl_RequestHistory_tbl_Contact] FOREIGN KEY([ContactID])
REFERENCES [dbo].[tbl_Contact] ([ID])
ALTER TABLE [dbo].[tbl_RequestHistory] CHECK CONSTRAINT [FK_tbl_RequestHistory_tbl_Contact]
ALTER TABLE [dbo].[tbl_RequestHistory]  WITH CHECK ADD  CONSTRAINT [FK_tbl_RequestHistory_tbl_Contact_Responsible] FOREIGN KEY([ResponsibleID])
REFERENCES [dbo].[tbl_Contact] ([ID])
ALTER TABLE [dbo].[tbl_RequestHistory] CHECK CONSTRAINT [FK_tbl_RequestHistory_tbl_Contact_Responsible]
ALTER TABLE [dbo].[tbl_RequestHistory]  WITH CHECK ADD  CONSTRAINT [FK_tbl_RequestHistory_tbl_Request] FOREIGN KEY([RequestID])
REFERENCES [dbo].[tbl_Request] ([ID])
ALTER TABLE [dbo].[tbl_RequestHistory] CHECK CONSTRAINT [FK_tbl_RequestHistory_tbl_Request]
ALTER TABLE [dbo].[tbl_RequestHistory] ADD  CONSTRAINT [DF_tbl_RequestHistory_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_RequestHistory] ADD  CONSTRAINT [DF_tbl_RequestHistory_CreatedAt]  DEFAULT (getdate()) FOR [CreatedAt]

commit
exec LBC_SetVersion 180
END

/*******************************************************************************
	2012-05-17
	Добавлены цели процесса
*******************************************************************************/
if ( dbo.LBC_Version() < 181 )
BEGIN
begin tran

CREATE TABLE [dbo].[tbl_WorkflowTemplateGoal](
	[ID] [uniqueidentifier] NOT NULL,
	[WorkflowTemplateID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
	[Description] [nvarchar](2048) NULL,
 CONSTRAINT [PK_tbl_WorkflowTemplateGoal] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[tbl_WorkflowTemplateGoal]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WorkflowTemplateGoal_tbl_WorkflowTemplate] FOREIGN KEY([WorkflowTemplateID])
REFERENCES [dbo].[tbl_WorkflowTemplate] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_WorkflowTemplateGoal] CHECK CONSTRAINT [FK_tbl_WorkflowTemplateGoal_tbl_WorkflowTemplate]
ALTER TABLE [dbo].[tbl_WorkflowTemplateGoal] ADD  CONSTRAINT [DF_tbl_WorkflowTemplateGoal_ID]  DEFAULT (newid()) FOR [ID]

CREATE TABLE [dbo].[tbl_WorkflowTemplateGoalElement](
	[WorkflowTemplateGoalID] [uniqueidentifier] NOT NULL,
	[WorkflowTemplateElementID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_tbl_WorkflowTemplateGoalElement] PRIMARY KEY CLUSTERED 
(
	[WorkflowTemplateGoalID] ASC,
	[WorkflowTemplateElementID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[tbl_WorkflowTemplateGoalElement]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WorkflowTemplateGoalElement_tbl_WorkflowTemplateElement] FOREIGN KEY([WorkflowTemplateElementID])
REFERENCES [dbo].[tbl_WorkflowTemplateElement] ([ID])
ON DELETE CASCADE

ALTER TABLE [dbo].[tbl_WorkflowTemplateGoalElement] CHECK CONSTRAINT [FK_tbl_WorkflowTemplateGoalElement_tbl_WorkflowTemplateElement]
ALTER TABLE [dbo].[tbl_WorkflowTemplateGoalElement]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WorkflowTemplateGoalElement_tbl_WorkflowTemplateGoal] FOREIGN KEY([WorkflowTemplateGoalID])
REFERENCES [dbo].[tbl_WorkflowTemplateGoal] ([ID])
ALTER TABLE [dbo].[tbl_WorkflowTemplateGoalElement] CHECK CONSTRAINT [FK_tbl_WorkflowTemplateGoalElement_tbl_WorkflowTemplateGoal]

commit
exec LBC_SetVersion 181
END

/*******************************************************************************
	2012-05-18
	Добавлен реквизит "Работа с косплектацией" для типов продуктов
*******************************************************************************/
if ( dbo.LBC_Version() < 182 )
BEGIN
begin tran

CREATE TABLE [dbo].[tbl_ProductWorkWithComplectation](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_tbl_ProductWorkWithComplectation] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

SET IDENTITY_INSERT [dbo].[tbl_ProductWorkWithComplectation] ON
INSERT [dbo].[tbl_ProductWorkWithComplectation] ([ID], [Title]) VALUES (1, N'Простой продукт')
INSERT [dbo].[tbl_ProductWorkWithComplectation] ([ID], [Title]) VALUES (2, N'Комплект')
INSERT [dbo].[tbl_ProductWorkWithComplectation] ([ID], [Title]) VALUES (3, N'Сборный продукт')
SET IDENTITY_INSERT [dbo].[tbl_ProductWorkWithComplectation] OFF

ALTER TABLE [tbl_ProductType] ADD ProductWorkWithComplectationID int NULL
ALTER TABLE [tbl_ProductType]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ProductType_tbl_ProductWorkWithComplectation] FOREIGN KEY([ProductWorkWithComplectationID])
REFERENCES [dbo].[tbl_ProductWorkWithComplectation] ([ID])
ALTER TABLE [tbl_ProductType] CHECK CONSTRAINT [FK_tbl_ProductType_tbl_ProductWorkWithComplectation]

commit
exec LBC_SetVersion 182
END

/*******************************************************************************
	2012-05-21
	В API контакта добавлено обновление маркетинговых данных
*******************************************************************************/
if ( dbo.LBC_Version() < 183 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[API_UpdateContact]
	(
	    @SiteID uniqueidentifier,
	    @UserID uniqueidentifier,
	    @ParamsXml xml
	)
AS
BEGIN

    DECLARE @ContactID uniqueidentifier = NULL
	SET @ContactID = @ParamsXml.value(''(/LeadForceRequest/Contact/@ContactID)[1]'',''uniqueidentifier'')
	
	IF @ContactID IS NULL
	    RETURN 0
	
	DECLARE @UserFullName nvarchar(255) = NULL
	SET @UserFullName = @ParamsXml.value(''(/LeadForceRequest/Contact/UserFullName)[1]'',''nvarchar(255)'')
	
	DECLARE @Email nvarchar(255) = NULL
	SET @Email = @ParamsXml.value(''(/LeadForceRequest/Contact/Email)[1]'',''nvarchar(255)'')
	
	DECLARE @Phone nvarchar(50) = NULL
	SET @Phone = @ParamsXml.value(''(/LeadForceRequest/Contact/Phone)[1]'',''nvarchar(50)'')
		
	DECLARE @Status nvarchar(250) = NULL
	SET @Status = @ParamsXml.value(''(/LeadForceRequest/Contact/Status)[1]'',''nvarchar(250)'')
	DECLARE @StatusID uniqueidentifier = NULL	
	IF @Status IS NOT NULL    
       SELECT @StatusID = ID FROM tbl_Status WHERE SiteID = @SiteID AND Title = @Status        
    IF @StatusID IS NULL   
       SELECT TOP 1 @StatusID = ID FROM tbl_Status WHERE SiteID = @SiteID AND IsDefault = 1	
	
	DECLARE @IsNameChecked bit = NULL
	SET @IsNameChecked = @ParamsXml.value(''(/LeadForceRequest/Contact/IsNameChecked)[1]'',''bit'')
	
	DECLARE @Surname nvarchar(255) = NULL
	SET @Surname = @ParamsXml.value(''(/LeadForceRequest/Contact/Surname)[1]'',''nvarchar(255)'')
	
	DECLARE @Name nvarchar(255) = NULL
	SET @Name = @ParamsXml.value(''(/LeadForceRequest/Contact/Name)[1]'',''nvarchar(255)'')
	
	DECLARE @Patronymic nvarchar(255) = NULL
	SET @Patronymic = @ParamsXml.value(''(/LeadForceRequest/Contact/Patronymic)[1]'',''nvarchar(255)'')
	
	DECLARE @CellularPhone varchar(50) = NULL
	SET @CellularPhone = @ParamsXml.value(''(/LeadForceRequest/Contact/CellularPhone)[1]'',''varchar(50)'')
	
	DECLARE @CellularPhoneStatusID int = NULL
	SET @CellularPhoneStatusID = @ParamsXml.value(''(/LeadForceRequest/Contact/CellularPhoneStatus)[1]'',''int'')
	
	DECLARE @EmailStatusID int = NULL
	SET @EmailStatusID = @ParamsXml.value(''(/LeadForceRequest/Contact/EmailStatus)[1]'',''int'')
	
	DECLARE @ContactType nvarchar(250) = NULL
	SET @ContactType = @ParamsXml.value(''(/LeadForceRequest/Contact/ContactType)[1]'',''nvarchar(250)'')
	DECLARE @ContactTypeID uniqueidentifier = NULL	
	IF @ContactType IS NOT NULL AND @ContactType <> ''''
	    SELECT @ContactTypeID = ID FROM tbl_ContactType WHERE Name = @ContactType AND SiteID = @SiteID
	    
	DECLARE @JobTitle nvarchar(250) = NULL
	SET @JobTitle = @ParamsXml.value(''(/LeadForceRequest/Contact/JobTitle)[1]'',''nvarchar(250)'')
	
	DECLARE @Company nvarchar(255) = NULL
	SET @Company = @ParamsXml.value(''(/LeadForceRequest/Contact/Company)[1]'',''nvarchar(255)'')
	DECLARE @CompanyID uniqueidentifier = NULL	
	IF @Company IS NOT NULL AND @Company <> ''''
	    SELECT TOP 1 @CompanyID = ID FROM tbl_Company WHERE Name = @Company AND SiteID = @SiteID
	    
	DECLARE @Owner nvarchar(255) = NULL
	SET @Owner = @ParamsXml.value(''(/LeadForceRequest/Contact/Owner)[1]'',''nvarchar(255)'')
	DECLARE @OwnerID uniqueidentifier = NULL	
	IF @Owner IS NOT NULL AND @Owner <> ''''
	    SELECT TOP 1 @OwnerID = ID FROM tbl_Contact WHERE UserFullName = @Owner AND SiteID = @SiteID
	
	DECLARE @BirthDate datetime = NULL
	SET @BirthDate = @ParamsXml.value(''(/LeadForceRequest/Contact/BirthDate)[1]'',''datetime'')
	
	DECLARE @ContactFunctionInCompany nvarchar(250) = NULL
	SET @ContactFunctionInCompany = @ParamsXml.value(''(/LeadForceRequest/Contact/ContactFunctionInCompany)[1]'',''nvarchar(250)'')
	DECLARE @ContactFunctionInCompanyID uniqueidentifier = NULL	
	IF @ContactFunctionInCompany IS NOT NULL AND @ContactFunctionInCompany <> ''''
	    SELECT TOP 1 @ContactFunctionInCompanyID = ID FROM tbl_ContactFunctionInCompany WHERE Name = @ContactFunctionInCompany AND SiteID = @SiteID
	
	DECLARE @ContactJobLevel nvarchar(250) = NULL
	SET @ContactJobLevel = @ParamsXml.value(''(/LeadForceRequest/Contact/ContactJobLevel)[1]'',''nvarchar(250)'')
	DECLARE @ContactJobLevelID uniqueidentifier = NULL	
	IF @ContactJobLevel IS NOT NULL AND @ContactJobLevel <> ''''
	    SELECT TOP 1 @ContactJobLevelID = ID FROM tbl_ContactJobLevel WHERE Name = @ContactJobLevel AND SiteID = @SiteID
	    
	DECLARE @Address nvarchar(max) = NULL
	SET @Address = @ParamsXml.value(''(/LeadForceRequest/Contact/Address/@Address)[1]'',''nvarchar(max)'')
	
	DECLARE @Country nvarchar(255) = NULL
	SET @Country = @ParamsXml.value(''(/LeadForceRequest/Contact/Address/Country)[1]'',''nvarchar(255)'')
	DECLARE @CountryID uniqueidentifier = NULL	
	IF @Country IS NOT NULL AND @Country <> ''''
	    SELECT TOP 1 @CountryID = ID FROM tbl_Country WHERE Name = @Country
	
	DECLARE @Region nvarchar(255) = NULL
	SET @Region = @ParamsXml.value(''(/LeadForceRequest/Contact/Address/Region)[1]'',''nvarchar(255)'')
	DECLARE @RegionID uniqueidentifier = NULL	
	IF @Region IS NOT NULL AND @Region <> ''''
	    SELECT TOP 1 @RegionID = ID FROM tbl_Region WHERE Name = @Region
	    
	DECLARE @District nvarchar(255) = NULL
	SET @District = @ParamsXml.value(''(/LeadForceRequest/Contact/Address/District)[1]'',''nvarchar(255)'')
	DECLARE @DistrictID uniqueidentifier = NULL	
	IF @District IS NOT NULL AND @District <> ''''
	    SELECT TOP 1 @DistrictID = ID FROM tbl_District WHERE Name = @District
	    
	DECLARE @City nvarchar(255) = NULL
	SET @City = @ParamsXml.value(''(/LeadForceRequest/Contact/Address/City)[1]'',''nvarchar(255)'')
	DECLARE @CityID uniqueidentifier = NULL	
	IF @City IS NOT NULL AND @City <> ''''
	    SELECT TOP 1 @CityID = ID FROM tbl_City WHERE Name = @City
	
	DECLARE @Reffer nvarchar(255) = NULL
	SET @Reffer = @ParamsXml.value(''(/LeadForceRequest/Contact/Reffer)[1]'',''nvarchar(255)'')
	DECLARE @RefferID uniqueidentifier = NULL	
	IF @Reffer IS NOT NULL AND @Reffer <> ''''
	    SELECT TOP 1 @RefferID = ID FROM tbl_Contact WHERE UserFullName = @Reffer AND SiteID = @SiteID
	    
	DECLARE @Tags nvarchar(max) = NULL
	SET @Tags = @ParamsXml.value(''(/LeadForceRequest/Contact/Tags)[1]'',''nvarchar(max)'')
	
	
	DECLARE @AdvertisingCampaign nvarchar(256) = NULL
	SET @AdvertisingCampaign = @ParamsXml.value(''(/LeadForceRequest/Contact/AdvertisingCampaign)[1]'',''nvarchar(256)'')
	DECLARE @AdvertisingCampaignID uniqueidentifier = NULL
	IF @AdvertisingCampaign IS NOT NULL AND @AdvertisingCampaign <> ''''
	BEGIN
		SELECT TOP 1 @AdvertisingCampaignID = ID FROM tbl_AdvertisingCampaign WHERE Title = @AdvertisingCampaign AND SiteID = @SiteID
		IF @AdvertisingCampaignID IS NULL
		BEGIN
			SET @AdvertisingCampaignID = newid()
			INSERT INTO tbl_AdvertisingCampaign ([ID], [SiteID], [Title], [Code])
			VALUES (@AdvertisingCampaignID, @SiteID, @AdvertisingCampaign, @AdvertisingCampaign)
		END
	END	
	
	DECLARE @AdvertisingPlatform nvarchar(256) = NULL
	SET @AdvertisingPlatform = @ParamsXml.value(''(/LeadForceRequest/Contact/AdvertisingPlatform)[1]'',''nvarchar(256)'')
	DECLARE @AdvertisingPlatformID uniqueidentifier = NULL
	IF @AdvertisingPlatform IS NOT NULL AND @AdvertisingPlatform <> ''''
	BEGIN
		SELECT TOP 1 @AdvertisingPlatformID = ID FROM tbl_AdvertisingPlatform WHERE Title = @AdvertisingPlatform AND SiteID = @SiteID
		IF @AdvertisingPlatformID IS NULL
		BEGIN
			SET @AdvertisingPlatformID = newid()
			INSERT INTO tbl_AdvertisingPlatform ([ID], [SiteID], [Title], [Code])
			VALUES (@AdvertisingPlatformID, @SiteID, @AdvertisingPlatform, @AdvertisingPlatform)
		END
	END	
	
	DECLARE @AdvertisingType nvarchar(256) = NULL
	SET @AdvertisingType = @ParamsXml.value(''(/LeadForceRequest/Contact/AdvertisingType)[1]'',''nvarchar(256)'')
	DECLARE @AdvertisingTypeID uniqueidentifier = NULL
	IF @AdvertisingType IS NOT NULL AND @AdvertisingType <> ''''
	BEGIN
		SELECT TOP 1 @AdvertisingTypeID = ID FROM tbl_AdvertisingType WHERE Title = @AdvertisingType AND SiteID = @SiteID
		IF @AdvertisingTypeID IS NULL
		BEGIN
			SET @AdvertisingTypeID = newid()
			INSERT INTO tbl_AdvertisingType ([ID], [SiteID], [Title], [Code])
			VALUES (@AdvertisingTypeID, @SiteID, @AdvertisingType, @AdvertisingType)
		END
	END	
	
	IF (SELECT COUNT(*) FROM tbl_Contact WHERE ID = @ContactID AND SiteID = @SiteID) = 0
	    BEGIN
    	    INSERT INTO tbl_Contact (ID, 
    	                             SiteID, 
    	                             CreatedAt, 
    	                             UserFullName, 
    	                             Email, 
    	                             Phone,
    	                             StatusID,
    	                             IsNameChecked,
    	                             Surname,
    	                             Name,
    	                             Patronymic,
    	                             CellularPhone,
    	                             CellularPhoneStatusID,
    	                             EmailStatusID,
    	                             ContactTypeID,
    	                             JobTitle,
    	                             CompanyID,
    	                             OwnerID,
    	                             BirthDate,
    	                             ContactFunctionInCompanyID,
    	                             ContactJobLevelID,
    	                             RefferID,
    	                             RefferURL,
    	                             UserIP,
    	                             AdvertisingTypeID,
    	                             AdvertisingPlatformID,
    	                             AdvertisingCampaignID)
    	                     VALUES  (@ContactID, 
    	                             @SiteID, 
    	                             GETDATE(), 
    	                             @UserFullName, 
    	                             @Email, 
    	                             @Phone,
    	                             @StatusID,
    	                             @IsNameChecked,
    	                             @Surname,
    	                             @Name,
    	                             @Patronymic,
    	                             @CellularPhone,
    	                             @CellularPhoneStatusID,
    	                             @EmailStatusID,
    	                             @ContactTypeID,
    	                             @JobTitle,
    	                             @CompanyID,
    	                             @OwnerID,
    	                             @BirthDate,
    	                             @ContactFunctionInCompanyID,
    	                             @ContactJobLevelID,
    	                             @RefferID,
    	                             '''',
    	                             '''',
    	                             @AdvertisingTypeID,
    	                             @AdvertisingPlatformID,
    	                             @AdvertisingCampaignID)
	    END
	ELSE
	    BEGIN	
    	    UPDATE tbl_Contact
    	    SET  UserFullName = @UserFullName, 
                 Email = @Email, 
                 Phone = @Phone,
                 StatusID = @StatusID,
                 IsNameChecked = @IsNameChecked,
                 Surname = @Surname,
                 Name = @Name,
                 Patronymic = @Patronymic,
                 CellularPhone = @CellularPhone,
                 CellularPhoneStatusID = @CellularPhoneStatusID,
                 EmailStatusID = @EmailStatusID,
                 ContactTypeID = @ContactTypeID,
                 JobTitle = @JobTitle,
                 CompanyID = @CompanyID,
                 OwnerID = @OwnerID,
                 BirthDate = @BirthDate,
                 ContactFunctionInCompanyID = @ContactFunctionInCompanyID,
                 ContactJobLevelID = @ContactJobLevelID,
                 RefferID = @RefferID,
                 AdvertisingTypeID = @AdvertisingTypeID,
                 AdvertisingPlatformID = @AdvertisingPlatformID,
                 AdvertisingCampaignID = @AdvertisingCampaignID
    	    WHERE ID = @ContactID
	    END
	
	DECLARE @AddressID uniqueidentifier = NULL
	
	SELECT @AddressID = AddressID FROM tbl_Contact WHERE ID = @ContactID
	IF @AddressID IS NULL
	    BEGIN
	        SET @AddressID = NEWID()
	        INSERT INTO tbl_Address (ID, [Address], CountryID, CityID, DistrictID, RegionID)
	                        VALUES  (@AddressID, @Address, @CountryID, @CityID, @DistrictID, @RegionID)
	                        
	        UPDATE tbl_Contact
	        SET AddressID = @AddressID
	        WHERE ID = @ContactID
	    END
	ELSE
	    BEGIN
	        UPDATE tbl_Address
	        SET [Address] = @Address, CountryID = @CountryID, CityID = @CityID, DistrictID = @DistrictID, RegionID = @RegionID
	        WHERE ID = @AddressID
	    END	
	    
    IF @Tags IS NOT NULL
    BEGIN    
        DECLARE @ObjectTypeID int = NULL
        DECLARE @SiteTagID uniqueidentifier = NULL        
        SELECT @ObjectTypeID = ID FROM tbl_ObjectTypes WHERE Name = N''tbl_Contact''
        
        DELETE FROM tbl_SiteTagObjects WHERE ObjectID = @ContactID
        
        DECLARE @Tag nvarchar(255)
	
        DECLARE tagCursor CURSOR READ_ONLY
        FOR SELECT val FROM Split(@Tags, '','')
        OPEN tagCursor
        FETCH NEXT FROM tagCursor INTO @Tag
        WHILE @@FETCH_STATUS = 0
        BEGIN	                    
            SET @SiteTagID = NULL
            
	        SELECT @SiteTagID = ID FROM tbl_SiteTags WHERE Name = @Tag AND UserID = @UserID AND ObjectTypeID = @ObjectTypeID	        	        
	        
	        IF @SiteTagID IS NULL
	        BEGIN
	            SET @SiteTagID = NEWID()
	            INSERT INTO tbl_SiteTags (ID, UserID, Name, ObjectTypeID, SiteID)
	            VALUES (@SiteTagID, @UserID, @Tag, @ObjectTypeID, @SiteID)
	        END
	        
	        INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID)
	        VALUES (@SiteTagID, @ContactID)

	        FETCH NEXT FROM tagCursor
	        INTO @Tag
        END
        CLOSE tagCursor
        DEALLOCATE tagCursor
    END
END' 

commit
exec LBC_SetVersion 183
END

/*******************************************************************************
	2012-05-22
	Добавлена поддержка внутренних комментариев
*******************************************************************************/
if ( dbo.LBC_Version() < 184 )
BEGIN
begin tran

ALTER TABLE [tbl_RequirementComment] ADD IsInternal bit NOT NULL DEFAULT((0))
ALTER TABLE [tbl_RequestComment] ADD IsInternal bit NOT NULL DEFAULT((0))

commit
exec LBC_SetVersion 184
END


/*******************************************************************************
	2012-05-23
	Фикс баги, ключ ProductTypeID ссылается на SiteID
*******************************************************************************/
if ( dbo.LBC_Version() < 185 )
BEGIN
begin tran

ALTER TABLE tbl_Product DROP FK_tbl_Product_tbl_ProductType

ALTER TABLE [tbl_Product]  WITH CHECK ADD CONSTRAINT [FK_tbl_Product_tbl_ProductType] FOREIGN KEY([ProductTypeID])
REFERENCES [dbo].[tbl_ProductType] ([ID])
ALTER TABLE [tbl_Product] CHECK CONSTRAINT [FK_tbl_Product_tbl_ProductType]

ALTER TABLE [tbl_AnalyticReportUserSettings]  WITH CHECK ADD CONSTRAINT [FK_tbl_AnalyticReportUserSetting_tbl_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[tbl_User] ([ID])
ALTER TABLE [tbl_AnalyticReportUserSettings] CHECK CONSTRAINT [FK_tbl_AnalyticReportUserSetting_tbl_User]

ALTER TABLE [tbl_AnalyticReportUserSettings]  WITH CHECK ADD CONSTRAINT [FK_tbl_AnalyticReportUserSetting_tbl_AnalyticReport] FOREIGN KEY([AnalyticReportID])
REFERENCES [dbo].[tbl_AnalyticReport] ([ID])
ALTER TABLE [tbl_AnalyticReportUserSettings] CHECK CONSTRAINT [FK_tbl_AnalyticReportUserSetting_tbl_AnalyticReport]

commit
exec LBC_SetVersion 185
END

/*******************************************************************************
	2012-05-23
	Добавлена программа развития и история баллов
*******************************************************************************/
if ( dbo.LBC_Version() < 186 )
BEGIN
begin tran

DELETE FROM tbl_ContactActivityScore

ALTER TABLE [dbo].[tbl_ContactActivityScore] ADD [ScoreCategory] int NOT NULL
ALTER TABLE [dbo].[tbl_ContactActivityScore] ALTER COLUMN [Score] int NOT NULL

CREATE TABLE [dbo].[tbl_ContactActivityScoreHistory](
	[ID] [uniqueidentifier] NOT NULL,
	[ContactActivityScoreID] [uniqueidentifier] NOT NULL,
	[Operation] [int] NOT NULL,
	[Score] [int] NOT NULL,
	[ActivityDate] [datetime] NOT NULL,
	[Comment] [nvarchar](255) NULL,
 CONSTRAINT [PK_tbl_ContactActivityScoreHistory] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[tbl_ContactActivityScoreHistory]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ContactActivityScoreHistory_tbl_ContactActivityScore] 

FOREIGN KEY([ContactActivityScoreID])
REFERENCES [dbo].[tbl_ContactActivityScore] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_ContactActivityScoreHistory] CHECK CONSTRAINT [FK_tbl_ContactActivityScoreHistory_tbl_ContactActivityScore]
ALTER TABLE [dbo].[tbl_ContactActivityScoreHistory] ADD  CONSTRAINT [DF_tbl_ContactActivityScoreHistory_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_ContactActivityScoreHistory] ADD  CONSTRAINT [DF_tbl_ContactActivityScoreHistory_ActivityDate]  DEFAULT (getdate()) FOR [ActivityDate]

ALTER TABLE [dbo].[tbl_WorkflowTemplateElement] ADD [IsActive] bit NOT NULL DEFAULT((1))

INSERT INTO tbl_Module (Title, Name, TableName) VALUES (N'Программы развития', N'MassWorkflows', N'tbl_MassWorkflow')
INSERT INTO tbl_ObjectTypes (Name) VALUES (N'tbl_MassWorkflow')

CREATE TABLE [dbo].[tbl_MassWorkflow](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteID] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](255) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[WorkflowTemplateID] [uniqueidentifier] NOT NULL,
	[Status] [int] NOT NULL,
	[StartDate] [datetime] NULL,
 CONSTRAINT [PK_tbl_MassWorkflow] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[tbl_MassWorkflow]  WITH CHECK ADD  CONSTRAINT [FK_tbl_MassWorkflow_tbl_Sites] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_Sites] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_MassWorkflow] CHECK CONSTRAINT [FK_tbl_MassWorkflow_tbl_Sites]
ALTER TABLE [dbo].[tbl_MassWorkflow] ADD  CONSTRAINT [DF_tbl_MassWorkflow_ID]  DEFAULT (newid()) FOR [ID]

CREATE TABLE [dbo].[tbl_MassWorkflowContact](
	[ID] [uniqueidentifier] NOT NULL,
	[MassWorkflowID] [uniqueidentifier] NOT NULL,
	[ContactID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_tbl_MassWorkflowContact] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[tbl_MassWorkflowContact]  WITH CHECK ADD  CONSTRAINT [FK_tbl_MassWorkflowContact_tbl_MassWorkflow] FOREIGN KEY
([MassWorkflowID])
REFERENCES [dbo].[tbl_MassWorkflow] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_MassWorkflowContact] CHECK CONSTRAINT [FK_tbl_MassWorkflowContact_tbl_MassWorkflow]
ALTER TABLE [dbo].[tbl_MassWorkflowContact] ADD  CONSTRAINT [DF_tbl_MassWorkflowContact_ID]  DEFAULT (newid()) FOR [ID]

ALTER TABLE [dbo].[tbl_Workflow] ADD [Status] int NOT NULL DEFAULT((0))
ALTER TABLE [dbo].[tbl_Workflow] ADD [MassWorkflowID] uniqueidentifier NULL

commit
exec LBC_SetVersion 186
END

GO

/*******************************************************************************
	2012-05-23
	Добавлена программа развития и история баллов
*******************************************************************************/
if ( dbo.LBC_Version() < 187 )
BEGIN
begin tran

UPDATE tbl_Workflow
SET [Status]=1
WHERE EndDate IS NOT NULL

EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[MassWorkflowInit]
(
	@MassWorkflowID uniqueidentifier
)
AS
BEGIN
	DECLARE @_MassWorkflowContactID uniqueidentifier
	DECLARE @_ContactID uniqueidentifier
	DECLARE @_SiteID uniqueidentifier = (SELECT SiteID FROM tbl_MassWorkflow WHERE ID=@MassWorkflowID)
	DECLARE @_ModuleID uniqueidentifier = (SELECT ID FROM tbl_Module WHERE Name=''Contacts'')

	SELECT mwc.ID, mwc.ContactID
	INTO #MassWorkflowContact
	FROM tbl_MassWorkflowContact AS mwc
	LEFT JOIN tbl_MassWorkflow AS mw ON mw.ID=mwc.MassWorkflowID
	WHERE mwc.MassWorkflowID=@MassWorkflowID AND mw.[Status]=1 AND mw.StartDate IS NULL
	
	WHILE (SELECT COUNT(*) FROM #MassWorkflowContact) > 0
	BEGIN
		SELECT TOP 1 @_MassWorkflowContactID=ID, @_ContactID=ContactID
		FROM #MassWorkflowContact
		
		EXEC WorkflowInit @_ContactID, @_SiteID, @_SiteID, 0, NULL
		
		DELETE #MassWorkflowContact WHERE ID=@_MassWorkflowContactID
	END
	DROP TABLE #MassWorkflowContact
	
	-- Обновление даты начала
	UPDATE tbl_MassWorkflow
	SET StartDate=GETDATE()
	WHERE ID=@MassWorkflowID AND [Status]=1 AND StartDate IS NULL
END'

commit
exec LBC_SetVersion 187
END

/*******************************************************************************
	2012-05-23
	Доабвлен новый отчет
*******************************************************************************/
if ( dbo.LBC_Version() < 188 )
BEGIN
begin tran

UPDATE tbl_Order
SET OrderStatusID = 1
WHERE OrderStatusID = 0

CREATE TABLE [dbo].[tbl_OrderStatus](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_tbl_OrderStatus] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]


commit
exec LBC_SetVersion 188
END

GO

/*******************************************************************************
	2012-05-23
	Доабвлен новый отчет
*******************************************************************************/
if ( dbo.LBC_Version() < 189 )
BEGIN
begin tran

SET IDENTITY_INSERT [dbo].[tbl_OrderStatus] ON
INSERT [dbo].[tbl_OrderStatus] ([ID], [Title]) VALUES (1, N'В планах')
INSERT [dbo].[tbl_OrderStatus] ([ID], [Title]) VALUES (2, N'В работе')
INSERT [dbo].[tbl_OrderStatus] ([ID], [Title]) VALUES (3, N'Выполнен')
INSERT [dbo].[tbl_OrderStatus] ([ID], [Title]) VALUES (4, N'Выполнен частично')
INSERT [dbo].[tbl_OrderStatus] ([ID], [Title]) VALUES (5, N'Отменен')
SET IDENTITY_INSERT [dbo].[tbl_OrderStatus] OFF

ALTER TABLE [dbo].[tbl_Order]  ADD  CONSTRAINT [FK_tbl_Order_tbl_OrderStatus] FOREIGN KEY([OrderStatusID])
REFERENCES [dbo].[tbl_OrderStatus] ([ID])
ALTER TABLE [dbo].[tbl_Order] CHECK CONSTRAINT [FK_tbl_Order_tbl_OrderStatus]


INSERT [dbo].[tbl_Analytic] ([ID], [Title], [Query]) VALUES (N'd6fee125-0cf7-4629-b875-d99ad736b57b', N'Объем продаж', N'DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = ''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)
DECLARE @Period nvarchar(256)

IF @GroupByDays = 1
	SET @Period = ''CAST(TBLOrder.CreatedAt AS DATE)''
ELSE
	SET @Period = ''DATEPART(HOUR, TBLOrder.CreatedAt)''

SET @SQL = ''SELECT '' + @Period + '' AS Period, TBLOrderStatus.Title AS OrderStatus, TBLProductType.Title AS ProductType, TBLAdvertisingCampaign.Title AS AdvertisingCampaign, COUNT(*) AS ExerciseCount, SUM(TBLOrderProducts.TotalAmount) AS Total
FROM tbl_Task AS TBLTask 
LEFT JOIN tbl_OrderProducts AS TBLOrderProducts ON TBLTask.ProductID = TBLOrderProducts.ProductID
LEFT JOIN tbl_Order AS TBLOrder ON TBLOrderProducts.OrderID = TBLOrder.ID
LEFT JOIN tbl_OrderStatus AS TBLOrderStatus ON TBLOrderStatus.ID = TBLOrder.OrderStatusID
LEFT JOIN tbl_Contact AS TBLContact ON TBLContact.ID = TBLOrder.BuyerContactID
LEFT JOIN tbl_AdvertisingCampaign AS TBLAdvertisingCampaign ON TBLAdvertisingCampaign.ID = TBLContact.AdvertisingCampaignID
LEFT JOIN tbl_Product AS TBLProduct ON TBLProduct.ID = TBLOrderProducts.ProductID
LEFT JOIN tbl_ProductType AS TBLProductType ON TBLProduct.ProductTypeID = TBLProductType.ID
WHERE TBLTask.ProductID IS NOT NULL AND TBLOrder.CreatedAt >= @StartDate AND TBLOrder.CreatedAt <= @EndDate AND 
TBLOrder.SiteID = @SiteID ''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + ''GROUP BY '' + @Period + '', TBLProductType.Title, TBLAdvertisingCampaign.Title, TBLOrderStatus.Title
 ORDER BY '' + @Period

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate')


INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'b6b01a48-9803-4026-bf71-bd4601fffc8f', N'd6fee125-0cf7-4629-b875-d99ad736b57b', N'Дата', N'Period', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'156f2ed7-41d7-48a0-b73b-fbe24b63cbec', N'd6fee125-0cf7-4629-b875-d99ad736b57b', N'Количество занятий', N'ExerciseCount', 3, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'77011e10-e289-4dac-99c8-8fa49e949a10', N'd6fee125-0cf7-4629-b875-d99ad736b57b', N'Прибыль', N'Total', 3, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'e5c03eab-e28f-45d0-904c-490fb8d71ec8', N'd6fee125-0cf7-4629-b875-d99ad736b57b', N'Тип продукта', N'ProductType', 2, N'tbl_ProductType')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'3a0a3ed7-cb85-4e01-a5ad-4944720d67fe', N'd6fee125-0cf7-4629-b875-d99ad736b57b', N'Рекламная кампания', N'AdvertisingCampaign', 2, N'tbl_AdvertisingCampaign')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'f2d6be1f-0ccf-4366-90c1-823a205ef627', N'd6fee125-0cf7-4629-b875-d99ad736b57b', N'Статус заказа', N'OrderStatus', 2, N'tbl_OrderStatus')

INSERT [dbo].[tbl_AnalyticReport] ([ID], [AnalyticID], [Title], [Description], [ModuleID]) VALUES (N'7dd9890f-f482-4854-932b-81e15baa634a', N'd6fee125-0cf7-4629-b875-d99ad736b57b', N'Объем продаж', N'Объем продаж', (SELECT TOP 1 ID FROM tbl_Module WHERE Name = 'Orders'))

INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'46dc4972-6705-458c-b8bf-5dadf1d4966b', N'7dd9890f-f482-4854-932b-81e15baa634a', N'b6b01a48-9803-4026-bf71-bd4601fffc8f', 1, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'cfffb6d9-499e-4e73-916d-f88e26b3a425', N'7dd9890f-f482-4854-932b-81e15baa634a', N'156f2ed7-41d7-48a0-b73b-fbe24b63cbec', 2, 1)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'e2a59262-bee8-4d61-a9c0-97e7e93fa8ab', N'7dd9890f-f482-4854-932b-81e15baa634a', N'77011e10-e289-4dac-99c8-8fa49e949a10', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'f7bc2206-0b6e-4ad2-9e9e-2969d2a2eaf7', N'7dd9890f-f482-4854-932b-81e15baa634a', N'3a0a3ed7-cb85-4e01-a5ad-4944720d67fe', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'bee7176a-f3f8-41d3-987f-d41ec7ee505d', N'7dd9890f-f482-4854-932b-81e15baa634a', N'e5c03eab-e28f-45d0-904c-490fb8d71ec8', 2, 1)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'32720f09-9d80-4aee-9d8a-e58b0de1de38', N'7dd9890f-f482-4854-932b-81e15baa634a', N'f2d6be1f-0ccf-4366-90c1-823a205ef627', 2, 0)

commit
exec LBC_SetVersion 189
END


/*******************************************************************************
	2012-05-24
	Обнавлена программа развития
*******************************************************************************/
if ( dbo.LBC_Version() < 190 )
BEGIN
begin tran

DELETE FROM tbl_UserSettings
WHERE ClassName='WebCounter.AdminPanel.Workflows'

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[WorkflowScheduler]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[WorkflowScheduler]
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[WorkflowProcessing]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[WorkflowProcessing]
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[MassWorkflowInit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[MassWorkflowInit]
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[WorkflowInit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[WorkflowInit]
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[WorkflowInit]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[WorkflowInit]
(
	@Parameter uniqueidentifier,
	@SiteID uniqueidentifier,
	@ModuleID uniqueidentifier,
	@AutomaticMethod int,
	@Event int = NULL,
	@MassWorkflowID uniqueidentifier = NULL
)
AS
BEGIN
	DECLARE @sql nvarchar(max)
	DECLARE @ParmDefinition nvarchar(max)
	
	SELECT ID
	INTO #TmpWorkflowTemplate
	FROM tbl_WorkflowTemplate
	WHERE
		SiteID=@SiteID
		AND ModuleID=@ModuleID
		AND [Status]=1 -- Статус действующий
		AND AutomaticMethod=@AutomaticMethod
		AND (StartDate IS NULL OR (StartDate IS NOT NULL AND StartDate<=GETDATE())) -- Актуален по дате
		AND (EndDate IS NULL OR (EndDate IS NOT NULL AND EndDate>=GETDATE())) -- Актуален по дате

		
	DECLARE @_WorkflowTemplateID uniqueidentifier
	DECLARE @_Event int
	
	-- Перебираем подходящие по условию шаблоны
	WHILE (SELECT COUNT(*) FROM #TmpWorkflowTemplate) > 0
	BEGIN
		SELECT TOP 1 @_WorkflowTemplateID=ID
		FROM #TmpWorkflowTemplate
		
		DECLARE @FLAG bit = 1
		
		DECLARE @_WorkflowID uniqueidentifier = NEWID()
		
		-- Берём параметр
		DECLARE @_WorkflowTemplateParameterID uniqueidentifier =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Контакт'' AND IsSystem=1)
		
		-- Проверка на вызов при активном процессе
		DECLARE @_Frequency int
		DECLARE @_DenyMultipleRun bit
		DECLARE @_Condition int
		DECLARE @_ActivityCount int
		SELECT @_Frequency=Frequency, @_DenyMultipleRun=DenyMultipleRun, @_Condition=Condition, @_ActivityCount=ActivityCount, @_Event=[Event]
		FROM tbl_WorkflowTemplate 
		WHERE ID=@_WorkflowTemplateID
		
		-- Есть ли активный процесс по заданному шаблону (нет даты окончания процесса)
		IF ((SELECT COUNT(*)
		FROM tbl_Workflow AS w
		LEFT JOIN tbl_WorkflowParameter AS wp ON wp.WorkflowID=w.ID
		WHERE w.WorkflowTemplateID=@_WorkflowTemplateID
			  AND wp.WorkflowTemplateParameterID=@_WorkflowTemplateParameterID
			  AND wp.Value=@Parameter
			  AND w.EndDate IS NULL) > 0 AND @_DenyMultipleRun = 1)
		BEGIN
			SET @FLAG = 0
		END
			
		-- Проверка на частоту вызова в днях
		DECLARE @_StartDate datetime = (SELECT TOP 1 w.StartDate
									   FROM tbl_Workflow AS w
									   LEFT JOIN tbl_WorkflowParameter AS wp ON wp.WorkflowID=w.ID
									   WHERE w.WorkflowTemplateID=@_WorkflowTemplateID
											 AND wp.WorkflowTemplateParameterID=@_WorkflowTemplateParameterID
									   ORDER BY w.StartDate DESC)
		--SET @_StartDate = DATEADD(day, @_Frequency, @_StartDate)
		IF (@_Frequency <> 0 AND DATEADD(day, @_Frequency, @_StartDate) > GETDATE())
		BEGIN
			SET @FLAG = 0
		END
		
		-- Проверка условий запуска
		IF (@AutomaticMethod=1 AND @FLAG = 1) -- Создание/Изменение записи
		BEGIN
			IF (@_Event<>@Event)
			BEGIN
				SET @FLAG = 0
			END
		END
		
		
		IF (@AutomaticMethod=2 AND @FLAG = 1) -- По действию пользователя
		BEGIN
			SET @FLAG = 0
			
			SELECT ID
			INTO #TmpConditionEvent
			FROM tbl_WorkflowTemplateConditionEvent
			WHERE WorkflowTemplateID=@_WorkflowTemplateID
			
			DECLARE @TotalRowsReturned int
			DECLARE @Count int = 0
			
			DECLARE @CountConditionEvent int = (SELECT COUNT(*) FROM #TmpConditionEvent)
			DECLARE @_ConditionEventID uniqueidentifier
			DECLARE @_Category int
			DECLARE @_ActivityType int
			DECLARE @_Code nvarchar(max)
			DECLARE @_ActualPeriod int
			DECLARE @_Requisite nvarchar(2000)
			DECLARE @_Formula int
			DECLARE @_Value nvarchar(255)
			WHILE (SELECT COUNT(*) FROM #TmpConditionEvent) > 0
			BEGIN
				SELECT TOP 1 @_ConditionEventID=ID
				FROM #TmpConditionEvent
				
				SELECT @_Category=Category,
					   @_ActivityType=ActivityType,
					   @_Code=Code,
					   @_ActualPeriod=ActualPeriod,
					   @_Requisite=Requisite,
					   @_Formula=Formula,
					   @_Value=Value
				FROM tbl_WorkflowTemplateConditionEvent
				WHERE ID=@_ConditionEventID
				
				IF (@_Category=0) -- Действие
				BEGIN
					SET @sql = ''SELECT @TotalRowsReturnedOUT=COUNT(*)
								FROM tbl_ContactActivity
								WHERE ContactID=@ContactID
									  AND ActivityTypeID=@ActivityType''
									  
					IF (@_ActivityType=1 OR @_ActivityType=11)
					BEGIN
						SET @sql = @sql + '' AND ActivityCode LIKE N''''%@Code%'''' ''
					END
					ELSE
					BEGIN
						SET @sql = @sql + '' AND ActivityCode=@Code ''
					END
					
					IF (@_ActualPeriod <> 0)
					BEGIN
						SET @sql = @sql + '' AND CreatedAt > DATEADD(day, (-1 * @ActualPeriod), GETDATE()) ''
					END
					
					-- Исключаем из выборки активность которая была до вызова предыдущего процесса
					IF (@_StartDate IS NOT NULL)
					BEGIN
						SET @sql = @sql + '' AND CreatedAt > @StartDate ''
					END
					
					SET @ParmDefinition = ''@TotalRowsReturnedOUT int OUTPUT, @ContactID uniqueidentifier, @ActivityType int, @Code nvarchar(max), @ActualPeriod int, @StartDate datetime''
					EXECUTE sp_executesql @sql,
							@ParmDefinition,
							@TotalRowsReturnedOUT=@TotalRowsReturned OUTPUT,
							@ContactID=@Parameter,
							@ActivityType=@_ActivityType,
							@Code=@_Code,
							@ActualPeriod=@_ActualPeriod,
							@StartDate=@_StartDate
				END
				
				IF (@TotalRowsReturned > 0)
				BEGIN
					SET @Count = @Count + 1
				END
				
				IF (@_Category=1) -- Значение реквизита
				BEGIN
					DECLARE @_ColumnTypeID int
					DECLARE @_StringValue nvarchar(512)
					DECLARE @_DateValue datetime
					DECLARE @_SiteColumnValueID uniqueidentifier
					SELECT
						@_ColumnTypeID=tbl_SiteColumns.TypeID,
						@_StringValue=tbl_ContactColumnValues.StringValue,
						@_DateValue=tbl_ContactColumnValues.DateValue,
						@_SiteColumnValueID=tbl_ContactColumnValues.SiteColumnValueID
					FROM tbl_ContactColumnValues
					LEFT JOIN tbl_SiteColumns ON tbl_SiteColumns.ID=tbl_ContactColumnValues.SiteColumnID
					WHERE ContactID=@Parameter AND SiteColumnID=CAST(@_Requisite AS uniqueidentifier)
					
					-- Строка/Число/Текст
					IF ((@_ColumnTypeID=1 OR @_ColumnTypeID=4 OR @_ColumnTypeID=5)
						AND ((@_Formula=4 AND @_StringValue LIKE ''%''+@_Value)
							  OR (@_Formula=5 AND @_StringValue LIKE @_Value)
							)
						)
					BEGIN
						SET @Count = @Count + 1
					END
					-- Дата
					IF (@_ColumnTypeID=2
						AND ((@_Formula=7 AND @_DateValue < CAST(@_Value AS datetime))
							  OR (@_Formula=9 AND @_DateValue <= CAST(@_Value AS datetime))
							  OR (@_Formula=6 AND @_DateValue > CAST(@_Value AS datetime))
							  OR (@_Formula=8 AND @_DateValue >= CAST(@_Value AS datetime))
							)
					   )
					   BEGIN
							SET @Count = @Count + 1
					   END
					--Справочник
					IF (@_ColumnTypeID=3
						AND ((@_Formula=2 AND (@_SiteColumnValueID IS NULL OR @_SiteColumnValueID = N''00000000-0000-0000-0000-000000000000''))
							OR (@_Formula=1 AND (@_SiteColumnValueID IS NOT NULL AND @_SiteColumnValueID <> N''00000000-0000-0000-0000-000000000000''))
							OR (@_Formula=3 AND @_SiteColumnValueID = CAST(@_Value AS uniqueidentifier))
							)
					   )
					   BEGIN
							SET @Count = @Count + 1
					   END
				END
				
				DECLARE @_Scores int
				IF (@_Category=2) -- Балл по поведению
				BEGIN
					SET @_Scores = (SELECT Score FROM tbl_ContactActivityScore WHERE ID=@Parameter AND SiteActivityScoreTypeID=CAST(@_Requisite AS uniqueidentifier))
					IF ((@_Formula = 7 AND @_Scores < @_Value)
						OR (@_Formula = 9 AND @_Scores <= @_Value)
						OR (@_Formula = 6 AND @_Scores > @_Value)
						OR (@_Formula = 8 AND @_Scores >= @_Value))
					BEGIN
						SET @Count = @Count + 1
					END
				END
				
				IF (@_Category=3) -- Балл по характеристикам
				BEGIN
					SET @_Scores = (SELECT CharacteristicsScore FROM tbl_Contact WHERE ID=@Parameter)
					IF ((@_Formula = 7 AND @_Scores < @_Value)
						OR (@_Formula = 9 AND @_Scores <= @_Value)
						OR (@_Formula = 6 AND @_Scores > @_Value)
						OR (@_Formula = 8 AND @_Scores >= @_Value))
					BEGIN
						SET @Count = @Count + 1
					END
				END
				
				DELETE #TmpConditionEvent WHERE ID=@_ConditionEventID
			END
			DROP TABLE #TmpConditionEvent
			
			IF (@CountConditionEvent<>0
				AND ((@_Condition=0 AND @CountConditionEvent=@Count)
				OR (@_Condition=1 AND @Count>0)
				OR (@_Condition=2 AND @Count>=@_ActivityCount)
				))
			BEGIN
				SET @FLAG = 1
			END
		END
		
		
		IF (@FLAG = 1)
		BEGIN
			DECLARE @_WorkflowTemplateElementID uniqueidentifier = 
			(SELECT tbl_WorkflowTemplateElement.ID FROM tbl_WorkflowTemplate
			LEFT JOIN tbl_WorkflowTemplateElement ON tbl_WorkflowTemplateElement.WorkflowTemplateID=tbl_WorkflowTemplate.ID
			WHERE tbl_WorkflowTemplate.ID=@_WorkflowTemplateID AND tbl_WorkflowTemplateElement.ElementType=5) -- Начало процесса
			
			-- Найден элемент с типом "Начало процесса"
			IF (@_WorkflowTemplateElementID IS NOT NULL)
			BEGIN
				INSERT INTO tbl_Workflow (ID, SiteID, WorkflowTemplateID, StartDate, MassWorkflowID)
				VALUES (@_WorkflowID, @SiteID, @_WorkflowTemplateID, GETDATE(), @MassWorkflowID)
				
				INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
				VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, @Parameter)


		SET @_WorkflowTemplateParameterID =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Компания'' AND IsSystem=1)
		INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
		VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, (SELECT CompanyID FROM tbl_Contact WHERE ID=@Parameter))
		
		SET @_WorkflowTemplateParameterID =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Автор (роль)'' AND IsSystem=1)
		INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
		VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, NULL)
		
		SET @_WorkflowTemplateParameterID =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Ответственный по компании (роль)'' AND IsSystem=1)
		INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
		VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, (SELECT tbl_Company.OwnerID FROM tbl_Contact LEFT JOIN tbl_Company ON tbl_Company.ID=tbl_Contact.CompanyID WHERE tbl_Contact.ID=@Parameter))

				
				DECLARE @WorkflowElementID uniqueidentifier = NEWID()
				INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
				VALUES (@WorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 1)
				
				EXEC WorkflowProcessing @WorkflowElementID
			END
		END
	    
		DELETE #TmpWorkflowTemplate WHERE ID=@_WorkflowTemplateID
	END
	DROP TABLE #TmpWorkflowTemplate
END'
END

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[MassWorkflowInit]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[MassWorkflowInit]
(
	@MassWorkflowID uniqueidentifier
)
AS
BEGIN
	DECLARE @_MassWorkflowContactID uniqueidentifier
	DECLARE @_ContactID uniqueidentifier
	DECLARE @_SiteID uniqueidentifier = (SELECT SiteID FROM tbl_MassWorkflow WHERE ID=@MassWorkflowID)
	DECLARE @_ModuleID uniqueidentifier = (SELECT ID FROM tbl_Module WHERE Name=''Contacts'')

	SELECT mwc.ID, mwc.ContactID
	INTO #MassWorkflowContact
	FROM tbl_MassWorkflowContact AS mwc
	LEFT JOIN tbl_MassWorkflow AS mw ON mw.ID=mwc.MassWorkflowID
	WHERE mwc.MassWorkflowID=@MassWorkflowID AND mw.[Status]=1 AND mw.StartDate IS NULL
	
	WHILE (SELECT COUNT(*) FROM #MassWorkflowContact) > 0
	BEGIN
		SELECT TOP 1 @_MassWorkflowContactID=ID, @_ContactID=ContactID
		FROM #MassWorkflowContact
		
		EXEC WorkflowInit @_ContactID, @_SiteID, @_ModuleID, 0, NULL, @MassWorkflowID
		
		DELETE #MassWorkflowContact WHERE ID=@_MassWorkflowContactID
	END
	DROP TABLE #MassWorkflowContact
	
	-- Обновление даты начала
	UPDATE tbl_MassWorkflow
	SET StartDate=GETDATE()
	WHERE ID=@MassWorkflowID AND [Status]=1 AND StartDate IS NULL
END'
END

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[WorkflowProcessing]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[WorkflowProcessing]
(
	@_WorkflowElementID uniqueidentifier, -- Входящий элемент
	@_StartElementResult nvarchar(255) = NULL -- Результат выполнения элемента процесса
)
AS
BEGIN
	DECLARE @_SiteID uniqueidentifier
	DECLARE @_WorkflowStartDate datetime
	DECLARE @_WorkflowID uniqueidentifier
	DECLARE @_WorkflowTemplateContactID uniqueidentifier
	DECLARE @_WorkflowTemplateElementID uniqueidentifier
	DECLARE @_WorkflowParameterID uniqueidentifier
	DECLARE @_ControlDate datetime
	DECLARE @_WorkflowElementStatus int = 0
	DECLARE @_WorkflowStatus int = 0
	DECLARE @_WorkflowResult nvarchar(255)
	
	DECLARE @_StartAfter int
	DECLARE @_StartPeriod int
	DECLARE @_DurationHours int
	DECLARE @_DurationMinutes int
	DECLARE @_ControlAfter int
	DECLARE @_ControlPeriod int
	DECLARE @_ControlFromBeginProccess bit
	
	SELECT @_WorkflowID=w.WorkflowID,
		   @_WorkflowTemplateElementID=w.WorkflowTemplateElementID,
		   @_ControlDate=w.ControlDate,
		   @_WorkflowTemplateContactID=wt.ContactID,
		   @_WorkflowStatus=wf.[Status]
		   --@_StartAfter=t.StartAfter,
		   --@_StartPeriod=t.StartPeriod,
		   --@_ControlAfter=t.ControlAfter,
		   --@_ControlPeriod=t.ControlPeriod,
		   --@_ControlFromBeginProccess=t.ControlFromBeginProccess
	FROM tbl_WorkflowElement AS w
	LEFT JOIN tbl_WorkflowTemplateElement AS t ON t.ID=w.WorkflowTemplateElementID
	LEFT JOIN tbl_WorkflowTemplate AS wt ON wt.ID=t.WorkflowTemplateID
	LEFT JOIN tbl_Workflow AS wf ON wf.ID=w.WorkflowID
	WHERE w.ID=@_WorkflowElementID AND (t.ElementType<>1 OR (t.ElementType=1 AND w.[Status]=0))
	
	SELECT @_SiteID=SiteID, @_WorkflowStartDate=StartDate
	FROM tbl_Workflow
	WHERE ID=@_WorkflowID
	
IF (@_WorkflowStatus=0)
BEGIN	
	
	-- Выбираем все элементы по связям, где входящий элемент является начальным
	-- и с выходящим результатом
	SELECT EndElementID
	INTO #WorkflowTemplateElementRelation
	FROM tbl_WorkflowTemplateElementRelation
	WHERE StartElementID=@_WorkflowTemplateElementID AND (StartElementResult=@_StartElementResult OR @_StartElementResult IS NULL)
	
	-- Если выходы с элемента есть
	IF ((SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0)
	BEGIN
		SET @_WorkflowElementStatus = 1
		
		-- Входящие элемент не просрочен
		IF ((@_ControlDate IS NULL) OR (@_ControlDate > GETDATE()))
		BEGIN
					WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0
					BEGIN
						SELECT TOP 1 @_WorkflowTemplateElementID=EndElementID
						FROM #WorkflowTemplateElementRelation
						
						IF ((SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND WorkflowTemplateElementID=@_WorkflowTemplateElementID) = 0)
						BEGIN
							DECLARE @_WorkflowTemplateElementType int
							DECLARE @_WorkflowTemplateElementName nvarchar(255)
							SELECT @_WorkflowTemplateElementType=ElementType, @_WorkflowTemplateElementName=Name
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							DECLARE @_InsertedWorkflowElementID uniqueidentifier = NEWID()
							
	SELECT @_StartAfter=StartAfter,
		   @_StartPeriod=StartPeriod,
		   @_DurationHours=DurationHours,
		   @_DurationMinutes=DurationMinutes,
		   @_ControlAfter=ControlAfter,
		   @_ControlPeriod=ControlPeriod,
		   @_ControlFromBeginProccess=ControlFromBeginProccess
	FROM tbl_WorkflowTemplateElement
	WHERE ID=@_WorkflowTemplateElementID
							
							-- Тип элемента "Окончание процесса"
							IF (@_WorkflowTemplateElementType=6)
							BEGIN
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 1)
								
								UPDATE tbl_Workflow
								SET EndDate=GETDATE(), [Status]=1
								WHERE ID=@_WorkflowID
							END
							
							-- определяем параметер
							SET @_WorkflowParameterID =
							(SELECT tbl_WorkflowParameter.[Value]
							FROM tbl_WorkflowParameter
							LEFT JOIN tbl_WorkflowTemplateParameter ON tbl_WorkflowTemplateParameter.ID=tbl_WorkflowParameter.WorkflowTemplateParameterID
							WHERE tbl_WorkflowParameter.WorkflowID=@_WorkflowID
								  AND tbl_WorkflowTemplateParameter.Name=N''Контакт''
								  AND tbl_WorkflowTemplateParameter.IsSystem=1)
								  
							-- определяем через сколько запускать элемент, если 0 то сразу
							DECLARE @_ActionDate datetime = GETDATE()
							IF (@_StartAfter <> 0)
							BEGIN
								SET @_ActionDate = CASE
									WHEN @_StartPeriod = 0 THEN DATEADD(minute, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 1 THEN DATEADD(hour, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 2 THEN DATEADD(day, @_StartAfter, @_ActionDate)
								END
							END
							
							-- дата контроля
							SET @_ControlDate = GETDATE()
							IF (@_ControlFromBeginProccess=1) -- От начала процесса
							BEGIN
								SET @_ControlDate = @_WorkflowStartDate
							END
							
							SET @_ControlDate = CASE
								WHEN @_ControlPeriod = 0 THEN DATEADD(minute, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 1 THEN DATEADD(hour, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 2 THEN DATEADD(day, @_ControlAfter, @_ControlDate)
							END
							
							
							-- Тип элемента "Сообщение"
							IF (@_WorkflowTemplateElementType = 0)
							BEGIN
								-- Начало добавления сообщения в очередь
								DECLARE @_SiteActionTemplateID uniqueidentifier = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActionTemplateID'')
								
								DECLARE @MessageTitle nvarchar(255)
								DECLARE @MessageText nvarchar(max)
								SELECT @MessageTitle=MessageCaption, @MessageText=MessageBody
								FROM tbl_SiteActionTemplate
								WHERE ID=@_SiteActionTemplateID
								
								DECLARE @_SiteActionID uniqueidentifier = NEWID()
								INSERT INTO tbl_SiteAction (ID, SiteID, SiteActionTemplateID, ContactID, ActionStatusID, ActionDate, MessageTitle, MessageText)
								VALUES (@_SiteActionID, @_SiteID, @_SiteActionTemplateID, @_WorkflowParameterID, 1, @_ActionDate, @MessageTitle, @MessageText)
								-- Конец добавления сообщения в очередь
								
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_SiteActionID)
							END
							
							-- Тип элемента "Ожидание события"
							IF (@_WorkflowTemplateElementType = 2)
							BEGIN
								IF (@_ControlAfter<>0)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], ControlDate)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_ControlDate)
								END
								ELSE
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0)
								END
							END
							
							-- Тип элемента "Действие"
							IF (@_WorkflowTemplateElementType = 3)
							BEGIN
								-- Начало добавления действия
								DECLARE @_ContactActivityDescription nvarchar(255) = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ContactActivityDescription'')
								
								DECLARE @_ContactActivityID uniqueidentifier = NEWID()
								INSERT INTO tbl_ContactActivity (ID, SiteID, ContactID, CreatedAt, ActivityTypeID, ActivityCode)
								VALUES (@_ContactActivityID, @_SiteID, @_WorkflowParameterID, GETDATE(), 13, @_ContactActivityDescription)
								-- Конец добавления действия
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1, @_ContactActivityID)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Задача"
							IF (@_WorkflowTemplateElementType = 1)
							BEGIN
								-- Начало добавления задачи
								DECLARE @_TaskID uniqueidentifier = NEWID()
								DECLARE @_TaskTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskType'') AS uniqueidentifier)
								
								DECLARE @_IsImportantTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsImportantTask'') AS bit)
								
								DECLARE @_IsUrgentTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsUrgentTask'') AS bit)
								
								DECLARE @_TaskEndDate datetime = @_ActionDate
								SET @_TaskEndDate = DATEADD(hour, @_DurationHours, @_TaskEndDate)
								SET @_TaskEndDate = DATEADD(minute, @_DurationMinutes, @_TaskEndDate)
								INSERT INTO tbl_Task (ID, SiteID, Title, TaskTypeID, StartDate, EndDate, DateOfControl, IsImportantTask, PlanDurationMinutes, PlanDurationHours, ResponsibleID, CreatorID, IsUrgentTask, TaskStatusID)
								VALUES (@_TaskID, @_SiteID, @_WorkflowTemplateElementName, @_TaskTypeID, @_ActionDate, @_TaskEndDate, @_ControlDate, @_IsImportantTask, @_DurationMinutes, @_DurationHours, @_WorkflowTemplateContactID, @_WorkflowTemplateContactID, @_IsUrgentTask, 1)
								-- Конец добавления задачи
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, ControlDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), @_ControlDate, 0, @_TaskID)
							END
							
							-- Тип элемента "Сегментация"
							IF (@_WorkflowTemplateElementType = 7)
							BEGIN
								SELECT ID
								INTO #WorkflowTemplateElementTag
								FROM tbl_WorkflowTemplateElementTag
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID
								
								DECLARE @_WorkflowTemplateElementTagID uniqueidentifier
								DECLARE @_SiteTagID uniqueidentifier
								DECLARE @_Operation int
								WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementTag) > 0
								BEGIN
									SELECT TOP 1 @_WorkflowTemplateElementTagID=ID
									FROM #WorkflowTemplateElementTag
									
									SELECT @_SiteTagID=SiteTagID, @_Operation=Operation
									FROM tbl_WorkflowTemplateElementTag
									WHERE ID=@_WorkflowTemplateElementTagID
									
									IF (@_Operation = 0)
									BEGIN
										DELETE FROM tbl_SiteTagObjects
										WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID
									END
									ELSE
									BEGIN
										IF (SELECT COUNT(*) FROM tbl_SiteTagObjects WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID) = 0
										BEGIN
											INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID)
											VALUES (@_SiteTagID, @_WorkflowParameterID)
										END
									END
									
									DELETE #WorkflowTemplateElementTag WHERE ID=@_WorkflowTemplateElementTagID
								END
								DROP TABLE #WorkflowTemplateElementTag

								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
						END
						
						DELETE #WorkflowTemplateElementRelation WHERE EndElementID=@_WorkflowTemplateElementID
					END
					DROP TABLE #WorkflowTemplateElementRelation
		END
		-- Входящие элемент просрочен
		ELSE
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
	END
	-- Если нет выходов с элемента
	ELSE
	BEGIN
		SET @_WorkflowElementStatus = 2
	END
	
	
	-- Обновление статуса элемента процесса
	UPDATE tbl_WorkflowElement
	SET EndDate=GETDATE(),
		[Status]=@_WorkflowElementStatus,
		Result=@_StartElementResult
	WHERE ID=@_WorkflowElementID
	
END	
END'
END

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[WorkflowScheduler]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[WorkflowScheduler] 
AS
BEGIN
	DECLARE @_WorkflowElementID uniqueidentifier
	DECLARE @_WorkflowID uniqueidentifier
	DECLARE @sql nvarchar(max)
	DECLARE @ParmDefinition nvarchar(max)
	DECLARE @Parameter uniqueidentifier
	DECLARE @ElementType int

	SELECT tbl_WorkflowElement.ID, tbl_WorkflowTemplateElement.ElementType
	INTO #TmpWorkflowElement
	FROM tbl_WorkflowElement
	LEFT JOIN tbl_WorkflowTemplateElement ON tbl_WorkflowTemplateElement.ID=tbl_WorkflowElement.WorkflowTemplateElementID
	LEFT JOIN tbl_Workflow ON tbl_Workflow.ID=tbl_WorkflowElement.WorkflowID
	WHERE tbl_WorkflowElement.[Status]=0 -- В ожидании
		  AND tbl_Workflow.[Status]=0 -- Исполняется
		  AND (tbl_WorkflowTemplateElement.ElementType=2 -- Ожидание события
			   OR tbl_WorkflowTemplateElement.ElementType=1) -- Задача
		  
	WHILE (SELECT COUNT(*) FROM #TmpWorkflowElement) > 0
	BEGIN
		SELECT TOP 1 @_WorkflowElementID=ID, @ElementType=ElementType
		FROM #TmpWorkflowElement
		
		DECLARE @_WorkflowElementValue nvarchar(255)
		DECLARE @_WorkflowElementStartDate datetime
		DECLARE @_WorkflowElementControlDate datetime
		
		IF (@ElementType=1)
		BEGIN
					DECLARE @_WorkflowTemplateElementID uniqueidentifier
					DECLARE @_WorkflowTemplateElementResultID uniqueidentifier
					
					SELECT @_WorkflowElementValue=tbl_WorkflowElement.Value,
						   @_WorkflowElementStartDate=tbl_WorkflowElement.StartDate,
						   @_WorkflowElementControlDate=tbl_WorkflowElement.ControlDate,
						   @_WorkflowID=tbl_WorkflowElement.WorkflowID,
						   @_WorkflowTemplateElementID=tbl_WorkflowTemplateElement.ID
					FROM tbl_WorkflowElement
					LEFT JOIN tbl_WorkflowTemplateElement ON tbl_WorkflowTemplateElement.ID=tbl_WorkflowElement.WorkflowTemplateElementID
					WHERE tbl_WorkflowElement.ID=@_WorkflowElementID
					
					IF (@_WorkflowElementControlDate < GETDATE())
					BEGIN
							SELECT @_WorkflowTemplateElementResultID=ID
							FROM tbl_WorkflowTemplateElementResult
							WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''Задача просрочена''
							
							EXEC WorkflowProcessing @_WorkflowElementID, @_WorkflowTemplateElementResultID
					END
					ELSE
					BEGIN
						DECLARE @_TaskStatusID int
						SELECT @_TaskStatusID=TaskStatusID
						FROM tbl_Task
						WHERE ID=CAST(@_WorkflowElementValue AS uniqueidentifier)
						
						IF (@_TaskStatusID = 5) --Отменена
						BEGIN
							SELECT @_WorkflowTemplateElementResultID=ID
							FROM tbl_WorkflowTemplateElementResult
							WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''Задача отменена''
							
							EXEC WorkflowProcessing @_WorkflowElementID, @_WorkflowTemplateElementResultID
						END
					END
		END
		
		IF (@ElementType=2)
		BEGIN
					DECLARE @_WorkflowTemplateElementEventID uniqueidentifier
					
					SELECT @_WorkflowTemplateElementEventID=tbl_WorkflowTemplateElementEvent.ID,
						   @_WorkflowElementStartDate=tbl_WorkflowElement.StartDate,
						   @_WorkflowElementControlDate=tbl_WorkflowElement.ControlDate,
						   @_WorkflowID=tbl_WorkflowElement.WorkflowID
					FROM tbl_WorkflowElement
					LEFT JOIN tbl_WorkflowTemplateElement ON tbl_WorkflowTemplateElement.ID=tbl_WorkflowElement.WorkflowTemplateElementID
					LEFT JOIN tbl_WorkflowTemplateElementEvent ON tbl_WorkflowTemplateElementEvent.WorkflowTemplateElementID=tbl_WorkflowTemplateElement.ID
					WHERE tbl_WorkflowElement.ID=@_WorkflowElementID
					
					IF ((@_WorkflowElementControlDate IS NOT NULL) AND (@_WorkflowElementControlDate < GETDATE()))
					BEGIN
						EXEC WorkflowProcessing @_WorkflowElementID, 0
					END
					ELSE
					BEGIN

					
					SET @Parameter =
					(SELECT tbl_WorkflowParameter.[Value]
					FROM tbl_WorkflowParameter
					LEFT JOIN tbl_WorkflowTemplateParameter ON tbl_WorkflowTemplateParameter.ID=tbl_WorkflowParameter.WorkflowTemplateParameterID
					WHERE tbl_WorkflowParameter.WorkflowID=@_WorkflowID
						  AND tbl_WorkflowTemplateParameter.Name=N''Контакт''
						  AND tbl_WorkflowTemplateParameter.IsSystem=1)
						  
						  
					DECLARE @_Condition int
					DECLARE @_ActivityCount int
					SELECT @_Condition=Condition, @_ActivityCount=ActivityCount
					FROM tbl_WorkflowTemplateElementEvent 
					WHERE ID=@_WorkflowTemplateElementEventID

					
					
						SELECT ID
						INTO #TmpConditionEvent
						FROM tbl_WorkflowTemplateConditionEvent
						WHERE WorkflowTemplateElementEventID=@_WorkflowTemplateElementEventID
						
						DECLARE @TotalRowsReturned int
						DECLARE @Count int = 0
						
						DECLARE @CountConditionEvent int = (SELECT COUNT(*) FROM #TmpConditionEvent)
						DECLARE @_ConditionEventID uniqueidentifier
						DECLARE @_Category int
						DECLARE @_ActivityType int
						DECLARE @_Code nvarchar(max)
						DECLARE @_ActualPeriod int
						DECLARE @_Requisite nvarchar(2000)
						DECLARE @_Formula int
						DECLARE @_Value nvarchar(255)
						WHILE (SELECT COUNT(*) FROM #TmpConditionEvent) > 0
						BEGIN
							SELECT TOP 1 @_ConditionEventID=ID
							FROM #TmpConditionEvent
							
							SELECT @_Category=Category,
								   @_ActivityType=ActivityType,
								   @_Code=Code,
								   @_ActualPeriod=ActualPeriod,
								   @_Requisite=Requisite,
								   @_Formula=Formula,
								   @_Value=Value
							FROM tbl_WorkflowTemplateConditionEvent
							WHERE ID=@_ConditionEventID
							
							IF (@_Category=0) -- Действие
							BEGIN
								SET @sql = ''SELECT @TotalRowsReturnedOUT=COUNT(*)
											FROM tbl_ContactActivity
											WHERE ContactID=@ContactID
												  AND ActivityTypeID=@ActivityType
												  AND CreatedAt > @WorkflowElementStartDate''
												  
								IF (@_ActivityType=1 OR @_ActivityType=11)
								BEGIN
									SET @sql = @sql + '' AND ActivityCode LIKE N''''%@Code%'''' ''
								END
								ELSE
								BEGIN
									SET @sql = @sql + '' AND ActivityCode=@Code ''
								END
								
								IF (@_ActualPeriod <> 0)
								BEGIN
									SET @sql = @sql + '' AND CreatedAt > DATEADD(day, (-1 * @ActualPeriod), GETDATE()) ''
								END
								
								SET @ParmDefinition = ''@TotalRowsReturnedOUT int OUTPUT, @ContactID uniqueidentifier, @ActivityType int, @Code nvarchar(max), @ActualPeriod int, @WorkflowElementStartDate datetime''
								EXECUTE sp_executesql @sql,
										@ParmDefinition,
										@TotalRowsReturnedOUT=@TotalRowsReturned OUTPUT,
										@ContactID=@Parameter,
										@ActivityType=@_ActivityType,
										@Code=@_Code,
										@ActualPeriod=@_ActualPeriod,
										@WorkflowElementStartDate=@_WorkflowElementStartDate
							END
							
							IF (@TotalRowsReturned > 0)
							BEGIN
								SET @Count = @Count + 1
							END
							
							IF (@_Category=1) -- Значение реквизита
							BEGIN
								DECLARE @_ColumnTypeID int
								DECLARE @_StringValue nvarchar(512)
								DECLARE @_DateValue datetime
								DECLARE @_SiteColumnValueID uniqueidentifier
								SELECT
									@_ColumnTypeID=tbl_SiteColumns.TypeID,
									@_StringValue=tbl_ContactColumnValues.StringValue,
									@_DateValue=tbl_ContactColumnValues.DateValue,
									@_SiteColumnValueID=tbl_ContactColumnValues.SiteColumnValueID
								FROM tbl_ContactColumnValues
								LEFT JOIN tbl_SiteColumns ON tbl_SiteColumns.ID=tbl_ContactColumnValues.SiteColumnID
								WHERE ContactID=@Parameter AND SiteColumnID=CAST(@_Requisite AS uniqueidentifier)
								
								-- Строка/Число/Текст
								IF ((@_ColumnTypeID=1 OR @_ColumnTypeID=4 OR @_ColumnTypeID=5)
									AND ((@_Formula=4 AND @_StringValue LIKE ''%''+@_Value)
										  OR (@_Formula=5 AND @_StringValue LIKE @_Value)
										)
									)
								BEGIN
									SET @Count = @Count + 1
								END
								-- Дата
								IF (@_ColumnTypeID=2
									AND ((@_Formula=7 AND @_DateValue < CAST(@_Value AS datetime))
										  OR (@_Formula=9 AND @_DateValue <= CAST(@_Value AS datetime))
										  OR (@_Formula=6 AND @_DateValue > CAST(@_Value AS datetime))
										  OR (@_Formula=8 AND @_DateValue >= CAST(@_Value AS datetime))
										)
								   )
								   BEGIN
										SET @Count = @Count + 1
								   END
								--Справочник
								IF (@_ColumnTypeID=3
									AND ((@_Formula=2 AND (@_SiteColumnValueID IS NULL OR @_SiteColumnValueID = N''00000000-0000-0000-0000-000000000000''))
										OR (@_Formula=1 AND (@_SiteColumnValueID IS NOT NULL AND @_SiteColumnValueID <> N''00000000-0000-0000-0000-000000000000''))
										OR (@_Formula=3 AND @_SiteColumnValueID = CAST(@_Value AS uniqueidentifier))
										)
								   )
								   BEGIN
										SET @Count = @Count + 1
								   END
							END
							
							DECLARE @_Scores int
							IF (@_Category=2) -- Балл по поведению
							BEGIN
								SET @_Scores = (SELECT Score FROM tbl_ContactActivityScore WHERE ID=@Parameter AND SiteActivityScoreTypeID=CAST(@_Requisite AS uniqueidentifier))
								IF ((@_Formula = 7 AND @_Scores < @_Value)
									OR (@_Formula = 9 AND @_Scores <= @_Value)
									OR (@_Formula = 6 AND @_Scores > @_Value)
									OR (@_Formula = 8 AND @_Scores >= @_Value))
								BEGIN
									SET @Count = @Count + 1
								END
							END
							
							IF (@_Category=3) -- Балл по характеристикам
							BEGIN
								SET @_Scores = (SELECT CharacteristicsScore FROM tbl_Contact WHERE ID=@Parameter)
								IF ((@_Formula = 7 AND @_Scores < @_Value)
									OR (@_Formula = 9 AND @_Scores <= @_Value)
									OR (@_Formula = 6 AND @_Scores > @_Value)
									OR (@_Formula = 8 AND @_Scores >= @_Value))
								BEGIN
									SET @Count = @Count + 1
								END
							END
							
							DELETE #TmpConditionEvent WHERE ID=@_ConditionEventID
						END
						DROP TABLE #TmpConditionEvent
						
					
						IF (@CountConditionEvent<>0
							AND ((@_Condition=0 AND @CountConditionEvent=@Count)
							OR (@_Condition=1 AND @Count>0)
							OR (@_Condition=2 AND @Count>=@_ActivityCount)
							))
						BEGIN
							EXEC WorkflowProcessing @_WorkflowElementID, 1
						END
						
						END
		END
		
		DELETE #TmpWorkflowElement WHERE ID=@_WorkflowElementID
	END
	DROP TABLE #TmpWorkflowElement
END
'
END

EXEC dbo.sp_executesql @statement = N'ALTER TRIGGER [dbo].[WorkflowContact] ON [dbo].[tbl_Contact]
	FOR INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @Action as char(1);
    SET @Action = ''I''; -- Set Action to Insert by default.
    IF EXISTS(SELECT * FROM DELETED)
    BEGIN
        SET @Action = 
            CASE
                WHEN EXISTS(SELECT * FROM INSERTED) THEN ''U'' -- Set Action to Updated.
                ELSE ''D'' -- Set Action to Deleted.       
            END
    END

	DECLARE @ModuleID uniqueidentifier = (SELECT ID FROM tbl_Module WHERE Name=''Contacts'')
	DECLARE @_ContactID uniqueidentifier
	DECLARE @_SiteID uniqueidentifier
	SELECT @_ContactID=ID,
		   @_SiteID=SiteID
	FROM inserted
	
	IF (@Action=''I'')
	BEGIN
		EXEC WorkflowInit @_ContactID, @_SiteID, @ModuleID, 1, 0, NULL
	END
	ELSE
	BEGIN
		IF (UPDATE(UserFullName)
			OR UPDATE(Email)
			OR UPDATE(Phone)
			OR UPDATE(ReadyToSellID)
			OR UPDATE(PriorityID)
			OR UPDATE(StatusID)
			OR UPDATE(Surname)
			OR UPDATE(Name)
			OR UPDATE(Patronymic)
			OR UPDATE(CellularPhone)
			OR UPDATE(CellularPhoneStatusID)
			OR UPDATE(EmailStatusID)
			OR UPDATE(JobTitle))
		BEGIN
			EXEC WorkflowInit @_ContactID, @_SiteID, @ModuleID, 1, 1, NULL
		END
	END
END'

EXEC dbo.sp_executesql @statement = N'ALTER TRIGGER [dbo].[WorkflowContactActivity] ON [dbo].[tbl_ContactActivity]
	FOR INSERT
AS
BEGIN
	DECLARE @ModuleID uniqueidentifier = (SELECT ID FROM tbl_Module WHERE Name=''Contacts'')
	
	DECLARE @_ContactID uniqueidentifier
	DECLARE @_SiteID uniqueidentifier
	SELECT @_ContactID=ContactID,
		   @_SiteID=SiteID
	FROM inserted
	
	EXEC WorkflowInit @_ContactID, @_SiteID, @ModuleID, 2, NULL, NULL
END'

commit
exec LBC_SetVersion 190
END

/*******************************************************************************
	2012-05-25
	Обновление аналитики
*******************************************************************************/
if ( dbo.LBC_Version() < 191 )
BEGIN
begin tran

ALTER TABLE [tbl_AnalyticAxis] ADD [Query] nvarchar(max) NULL

commit
exec LBC_SetVersion 191
END

GO

/*******************************************************************************
	2012-05-25
	Обновление аналитики
*******************************************************************************/
if ( dbo.LBC_Version() < 192 )
BEGIN
begin tran

UPDATE tbl_Analytic
SET Query =
N'DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = ''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)
DECLARE @Period nvarchar(256)

IF @GroupByDays = 1
	SET @Period = ''CAST(TBLOrder.CreatedAt AS DATE)''
ELSE
	SET @Period = ''DATEPART(HOUR, TBLOrder.CreatedAt)''

SET @SQL = ''SELECT '' + @Period + '' AS Period, TBLOrderStatus.Title AS OrderStatus, TBLContact.UserFullName AS OrderResponsible, TBLProductType.Title AS ProductType, TBLAdvertisingCampaign.Title AS AdvertisingCampaign, SUM(TBLOrderProducts.Quantity) AS ExerciseCount, SUM(TBLOrderProducts.TotalAmount) AS Total
FROM tbl_Task AS TBLTask 
LEFT JOIN tbl_OrderProducts AS TBLOrderProducts ON TBLTask.ProductID = TBLOrderProducts.ProductID
LEFT JOIN tbl_Order AS TBLOrder ON TBLOrderProducts.OrderID = TBLOrder.ID
LEFT JOIN tbl_OrderStatus AS TBLOrderStatus ON TBLOrderStatus.ID = TBLOrder.OrderStatusID
LEFT JOIN tbl_Contact AS TBLContact ON TBLContact.ID = TBLOrder.ExecutorContactID
LEFT JOIN tbl_AdvertisingCampaign AS TBLAdvertisingCampaign ON TBLAdvertisingCampaign.ID = TBLContact.AdvertisingCampaignID
LEFT JOIN tbl_Product AS TBLProduct ON TBLProduct.ID = TBLOrderProducts.ProductID
LEFT JOIN tbl_ProductType AS TBLProductType ON TBLProduct.ProductTypeID = TBLProductType.ID
WHERE TBLTask.ProductID IS NOT NULL AND TBLOrder.CreatedAt >= @StartDate AND TBLOrder.CreatedAt <= @EndDate AND 
TBLOrder.SiteID = @SiteID ''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + ''GROUP BY '' + @Period + '', TBLProductType.Title, TBLAdvertisingCampaign.Title, TBLOrderStatus.Title, TBLContact.UserFullName
 ORDER BY '' + @Period

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate'

WHERE ID = 'd6fee125-0cf7-4629-b875-d99ad736b57b'

INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet], [Query]) VALUES (N'1fbfe891-c55c-4533-bc63-47dda8afc44a', N'd6fee125-0cf7-4629-b875-d99ad736b57b', N'Администратор', N'OrderResponsible', 2, N'tbl_Contact', N'SELECT ID, UserFullName AS Title
FROM #DataSet#
WHERE ID IN (SELECT ExecutorContactID FROM tbl_Order WHERE SiteID = ''#SiteID#'') AND SiteID = ''#SiteID#''')

INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'fad2af1b-4f4c-44eb-91d4-f2d215cba452', N'7dd9890f-f482-4854-932b-81e15baa634a', N'1fbfe891-c55c-4533-bc63-47dda8afc44a', 2, 0)

commit
exec LBC_SetVersion 192
END

/*******************************************************************************
	2012-05-25
	Обновление программы развития
*******************************************************************************/
if ( dbo.LBC_Version() < 193 )
BEGIN
begin tran

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[MassWorkflowInit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[MassWorkflowInit]
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[WorkflowInit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[WorkflowInit]

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[WorkflowInit]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[WorkflowInit]
(
	@Parameter uniqueidentifier,
	@SiteID uniqueidentifier,
	@ModuleID uniqueidentifier,
	@AutomaticMethod int,
	@Event int = NULL,
	@MassWorkflowID uniqueidentifier = NULL
)
AS
BEGIN
	DECLARE @sql nvarchar(max)
	DECLARE @ParmDefinition nvarchar(max)
	
	SELECT ID
	INTO #TmpWorkflowTemplate
	FROM tbl_WorkflowTemplate
	WHERE
		SiteID=@SiteID
		AND ModuleID=@ModuleID
		AND [Status]=1 -- Статус действующий
		AND (AutomaticMethod=@AutomaticMethod OR @AutomaticMethod IS NULL)
		AND (StartDate IS NULL OR (StartDate IS NOT NULL AND StartDate<=GETDATE())) -- Актуален по дате
		AND (EndDate IS NULL OR (EndDate IS NOT NULL AND EndDate>=GETDATE())) -- Актуален по дате

		
	DECLARE @_WorkflowTemplateID uniqueidentifier
	DECLARE @_Event int
	
	-- Перебираем подходящие по условию шаблоны
	WHILE (SELECT COUNT(*) FROM #TmpWorkflowTemplate) > 0
	BEGIN
		SELECT TOP 1 @_WorkflowTemplateID=ID
		FROM #TmpWorkflowTemplate
		
		DECLARE @FLAG bit = 1
		
		DECLARE @_WorkflowID uniqueidentifier = NEWID()
		
		-- Берём параметр
		DECLARE @_WorkflowTemplateParameterID uniqueidentifier =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Контакт'' AND IsSystem=1)
		
		-- Проверка на вызов при активном процессе
		DECLARE @_Frequency int
		DECLARE @_DenyMultipleRun bit
		DECLARE @_Condition int
		DECLARE @_ActivityCount int
		SELECT @_Frequency=Frequency, @_DenyMultipleRun=DenyMultipleRun, @_Condition=Condition, @_ActivityCount=ActivityCount, @_Event=[Event]
		FROM tbl_WorkflowTemplate 
		WHERE ID=@_WorkflowTemplateID
		
		-- Есть ли активный процесс по заданному шаблону (нет даты окончания процесса)
		IF ((SELECT COUNT(*)
		FROM tbl_Workflow AS w
		LEFT JOIN tbl_WorkflowParameter AS wp ON wp.WorkflowID=w.ID
		WHERE w.WorkflowTemplateID=@_WorkflowTemplateID
			  AND wp.WorkflowTemplateParameterID=@_WorkflowTemplateParameterID
			  AND wp.Value=@Parameter
			  AND w.EndDate IS NULL) > 0 AND @_DenyMultipleRun = 1)
		BEGIN
			SET @FLAG = 0
		END
			
		-- Проверка на частоту вызова в днях
		DECLARE @_StartDate datetime = (SELECT TOP 1 w.StartDate
									   FROM tbl_Workflow AS w
									   LEFT JOIN tbl_WorkflowParameter AS wp ON wp.WorkflowID=w.ID
									   WHERE w.WorkflowTemplateID=@_WorkflowTemplateID
											 AND wp.WorkflowTemplateParameterID=@_WorkflowTemplateParameterID
									   ORDER BY w.StartDate DESC)
		--SET @_StartDate = DATEADD(day, @_Frequency, @_StartDate)
		IF (@_Frequency <> 0 AND DATEADD(day, @_Frequency, @_StartDate) > GETDATE())
		BEGIN
			SET @FLAG = 0
		END
		
		-- Проверка условий запуска
		IF (@AutomaticMethod=1 AND @FLAG = 1) -- Создание/Изменение записи
		BEGIN
			IF (@_Event<>@Event)
			BEGIN
				SET @FLAG = 0
			END
		END
		
		
		IF (@AutomaticMethod=2 AND @FLAG = 1) -- По действию пользователя
		BEGIN
			SET @FLAG = 0
			
			SELECT ID
			INTO #TmpConditionEvent
			FROM tbl_WorkflowTemplateConditionEvent
			WHERE WorkflowTemplateID=@_WorkflowTemplateID
			
			DECLARE @TotalRowsReturned int
			DECLARE @Count int = 0
			
			DECLARE @CountConditionEvent int = (SELECT COUNT(*) FROM #TmpConditionEvent)
			DECLARE @_ConditionEventID uniqueidentifier
			DECLARE @_Category int
			DECLARE @_ActivityType int
			DECLARE @_Code nvarchar(max)
			DECLARE @_ActualPeriod int
			DECLARE @_Requisite nvarchar(2000)
			DECLARE @_Formula int
			DECLARE @_Value nvarchar(255)
			WHILE (SELECT COUNT(*) FROM #TmpConditionEvent) > 0
			BEGIN
				SELECT TOP 1 @_ConditionEventID=ID
				FROM #TmpConditionEvent
				
				SELECT @_Category=Category,
					   @_ActivityType=ActivityType,
					   @_Code=Code,
					   @_ActualPeriod=ActualPeriod,
					   @_Requisite=Requisite,
					   @_Formula=Formula,
					   @_Value=Value
				FROM tbl_WorkflowTemplateConditionEvent
				WHERE ID=@_ConditionEventID
				
				IF (@_Category=0) -- Действие
				BEGIN
					SET @sql = ''SELECT @TotalRowsReturnedOUT=COUNT(*)
								FROM tbl_ContactActivity
								WHERE ContactID=@ContactID
									  AND ActivityTypeID=@ActivityType''
									  
					IF (@_ActivityType=1 OR @_ActivityType=11)
					BEGIN
						SET @sql = @sql + '' AND ActivityCode LIKE N''''%@Code%'''' ''
					END
					ELSE
					BEGIN
						SET @sql = @sql + '' AND ActivityCode=@Code ''
					END
					
					IF (@_ActualPeriod <> 0)
					BEGIN
						SET @sql = @sql + '' AND CreatedAt > DATEADD(day, (-1 * @ActualPeriod), GETDATE()) ''
					END
					
					-- Исключаем из выборки активность которая была до вызова предыдущего процесса
					IF (@_StartDate IS NOT NULL)
					BEGIN
						SET @sql = @sql + '' AND CreatedAt > @StartDate ''
					END
					
					SET @ParmDefinition = ''@TotalRowsReturnedOUT int OUTPUT, @ContactID uniqueidentifier, @ActivityType int, @Code nvarchar(max), @ActualPeriod int, @StartDate datetime''
					EXECUTE sp_executesql @sql,
							@ParmDefinition,
							@TotalRowsReturnedOUT=@TotalRowsReturned OUTPUT,
							@ContactID=@Parameter,
							@ActivityType=@_ActivityType,
							@Code=@_Code,
							@ActualPeriod=@_ActualPeriod,
							@StartDate=@_StartDate
				END
				
				IF (@TotalRowsReturned > 0)
				BEGIN
					SET @Count = @Count + 1
				END
				
				IF (@_Category=1) -- Значение реквизита
				BEGIN
					DECLARE @_ColumnTypeID int
					DECLARE @_StringValue nvarchar(512)
					DECLARE @_DateValue datetime
					DECLARE @_SiteColumnValueID uniqueidentifier
					SELECT
						@_ColumnTypeID=tbl_SiteColumns.TypeID,
						@_StringValue=tbl_ContactColumnValues.StringValue,
						@_DateValue=tbl_ContactColumnValues.DateValue,
						@_SiteColumnValueID=tbl_ContactColumnValues.SiteColumnValueID
					FROM tbl_ContactColumnValues
					LEFT JOIN tbl_SiteColumns ON tbl_SiteColumns.ID=tbl_ContactColumnValues.SiteColumnID
					WHERE ContactID=@Parameter AND SiteColumnID=CAST(@_Requisite AS uniqueidentifier)
					
					-- Строка/Число/Текст
					IF ((@_ColumnTypeID=1 OR @_ColumnTypeID=4 OR @_ColumnTypeID=5)
						AND ((@_Formula=4 AND @_StringValue LIKE ''%''+@_Value)
							  OR (@_Formula=5 AND @_StringValue LIKE @_Value)
							)
						)
					BEGIN
						SET @Count = @Count + 1
					END
					-- Дата
					IF (@_ColumnTypeID=2
						AND ((@_Formula=7 AND @_DateValue < CAST(@_Value AS datetime))
							  OR (@_Formula=9 AND @_DateValue <= CAST(@_Value AS datetime))
							  OR (@_Formula=6 AND @_DateValue > CAST(@_Value AS datetime))
							  OR (@_Formula=8 AND @_DateValue >= CAST(@_Value AS datetime))
							)
					   )
					   BEGIN
							SET @Count = @Count + 1
					   END
					--Справочник
					IF (@_ColumnTypeID=3
						AND ((@_Formula=2 AND (@_SiteColumnValueID IS NULL OR @_SiteColumnValueID = N''00000000-0000-0000-0000-000000000000''))
							OR (@_Formula=1 AND (@_SiteColumnValueID IS NOT NULL AND @_SiteColumnValueID <> N''00000000-0000-0000-0000-000000000000''))
							OR (@_Formula=3 AND @_SiteColumnValueID = CAST(@_Value AS uniqueidentifier))
							)
					   )
					   BEGIN
							SET @Count = @Count + 1
					   END
				END
				
				DECLARE @_Scores int
				IF (@_Category=2) -- Балл по поведению
				BEGIN
					SET @_Scores = (SELECT Score FROM tbl_ContactActivityScore WHERE ID=@Parameter AND SiteActivityScoreTypeID=CAST(@_Requisite AS uniqueidentifier))
					IF ((@_Formula = 7 AND @_Scores < @_Value)
						OR (@_Formula = 9 AND @_Scores <= @_Value)
						OR (@_Formula = 6 AND @_Scores > @_Value)
						OR (@_Formula = 8 AND @_Scores >= @_Value))
					BEGIN
						SET @Count = @Count + 1
					END
				END
				
				IF (@_Category=3) -- Балл по характеристикам
				BEGIN
					SET @_Scores = (SELECT CharacteristicsScore FROM tbl_Contact WHERE ID=@Parameter)
					IF ((@_Formula = 7 AND @_Scores < @_Value)
						OR (@_Formula = 9 AND @_Scores <= @_Value)
						OR (@_Formula = 6 AND @_Scores > @_Value)
						OR (@_Formula = 8 AND @_Scores >= @_Value))
					BEGIN
						SET @Count = @Count + 1
					END
				END
				
				DELETE #TmpConditionEvent WHERE ID=@_ConditionEventID
			END
			DROP TABLE #TmpConditionEvent
			
			IF (@CountConditionEvent<>0
				AND ((@_Condition=0 AND @CountConditionEvent=@Count)
				OR (@_Condition=1 AND @Count>0)
				OR (@_Condition=2 AND @Count>=@_ActivityCount)
				))
			BEGIN
				SET @FLAG = 1
			END
		END
		
		
		IF (@FLAG = 1)
		BEGIN
			DECLARE @_WorkflowTemplateElementID uniqueidentifier = 
			(SELECT tbl_WorkflowTemplateElement.ID FROM tbl_WorkflowTemplate
			LEFT JOIN tbl_WorkflowTemplateElement ON tbl_WorkflowTemplateElement.WorkflowTemplateID=tbl_WorkflowTemplate.ID
			WHERE tbl_WorkflowTemplate.ID=@_WorkflowTemplateID AND tbl_WorkflowTemplateElement.ElementType=5) -- Начало процесса
			
			-- Найден элемент с типом "Начало процесса"
			IF (@_WorkflowTemplateElementID IS NOT NULL)
			BEGIN
				INSERT INTO tbl_Workflow (ID, SiteID, WorkflowTemplateID, StartDate, MassWorkflowID)
				VALUES (@_WorkflowID, @SiteID, @_WorkflowTemplateID, GETDATE(), @MassWorkflowID)
				
				INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
				VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, @Parameter)


		SET @_WorkflowTemplateParameterID =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Компания'' AND IsSystem=1)
		INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
		VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, (SELECT CompanyID FROM tbl_Contact WHERE ID=@Parameter))
		
		SET @_WorkflowTemplateParameterID =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Автор (роль)'' AND IsSystem=1)
		INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
		VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, NULL)
		
		SET @_WorkflowTemplateParameterID =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Ответственный по компании (роль)'' AND IsSystem=1)
		INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
		VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, (SELECT tbl_Company.OwnerID FROM tbl_Contact LEFT JOIN tbl_Company ON tbl_Company.ID=tbl_Contact.CompanyID WHERE tbl_Contact.ID=@Parameter))

				
				DECLARE @WorkflowElementID uniqueidentifier = NEWID()
				INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
				VALUES (@WorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 1)
				
				EXEC WorkflowProcessing @WorkflowElementID
			END
		END
	    
		DELETE #TmpWorkflowTemplate WHERE ID=@_WorkflowTemplateID
	END
	DROP TABLE #TmpWorkflowTemplate
END' 
END

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[MassWorkflowInit]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[MassWorkflowInit]
(
	@MassWorkflowID uniqueidentifier
)
AS
BEGIN
	DECLARE @_MassWorkflowContactID uniqueidentifier
	DECLARE @_ContactID uniqueidentifier
	DECLARE @_SiteID uniqueidentifier = (SELECT SiteID FROM tbl_MassWorkflow WHERE ID=@MassWorkflowID)
	DECLARE @_ModuleID uniqueidentifier = (SELECT ID FROM tbl_Module WHERE Name=''Contacts'')

	SELECT mwc.ID, mwc.ContactID
	INTO #MassWorkflowContact
	FROM tbl_MassWorkflowContact AS mwc
	LEFT JOIN tbl_MassWorkflow AS mw ON mw.ID=mwc.MassWorkflowID
	WHERE mwc.MassWorkflowID=@MassWorkflowID AND mw.[Status]=1 AND mw.StartDate IS NULL
	
	WHILE (SELECT COUNT(*) FROM #MassWorkflowContact) > 0
	BEGIN
		SELECT TOP 1 @_MassWorkflowContactID=ID, @_ContactID=ContactID
		FROM #MassWorkflowContact
		
		EXEC WorkflowInit @_ContactID, @_SiteID, @_ModuleID, NULL, NULL, @MassWorkflowID
		
		DELETE #MassWorkflowContact WHERE ID=@_MassWorkflowContactID
	END
	DROP TABLE #MassWorkflowContact
	
	-- Обновление даты начала
	UPDATE tbl_MassWorkflow
	SET StartDate=GETDATE()
	WHERE ID=@MassWorkflowID AND [Status]=1 AND StartDate IS NULL
END
' 
END


commit
exec LBC_SetVersion 193
END

/*******************************************************************************
	2012-05-25
	Доабвлен новый отчет
*******************************************************************************/
if ( dbo.LBC_Version() < 194 )
BEGIN
begin tran

INSERT [dbo].[tbl_Analytic] ([ID], [Title], [Query]) VALUES (N'211a735a-7e73-40e1-9b6d-4ed1e810229a', N'Объем оказанных услуг', N'DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = ''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)
DECLARE @Period nvarchar(256)

IF @GroupByDays = 1
	SET @Period = ''CAST(TBLTask.StartDate AS DATE)''
ELSE
	SET @Period = ''DATEPART(HOUR, TBLTask.StartDate)''

SET @SQL = ''SELECT '' + @Period + '' AS Period, TBLTaskType.Title AS TaskType, TBLContact1.UserFullName AS OrderResponsible, TBLContact2.UserFullName AS TaskResponsible, SUM(TBLOrderProducts.Quantity) AS ExerciseCount, SUM(TBLOrderProducts.TotalAmount) AS Total
FROM tbl_Task AS TBLTask
LEFT JOIN tbl_OrderProducts AS TBLOrderProducts ON TBLTask.ProductID = TBLOrderProducts.ProductID
LEFT JOIN tbl_Order AS TBLOrder ON TBLOrderProducts.OrderID = TBLOrder.ID
LEFT JOIN tbl_TaskType AS TBLTaskType ON TBLTaskType.ID = TBLTask.TaskTypeID
LEFT JOIN tbl_Contact AS TBLContact1 ON TBLContact1.ID = TBLOrder.ExecutorContactID
LEFT JOIN tbl_Contact AS TBLContact2 ON TBLContact2.ID = TBLTask.ResponsibleID
WHERE TBLTask.ProductID IS NOT NULL AND TBLTask.StartDate >= @StartDate AND TBLTask.StartDate <= @EndDate AND 
TBLTask.SiteID = @SiteID ''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + ''GROUP BY '' + @Period + '', TBLTaskType.Title, TBLContact1.UserFullName, TBLContact2.UserFullName
 ORDER BY '' + @Period

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate')


INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'4365a612-3184-4c94-81bd-74b040a7b66b', N'211a735a-7e73-40e1-9b6d-4ed1e810229a', N'Дата', N'Period', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'1acd236b-741f-4b51-80e2-831c4cf81558', N'211a735a-7e73-40e1-9b6d-4ed1e810229a', N'Количество занятий', N'ExerciseCount', 3, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'43b2177c-5058-47ee-ae0e-d02a63d6a59e', N'211a735a-7e73-40e1-9b6d-4ed1e810229a', N'Прибыль', N'Total', 3, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'b56c264f-841e-4327-8f61-4303a268d5ab', N'211a735a-7e73-40e1-9b6d-4ed1e810229a', N'Тип занятия', N'TaskType', 2, N'tbl_TaskType')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet], [Query]) VALUES (N'aae13ffc-0f92-47e1-a980-3eeb7d470765', N'211a735a-7e73-40e1-9b6d-4ed1e810229a', N'Администратор', N'OrderResponsible', 2, N'tbl_Contact1', N'SELECT ID, UserFullName AS Title
FROM #DataSet#
WHERE ID IN (SELECT ExecutorContactID FROM tbl_Order WHERE SiteID = ''#SiteID#'') AND SiteID = ''#SiteID#''')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet], [Query]) VALUES (N'17a30e2a-6de7-4f6e-9fd1-7ed8e819033e', N'211a735a-7e73-40e1-9b6d-4ed1e810229a', N'Тренер', N'TaskResponsible', 2, N'tbl_Contact2', N'SELECT ID, UserFullName AS Title
FROM #DataSet#
WHERE ID IN (SELECT ResponsibleID FROM tbl_Task WHERE SiteID = ''#SiteID#'') AND SiteID = ''#SiteID#''')

INSERT [dbo].[tbl_AnalyticReport] ([ID], [AnalyticID], [Title], [Description], [ModuleID]) VALUES (N'5bea6ae0-df5a-4f7a-a773-cbd69f699ae0', N'211a735a-7e73-40e1-9b6d-4ed1e810229a', N'Объем оказанных услуг', N'Объем оказанных услуг', (SELECT TOP 1 ID FROM tbl_Module WHERE Name = 'Orders'))

INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'b6545c22-7071-417f-8df6-4a27b952000a', N'5bea6ae0-df5a-4f7a-a773-cbd69f699ae0', N'4365a612-3184-4c94-81bd-74b040a7b66b', 1, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'd8aa0456-da32-414f-a2f8-415df6f81f6a', N'5bea6ae0-df5a-4f7a-a773-cbd69f699ae0', N'1acd236b-741f-4b51-80e2-831c4cf81558', 2, 1)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'c0cc3df7-1355-45de-a9db-415577e931f0', N'5bea6ae0-df5a-4f7a-a773-cbd69f699ae0', N'43b2177c-5058-47ee-ae0e-d02a63d6a59e', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'a7176715-247b-4d9a-8b6f-f0870ba383ba', N'5bea6ae0-df5a-4f7a-a773-cbd69f699ae0', N'aae13ffc-0f92-47e1-a980-3eeb7d470765', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'b86f4eb8-f497-427b-a075-85ac4091c34b', N'5bea6ae0-df5a-4f7a-a773-cbd69f699ae0', N'b56c264f-841e-4327-8f61-4303a268d5ab', 2, 1)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'd30c1861-585d-4816-b6ae-6a427dc69b2f', N'5bea6ae0-df5a-4f7a-a773-cbd69f699ae0', N'17a30e2a-6de7-4f6e-9fd1-7ed8e819033e', 2, 0)

commit
exec LBC_SetVersion 194
END

/*******************************************************************************
	2012-05-25
	Обновление в нотификации по запросам
*******************************************************************************/
if ( dbo.LBC_Version() < 195 )
BEGIN
begin tran

UPDATE tbl_SiteActionTemplate
SET MessageBody = REPLACE(MessageBody, N'<p>Следующие Ваши требования находятся в работе:</p>', N'')

commit
exec LBC_SetVersion 195
END

/*******************************************************************************
	2012-05-27
	Добавлен атрибут "Таймаут для сессии пользователя, минут"
*******************************************************************************/
if ( dbo.LBC_Version() < 196 )
BEGIN
begin tran

ALTER TABLE [tbl_Sites] ADD [UserSessionTimeout] int NOT NULL DEFAULT((30))

commit
exec LBC_SetVersion 196
END


/*******************************************************************************
	2012-05-27
	Доабавлен новый отчет
*******************************************************************************/
if ( dbo.LBC_Version() < 197 )
BEGIN
begin tran

INSERT [dbo].[tbl_Analytic] ([ID], [Title], [Query]) VALUES (N'cc1de501-4408-4395-aabf-1f06cb2e1f4c', N'Статистика по требованиям', N'DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = ''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)

SET @SQL = ''SELECT TBLRequirementStatus.Title AS RequirementStatus, TBLCompany.Name AS Company, TBLContact.UserFullName AS Responsible, COUNT(*) AS RequirementQuantity
FROM tbl_Requirement AS TBLRequirement
LEFT JOIN tbl_RequirementStatus AS TBLRequirementStatus ON TBLRequirement.RequirementStatusID = TBLRequirementStatus.ID
LEFT JOIN tbl_Company AS TBLCompany ON TBLCompany.ID = TBLRequirement.CompanyID
LEFT JOIN tbl_Contact AS TBLContact ON TBLContact.ID = TBLRequirement.ContactID
WHERE TBLRequirement.SiteID = @SiteID ''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + '' GROUP BY TBLRequirementStatus.Title, TBLCompany.Name, TBLContact.UserFullName 
ORDER BY TBLCompany.Name ''

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier'', @SiteID')


INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'48faedb3-fa1e-49d8-bfeb-4d7923fc4052', N'cc1de501-4408-4395-aabf-1f06cb2e1f4c', N'Количество запросов', N'RequirementQuantity', 3, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'37956a2e-84a8-4eb7-926a-2db0d2b05d57', N'cc1de501-4408-4395-aabf-1f06cb2e1f4c', N'Статус', N'RequirementStatus', 2, 'tbl_RequirementStatus')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet], [Query]) VALUES (N'4d323414-e60d-4515-a794-dac59097a2ce', N'cc1de501-4408-4395-aabf-1f06cb2e1f4c', N'Ответственный', N'Responsible', 2, N'tbl_Contact', N'SELECT ID, UserFullName AS Title
FROM #DataSet#
WHERE ID IN (SELECT ResponsibleID FROM tbl_Requirement WHERE SiteID = ''#SiteID#'') AND SiteID = ''#SiteID#''')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet], [Query]) VALUES (N'780c3d99-ec6d-487d-bf7b-2a6f12092799', N'cc1de501-4408-4395-aabf-1f06cb2e1f4c', N'Компания', N'Company', 1, N'tbl_Company', N'SELECT ID, Name AS Title
FROM #DataSet#
WHERE ID IN (SELECT CompanyID FROM tbl_Requirement WHERE SiteID = ''#SiteID#'') AND SiteID = ''#SiteID#''')

INSERT [dbo].[tbl_AnalyticReport] ([ID], [AnalyticID], [Title], [Description], [ModuleID]) VALUES (N'3bf6d807-ee18-4f7e-9904-8985eb920470', N'cc1de501-4408-4395-aabf-1f06cb2e1f4c', N'Статистика по требованиям', N'Статистика по требованиям', (SELECT TOP 1 ID FROM tbl_Module WHERE Name = 'Requirements'))

INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'c48a2b35-e92e-4800-94fb-c1fb900480a5', N'3bf6d807-ee18-4f7e-9904-8985eb920470', N'48faedb3-fa1e-49d8-bfeb-4d7923fc4052', 0, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'0971d54d-086e-477f-a01b-40a74b832b24', N'3bf6d807-ee18-4f7e-9904-8985eb920470', N'37956a2e-84a8-4eb7-926a-2db0d2b05d57', 2, 1)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'4a219396-6eef-41a2-8742-b8799d88392e', N'3bf6d807-ee18-4f7e-9904-8985eb920470', N'4d323414-e60d-4515-a794-dac59097a2ce', 1, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'5f82060e-bb6f-4627-825f-3abea0f75ada', N'3bf6d807-ee18-4f7e-9904-8985eb920470', N'780c3d99-ec6d-487d-bf7b-2a6f12092799', 1, 0)

commit
exec LBC_SetVersion 197
END


/*******************************************************************************
	2012-006-01
	Доабавлен новый отчет
*******************************************************************************/
if ( dbo.LBC_Version() < 198 )
BEGIN
begin tran

UPDATE tbl_AnalyticAxis
SET Query = N'SELECT ID, Name AS Title
FROM #DataSet#
WHERE ID IN (SELECT CompanyID FROM tbl_Requirement WHERE SiteID = ''#SiteID#'') AND SiteID = ''#SiteID#''
ORDER BY Name'
WHERE ID = '780c3d99-ec6d-487d-bf7b-2a6f12092799'

UPDATE tbl_AnalyticAxis
SET Query = N'SELECT ID, UserFullName AS Title
FROM #DataSet#
WHERE ID IN (SELECT ExecutorContactID FROM tbl_Order WHERE SiteID = ''#SiteID#'') AND SiteID = ''#SiteID#''
ORDER BY UserFullName'
WHERE ID = 'aae13ffc-0f92-47e1-a980-3eeb7d470765'

UPDATE tbl_AnalyticAxis
SET Query = N'SELECT ID, UserFullName AS Title
FROM #DataSet#
WHERE ID IN (SELECT ExecutorContactID FROM tbl_Order WHERE SiteID = ''#SiteID#'') AND SiteID = ''#SiteID#''
ORDER BY UserFullName'
WHERE ID = '1fbfe891-c55c-4533-bc63-47dda8afc44a'

UPDATE tbl_AnalyticAxis
SET Query = N'SELECT ID, UserFullName AS Title
FROM #DataSet#
WHERE ID IN (SELECT ResponsibleID FROM tbl_Task WHERE SiteID = ''#SiteID#'') AND SiteID = ''#SiteID#''
ORDER BY UserFullName'
WHERE ID = '17a30e2a-6de7-4f6e-9fd1-7ed8e819033e'

UPDATE tbl_AnalyticAxis
SET Query = N'SELECT ID, UserFullName AS Title
FROM #DataSet#
WHERE ID IN (SELECT ResponsibleID FROM tbl_Requirement WHERE SiteID = ''#SiteID#'') AND SiteID = ''#SiteID#''
ORDER BY UserFullName'
WHERE ID = '4d323414-e60d-4515-a794-dac59097a2ce'

commit
exec LBC_SetVersion 198
END


/*******************************************************************************
	2012-06-01
	Добавлен признак товаров комплекта в заказе
*******************************************************************************/
if ( dbo.LBC_Version() < 199 )
BEGIN
begin tran

ALTER TABLE [tbl_OrderProducts] ADD [IsPartOfComplectation] bit NOT NULL DEFAULT((0))

commit
exec LBC_SetVersion 199
END

/*******************************************************************************
	2012-06-01
	Обновлены баллы
*******************************************************************************/
if ( dbo.LBC_Version() < 200 )
BEGIN
begin tran

UPDATE tbl_Contact
SET Score=0, BehaviorScore=0, CharacteristicsScore=0

DELETE FROM tbl_UserSettings
WHERE ClassName='WebCounter.AdminPanel.Workflows'

ALTER TABLE tbl_SiteColumnValues DROP CONSTRAINT DF_tbl_SiteColumnValues_Weight
ALTER TABLE tbl_ContactColumnValues DROP CONSTRAINT DF_tbl_SiteUserColumnValues_Weight

ALTER TABLE [dbo].[tbl_SiteColumnValues] DROP COLUMN Weight
ALTER TABLE [dbo].[tbl_ContactColumnValues] DROP COLUMN Weight

DROP PROCEDURE SiteUser_Add
DROP PROCEDURE SiteUserActivity_Add

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[WorkflowProcessing]
(
	@_WorkflowElementID uniqueidentifier, -- Входящий элемент
	@_StartElementResult nvarchar(255) = NULL -- Результат выполнения элемента процесса
)
AS
BEGIN
	DECLARE @_SiteID uniqueidentifier
	DECLARE @_WorkflowStartDate datetime
	DECLARE @_WorkflowID uniqueidentifier
	DECLARE @_WorkflowTemplateContactID uniqueidentifier
	DECLARE @_WorkflowTemplateElementID uniqueidentifier
	DECLARE @_WorkflowParameterID uniqueidentifier
	DECLARE @_ControlDate datetime
	DECLARE @_WorkflowElementStatus int = 0
	DECLARE @_WorkflowStatus int = 0
	DECLARE @_WorkflowResult nvarchar(255)
	
	DECLARE @_StartAfter int
	DECLARE @_StartPeriod int
	DECLARE @_DurationHours int
	DECLARE @_DurationMinutes int
	DECLARE @_ControlAfter int
	DECLARE @_ControlPeriod int
	DECLARE @_ControlFromBeginProccess bit
	
	SELECT @_WorkflowID=w.WorkflowID,
		   @_WorkflowTemplateElementID=w.WorkflowTemplateElementID,
		   @_ControlDate=w.ControlDate,
		   @_WorkflowTemplateContactID=wt.ContactID,
		   @_WorkflowStatus=wf.[Status]
		   --@_StartAfter=t.StartAfter,
		   --@_StartPeriod=t.StartPeriod,
		   --@_ControlAfter=t.ControlAfter,
		   --@_ControlPeriod=t.ControlPeriod,
		   --@_ControlFromBeginProccess=t.ControlFromBeginProccess
	FROM tbl_WorkflowElement AS w
	LEFT JOIN tbl_WorkflowTemplateElement AS t ON t.ID=w.WorkflowTemplateElementID
	LEFT JOIN tbl_WorkflowTemplate AS wt ON wt.ID=t.WorkflowTemplateID
	LEFT JOIN tbl_Workflow AS wf ON wf.ID=w.WorkflowID
	WHERE w.ID=@_WorkflowElementID AND (t.ElementType<>1 OR (t.ElementType=1 AND w.[Status]=0))
	
	SELECT @_SiteID=SiteID, @_WorkflowStartDate=StartDate
	FROM tbl_Workflow
	WHERE ID=@_WorkflowID
	
IF (@_WorkflowStatus=0)
BEGIN	
	
	-- Выбираем все элементы по связям, где входящий элемент является начальным
	-- и с выходящим результатом
	SELECT EndElementID
	INTO #WorkflowTemplateElementRelation
	FROM tbl_WorkflowTemplateElementRelation
	WHERE StartElementID=@_WorkflowTemplateElementID AND (StartElementResult=@_StartElementResult OR @_StartElementResult IS NULL)
	
	-- Если выходы с элемента есть
	IF ((SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0)
	BEGIN
		SET @_WorkflowElementStatus = 1
		
		-- Входящие элемент не просрочен
		IF ((@_ControlDate IS NULL) OR (@_ControlDate > GETDATE()))
		BEGIN
					WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0
					BEGIN
						SELECT TOP 1 @_WorkflowTemplateElementID=EndElementID
						FROM #WorkflowTemplateElementRelation
						
						IF ((SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND WorkflowTemplateElementID=@_WorkflowTemplateElementID) = 0)
						BEGIN
							DECLARE @_WorkflowTemplateElementType int
							DECLARE @_WorkflowTemplateElementName nvarchar(255)
							DECLARE @_IsActive bit
							SELECT @_WorkflowTemplateElementType=ElementType, @_WorkflowTemplateElementName=Name, @_IsActive=IsActive
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							DECLARE @_InsertedWorkflowElementID uniqueidentifier = NEWID()
							
							SELECT @_StartAfter=StartAfter,
								   @_StartPeriod=StartPeriod,
								   @_DurationHours=DurationHours,
								   @_DurationMinutes=DurationMinutes,
								   @_ControlAfter=ControlAfter,
								   @_ControlPeriod=ControlPeriod,
								   @_ControlFromBeginProccess=ControlFromBeginProccess
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							-- Тип элемента "Окончание процесса"
							IF (@_WorkflowTemplateElementType=6)
							BEGIN
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 1)
								
								UPDATE tbl_Workflow
								SET EndDate=GETDATE(), [Status]=1
								WHERE ID=@_WorkflowID
							END
							
							-- определяем параметер
							SET @_WorkflowParameterID =
							(SELECT tbl_WorkflowParameter.[Value]
							FROM tbl_WorkflowParameter
							LEFT JOIN tbl_WorkflowTemplateParameter ON tbl_WorkflowTemplateParameter.ID=tbl_WorkflowParameter.WorkflowTemplateParameterID
							WHERE tbl_WorkflowParameter.WorkflowID=@_WorkflowID
								  AND tbl_WorkflowTemplateParameter.Name=N''Контакт''
								  AND tbl_WorkflowTemplateParameter.IsSystem=1)
								  
							-- определяем через сколько запускать элемент, если 0 то сразу
							DECLARE @_ActionDate datetime = GETDATE()
							IF (@_StartAfter <> 0)
							BEGIN
								SET @_ActionDate = CASE
									WHEN @_StartPeriod = 0 THEN DATEADD(minute, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 1 THEN DATEADD(hour, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 2 THEN DATEADD(day, @_StartAfter, @_ActionDate)
								END
							END
							
							-- дата контроля
							SET @_ControlDate = GETDATE()
							IF (@_ControlFromBeginProccess=1) -- От начала процесса
							BEGIN
								SET @_ControlDate = @_WorkflowStartDate
							END
							
							SET @_ControlDate = CASE
								WHEN @_ControlPeriod = 0 THEN DATEADD(minute, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 1 THEN DATEADD(hour, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 2 THEN DATEADD(day, @_ControlAfter, @_ControlDate)
							END
							
							
							-- Тип элемента "Сообщение"
							IF (@_WorkflowTemplateElementType = 0)
							BEGIN
								-- Начало добавления сообщения в очередь
								DECLARE @_SiteActionTemplateID uniqueidentifier = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActionTemplateID'')
								
								DECLARE @MessageTitle nvarchar(255)
								DECLARE @MessageText nvarchar(max)
								SELECT @MessageTitle=MessageCaption, @MessageText=MessageBody
								FROM tbl_SiteActionTemplate
								WHERE ID=@_SiteActionTemplateID
								
								DECLARE @_SiteActionID uniqueidentifier = NEWID()
								INSERT INTO tbl_SiteAction (ID, SiteID, SiteActionTemplateID, ContactID, ActionStatusID, ActionDate, MessageTitle, MessageText)
								VALUES (@_SiteActionID, @_SiteID, @_SiteActionTemplateID, @_WorkflowParameterID, 1, @_ActionDate, @MessageTitle, @MessageText)
								-- Конец добавления сообщения в очередь
								
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_SiteActionID)
							END
							
							-- Тип элемента "Ожидание события"
							IF (@_WorkflowTemplateElementType = 2)
							BEGIN
								IF (@_ControlAfter<>0)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], ControlDate)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_ControlDate)
								END
								ELSE
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0)
								END
							END
							
							-- Тип элемента "Действие"
							IF (@_WorkflowTemplateElementType = 3)
							BEGIN
								-- Начало добавления действия
								DECLARE @_ContactActivityDescription nvarchar(255) = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ContactActivityDescription'')
								
								DECLARE @_ContactActivityID uniqueidentifier = NEWID()
								INSERT INTO tbl_ContactActivity (ID, SiteID, ContactID, CreatedAt, ActivityTypeID, ActivityCode)
								VALUES (@_ContactActivityID, @_SiteID, @_WorkflowParameterID, GETDATE(), 13, @_ContactActivityDescription)
								-- Конец добавления действия
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1, @_ContactActivityID)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Задача"
							IF (@_WorkflowTemplateElementType = 1)
							BEGIN
								-- Начало добавления задачи
								DECLARE @_TaskID uniqueidentifier = NEWID()
								DECLARE @_TaskTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskType'') AS uniqueidentifier)
								
								DECLARE @_IsImportantTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsImportantTask'') AS bit)
								
								DECLARE @_IsUrgentTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsUrgentTask'') AS bit)
								
								DECLARE @_TaskEndDate datetime = @_ActionDate
								SET @_TaskEndDate = DATEADD(hour, @_DurationHours, @_TaskEndDate)
								SET @_TaskEndDate = DATEADD(minute, @_DurationMinutes, @_TaskEndDate)
								INSERT INTO tbl_Task (ID, SiteID, Title, TaskTypeID, StartDate, EndDate, DateOfControl, IsImportantTask, PlanDurationMinutes, PlanDurationHours, ResponsibleID, CreatorID, IsUrgentTask, TaskStatusID)
								VALUES (@_TaskID, @_SiteID, @_WorkflowTemplateElementName, @_TaskTypeID, @_ActionDate, @_TaskEndDate, @_ControlDate, @_IsImportantTask, @_DurationMinutes, @_DurationHours, @_WorkflowTemplateContactID, @_WorkflowTemplateContactID, @_IsUrgentTask, 1)
								-- Конец добавления задачи
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, ControlDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), @_ControlDate, 0, @_TaskID)
							END
							
							-- Тип элемента "Сегментация"
							IF (@_WorkflowTemplateElementType = 7)
							BEGIN
								SELECT ID
								INTO #WorkflowTemplateElementTag
								FROM tbl_WorkflowTemplateElementTag
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID
								
								DECLARE @_WorkflowTemplateElementTagID uniqueidentifier
								DECLARE @_SiteTagID uniqueidentifier
								DECLARE @_Operation int
								WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementTag) > 0
								BEGIN
									SELECT TOP 1 @_WorkflowTemplateElementTagID=ID
									FROM #WorkflowTemplateElementTag
									
									SELECT @_SiteTagID=SiteTagID, @_Operation=Operation
									FROM tbl_WorkflowTemplateElementTag
									WHERE ID=@_WorkflowTemplateElementTagID
									
									IF (@_Operation = 0)
									BEGIN
										DELETE FROM tbl_SiteTagObjects
										WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID
									END
									ELSE
									BEGIN
										IF (SELECT COUNT(*) FROM tbl_SiteTagObjects WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID) = 0
										BEGIN
											INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID)
											VALUES (@_SiteTagID, @_WorkflowParameterID)
										END
									END
									
									DELETE #WorkflowTemplateElementTag WHERE ID=@_WorkflowTemplateElementTagID
								END
								DROP TABLE #WorkflowTemplateElementTag

								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Скорринг"
							IF (@_WorkflowTemplateElementType = 8)
							BEGIN
								-- Начало добавления баллов
								--DECLARE @_SiteActivityScoreTypeID uniqueidentifier = NEWID()
								DECLARE @_SiteActivityScoreTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActivityScoreType'') AS uniqueidentifier)
								
								DECLARE @_ScoreCategory int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreCategory'') AS int)
								
								DECLARE @_ScoreOperation int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreOperation'') AS int)
								
								DECLARE @_AddedScore int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''AddedScore'') AS int)
								
								-- есть балл такого типа и такой категории
								DECLARE @_ContactActivityScoreID uniqueidentifier
								DECLARE @_oldScore int
								
								SELECT @_ContactActivityScoreID=ID, @_oldScore=Score
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								
								IF (@_ContactActivityScoreID IS NOT NULL)
								BEGIN
									DECLARE @_newScore int = CASE @_ScoreOperation
															 WHEN 0 THEN @_AddedScore -- (=)
															 WHEN 1 THEN @_oldScore + @_AddedScore -- (+)
															 WHEN 2 THEN @_oldScore - @_AddedScore -- (-)
															 WHEN 3 THEN @_oldScore * @_AddedScore -- (*)
															 END
									UPDATE tbl_ContactActivityScore
									SET Score=@_newScore
									WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								END
								ELSE
								BEGIN
									SET @_ContactActivityScoreID = NEWID()
									
									INSERT INTO tbl_ContactActivityScore (ID, SiteID, SiteActivityScoreTypeID, ContactID, Score, ScoreCategory)
									VALUES (@_ContactActivityScoreID, @_SiteID, @_SiteActivityScoreTypeID, @_WorkflowParameterID, @_AddedScore, @_ScoreCategory)
								END
								
								INSERT INTO tbl_ContactActivityScoreHistory (ContactActivityScoreID, Operation, Score, ActivityDate, Comment)
								VALUES (@_ContactActivityScoreID, @_ScoreOperation, @_AddedScore, GETDATE(), @_InsertedWorkflowElementID)
								-- Конец добавления баллов
								
								-- Начало обновления баллов контакта
								DECLARE @maxScoreTable TABLE
								(
									Score int,
									ScoreTypeID uniqueidentifier
								)

								INSERT INTO @maxScoreTable (Score, ScoreTypeID)
								SELECT TOP 1 SUM(Score) AS scoresum, SiteActivityScoreTypeID
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID
								GROUP BY SiteActivityScoreTypeID
								ORDER BY scoresum DESC

								DECLARE @_BehaviorScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=0 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								DECLARE @_CharacteristicsScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=1 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								IF (@_BehaviorScore IS NOT NULL)
								BEGIN
									DECLARE @_minScoreReadyToSell int = (SELECT MIN(MinScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									DECLARE @_maxScoreReadyToSell int = (SELECT MAX(MaxScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									
									IF (@_BehaviorScore < @_minScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_minScoreReadyToSell
									END
									IF (@_BehaviorScore > @_maxScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_maxScoreReadyToSell
									END

									UPDATE tbl_Contact
									SET BehaviorScore=@_BehaviorScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET ReadyToSellID=(SELECT TOP 1 ID FROM tbl_ReadyToSell WHERE SiteID=@_SiteID AND (@_BehaviorScore >= MinScore AND @_BehaviorScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								IF (@_CharacteristicsScore IS NOT NULL)
								BEGIN
									DECLARE @_minScorePriority int = (SELECT MIN(MinScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									DECLARE @_maxScorePriority int = (SELECT MAX(MaxScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									
									IF (@_CharacteristicsScore < @_minScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_minScorePriority
									END
									IF (@_CharacteristicsScore > @_maxScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_maxScorePriority
									END

									UPDATE tbl_Contact
									SET CharacteristicsScore=@_CharacteristicsScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET PriorityID=(SELECT TOP 1 ID FROM tbl_Priorities WHERE SiteID=@_SiteID AND (@_CharacteristicsScore >= MinScore AND @_CharacteristicsScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								UPDATE tbl_Contact
								SET Score= BehaviorScore + CharacteristicsScore
								WHERE ID=@_WorkflowParameterID
								-- Конец обновления баллов контакта
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
						END
						
						DELETE #WorkflowTemplateElementRelation WHERE EndElementID=@_WorkflowTemplateElementID
					END
					DROP TABLE #WorkflowTemplateElementRelation
		END
		-- Входящие элемент просрочен
		ELSE
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
	END
	-- Если нет выходов с элемента
	ELSE
	BEGIN
		SET @_WorkflowElementStatus = 2
	END
	
	
	-- Обновление статуса элемента процесса
	UPDATE tbl_WorkflowElement
	SET EndDate=GETDATE(),
		[Status]=@_WorkflowElementStatus,
		Result=@_StartElementResult
	WHERE ID=@_WorkflowElementID
	
END	
END'

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[Contact_Add]
(
 @ID uniqueidentifier,
 @SiteID uniqueidentifier,
 @RefferURL nvarchar(2000) = NULL,
 @UserIP varchar(15) = NULL,
 @UserAgent nvarchar(500) = NULL,
 @BrowserName nvarchar(255) = NULL,
 @BrowserVersion nvarchar(255) = NULL,
 @OperatingSystemName nvarchar(255) = NULL,
 @OperatingSystemVersion nvarchar(255) = NULL,
 @Resolution nvarchar(15) = NULL,
 @MobileDevice nvarchar(255) = NULL,
 @ActivityTypeID int,
 @ActivityCode nvarchar(255) = NULL,
 @EnterPointURL nvarchar(2000) = NULL,
 @AdvertisingPlatform nvarchar(255) = NULL,
 @AdvertisingType nvarchar(255) = NULL,
 @Keywords nvarchar(2000) = NULL,
 @AdvertisingCampaign nvarchar(255) = NULL,
 @Content nvarchar(2000) = NULL,
 @CountryID uniqueidentifier = NULL,
 @CityID uniqueidentifier = NULL,
 @RefferID uniqueidentifier = NULL,
 @CurrentDate datetime = NULL
)
AS
BEGIN
 -- BEGIN ADD/UPDATE USER
 DECLARE @StatusID uniqueidentifier
 DECLARE @ReadyToSellID uniqueidentifier
 DECLARE @PriorityID uniqueidentifier
 DECLARE @CreatedAt datetime = @CurrentDate
 
 IF ((SELECT COUNT(*) FROM tbl_Contact WHERE ID = @ID) = 0) 
 BEGIN
  SET @StatusID = (SELECT TOP 1 ID FROM tbl_Status WHERE SiteID = @SiteID AND IsDefault = 1)
  SET @ReadyToSellID = (SELECT TOP 1 ID FROM tbl_ReadyToSell WHERE SiteID = @SiteID AND MinScore = 0)
  SET @PriorityID = (SELECT TOP 1 ID FROM tbl_Priorities WHERE SiteID = @SiteID AND MinScore = 0)
 
  INSERT INTO tbl_Contact (ID, SiteID, CreatedAt, LastActivityAt, RefferURL, UserIP, StatusID, ReadyToSellID, PriorityID, RefferID)
  VALUES (@ID, @SiteID, @CreatedAt, @CreatedAt, @RefferURL, @UserIP, @StatusID, @ReadyToSellID, @PriorityID, @RefferID)
  
  exec ContactActivity_Add @ID, @SiteID, @RefferURL, @UserIP, @UserAgent, @BrowserName, @BrowserVersion, @OperatingSystemName, @OperatingSystemVersion, @Resolution, @MobileDevice, @ActivityTypeID, @ActivityCode, @EnterPointURL, @AdvertisingPlatform, @AdvertisingType, @Keywords, @AdvertisingCampaign, @Content, @CountryID, @CityID, @RefferID, @CurrentDate
 END
 ELSE
 BEGIN
  DECLARE @_minScoreReadyToSell int = (SELECT MIN(MinScore) FROM tbl_ReadyToSell WHERE SiteID=@SiteID)
  DECLARE @_minScorePriority int = (SELECT MIN(MinScore) FROM tbl_Priorities WHERE SiteID=@SiteID)
 
  DECLARE @CharacteristicsScore int = @_minScorePriority
  DECLARE @BehaviorScore int = @_minScoreReadyToSell
  
  SET @ReadyToSellID = (SELECT TOP 1 ID FROM tbl_ReadyToSell WHERE SiteID = @SiteID AND (@BehaviorScore >= MinScore AND @BehaviorScore <= MaxScore))
  SET @PriorityID = (SELECT TOP 1 ID FROM tbl_Priorities WHERE SiteID = @SiteID AND (@CharacteristicsScore >= MinScore AND @CharacteristicsScore <= MaxScore))
 
  exec ContactActivity_Add @ID, @SiteID, @RefferURL, @UserIP, @UserAgent, @BrowserName, @BrowserVersion, @OperatingSystemName, @OperatingSystemVersion, @Resolution, @MobileDevice, @ActivityTypeID, @ActivityCode, @EnterPointURL, @AdvertisingPlatform, @AdvertisingType, @Keywords, @AdvertisingCampaign, @Content, @CountryID, @CityID, @RefferID, @CurrentDate
 
  UPDATE tbl_Contact SET
   LastActivityAt = @CreatedAt,
   CharacteristicsScore = @CharacteristicsScore,
   Score = @BehaviorScore + @CharacteristicsScore,
   ReadyToSellID = @ReadyToSellID,
   PriorityID = @PriorityID
  WHERE ID = @ID AND SiteID = @SiteID
 END
 -- END ADD/UPDATE USER
END'

EXEC dbo.sp_executesql @statement = N'ALTER TRIGGER [dbo].[WorkflowContact] ON [dbo].[tbl_Contact]
	FOR INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @Action as char(1);
    SET @Action = ''I''; -- Set Action to Insert by default.
    IF EXISTS(SELECT * FROM DELETED)
    BEGIN
        SET @Action = 
            CASE
                WHEN EXISTS(SELECT * FROM INSERTED) THEN ''U'' -- Set Action to Updated.
                ELSE ''D'' -- Set Action to Deleted.       
            END
    END

	DECLARE @ModuleID uniqueidentifier = (SELECT ID FROM tbl_Module WHERE Name=''Contacts'')
	DECLARE @_ContactID uniqueidentifier
	DECLARE @_SiteID uniqueidentifier
	SELECT @_ContactID=ID,
		   @_SiteID=SiteID
	FROM inserted
	
	IF (@Action=''I'')
	BEGIN
		EXEC WorkflowInit @_ContactID, @_SiteID, @ModuleID, 1, 0, NULL
	END
	ELSE
	BEGIN
		IF (UPDATE(UserFullName)
			OR UPDATE(Email)
			OR UPDATE(Phone)
			--OR UPDATE(ReadyToSellID)
			--OR UPDATE(PriorityID)
			OR UPDATE(StatusID)
			OR UPDATE(Surname)
			OR UPDATE(Name)
			OR UPDATE(Patronymic)
			OR UPDATE(CellularPhone)
			OR UPDATE(CellularPhoneStatusID)
			OR UPDATE(EmailStatusID)
			OR UPDATE(JobTitle))
		BEGIN
			EXEC WorkflowInit @_ContactID, @_SiteID, @ModuleID, 1, 1, NULL
		END
	END
END'

commit
exec LBC_SetVersion 200
END

/*******************************************************************************
	2012-06-04
	Обновление относительно комплектаций
*******************************************************************************/
if ( dbo.LBC_Version() < 201 )
BEGIN
begin tran

ALTER TABLE [tbl_ProductComplectation] ADD [Price] money NOT NULL DEFAULT((0))

commit
exec LBC_SetVersion 201
END

/*******************************************************************************
	2012-06-05
	Обновление относительно комплектаций
*******************************************************************************/
if ( dbo.LBC_Version() < 202 )
BEGIN
begin tran


ALTER TABLE [tbl_OrderProducts] ADD ParentOrderProductID uniqueidentifier NULL

ALTER TABLE [dbo].[tbl_OrderProducts]  WITH CHECK ADD  CONSTRAINT [FK_tbl_OrderProducts_tbl_OrderProductsParent] FOREIGN KEY([ParentOrderProductID])
REFERENCES [dbo].[tbl_OrderProducts] ([ID])
ALTER TABLE [dbo].[tbl_OrderProducts] CHECK CONSTRAINT [FK_tbl_OrderProducts_tbl_OrderProductsParent]

commit
exec LBC_SetVersion 202
END


/*******************************************************************************
	2012-06-06
	Обновление аналитик
*******************************************************************************/
if ( dbo.LBC_Version() < 203 )
BEGIN
begin tran

UPDATE tbl_Analytic
SET Query = N'DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = ''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)
DECLARE @Period nvarchar(256)

IF @GroupByDays = 1
	SET @Period = ''CAST(TBLOrder.CreatedAt AS DATE)''
ELSE
	SET @Period = ''DATEPART(HOUR, TBLOrder.CreatedAt)''

SET @SQL = ''SELECT '' + @Period + '' AS Period, TBLOrderStatus.Title AS OrderStatus, TBLContact.UserFullName AS OrderResponsible, TBLProductType.Title AS ProductType, TBLAdvertisingCampaign.Title AS AdvertisingCampaign, SUM(TBLOrderProducts.Quantity) AS ExerciseCount, SUM(TBLOrderProducts.TotalAmount) AS Total
FROM tbl_Order AS TBLOrder
LEFT JOIN tbl_OrderProducts AS TBLOrderProducts ON TBLOrderProducts.OrderID = TBLOrder.ID
LEFT JOIN tbl_OrderStatus AS TBLOrderStatus ON TBLOrderStatus.ID = TBLOrder.OrderStatusID
LEFT JOIN tbl_Contact AS TBLContact ON TBLContact.ID = TBLOrder.ExecutorContactID
LEFT JOIN tbl_AdvertisingCampaign AS TBLAdvertisingCampaign ON TBLAdvertisingCampaign.ID = TBLContact.AdvertisingCampaignID
LEFT JOIN tbl_Product AS TBLProduct ON TBLProduct.ID = TBLOrderProducts.ProductID
LEFT JOIN tbl_ProductType AS TBLProductType ON TBLProduct.ProductTypeID = TBLProductType.ID
WHERE TBLOrder.CreatedAt >= @StartDate AND TBLOrder.CreatedAt <= @EndDate AND 
TBLOrder.SiteID = @SiteID AND TBLProductType.ProductWorkWithComplectationID = 1 ''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + ''GROUP BY '' + @Period + '', TBLProductType.Title, TBLAdvertisingCampaign.Title, TBLOrderStatus.Title, TBLContact.UserFullName
 ORDER BY '' + @Period

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate'

WHERE ID = 'd6fee125-0cf7-4629-b875-d99ad736b57b'

UPDATE tbl_Analytic
SET Query = N'DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = ''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)
DECLARE @Period nvarchar(256)

IF @GroupByDays = 1
	SET @Period = ''CAST(TBLTask.StartDate AS DATE)''
ELSE
	SET @Period = ''DATEPART(HOUR, TBLTask.StartDate)''

SET @SQL = ''SELECT '' + @Period + '' AS Period, TBLTaskType.Title AS TaskType, TBLContact1.UserFullName AS OrderResponsible, TBLContact2.UserFullName AS TaskResponsible, COUNT(TBLTaskMember.ID) AS ExerciseCount, COUNT(TBLTaskMember.ID) * AVG(CAST(TBLOrderProducts.TotalAmount AS money) / CAST(TBLOrderProducts.Quantity AS money)) AS Total
FROM tbl_Task AS TBLTask
LEFT JOIN tbl_TaskMember AS TBLTaskMember ON TBLTask.ID = TBLTaskMember.TaskID
LEFT JOIN tbl_OrderProducts AS TBLOrderProducts ON TBLTaskMember.OrderProductsID = TBLOrderProducts.ID
LEFT JOIN tbl_Order AS TBLOrder ON TBLOrderProducts.OrderID = TBLOrder.ID
LEFT JOIN tbl_TaskType AS TBLTaskType ON TBLTaskType.ID = TBLTask.TaskTypeID
LEFT JOIN tbl_Contact AS TBLContact1 ON TBLContact1.ID = TBLOrder.ExecutorContactID
LEFT JOIN tbl_Contact AS TBLContact2 ON TBLContact2.ID = TBLTask.ResponsibleID
WHERE TBLTask.ProductID IS NOT NULL AND TBLTask.StartDate >= @StartDate AND TBLTask.StartDate <= @EndDate AND 
TBLTask.SiteID = @SiteID  AND TBLTaskMember.OrderProductsID IS NOT NULL ''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + ''GROUP BY '' + @Period + '', TBLTaskType.Title, TBLContact1.UserFullName, TBLContact2.UserFullName
 ORDER BY '' + @Period

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate'

WHERE ID = '211a735a-7e73-40e1-9b6d-4ed1e810229a'

commit
exec LBC_SetVersion 203
END


/*******************************************************************************
	2012-06-07
	Добавление аналитики по процессам
*******************************************************************************/
if ( dbo.LBC_Version() < 204 )
BEGIN
begin tran

INSERT [dbo].[tbl_Analytic] ([ID], [Title], [Query]) VALUES (N'e09155da-c8c3-4b1d-b2bf-36bfad5075a6', N'Конверсия по элементам процесса', N'
DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = ''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)
DECLARE @Period1 nvarchar(256)
DECLARE @Period2 nvarchar(256)

IF @GroupByDays = 1
	BEGIN
		SET @Period1 = ''CAST(TBLWorkflowElement.StartDate AS DATE)''
		SET @Period2 = ''CAST(TBLWorkflow.StartDate AS DATE)''
	END
ELSE
	BEGIN
		SET @Period1 = ''DATEPART(HOUR, TBLWorkflowElement.StartDate)''
		SET @Period2 = ''DATEPART(HOUR, TBLWorkflow.StartDate)''
	END

SET @SQL = ''SELECT A.Period, A.MassWorkflow, A.Workflow, A.WorkflowElement, A.WorkflowElementCount, 
CASE WHEN B.WorkflowCount IS NULL THEN 0 ELSE B.WorkflowCount END AS WorkflowCount, 
(CASE WHEN B.WorkflowCount IS NULL OR B.WorkflowCount = 0 THEN 0 ELSE (CAST(A.WorkflowElementCount AS FLOAT) / CAST(B.WorkflowCount AS FLOAT)) * 100 END) AS Conversion
FROM (SELECT '' + @Period1 + '' AS Period, 
TBLWorkflowElement.ID AS WorkflowElementID, 
TBLWorkflow.ID AS WorkflowID, 
COUNT(DISTINCT TBLWorkflowElement.ID) AS WorkFlowElementCount, 
TBLWorkflowTemplateElement.Name AS WorkflowElement, 
TBLMassWorkflow.Name AS MassWorkflow, TBLWorkflowTemplate.Name AS Workflow

FROM tbl_WorkflowElement AS TBLWorkflowElement
LEFT JOIN tbl_Workflow AS TBLWorkflow ON TBLWorkflow.ID = TBLWorkflowElement.WorkflowID
LEFT JOIN tbl_WorkflowTemplateElement AS TBLWorkflowTemplateElement ON TBLWorkflowTemplateElement.ID = TBLWorkflowElement.WorkflowTemplateElementID
LEFT JOIN tbl_MassWorkflow AS TBLMassWorkflow ON TBLWorkflow.MassWorkflowID = TBLMassWorkflow.ID
LEFT JOIN tbl_WorkflowTemplate AS TBLWorkflowTemplate ON TBLWorkflowTemplate.ID = TBLWorkflow.WorkflowTemplateID
WHERE TBLWorkflow.SiteID = @SiteID AND TBLWorkflowElement.StartDate >= @StartDate AND TBLWorkflowElement.StartDate <= @EndDate''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + '' GROUP BY '' + @Period1 + '' , TBLWorkflowElement.ID, TBLWorkflow.ID, TBLWorkflowTemplateElement.Name, TBLMassWorkflow.Name, TBLWorkflowTemplate.Name) AS A
LEFT JOIN 
(SELECT '' + @Period2 + '' AS Period, TBLWorkflow.ID AS WorkflowID, 
COUNT(TBLWorkflow.ID) AS WorkFlowCount
FROM tbl_Workflow AS TBLWorkflow
LEFT JOIN tbl_MassWorkflow AS TBLMassWorkflow ON TBLWorkflow.MassWorkflowID = TBLMassWorkflow.ID
WHERE TBLWorkflow.SiteID = @SiteID AND TBLWorkflow.StartDate >= @StartDate AND TBLWorkflow.StartDate <= @EndDate''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + '' GROUP BY '' + @Period2 + '' , TBLWorkflow.ID) AS B
ON B.Period = A.Period AND B.WorkflowID = A.WorkflowID 
ORDER BY A.Period''

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate')

INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'1d2e69f5-5de6-442e-a427-8929395de148', N'e09155da-c8c3-4b1d-b2bf-36bfad5075a6', N'Дата', N'Period', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'72eb62a5-faa1-444e-9200-29091ca32360', N'e09155da-c8c3-4b1d-b2bf-36bfad5075a6', N'Программа развития', N'MassWorkflow', 1, N'tbl_MassWorkflow')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet], [Query]) VALUES (N'7d3dbeaa-2e42-4a95-819a-2c8e476c2169', N'e09155da-c8c3-4b1d-b2bf-36bfad5075a6', N'Процесс', N'Workflow', 1, N'tbl_Workflow', N'SELECT TBLWorkflow.ID AS ID, TBLWorkflowTemplate.Name AS Title
FROM #DataSet# AS TBLWorkflow
LEFT JOIN tbl_WorkflowTemplate AS TBLWorkflowTemplate ON TBLWorkflow.WorkflowTemplateID = TBLWorkflowTemplate.ID
WHERE TBLWorkflow.SiteID = ''#SiteID#''')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet], [Query]) VALUES (N'6a737c2f-4500-4573-82f0-4bbfa518290b', N'e09155da-c8c3-4b1d-b2bf-36bfad5075a6', N'Элемент процесса', N'WorkflowElement', 0, N'tbl_WorkflowElement', N'SELECT DISTINCT TBLWorkflowElement.ID, TBLWorkflowTemplateElement.Name AS Title
FROM #DataSet# AS TBLWorkflowElement
LEFT JOIN tbl_WorkflowTemplateElement AS TBLWorkflowTemplateElement ON TBLWorkflowElement.WorkflowTemplateElementID = TBLWorkflowTemplateElement.ID
WHERE WorkflowID IN (SELECT ID FROM tbl_Workflow WHERE SiteID = ''#SiteID#'')')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'b25b4e01-7391-4a47-82d3-37d5dfd7f054', N'e09155da-c8c3-4b1d-b2bf-36bfad5075a6', N'Количество элементов', N'WorkflowElementCount', 3, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'59c3e94f-c7b4-48fe-a24c-5575f5fa4622', N'e09155da-c8c3-4b1d-b2bf-36bfad5075a6', N'Количество процессов', N'WorkflowCount', 3, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'c90045b1-0a32-4b45-9494-767323cd3218', N'e09155da-c8c3-4b1d-b2bf-36bfad5075a6', N'Конверсия', N'Conversion', 3, NULL)


INSERT [dbo].[tbl_AnalyticReport] ([ID], [AnalyticID], [Title], [Description], [ModuleID]) VALUES (N'67566bb9-5dec-422a-bc0f-eaff5dc40a3c', N'e09155da-c8c3-4b1d-b2bf-36bfad5075a6', N'Конверсия по элементам процесса', N'Конверсия по элементам процесса', (SELECT TOP 1 ID FROM tbl_Module WHERE Name = 'Workflows'))

INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'e23b84d6-ac29-4929-b68f-095fd8223c49', N'67566bb9-5dec-422a-bc0f-eaff5dc40a3c', N'1d2e69f5-5de6-442e-a427-8929395de148', 1, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'69246c7d-cac1-4509-bfa5-0757daf81525', N'67566bb9-5dec-422a-bc0f-eaff5dc40a3c', N'72eb62a5-faa1-444e-9200-29091ca32360', 0, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'c845bc4d-d816-44ab-bb9d-f010219d6d14', N'67566bb9-5dec-422a-bc0f-eaff5dc40a3c', N'7d3dbeaa-2e42-4a95-819a-2c8e476c2169', 0, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'eb1d1fa0-cb44-417e-95e0-83c3a27a19dc', N'67566bb9-5dec-422a-bc0f-eaff5dc40a3c', N'6a737c2f-4500-4573-82f0-4bbfa518290b', 2, 1)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'676645ff-3ed9-4418-81a5-31fce8d5a212', N'67566bb9-5dec-422a-bc0f-eaff5dc40a3c', N'b25b4e01-7391-4a47-82d3-37d5dfd7f054', 0, 1)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'77cc7635-8972-46b9-a8ad-7878e10ab6ea', N'67566bb9-5dec-422a-bc0f-eaff5dc40a3c', N'59c3e94f-c7b4-48fe-a24c-5575f5fa4622', 0, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'07e7df9e-9851-4902-b07a-e5c5b9e099fb', N'67566bb9-5dec-422a-bc0f-eaff5dc40a3c', N'c90045b1-0a32-4b45-9494-767323cd3218', 0, 0)

commit
exec LBC_SetVersion 204
END

/*******************************************************************************
	2012-06-07
	Обновление процессов
*******************************************************************************/
if ( dbo.LBC_Version() < 205 )
BEGIN
begin tran

ALTER TABLE [dbo].[tbl_Priorities] ALTER COLUMN [Image] nvarchar(250) NULL
ALTER TABLE [dbo].[tbl_ReadyToSell] ALTER COLUMN [Image] nvarchar(250) NULL

DROP PROCEDURE EventProcessing
DROP TABLE tbl_WorkflowTemplateRole

ALTER TABLE [dbo].[tbl_Workflow]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Workflow_tbl_MassWorkflow] FOREIGN KEY([MassWorkflowID])
REFERENCES [dbo].[tbl_MassWorkflow] ([ID])

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[WorkflowProcessing]
(
	@_WorkflowElementID uniqueidentifier, -- Входящий элемент
	@_StartElementResult nvarchar(255) = NULL -- Результат выполнения элемента процесса
)
AS
BEGIN
	DECLARE @_SiteID uniqueidentifier
	DECLARE @_WorkflowStartDate datetime
	DECLARE @_WorkflowID uniqueidentifier
	DECLARE @_WorkflowTemplateContactID uniqueidentifier
	DECLARE @_WorkflowTemplateElementID uniqueidentifier
	DECLARE @_WorkflowParameterID uniqueidentifier
	DECLARE @_ControlDate datetime
	DECLARE @_WorkflowElementStatus int = 0
	DECLARE @_WorkflowStatus int = 0
	DECLARE @_WorkflowResult nvarchar(255)
	DECLARE @_MassWorkflowID uniqueidentifier = NULL
	
	DECLARE @_StartAfter int
	DECLARE @_StartPeriod int
	DECLARE @_DurationHours int
	DECLARE @_DurationMinutes int
	DECLARE @_ControlAfter int
	DECLARE @_ControlPeriod int
	DECLARE @_ControlFromBeginProccess bit
	
	SELECT @_WorkflowID=w.WorkflowID,
		   @_WorkflowTemplateElementID=w.WorkflowTemplateElementID,
		   @_ControlDate=w.ControlDate,
		   @_WorkflowTemplateContactID=wt.ContactID,
		   @_WorkflowStatus=wf.[Status]
		   --@_StartAfter=t.StartAfter,
		   --@_StartPeriod=t.StartPeriod,
		   --@_ControlAfter=t.ControlAfter,
		   --@_ControlPeriod=t.ControlPeriod,
		   --@_ControlFromBeginProccess=t.ControlFromBeginProccess
	FROM tbl_WorkflowElement AS w
	LEFT JOIN tbl_WorkflowTemplateElement AS t ON t.ID=w.WorkflowTemplateElementID
	LEFT JOIN tbl_WorkflowTemplate AS wt ON wt.ID=t.WorkflowTemplateID
	LEFT JOIN tbl_Workflow AS wf ON wf.ID=w.WorkflowID
	WHERE w.ID=@_WorkflowElementID AND (t.ElementType<>1 OR (t.ElementType=1 AND w.[Status]=0))
	
	SELECT @_SiteID=SiteID, @_WorkflowStartDate=StartDate, @_MassWorkflowID=MassWorkflowID
	FROM tbl_Workflow
	WHERE ID=@_WorkflowID
	
IF (@_WorkflowStatus=0)
BEGIN	
	
	-- Выбираем все элементы по связям, где входящий элемент является начальным
	-- и с выходящим результатом
	SELECT EndElementID
	INTO #WorkflowTemplateElementRelation
	FROM tbl_WorkflowTemplateElementRelation
	WHERE StartElementID=@_WorkflowTemplateElementID AND (StartElementResult=@_StartElementResult OR @_StartElementResult IS NULL)
	
	-- Если выходы с элемента есть
	IF ((SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0)
	BEGIN
		SET @_WorkflowElementStatus = 1
		
		-- Входящие элемент не просрочен
		IF ((@_ControlDate IS NULL) OR (@_ControlDate > GETDATE()))
		BEGIN
					WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0
					BEGIN
						SELECT TOP 1 @_WorkflowTemplateElementID=EndElementID
						FROM #WorkflowTemplateElementRelation
						
						IF ((SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND WorkflowTemplateElementID=@_WorkflowTemplateElementID) = 0)
						BEGIN
							DECLARE @_WorkflowTemplateElementType int
							DECLARE @_WorkflowTemplateElementName nvarchar(255)
							DECLARE @_IsActive bit
							SELECT @_WorkflowTemplateElementType=ElementType, @_WorkflowTemplateElementName=Name, @_IsActive=IsActive
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							DECLARE @_InsertedWorkflowElementID uniqueidentifier = NEWID()
							
							SELECT @_StartAfter=StartAfter,
								   @_StartPeriod=StartPeriod,
								   @_DurationHours=DurationHours,
								   @_DurationMinutes=DurationMinutes,
								   @_ControlAfter=ControlAfter,
								   @_ControlPeriod=ControlPeriod,
								   @_ControlFromBeginProccess=ControlFromBeginProccess
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							-- Тип элемента "Окончание процесса"
							IF (@_WorkflowTemplateElementType=6)
							BEGIN
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 1)
								
								UPDATE tbl_Workflow
								SET EndDate=GETDATE(), [Status]=1
								WHERE ID=@_WorkflowID
								
								-- Программа развития "Завершена"
								IF (@_MassWorkflowID IS NOT NULL)
								BEGIN
									IF (SELECT COUNT(*)
									FROM tbl_Workflow
									WHERE MassWorkflowID=@_MassWorkflowID AND [Status]=0) = 0
									BEGIN
										UPDATE tbl_MassWorkflow
										SET [Status]=2
										WHERE ID=@_MassWorkflowID
									END
								END
							END
							
							-- определяем параметер
							SET @_WorkflowParameterID =
							(SELECT tbl_WorkflowParameter.[Value]
							FROM tbl_WorkflowParameter
							LEFT JOIN tbl_WorkflowTemplateParameter ON tbl_WorkflowTemplateParameter.ID=tbl_WorkflowParameter.WorkflowTemplateParameterID
							WHERE tbl_WorkflowParameter.WorkflowID=@_WorkflowID
								  AND tbl_WorkflowTemplateParameter.Name=N''Контакт''
								  AND tbl_WorkflowTemplateParameter.IsSystem=1)
								  
							-- определяем через сколько запускать элемент, если 0 то сразу
							DECLARE @_ActionDate datetime = GETDATE()
							IF (@_StartAfter <> 0)
							BEGIN
								SET @_ActionDate = CASE
									WHEN @_StartPeriod = 0 THEN DATEADD(minute, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 1 THEN DATEADD(hour, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 2 THEN DATEADD(day, @_StartAfter, @_ActionDate)
								END
							END
							
							-- дата контроля
							SET @_ControlDate = GETDATE()
							IF (@_ControlFromBeginProccess=1) -- От начала процесса
							BEGIN
								SET @_ControlDate = @_WorkflowStartDate
							END
							
							SET @_ControlDate = CASE
								WHEN @_ControlPeriod = 0 THEN DATEADD(minute, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 1 THEN DATEADD(hour, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 2 THEN DATEADD(day, @_ControlAfter, @_ControlDate)
							END
							
							
							-- Тип элемента "Сообщение"
							IF (@_WorkflowTemplateElementType = 0)
							BEGIN
								-- Начало добавления сообщения в очередь
								DECLARE @_SiteActionTemplateID uniqueidentifier = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActionTemplateID'')
								
								DECLARE @MessageTitle nvarchar(255)
								DECLARE @MessageText nvarchar(max)
								SELECT @MessageTitle=MessageCaption, @MessageText=MessageBody
								FROM tbl_SiteActionTemplate
								WHERE ID=@_SiteActionTemplateID
								
								DECLARE @_SiteActionID uniqueidentifier = NEWID()
								INSERT INTO tbl_SiteAction (ID, SiteID, SiteActionTemplateID, ContactID, ActionStatusID, ActionDate, MessageTitle, MessageText)
								VALUES (@_SiteActionID, @_SiteID, @_SiteActionTemplateID, @_WorkflowParameterID, 1, @_ActionDate, @MessageTitle, @MessageText)
								-- Конец добавления сообщения в очередь
								
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_SiteActionID)
							END
							
							-- Тип элемента "Ожидание события"
							IF (@_WorkflowTemplateElementType = 2)
							BEGIN
								IF (@_ControlAfter<>0)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], ControlDate)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_ControlDate)
								END
								ELSE
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0)
								END
							END
							
							-- Тип элемента "Действие"
							IF (@_WorkflowTemplateElementType = 3)
							BEGIN
								-- Начало добавления действия
								DECLARE @_ContactActivityDescription nvarchar(255) = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ContactActivityDescription'')
								
								DECLARE @_ContactActivityID uniqueidentifier = NEWID()
								INSERT INTO tbl_ContactActivity (ID, SiteID, ContactID, CreatedAt, ActivityTypeID, ActivityCode)
								VALUES (@_ContactActivityID, @_SiteID, @_WorkflowParameterID, GETDATE(), 13, @_ContactActivityDescription)
								-- Конец добавления действия
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1, @_ContactActivityID)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Задача"
							IF (@_WorkflowTemplateElementType = 1)
							BEGIN
								-- Начало добавления задачи
								DECLARE @_TaskID uniqueidentifier = NEWID()
								DECLARE @_TaskTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskType'') AS uniqueidentifier)
								
								DECLARE @_IsImportantTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsImportantTask'') AS bit)
								
								DECLARE @_IsUrgentTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsUrgentTask'') AS bit)
								
								DECLARE @_TaskEndDate datetime = @_ActionDate
								SET @_TaskEndDate = DATEADD(hour, @_DurationHours, @_TaskEndDate)
								SET @_TaskEndDate = DATEADD(minute, @_DurationMinutes, @_TaskEndDate)
								INSERT INTO tbl_Task (ID, SiteID, Title, TaskTypeID, StartDate, EndDate, DateOfControl, IsImportantTask, PlanDurationMinutes, PlanDurationHours, ResponsibleID, CreatorID, IsUrgentTask, TaskStatusID)
								VALUES (@_TaskID, @_SiteID, @_WorkflowTemplateElementName, @_TaskTypeID, @_ActionDate, @_TaskEndDate, @_ControlDate, @_IsImportantTask, @_DurationMinutes, @_DurationHours, @_WorkflowTemplateContactID, @_WorkflowTemplateContactID, @_IsUrgentTask, 1)
								-- Конец добавления задачи
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, ControlDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), @_ControlDate, 0, @_TaskID)
							END
							
							-- Тип элемента "Сегментация"
							IF (@_WorkflowTemplateElementType = 7)
							BEGIN
								SELECT ID
								INTO #WorkflowTemplateElementTag
								FROM tbl_WorkflowTemplateElementTag
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID
								
								DECLARE @_WorkflowTemplateElementTagID uniqueidentifier
								DECLARE @_SiteTagID uniqueidentifier
								DECLARE @_Operation int
								WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementTag) > 0
								BEGIN
									SELECT TOP 1 @_WorkflowTemplateElementTagID=ID
									FROM #WorkflowTemplateElementTag
									
									SELECT @_SiteTagID=SiteTagID, @_Operation=Operation
									FROM tbl_WorkflowTemplateElementTag
									WHERE ID=@_WorkflowTemplateElementTagID
									
									IF (@_Operation = 0)
									BEGIN
										DELETE FROM tbl_SiteTagObjects
										WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID
									END
									ELSE
									BEGIN
										IF (SELECT COUNT(*) FROM tbl_SiteTagObjects WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID) = 0
										BEGIN
											INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID)
											VALUES (@_SiteTagID, @_WorkflowParameterID)
										END
									END
									
									DELETE #WorkflowTemplateElementTag WHERE ID=@_WorkflowTemplateElementTagID
								END
								DROP TABLE #WorkflowTemplateElementTag

								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Скорринг"
							IF (@_WorkflowTemplateElementType = 8)
							BEGIN
								-- Начало добавления баллов
								--DECLARE @_SiteActivityScoreTypeID uniqueidentifier = NEWID()
								DECLARE @_SiteActivityScoreTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActivityScoreType'') AS uniqueidentifier)
								
								DECLARE @_ScoreCategory int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreCategory'') AS int)
								
								DECLARE @_ScoreOperation int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreOperation'') AS int)
								
								DECLARE @_AddedScore int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''AddedScore'') AS int)
								
								-- есть балл такого типа и такой категории
								DECLARE @_ContactActivityScoreID uniqueidentifier
								DECLARE @_oldScore int
								
								SELECT @_ContactActivityScoreID=ID, @_oldScore=Score
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								
								IF (@_ContactActivityScoreID IS NOT NULL)
								BEGIN
									DECLARE @_newScore int = CASE @_ScoreOperation
															 WHEN 0 THEN @_AddedScore -- (=)
															 WHEN 1 THEN @_oldScore + @_AddedScore -- (+)
															 WHEN 2 THEN @_oldScore - @_AddedScore -- (-)
															 WHEN 3 THEN @_oldScore * @_AddedScore -- (*)
															 END
									UPDATE tbl_ContactActivityScore
									SET Score=@_newScore
									WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								END
								ELSE
								BEGIN
									SET @_ContactActivityScoreID = NEWID()
									
									INSERT INTO tbl_ContactActivityScore (ID, SiteID, SiteActivityScoreTypeID, ContactID, Score, ScoreCategory)
									VALUES (@_ContactActivityScoreID, @_SiteID, @_SiteActivityScoreTypeID, @_WorkflowParameterID, @_AddedScore, @_ScoreCategory)
								END
								
								INSERT INTO tbl_ContactActivityScoreHistory (ContactActivityScoreID, Operation, Score, ActivityDate, Comment)
								VALUES (@_ContactActivityScoreID, @_ScoreOperation, @_AddedScore, GETDATE(), @_InsertedWorkflowElementID)
								-- Конец добавления баллов
								
								-- Начало обновления баллов контакта
								DECLARE @maxScoreTable TABLE
								(
									Score int,
									ScoreTypeID uniqueidentifier
								)

								INSERT INTO @maxScoreTable (Score, ScoreTypeID)
								SELECT TOP 1 SUM(Score) AS scoresum, SiteActivityScoreTypeID
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID
								GROUP BY SiteActivityScoreTypeID
								ORDER BY scoresum DESC

								DECLARE @_BehaviorScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=0 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								DECLARE @_CharacteristicsScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=1 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								IF (@_BehaviorScore IS NOT NULL)
								BEGIN
									DECLARE @_minScoreReadyToSell int = (SELECT MIN(MinScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									DECLARE @_maxScoreReadyToSell int = (SELECT MAX(MaxScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									
									IF (@_BehaviorScore < @_minScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_minScoreReadyToSell
									END
									IF (@_BehaviorScore > @_maxScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_maxScoreReadyToSell
									END

									UPDATE tbl_Contact
									SET BehaviorScore=@_BehaviorScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET ReadyToSellID=(SELECT TOP 1 ID FROM tbl_ReadyToSell WHERE SiteID=@_SiteID AND (@_BehaviorScore >= MinScore AND @_BehaviorScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								IF (@_CharacteristicsScore IS NOT NULL)
								BEGIN
									DECLARE @_minScorePriority int = (SELECT MIN(MinScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									DECLARE @_maxScorePriority int = (SELECT MAX(MaxScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									
									IF (@_CharacteristicsScore < @_minScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_minScorePriority
									END
									IF (@_CharacteristicsScore > @_maxScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_maxScorePriority
									END

									UPDATE tbl_Contact
									SET CharacteristicsScore=@_CharacteristicsScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET PriorityID=(SELECT TOP 1 ID FROM tbl_Priorities WHERE SiteID=@_SiteID AND (@_CharacteristicsScore >= MinScore AND @_CharacteristicsScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								UPDATE tbl_Contact
								SET Score= BehaviorScore + CharacteristicsScore
								WHERE ID=@_WorkflowParameterID
								-- Конец обновления баллов контакта
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
						END
						
						DELETE #WorkflowTemplateElementRelation WHERE EndElementID=@_WorkflowTemplateElementID
					END
					DROP TABLE #WorkflowTemplateElementRelation
		END
		-- Входящие элемент просрочен
		ELSE
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
	END
	-- Если нет выходов с элемента
	ELSE
	BEGIN
		SET @_WorkflowElementStatus = 2
	END
	
	
	-- Обновление статуса элемента процесса
	UPDATE tbl_WorkflowElement
	SET EndDate=GETDATE(),
		[Status]=@_WorkflowElementStatus,
		Result=@_StartElementResult
	WHERE ID=@_WorkflowElementID
	
END	
END'

commit
exec LBC_SetVersion 205
END

/*******************************************************************************
	2012-06-07
	Обновление аналитики по процессам
*******************************************************************************/
if ( dbo.LBC_Version() < 206 )
BEGIN
begin tran

UPDATE [dbo].[tbl_Analytic] 
SET Query =
N'
DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = ''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)
DECLARE @Period1 nvarchar(256)
DECLARE @Period2 nvarchar(256)

IF @GroupByDays = 1
	BEGIN
		SET @Period1 = ''CAST(TBLWorkflowElement.StartDate AS DATE)''
		SET @Period2 = ''CAST(TBLWorkflow.StartDate AS DATE)''
	END
ELSE
	BEGIN
		SET @Period1 = ''DATEPART(HOUR, TBLWorkflowElement.StartDate)''
		SET @Period2 = ''DATEPART(HOUR, TBLWorkflow.StartDate)''
	END

SET @SQL = ''SELECT A.Period, A.MassWorkflow, A.WorkflowTemplate, A.WorkflowTemplateElement, A.WorkflowElementCount, 
CASE WHEN B.WorkflowCount IS NULL THEN 0 ELSE B.WorkflowCount END AS WorkflowCount, 
(CASE WHEN B.WorkflowCount IS NULL OR B.WorkflowCount = 0 THEN 0 ELSE (CAST(A.WorkflowElementCount AS FLOAT) / CAST(B.WorkflowCount AS FLOAT)) * 100 END) AS Conversion
FROM (SELECT '' + @Period1 + '' AS Period, 
TBLWorkflowTemplate.ID AS WorkflowTemplateID, 
COUNT(DISTINCT TBLWorkflowElement.ID) AS WorkFlowElementCount, 
TBLWorkflowTemplateElement.Name AS WorkflowTemplateElement, 
TBLMassWorkflow.Name AS MassWorkflow, TBLWorkflowTemplate.Name AS WorkflowTemplate

FROM tbl_WorkflowElement AS TBLWorkflowElement
LEFT JOIN tbl_Workflow AS TBLWorkflow ON TBLWorkflow.ID = TBLWorkflowElement.WorkflowID
LEFT JOIN tbl_WorkflowTemplateElement AS TBLWorkflowTemplateElement ON TBLWorkflowTemplateElement.ID = TBLWorkflowElement.WorkflowTemplateElementID
LEFT JOIN tbl_MassWorkflow AS TBLMassWorkflow ON TBLWorkflow.MassWorkflowID = TBLMassWorkflow.ID
LEFT JOIN tbl_WorkflowTemplate AS TBLWorkflowTemplate ON TBLWorkflowTemplate.ID = TBLWorkflow.WorkflowTemplateID
WHERE TBLWorkflow.SiteID = @SiteID AND TBLWorkflowElement.StartDate >= @StartDate AND TBLWorkflowElement.StartDate <= @EndDate ''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + '' GROUP BY '' + @Period1 + '' , TBLWorkflowTemplate.ID, TBLWorkflowTemplateElement.Name, TBLMassWorkflow.Name, TBLWorkflowTemplate.Name) AS A
LEFT JOIN 
(SELECT '' + @Period2 + '' AS Period, TBLWorkflowTemplate.ID AS WorkflowTemplateID, 
COUNT(TBLWorkflow.ID) AS WorkFlowCount
FROM tbl_Workflow AS TBLWorkflow
LEFT JOIN tbl_MassWorkflow AS TBLMassWorkflow ON TBLWorkflow.MassWorkflowID = TBLMassWorkflow.ID
LEFT JOIN tbl_WorkflowTemplate AS TBLWorkflowTemplate ON TBLWorkflowTemplate.ID = TBLWorkflow.WorkflowTemplateID
WHERE TBLWorkflow.SiteID = @SiteID AND TBLWorkflow.StartDate >= @StartDate AND TBLWorkflow.StartDate <= @EndDate ''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + '' GROUP BY '' + @Period2 + '' , TBLWorkflowTemplate.ID) AS B
ON B.Period = A.Period AND B.WorkflowTemplateID = A.WorkflowTemplateID 
ORDER BY A.Period''

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate'

WHERE ID = 'e09155da-c8c3-4b1d-b2bf-36bfad5075a6'

UPDATE [dbo].[tbl_AnalyticAxis] SET [Query] = N'SELECT ID AS ID, Name AS Title
FROM #DataSet# 
WHERE SiteID = ''#SiteID#''', DataSet = 'tbl_WorkflowTemplate', Title = N'Шаблон процесса', [SystemName] = N'WorkflowTemplate'
WHERE ID = '7d3dbeaa-2e42-4a95-819a-2c8e476c2169'

UPDATE [dbo].[tbl_AnalyticAxis] SET [Query] = N'SELECT DISTINCT TBLWorkflowTemplateElement.Name AS ID, TBLWorkflowTemplateElement.Name AS Title
FROM tbl_WorkflowElement AS TBLWorkflowElement
LEFT JOIN tbl_WorkflowTemplateElement AS TBLWorkflowTemplateElement ON TBLWorkflowElement.WorkflowTemplateElementID = TBLWorkflowTemplateElement.ID
LEFT JOIN tbl_WorkflowTemplate AS TBLWorkflowTemplate ON TBLWorkflowTemplateElement.WorkflowTemplateID = TBLWorkflowTemplate.ID
WHERE TBLWorkflowTemplate.SiteID = ''#SiteID#'' AND WorkflowID IN (SELECT ID FROM tbl_Workflow WHERE SiteID = ''#SiteID#'')', DataSet = 'tbl_WorkflowTemplateElement', Title = N'Шаблон элемента процесса', [SystemName] = N'WorkflowTemplateElement'
WHERE ID = '6a737c2f-4500-4573-82f0-4bbfa518290b'

commit
exec LBC_SetVersion 206
END

/*******************************************************************************
	2012-06-09
	Добавление аналитики по процессам
*******************************************************************************/
if ( dbo.LBC_Version() < 207 )
BEGIN
begin tran

INSERT [dbo].[tbl_Analytic] ([ID], [Title], [Query]) VALUES (N'087bfe1d-cef8-4700-8818-7dcbb7ef6f71', N'Конверсия по целям', N'
DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = ''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)
DECLARE @Period1 nvarchar(256)
DECLARE @Period2 nvarchar(256)

IF @GroupByDays = 1
	BEGIN
		SET @Period1 = ''CAST(TBLWorkflowElement.StartDate AS DATE)''
		SET @Period2 = ''CAST(TBLWorkflow.StartDate AS DATE)''
	END
ELSE
	BEGIN
		SET @Period1 = ''DATEPART(HOUR, TBLWorkflowElement.StartDate)''
		SET @Period2 = ''DATEPART(HOUR, TBLWorkflow.StartDate)''
	END

SET @SQL = ''SELECT A.Period, A.MassWorkflow, A.WorkflowTemplate, A.WorkflowTemplateGoal, A.WorkflowElementCount, 
CASE WHEN B.WorkflowCount IS NULL THEN 0 ELSE B.WorkflowCount END AS WorkflowCount, 
(CASE WHEN B.WorkflowCount IS NULL OR B.WorkflowCount = 0 THEN 0 ELSE (CAST(A.WorkflowElementCount AS FLOAT) / CAST(B.WorkflowCount AS FLOAT)) * 100 END) AS Conversion
FROM (SELECT '' + @Period1 + '' AS Period, 
TBLWorkflowTemplate.ID AS WorkflowTemplateID, 
COUNT(DISTINCT TBLWorkflowElement.ID) AS WorkFlowElementCount, 
TBLWorkflowTemplateGoal.Title AS WorkflowTemplateGoal, 
TBLMassWorkflow.Name AS MassWorkflow, TBLWorkflowTemplate.Name AS WorkflowTemplate
FROM tbl_WorkflowTemplateGoal AS TBLWorkflowTemplateGoal 
LEFT JOIN tbl_WorkflowTemplate AS TBLWorkflowTemplate ON TBLWorkflowTemplate.ID = TBLWorkflowTemplateGoal.WorkflowTemplateID
LEFT JOIN tbl_WorkflowTemplateGoalElement AS TBLWorkflowTemplateGoalElement ON TBLWorkflowTemplateGoalElement.WorkflowTemplateGoalID = TBLWorkflowTemplateGoal.ID
LEFT JOIN tbl_Workflow AS TBLWorkflow ON TBLWorkflow.WorkflowTemplateID = TBLWorkflowTemplate.ID
LEFT JOIN tbl_WorkflowTemplateElement AS TBLWorkflowTemplateElement ON TBLWorkflowTemplateElement.ID = TBLWorkflowTemplateGoalElement.WorkflowTemplateElementID
LEFT JOIN tbl_WorkflowElement AS TBLWorkflowElement ON TBLWorkflowElement.WorkflowTemplateElementID = TBLWorkflowTemplateElement.ID
LEFT JOIN tbl_MassWorkflow AS TBLMassWorkflow ON TBLWorkflow.MassWorkflowID = TBLMassWorkflow.ID
WHERE TBLWorkflow.SiteID = @SiteID AND TBLWorkflowElement.StartDate >= @StartDate AND TBLWorkflowElement.StartDate <= @EndDate ''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + '' GROUP BY '' + @Period1 + '' , TBLWorkflowTemplate.ID, TBLWorkflowTemplateGoal.Title, TBLMassWorkflow.Name, TBLWorkflowTemplate.Name) AS A
LEFT JOIN 
(SELECT '' + @Period2 + '' AS Period, TBLWorkflowTemplate.ID AS WorkflowTemplateID, 
COUNT(TBLWorkflow.ID) AS WorkFlowCount
FROM tbl_WorkflowTemplateGoal AS TBLWorkflowTemplateGoal 
LEFT JOIN tbl_WorkflowTemplate AS TBLWorkflowTemplate ON TBLWorkflowTemplate.ID = TBLWorkflowTemplateGoal.WorkflowTemplateID
LEFT JOIN tbl_WorkflowTemplateGoalElement AS TBLWorkflowTemplateGoalElement ON TBLWorkflowTemplateGoalElement.WorkflowTemplateGoalID = TBLWorkflowTemplateGoal.ID
LEFT JOIN tbl_Workflow AS TBLWorkflow ON TBLWorkflow.WorkflowTemplateID = TBLWorkflowTemplate.ID
LEFT JOIN tbl_MassWorkflow AS TBLMassWorkflow ON TBLWorkflow.MassWorkflowID = TBLMassWorkflow.ID
WHERE TBLWorkflow.SiteID = @SiteID AND TBLWorkflow.StartDate >= @StartDate AND TBLWorkflow.StartDate <= @EndDate ''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + '' GROUP BY '' + @Period2 + '' , TBLWorkflowTemplate.ID) AS B
ON B.Period = A.Period AND B.WorkflowTemplateID = A.WorkflowTemplateID 
ORDER BY A.Period''

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate')

INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'd610fa37-4673-4266-84cc-9507489085e9', N'087bfe1d-cef8-4700-8818-7dcbb7ef6f71', N'Дата', N'Period', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'b88a6a58-dbbb-487f-8d1b-129d22117a6f', N'087bfe1d-cef8-4700-8818-7dcbb7ef6f71', N'Программа развития', N'MassWorkflow', 1, N'tbl_MassWorkflow')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet], [Query]) VALUES (N'f120cd06-95b9-485c-97c9-4201539f55fa', N'087bfe1d-cef8-4700-8818-7dcbb7ef6f71', N'Шаблон процесса', N'WorkflowTemplate', 1, N'tbl_WorkflowTemplate', N'
SELECT ID AS ID, Name AS Title
FROM #DataSet# 
WHERE SiteID = ''#SiteID#''')

INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet], [Query]) VALUES (N'f6754816-525a-4733-bcca-1325fb853131', N'087bfe1d-cef8-4700-8818-7dcbb7ef6f71', N'Цель', N'WorkflowTemplateGoal', 0, N'tbl_WorkflowTemplateGoal', N'SELECT DISTINCT TBLWorkflowTemplateGoal.Title AS ID, TBLWorkflowTemplateGoal.Title AS Title
FROM tbl_WorkflowTemplateGoal AS TBLWorkflowTemplateGoal
LEFT JOIN tbl_WorkflowTemplate AS TBLWorkflowTemplate ON TBLWorkflowTemplateGoal.WorkflowTemplateID = TBLWorkflowTemplate.ID
WHERE TBLWorkflowTemplate.SiteID = ''#SiteID#''')

INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'9ca1d022-6f90-4405-b8ce-5afa0166e98b', N'087bfe1d-cef8-4700-8818-7dcbb7ef6f71', N'Количество элементов', N'WorkflowElementCount', 3, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'ba704eb6-6803-4219-bbfb-ad1ad5c37986', N'087bfe1d-cef8-4700-8818-7dcbb7ef6f71', N'Количество процессов', N'WorkflowCount', 3, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'9f8a1040-8b1e-4465-8a42-29b779783147', N'087bfe1d-cef8-4700-8818-7dcbb7ef6f71', N'Конверсия', N'Conversion', 3, NULL)

INSERT [dbo].[tbl_AnalyticReport] ([ID], [AnalyticID], [Title], [Description], [ModuleID]) VALUES (N'fc802f08-c566-4710-bfac-33cb045c151b', N'087bfe1d-cef8-4700-8818-7dcbb7ef6f71', N'Конверсия по целям', N'Конверсия по целям', (SELECT TOP 1 ID FROM tbl_Module WHERE Name = 'Workflows'))

INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'ef890fad-cc0d-4da9-996d-ac77577084cc', N'fc802f08-c566-4710-bfac-33cb045c151b', N'd610fa37-4673-4266-84cc-9507489085e9', 1, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'8c326040-3187-40b5-948c-a9fae250890b', N'fc802f08-c566-4710-bfac-33cb045c151b', N'b88a6a58-dbbb-487f-8d1b-129d22117a6f', 0, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'7e8364ed-cb31-4ab8-bbf4-9c039732bfdd', N'fc802f08-c566-4710-bfac-33cb045c151b', N'f120cd06-95b9-485c-97c9-4201539f55fa', 0, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'327ea74d-a6b7-489b-85b3-a6994024f246', N'fc802f08-c566-4710-bfac-33cb045c151b', N'f6754816-525a-4733-bcca-1325fb853131', 2, 1)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'ecf19ac9-8989-4c4b-8feb-5290efe28fed', N'fc802f08-c566-4710-bfac-33cb045c151b', N'9ca1d022-6f90-4405-b8ce-5afa0166e98b', 0, 1)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'3a96eda8-0eb3-4328-81eb-c4439055d986', N'fc802f08-c566-4710-bfac-33cb045c151b', N'ba704eb6-6803-4219-bbfb-ad1ad5c37986', 0, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'53802d7b-c935-4380-89b1-d4f4a16461be', N'fc802f08-c566-4710-bfac-33cb045c151b', N'9f8a1040-8b1e-4465-8a42-29b779783147', 0, 0)

commit
exec LBC_SetVersion 207
END

/*******************************************************************************
	2012-06-09
	Добавление аналитики по процессам
*******************************************************************************/
if ( dbo.LBC_Version() < 208 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'CREATE FUNCTION dbo.IsUniqueidentifier (@String nvarchar(255))  
RETURNS bit AS  
BEGIN
RETURN CASE WHEN
    (SELECT 1 WHERE @String LIKE REPLACE(''00000000-0000-0000-0000-000000000000'', ''0'', ''[0-9a-fA-F]'')) IS NOT NULL
    THEN 1 ELSE 0
    END
END'

INSERT [dbo].[tbl_Analytic] ([ID], [Title], [Query]) VALUES (N'42a80ab9-3629-4072-b146-be0e792d749c', N'Конверсия по переходам в процессе', N'
DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = ''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)
DECLARE @Period nvarchar(256)
DECLARE @Result nvarchar(2000)

IF @GroupByDays = 1
	BEGIN
		SET @Period = ''CAST(TBLWorkflowElement.StartDate AS DATE)''		
	END
ELSE
	BEGIN
		SET @Period = ''DATEPART(HOUR, TBLWorkflowElement.StartDate)''		
	END
	
SET @Result = N''CASE WHEN TBLWorkflowTemplateElement.ElementType = 0
THEN
	CASE WHEN TBLWorkflowTemplateElementRelation.StartElementResult = 2 THEN N''''Выполнено''''
	ELSE CASE WHEN TBLWorkflowTemplateElementRelation.StartElementResult = 4 THEN N''''Ошибка''''	
				ELSE TBLWorkflowTemplateElementRelation.StartElementResult
			END
	END	
ELSE CASE WHEN TBLWorkflowTemplateElement.ElementType = 2 THEN
		CASE WHEN TBLWorkflowTemplateElementRelation.StartElementResult = 0 THEN N''''Событие не произошло''''
		ELSE CASE WHEN TBLWorkflowTemplateElementRelation.StartElementResult = 1 THEN N''''Событие произошло'''' 
		     ELSE TBLWorkflowTemplateElementRelation.StartElementResult
			 END
	    END	
	 ELSE CASE WHEN TBLWorkflowTemplateElement.ElementType = 1 THEN TBLWorkflowTemplateElementResult.Name END
	 END
END''


SET @SQL = N''SELECT A.Period, A.MassWorkflow, A.WorkflowTemplate, A.WorkflowTemplateElementRelation, A.WorkFlowStartElementCount, A.WorkFlowElementRelationCount,
(CASE WHEN A.WorkFlowStartElementCount IS NULL OR A.WorkFlowStartElementCount = 0 THEN 0 
ELSE (CAST(A.WorkFlowElementRelationCount AS FLOAT) / CAST(A.WorkFlowStartElementCount AS FLOAT)) * 100 END) AS Conversion
FROM
(SELECT '' + @Period + '' AS Period, 
TBLWorkflowTemplate.ID AS WorkflowTemplateID, 
COUNT(TBLWorkflowElement.ID) AS WorkFlowStartElementCount, 
COUNT(CASE WHEN TBLWorkflowElement.Result IS NOT NULL AND TBLWorkflowElement.Result <> '''''''' THEN 1 ELSE NULL END) 
AS WorkFlowElementRelationCount, 
(TBLWorkflowTemplateElement.Name + '''' / '''' + '' + @Result + '' 
) AS WorkflowTemplateElementRelation, 
TBLMassWorkflow.Name AS MassWorkflow, TBLWorkflowTemplate.Name AS WorkflowTemplate
FROM tbl_WorkflowElement AS TBLWorkflowElement
LEFT JOIN tbl_Workflow AS TBLWorkflow ON TBLWorkflow.ID = TBLWorkflowElement.WorkflowID
LEFT JOIN tbl_WorkflowTemplateElement AS TBLWorkflowTemplateElement ON TBLWorkflowTemplateElement.ID = TBLWorkflowElement.WorkflowTemplateElementID
LEFT JOIN tbl_MassWorkflow AS TBLMassWorkflow ON TBLWorkflow.MassWorkflowID = TBLMassWorkflow.ID
LEFT JOIN tbl_WorkflowTemplate AS TBLWorkflowTemplate ON TBLWorkflowTemplate.ID = TBLWorkflow.WorkflowTemplateID
LEFT JOIN tbl_WorkflowTemplateElementRelation AS TBLWorkflowTemplateElementRelation ON TBLWorkflowTemplateElementRelation.StartElementID = TBLWorkflowTemplateElement.ID
LEFT JOIN tbl_WorkflowTemplateElementResult AS TBLWorkflowTemplateElementResult ON TBLWorkflowTemplateElementResult.ID = CAST((CASE WHEN (SELECT dbo.IsUniqueidentifier(TBLWorkflowTemplateElementRelation.StartElementResult)) = 1 THEN TBLWorkflowTemplateElementRelation.StartElementResult ELSE ''''00000000-0000-0000-0000-000000000000'''' END) AS uniqueidentifier)
WHERE TBLWorkflow.SiteID = @SiteID AND TBLWorkflowElement.StartDate >= @StartDate AND 
TBLWorkflowElement.StartDate <= @EndDate AND TBLWorkflowTemplateElementRelation.StartElementResult IS NOT NULL AND TBLWorkflowTemplateElementRelation.StartElementResult <> '''''''' ''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + '' GROUP BY '' + @Period + '' , 
TBLWorkflowTemplate.ID, TBLWorkflowTemplateElement.Name + '''' / '''' + '' + @Result + '' ,TBLMassWorkflow.Name, TBLWorkflowTemplate.Name) AS A''

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate')

INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'4d5ca8ee-4a2b-4700-b32e-9e238b4ea802', N'42a80ab9-3629-4072-b146-be0e792d749c', N'Дата', N'Period', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'633a5ea8-62f1-4151-83c9-537776630105', N'42a80ab9-3629-4072-b146-be0e792d749c', N'Программа развития', N'MassWorkflow', 1, N'tbl_MassWorkflow')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet], [Query]) VALUES (N'23fea65b-11b5-41c7-957b-60173068b7f7', N'42a80ab9-3629-4072-b146-be0e792d749c', N'Шаблон процесса', N'WorkflowTemplate', 1, N'tbl_WorkflowTemplate', N'
SELECT ID AS ID, Name AS Title
FROM #DataSet# 
WHERE SiteID = ''#SiteID#''')

INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet], [Query]) VALUES (N'83f9e9fb-0ce0-4092-8d59-d548d9a5255f', N'42a80ab9-3629-4072-b146-be0e792d749c', N'Переход', N'WorkflowTemplateElementRelation', 0, N'tbl_WorkflowTemplateElementRelation', N'DECLARE @SQL nvarchar(max)
DECLARE @Result nvarchar(2000)

SET @Result = N''TBLWorkflowTemplateElement.Name + '''' / '''' +
(CASE WHEN TBLWorkflowTemplateElement.ElementType = 0
THEN
	CASE WHEN TBLWorkflowTemplateElementRelation.StartElementResult = 2 THEN N''''Выполнено''''
	ELSE CASE WHEN TBLWorkflowTemplateElementRelation.StartElementResult = 4 THEN N''''Ошибка''''	
				ELSE TBLWorkflowTemplateElementRelation.StartElementResult
			END
	END	
ELSE CASE WHEN TBLWorkflowTemplateElement.ElementType = 2 THEN
		CASE WHEN TBLWorkflowTemplateElementRelation.StartElementResult = 0 THEN N''''Событие не произошло''''
		ELSE CASE WHEN TBLWorkflowTemplateElementRelation.StartElementResult = 1 THEN N''''Событие произошло'''' 
		     ELSE TBLWorkflowTemplateElementRelation.StartElementResult
			 END
	    END	
	 ELSE CASE WHEN TBLWorkflowTemplateElement.ElementType = 1 THEN TBLWorkflowTemplateElementResult.Name END
	 END
END)''

SET @SQL = N''
SELECT DISTINCT '' + @Result + '' 
AS ID, '' + @Result + '' AS Title
FROM tbl_WorkflowTemplateElementRelation AS TBLWorkflowTemplateElementRelation
LEFT JOIN tbl_WorkflowTemplate AS TBLWorkflowTemplate ON TBLWorkflowTemplateElementRelation.WorkflowTemplateID = TBLWorkflowTemplate.ID
LEFT JOIN tbl_WorkflowTemplateElement AS TBLWorkflowTemplateElement ON TBLWorkflowTemplateElementRelation.StartElementID = TBLWorkflowTemplateElement.ID
LEFT JOIN tbl_WorkflowTemplateElementResult AS TBLWorkflowTemplateElementResult ON 
TBLWorkflowTemplateElementResult.ID = 
CAST((CASE WHEN (SELECT dbo.IsUniqueidentifier(TBLWorkflowTemplateElementRelation.StartElementResult)) = 1 THEN TBLWorkflowTemplateElementRelation.StartElementResult ELSE ''''00000000-0000-0000-0000-000000000000'''' END) AS uniqueidentifier)
WHERE TBLWorkflowTemplate.SiteID = ''''#SiteID#''''  AND TBLWorkflowTemplateElementRelation.StartElementResult IS NOT NULL 
AND TBLWorkflowTemplateElementRelation.StartElementResult <> ''''''''''

EXEC sp_executesql @SQL')

INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'eb1eea2e-59e2-4a22-9af9-80b6ca2bf7f9', N'42a80ab9-3629-4072-b146-be0e792d749c', N'Количество запуска начального элемента', N'WorkFlowStartElementCount', 3, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'3b381d13-62d4-4615-8e34-1657cb3f032e', N'42a80ab9-3629-4072-b146-be0e792d749c', N'Количество переходов', N'WorkFlowElementRelationCount', 3, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'7d7e777c-6538-4f72-8c34-9d8ce1cb54ae', N'42a80ab9-3629-4072-b146-be0e792d749c', N'Конверсия', N'Conversion', 3, NULL)

INSERT [dbo].[tbl_AnalyticReport] ([ID], [AnalyticID], [Title], [Description], [ModuleID]) VALUES (N'a00fd583-24de-4f75-8f79-f5de236576e8', N'42a80ab9-3629-4072-b146-be0e792d749c', N'Конверсия по переходам в процессе', N'Конверсия по переходам в процессе', (SELECT TOP 1 ID FROM tbl_Module WHERE Name = 'Workflows'))

INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'19fe59e4-ce7b-47de-8a8f-331b37886c35', N'a00fd583-24de-4f75-8f79-f5de236576e8', N'4d5ca8ee-4a2b-4700-b32e-9e238b4ea802', 1, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'9b6c5249-63c0-4526-994a-4211994a804d', N'a00fd583-24de-4f75-8f79-f5de236576e8', N'633a5ea8-62f1-4151-83c9-537776630105', 0, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'ea0c4ca6-b375-4ee3-ab6e-c1e791b928fc', N'a00fd583-24de-4f75-8f79-f5de236576e8', N'23fea65b-11b5-41c7-957b-60173068b7f7', 0, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'22158768-d3f1-4a84-9810-6d14799732eb', N'a00fd583-24de-4f75-8f79-f5de236576e8', N'83f9e9fb-0ce0-4092-8d59-d548d9a5255f', 2, 1)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'cd3b8c6a-e4c4-4fb6-aed5-7cbd26e04b12', N'a00fd583-24de-4f75-8f79-f5de236576e8', N'eb1eea2e-59e2-4a22-9af9-80b6ca2bf7f9', 0, 1)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'd999dc31-4f5a-404e-ac53-b4c03a0430be', N'a00fd583-24de-4f75-8f79-f5de236576e8', N'3b381d13-62d4-4615-8e34-1657cb3f032e', 0, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'697e90f5-84ca-4bba-946c-6e5934849ea0', N'a00fd583-24de-4f75-8f79-f5de236576e8', N'7d7e777c-6538-4f72-8c34-9d8ce1cb54ae', 0, 0)

commit
exec LBC_SetVersion 208
END

/*******************************************************************************
	2012-06-09
	Удалено неиспользуемое поле с таблицы продуктов в заказе
*******************************************************************************/
if ( dbo.LBC_Version() < 209 )
BEGIN
begin tran

/*Если не запускается скрипт, тогда скопировать значение с таблицы tbl_OrderProducts*/

ALTER TABLE tbl_OrderProducts DROP CONSTRAINT DF__tbl_Order__IsPar__007FFA1B 
ALTER TABLE tbl_OrderProducts DROP COLUMN IsPartOfComplectation

commit
exec LBC_SetVersion 209
END


/*******************************************************************************
	2012-06-09
	Обновление аналитики
*******************************************************************************/
if ( dbo.LBC_Version() < 210 )
BEGIN
begin tran

UPDATE tbl_AnalyticAxis
SET Query = N'SELECT ID, Name AS Title
FROM #DataSet#
WHERE SiteID = ''#SiteID#'''
WHERE DataSet = N'tbl_MassWorkflow'

commit
exec LBC_SetVersion 210
END


/*******************************************************************************
	2012-06-11
	Обновление аналитики
*******************************************************************************/
if ( dbo.LBC_Version() < 211 )
BEGIN
begin tran

UPDATE tbl_AnalyticAxis
SET Title = N'Количество требований'
WHERE ID = '48faedb3-fa1e-49d8-bfeb-4d7923fc4052'

commit
exec LBC_SetVersion 211
END



/*******************************************************************************
	2012-06-11
	Обновление аналитики
*******************************************************************************/
if ( dbo.LBC_Version() < 212 )
BEGIN
begin tran

UPDATE [dbo].[tbl_Analytic]  SET [Query] = N'DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = ''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)

SET @SQL = ''SELECT TBLRequirementStatus.Title AS RequirementStatus, TBLCompany.Name AS Company, TBLContact.UserFullName AS Responsible, COUNT(*) AS RequirementQuantity
FROM tbl_Requirement AS TBLRequirement
LEFT JOIN tbl_RequirementStatus AS TBLRequirementStatus ON TBLRequirement.RequirementStatusID = TBLRequirementStatus.ID
LEFT JOIN tbl_Company AS TBLCompany ON TBLCompany.ID = TBLRequirement.CompanyID
LEFT JOIN tbl_Contact AS TBLContact ON TBLContact.ID = TBLRequirement.ResponsibleID
WHERE TBLRequirement.SiteID = @SiteID ''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + '' GROUP BY TBLRequirementStatus.Title, TBLCompany.Name, TBLContact.UserFullName 
ORDER BY TBLCompany.Name ''

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier'', @SiteID'

WHERE ID ='cc1de501-4408-4395-aabf-1f06cb2e1f4c'

UPDATE [dbo].[tbl_AnalyticAxis]
SET [AxisRoleID] = 1
WHERE [ID] = '4d323414-e60d-4515-a794-dac59097a2ce'



commit
exec LBC_SetVersion 212
END

/*******************************************************************************
	2012-06-12
	Обновление фильтров
*******************************************************************************/
if ( dbo.LBC_Version() < 213 )
BEGIN
begin tran

ALTER TABLE [tbl_AnalyticAxisFilterValues] ADD IsDefault bit NOT NULL DEFAULT((0))
ALTER TABLE [tbl_AnalyticAxisFilterValues] ADD FilterType int NOT NULL DEFAULT((0))

commit
exec LBC_SetVersion 213
END


/*******************************************************************************
	2012-06-12
	Обновление фильтров
*******************************************************************************/
if ( dbo.LBC_Version() < 214 )
BEGIN
begin tran

ALTER TABLE [tbl_AnalyticAxisFilterValues] ADD Query nvarchar(max) NULL

commit
exec LBC_SetVersion 214
END

GO

/*******************************************************************************
	2012-06-12
	Обновление фильтров
*******************************************************************************/
if ( dbo.LBC_Version() < 215 )
BEGIN
begin tran

INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'88e03e31-a643-4c1c-ba77-fd416713ea97', N'cc1de501-4408-4395-aabf-1f06cb2e1f4c', N'Включать конечные статусы', 
N'IncludeFinalStatus', 1, NULL)

INSERT [dbo].[tbl_AnalyticAxisFilterValues] ([ID], [AnalyticAxisID], [Title], [ColumnName], [Value], [DisplayOrder], [FilterOperatorID], [IsDefault], [FilterType], [Query]) 
VALUES (N'72297374-0926-4494-901b-24fbbce399af', N'88e03e31-a643-4c1c-ba77-fd416713ea97', N'Нет', NULL, 0, 0, 10, 1, 1, N' AND TBLRequirementStatus.ID IN (SELECT InitialRequirementStatusID FROM tbl_RequirementTransition WHERE SiteID = @SiteID) ')

INSERT [dbo].[tbl_AnalyticAxisFilterValues] ([ID], [AnalyticAxisID], [Title], [ColumnName], [Value], [DisplayOrder], [FilterOperatorID], [IsDefault], [FilterType], [Query]) 
VALUES (N'38ea44b4-cf3d-419a-b861-2a553c5c82e6', N'88e03e31-a643-4c1c-ba77-fd416713ea97', N'Да', NULL, 1, 0, 10, 0, 1, N'')

UPDATE [dbo].[tbl_Analytic]  SET [Query] = N'DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = ''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @FilterQuery nvarchar(max) = ''#FilterQuery#''
DECLARE @SQL nvarchar(max)

SET @SQL = ''SELECT TBLRequirementStatus.Title AS RequirementStatus, TBLCompany.Name AS Company, TBLContact.UserFullName AS Responsible, COUNT(*) AS RequirementQuantity
FROM tbl_Requirement AS TBLRequirement
LEFT JOIN tbl_RequirementStatus AS TBLRequirementStatus ON TBLRequirement.RequirementStatusID = TBLRequirementStatus.ID
LEFT JOIN tbl_Company AS TBLCompany ON TBLCompany.ID = TBLRequirement.CompanyID
LEFT JOIN tbl_Contact AS TBLContact ON TBLContact.ID = TBLRequirement.ResponsibleID
WHERE TBLRequirement.SiteID = @SiteID '' + @FilterQuery

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + '' GROUP BY TBLRequirementStatus.Title, TBLCompany.Name, TBLContact.UserFullName 
ORDER BY TBLCompany.Name ''

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier'', @SiteID'

WHERE ID ='cc1de501-4408-4395-aabf-1f06cb2e1f4c'

INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) 
VALUES (N'c439d20a-7f5d-4d0a-92cf-eb5371b00dbe', N'3bf6d807-ee18-4f7e-9904-8985eb920470', N'88e03e31-a643-4c1c-ba77-fd416713ea97', 0, 0)

commit
exec LBC_SetVersion 215
END


/*******************************************************************************
	2012-06-12
	Обновление фильтров
*******************************************************************************/
if ( dbo.LBC_Version() < 216 )
BEGIN
begin tran

UPDATE [dbo].[tbl_Analytic] SET [Query] = N'
DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = ''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)
DECLARE @Period nvarchar(256)
DECLARE @Result nvarchar(2000)

IF @GroupByDays = 1
	BEGIN
		SET @Period = ''CAST(TBLWorkflowElement.StartDate AS DATE)''		
	END
ELSE
	BEGIN
		SET @Period = ''DATEPART(HOUR, TBLWorkflowElement.StartDate)''		
	END
	
SET @Result = N''
CASE WHEN TBLWorkflowTemplateElement.ElementType = 0 THEN
	CASE WHEN TBLWorkflowTemplateElementRelation.StartElementResult = 2 THEN N''''Выполнено''''
		 WHEN TBLWorkflowTemplateElementRelation.StartElementResult = 4 THEN N''''Ошибка''''	
		 ELSE TBLWorkflowTemplateElementRelation.StartElementResult		
	END	
WHEN TBLWorkflowTemplateElement.ElementType = 2 THEN
		CASE WHEN TBLWorkflowTemplateElementRelation.StartElementResult = 0 THEN N''''Событие не произошло''''
			 WHEN TBLWorkflowTemplateElementRelation.StartElementResult = 1 THEN N''''Событие произошло'''' 
		     ELSE TBLWorkflowTemplateElementRelation.StartElementResult			 
	    END	
ELSE CASE WHEN TBLWorkflowTemplateElement.ElementType = 1 THEN TBLWorkflowTemplateElementResult.Name END	 
END''

SET @SQL = N''SELECT A.Period, A.MassWorkflow, A.WorkflowTemplate, A.WorkflowTemplateElementRelation, A.WorkFlowStartElementCount, A.WorkFlowElementRelationCount,
(CASE WHEN A.WorkFlowStartElementCount IS NULL OR A.WorkFlowStartElementCount = 0 THEN 0 
ELSE (CAST(A.WorkFlowElementRelationCount AS FLOAT) / CAST(A.WorkFlowStartElementCount AS FLOAT)) * 100 END) AS Conversion
FROM
(SELECT '' + @Period + '' AS Period, 
TBLWorkflowTemplate.ID AS WorkflowTemplateID, 
COUNT(TBLWorkflowElement.ID) AS WorkFlowStartElementCount, 
COUNT(CASE WHEN TBLWorkflowElement.Result IS NOT NULL AND TBLWorkflowElement.Result <> '''''''' THEN 1 ELSE NULL END) 
AS WorkFlowElementRelationCount, 
(TBLWorkflowTemplateElement.Name + '''' / '''' + '' + @Result + '' 
) AS WorkflowTemplateElementRelation, 
TBLMassWorkflow.Name AS MassWorkflow, TBLWorkflowTemplate.Name AS WorkflowTemplate
FROM tbl_WorkflowElement AS TBLWorkflowElement
LEFT JOIN tbl_Workflow AS TBLWorkflow ON TBLWorkflow.ID = TBLWorkflowElement.WorkflowID
LEFT JOIN tbl_WorkflowTemplateElement AS TBLWorkflowTemplateElement ON TBLWorkflowTemplateElement.ID = TBLWorkflowElement.WorkflowTemplateElementID
LEFT JOIN tbl_MassWorkflow AS TBLMassWorkflow ON TBLWorkflow.MassWorkflowID = TBLMassWorkflow.ID
LEFT JOIN tbl_WorkflowTemplate AS TBLWorkflowTemplate ON TBLWorkflowTemplate.ID = TBLWorkflow.WorkflowTemplateID
LEFT JOIN tbl_WorkflowTemplateElementRelation AS TBLWorkflowTemplateElementRelation ON TBLWorkflowTemplateElementRelation.StartElementID = TBLWorkflowTemplateElement.ID
LEFT JOIN tbl_WorkflowTemplateElementResult AS TBLWorkflowTemplateElementResult ON TBLWorkflowTemplateElementResult.ID = CAST((CASE WHEN (SELECT dbo.IsUniqueidentifier(TBLWorkflowTemplateElementRelation.StartElementResult)) = 1 THEN TBLWorkflowTemplateElementRelation.StartElementResult ELSE ''''00000000-0000-0000-0000-000000000000'''' END) AS uniqueidentifier)
WHERE TBLWorkflow.SiteID = @SiteID AND TBLWorkflowElement.StartDate >= @StartDate AND 
TBLWorkflowElement.StartDate <= @EndDate AND TBLWorkflowTemplateElementRelation.StartElementResult IS NOT NULL AND TBLWorkflowTemplateElementRelation.StartElementResult <> '''''''' ''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + '' GROUP BY '' + @Period + '' , 
TBLWorkflowTemplate.ID, TBLWorkflowTemplateElement.Name + '''' / '''' + '' + @Result + '' ,TBLMassWorkflow.Name, TBLWorkflowTemplate.Name) AS A''

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate'

WHERE ID = '42a80ab9-3629-4072-b146-be0e792d749c'


UPDATE [dbo].[tbl_AnalyticAxis] SET [Query] = N'DECLARE @SQL nvarchar(max)
DECLARE @Result nvarchar(2000)

SET @Result = N''TBLWorkflowTemplateElement.Name + '''' / '''' +
(CASE WHEN TBLWorkflowTemplateElement.ElementType = 0 THEN
	CASE WHEN TBLWorkflowTemplateElementRelation.StartElementResult = 2 THEN N''''Выполнено''''
		 WHEN TBLWorkflowTemplateElementRelation.StartElementResult = 4 THEN N''''Ошибка''''	
		 ELSE TBLWorkflowTemplateElementRelation.StartElementResult		
	END	
WHEN TBLWorkflowTemplateElement.ElementType = 2 THEN
		CASE WHEN TBLWorkflowTemplateElementRelation.StartElementResult = 0 THEN N''''Событие не произошло''''
			 WHEN TBLWorkflowTemplateElementRelation.StartElementResult = 1 THEN N''''Событие произошло'''' 
		     ELSE TBLWorkflowTemplateElementRelation.StartElementResult			 
	    END	
ELSE CASE WHEN TBLWorkflowTemplateElement.ElementType = 1 THEN TBLWorkflowTemplateElementResult.Name END	 
END)''

SET @SQL = N''
SELECT DISTINCT '' + @Result + '' 
AS ID, '' + @Result + '' AS Title
FROM tbl_WorkflowTemplateElementRelation AS TBLWorkflowTemplateElementRelation
LEFT JOIN tbl_WorkflowTemplate AS TBLWorkflowTemplate ON TBLWorkflowTemplateElementRelation.WorkflowTemplateID = TBLWorkflowTemplate.ID
LEFT JOIN tbl_WorkflowTemplateElement AS TBLWorkflowTemplateElement ON TBLWorkflowTemplateElementRelation.StartElementID = TBLWorkflowTemplateElement.ID
LEFT JOIN tbl_WorkflowTemplateElementResult AS TBLWorkflowTemplateElementResult ON 
TBLWorkflowTemplateElementResult.ID = 
CAST((CASE WHEN (SELECT dbo.IsUniqueidentifier(TBLWorkflowTemplateElementRelation.StartElementResult)) = 1 THEN TBLWorkflowTemplateElementRelation.StartElementResult ELSE ''''00000000-0000-0000-0000-000000000000'''' END) AS uniqueidentifier)
WHERE TBLWorkflowTemplate.SiteID = ''''#SiteID#''''  AND TBLWorkflowTemplateElementRelation.StartElementResult IS NOT NULL 
AND TBLWorkflowTemplateElementRelation.StartElementResult <> ''''''''''

EXEC sp_executesql @SQL'

WHERE ID = '83f9e9fb-0ce0-4092-8d59-d548d9a5255f'

commit
exec LBC_SetVersion 216
END

/*******************************************************************************
	2012-06-13
	Доабавлен новый отчет
*******************************************************************************/
if ( dbo.LBC_Version() < 217 )
BEGIN
begin tran

INSERT [dbo].[tbl_Analytic] ([ID], [Title], [Query]) VALUES (N'7ee121fe-aae8-4943-9ca2-295e45a935fd', N'Статистика работ по требованиям', N'
DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = ''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)
DECLARE @Period nvarchar(256)
DECLARE @Result nvarchar(2000)

IF @GroupByDays = 1
	BEGIN
		SET @Period = ''CAST(TBLRequirementHistory.CreatedAt AS DATE)''		
	END
ELSE
	BEGIN
		SET @Period = ''DATEPART(HOUR, TBLRequirementHistory.CreatedAt)''		
	END
	
SET @SQL = N''SELECT '' + @Period + '' AS Period, 
TBLCompany.Name AS Company, TBLContact.UserFullName AS Author, 
TBLRequirementStatus.Title AS RequirementStatus, COUNT(*) AS RequirementQuantity
FROM tbl_RequirementHistory AS TBLRequirementHistory
LEFT JOIN tbl_Contact AS TBLContact ON TBLRequirementHistory.ContactID = TBLContact.ID
LEFT JOIN tbl_RequirementStatus AS TBLRequirementStatus ON TBLRequirementHistory.RequirementStatusID = TBLRequirementStatus.ID
LEFT JOIN tbl_Requirement AS TBLRequirement ON TBLRequirementHistory.RequirementID = TBLRequirement.ID
LEFT JOIN tbl_Company AS TBLCompany ON TBLRequirement.CompanyID = TBLCompany.ID
WHERE TBLRequirement.SiteID = @SiteID AND TBLRequirementHistory.CreatedAt >= @StartDate AND 
TBLRequirementHistory.CreatedAt <= @EndDate AND TBLRequirementHistory.ContactID IS NOT NULL ''

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + '' GROUP BY '' + @Period + '', TBLCompany.Name, TBLContact.UserFullName, TBLRequirementStatus.Title 
ORDER BY Period, Company, Author ''

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate')

INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'd0873e22-bfc8-4bef-8c4c-a639742c46eb', N'7ee121fe-aae8-4943-9ca2-295e45a935fd', N'Дата', N'Period', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'1ac19de4-e8ae-4414-a179-74b4bd1ca06d', N'7ee121fe-aae8-4943-9ca2-295e45a935fd', N'Количество запросов', N'RequirementQuantity', 3, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'26fe4249-0ccf-456c-8bcf-bc53e6ed41fd', N'7ee121fe-aae8-4943-9ca2-295e45a935fd', N'Статус', N'RequirementStatus', 2, 'tbl_RequirementStatus')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet], [Query]) VALUES (N'd6fd3bb8-6204-419e-ab45-43735159cfed', N'7ee121fe-aae8-4943-9ca2-295e45a935fd', N'Сотрудник', N'Author', 2, N'tbl_Contact', N'SELECT ID, UserFullName AS Title
FROM #DataSet#
WHERE SiteID = ''#SiteID#'' AND ID IN (SELECT ContactID FROM tbl_RequirementHistory) ORDER BY Title')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet], [Query]) VALUES (N'1a30d596-8e79-428e-b0c7-501c68806d64', N'7ee121fe-aae8-4943-9ca2-295e45a935fd', N'Компания', N'Company', 1, N'tbl_Company', N'SELECT ID, Name AS Title
FROM #DataSet#
WHERE ID IN (SELECT CompanyID FROM tbl_Requirement WHERE SiteID = ''#SiteID#'') AND SiteID = ''#SiteID#'' ORDER BY Title ')

INSERT [dbo].[tbl_AnalyticReport] ([ID], [AnalyticID], [Title], [Description], [ModuleID]) VALUES (N'3d3716c1-d586-495d-8eef-b924bafc4525', N'7ee121fe-aae8-4943-9ca2-295e45a935fd', N'Статистика работ по требованиям', N'Статистика работ по требованиям', (SELECT TOP 1 ID FROM tbl_Module WHERE Name = 'Requirements'))

INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'28dc420b-b904-4455-80b5-635eb236ab46', N'3d3716c1-d586-495d-8eef-b924bafc4525', N'd0873e22-bfc8-4bef-8c4c-a639742c46eb', 1, 1)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'64fd1db6-2a5e-4951-978f-10b08cfb3e19', N'3d3716c1-d586-495d-8eef-b924bafc4525', N'1ac19de4-e8ae-4414-a179-74b4bd1ca06d', 0, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'2cb40c1a-25e7-40c0-8d09-e686e70d2a07', N'3d3716c1-d586-495d-8eef-b924bafc4525', N'26fe4249-0ccf-456c-8bcf-bc53e6ed41fd', 2, 1)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'6c259a52-6262-4e13-ad9f-fd79a8c92bfa', N'3d3716c1-d586-495d-8eef-b924bafc4525', N'd6fd3bb8-6204-419e-ab45-43735159cfed', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'bb41c4d9-efe8-4506-a2fc-8acf69076dbe', N'3d3716c1-d586-495d-8eef-b924bafc4525', N'1a30d596-8e79-428e-b0c7-501c68806d64', 0, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'd67e2c0a-ba40-47c9-a896-9bb39b9a297a', N'3d3716c1-d586-495d-8eef-b924bafc4525', N'26fe4249-0ccf-456c-8bcf-bc53e6ed41fd', 1, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'111c5937-22ce-4294-be6b-6aca2f14eedf', N'3d3716c1-d586-495d-8eef-b924bafc4525', N'd6fd3bb8-6204-419e-ab45-43735159cfed', 1, 0)

commit
exec LBC_SetVersion 217
END

/*******************************************************************************
	2012-06-13
	Обновление отчета
*******************************************************************************/
if ( dbo.LBC_Version() < 218 )
BEGIN
begin tran

INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'1cff6466-857c-453b-a8c9-d8fb23dc7264', N'3bf6d807-ee18-4f7e-9904-8985eb920470', N'4d323414-e60d-4515-a794-dac59097a2ce', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'5890bba6-f90e-4133-865b-ee132b2f3117', N'3bf6d807-ee18-4f7e-9904-8985eb920470', N'780c3d99-ec6d-487d-bf7b-2a6f12092799', 2, 0)

commit
exec LBC_SetVersion 218
END


/*******************************************************************************
	2012-06-14
	Статусы запросов вынесены в таблицу
*******************************************************************************/
if ( dbo.LBC_Version() < 219 )
BEGIN
begin tran

CREATE TABLE [dbo].[tbl_RequestStatus](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_tbl_RequestStatus] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

commit
exec LBC_SetVersion 219
END


/*******************************************************************************
	2012-06-14
	Статусы запросов вынесены в таблицу
*******************************************************************************/
if ( dbo.LBC_Version() < 220 )
BEGIN
begin tran

SET IDENTITY_INSERT [dbo].[tbl_RequestStatus] ON
INSERT [dbo].[tbl_RequestStatus] ([ID], [Title]) VALUES (0, N'Новый запрос')
INSERT [dbo].[tbl_RequestStatus] ([ID], [Title]) VALUES (1, N'В работе')
INSERT [dbo].[tbl_RequestStatus] ([ID], [Title]) VALUES (2, N'Закрыт')
INSERT [dbo].[tbl_RequestStatus] ([ID], [Title]) VALUES (3, N'Дубль')
SET IDENTITY_INSERT [dbo].[tbl_RequestStatus] OFF


ALTER TABLE [tbl_Request]  WITH CHECK ADD CONSTRAINT [FK_tbl_Request_tbl_RequestStatus] FOREIGN KEY([RequestStatusID])
REFERENCES [dbo].[tbl_RequestStatus] ([ID])
ALTER TABLE [tbl_Request] CHECK CONSTRAINT [FK_tbl_Request_tbl_RequestStatus]

commit
exec LBC_SetVersion 220
END

/*******************************************************************************
	2012-06-14
	Доабавлен новый отчет
*******************************************************************************/
if ( dbo.LBC_Version() < 221 )
BEGIN
begin tran

INSERT [dbo].[tbl_Analytic] ([ID], [Title], [Query]) VALUES (N'140b4cde-90c0-4639-8378-4992d495647f', N'Статистика запросов по датам', N'
DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = ''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @FilterQuery nvarchar(max) = ''#FilterQuery#''
DECLARE @SQL nvarchar(max)
DECLARE @Period nvarchar(256)
DECLARE @Result nvarchar(2000)

IF @GroupByDays = 1
	BEGIN
		SET @Period = ''CAST(TBLRequest.CreatedAt AS DATE)''		
	END
ELSE
	BEGIN
		SET @Period = ''DATEPART(HOUR, TBLRequest.CreatedAt)''
	END
	
SET @SQL = N''SELECT '' + @Period + '' AS Period, 
TBLCompany.Name AS Company, TBLContact.UserFullName AS Responsible, TBLRequestStatus.Title AS RequestStatus, COUNT(*) AS RequestQuantity,
SUM(DATEDIFF(d, TBLRequest.CreatedAt,(CASE WHEN TBLRequestHistory.RequestStatusID = 2 THEN TBLRequestHistory.CreatedAt ELSE getdate() END))) AS Duration
FROM tbl_Request AS TBLRequest
LEFT JOIN tbl_RequestStatus AS TBLRequestStatus ON TBLRequestStatus.ID = TBLRequest.RequestStatusID
LEFT JOIN tbl_Company AS TBLCompany ON TBLCompany.ID = TBLRequest.CompanyID
LEFT JOIN tbl_Contact AS TBLContact ON TBLContact.ID = TBLRequest.ResponsibleID
LEFT JOIN tbl_RequestHistory AS TBLRequestHistory ON TBLRequestHistory.RequestID = TBLRequest.ID
WHERE TBLRequest.SiteID = @SiteID AND TBLRequest.CreatedAt >= @StartDate AND 
TBLRequest.CreatedAt <= @EndDate '' + @FilterQuery

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator

SET @SQL = @SQL + '' GROUP BY '' + @Period + '', TBLCompany.Name, TBLContact.UserFullName, TBLRequestStatus.Title 
ORDER BY Period ''

EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate')



INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'ae331bae-eef5-47e4-8359-02f400fee4f3', N'140b4cde-90c0-4639-8378-4992d495647f', N'Дата', N'Period', 0, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'1ad46058-16d0-4ae6-b86d-27551ddeb017', N'140b4cde-90c0-4639-8378-4992d495647f', N'Количество запросов', N'RequestQuantity', 3, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'6a282740-a6dd-46af-84fb-7c8754163d5e', N'140b4cde-90c0-4639-8378-4992d495647f', N'Длительность', N'Duration', 3, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'4975f352-9b39-4dfb-b868-ea38df7e2f5c', N'140b4cde-90c0-4639-8378-4992d495647f', N'Статус', N'RequestStatus', 2, 'tbl_RequestStatus')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet]) VALUES (N'86e7ec15-fcb4-4008-a0e9-49bb20c7d84c', N'140b4cde-90c0-4639-8378-4992d495647f', N'Просрочен', N'Expired', 2, NULL)
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet], [Query]) VALUES (N'dbd0404a-7731-459f-a440-7295b803a7f6', N'140b4cde-90c0-4639-8378-4992d495647f', N'Ответственный', N'Responsible', 2, N'tbl_Contact', N'SELECT ID, UserFullName AS Title
FROM #DataSet#
WHERE SiteID = ''#SiteID#'' AND ID IN (SELECT ResponsibleID FROM tbl_Request) ORDER BY Title')
INSERT [dbo].[tbl_AnalyticAxis] ([ID], [AnalyticID], [Title], [SystemName], [AxisRoleID], [DataSet], [Query]) VALUES (N'31d2aa7f-748f-4ab5-aa03-2c332d88b5d2', N'140b4cde-90c0-4639-8378-4992d495647f', N'Компания', N'Company', 2, N'tbl_Company', N'SELECT ID, Name AS Title
FROM #DataSet#
WHERE ID IN (SELECT CompanyID FROM tbl_Request WHERE SiteID = ''#SiteID#'') AND SiteID = ''#SiteID#'' ORDER BY Title ')

INSERT [dbo].[tbl_AnalyticReport] ([ID], [AnalyticID], [Title], [Description], [ModuleID]) VALUES (N'b4bff2b6-167b-4342-8c7a-712efbf8a1e1', N'140b4cde-90c0-4639-8378-4992d495647f', N'Статистика запросов по датам', N'Статистика запросов по датам', (SELECT TOP 1 ID FROM tbl_Module WHERE Name = 'Requests'))

INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'4854773f-d9b4-44ab-8bc3-c4f5a80e1a1a', N'b4bff2b6-167b-4342-8c7a-712efbf8a1e1', N'ae331bae-eef5-47e4-8359-02f400fee4f3', 1, 1)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'42bd38fb-0829-40fa-a940-4a4ce0002112', N'b4bff2b6-167b-4342-8c7a-712efbf8a1e1', N'1ad46058-16d0-4ae6-b86d-27551ddeb017', 0, 1)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'528c92aa-b22a-409e-9333-4f8cd5c6ba01', N'b4bff2b6-167b-4342-8c7a-712efbf8a1e1', N'6a282740-a6dd-46af-84fb-7c8754163d5e', 0, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'9df7e783-8b38-415a-8726-81f2dd00cf26', N'b4bff2b6-167b-4342-8c7a-712efbf8a1e1', N'4975f352-9b39-4dfb-b868-ea38df7e2f5c', 2, 1)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'54a252c0-6926-49b3-a6d0-2c2b2c8334d6', N'b4bff2b6-167b-4342-8c7a-712efbf8a1e1', N'dbd0404a-7731-459f-a440-7295b803a7f6', 1, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'af4592ba-0bdc-4277-a1d8-7bb0a4216e42', N'b4bff2b6-167b-4342-8c7a-712efbf8a1e1', N'31d2aa7f-748f-4ab5-aa03-2c332d88b5d2', 1, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'1818334d-4cc0-4d6c-864e-87676421309e', N'b4bff2b6-167b-4342-8c7a-712efbf8a1e1', N'dbd0404a-7731-459f-a440-7295b803a7f6', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'352aee2d-0808-4f8a-bd5d-3c5e8a34ccc5', N'b4bff2b6-167b-4342-8c7a-712efbf8a1e1', N'31d2aa7f-748f-4ab5-aa03-2c332d88b5d2', 2, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'851592df-b446-42a2-8226-aa5304a33a1b', N'b4bff2b6-167b-4342-8c7a-712efbf8a1e1', N'4975f352-9b39-4dfb-b868-ea38df7e2f5c', 1, 0)
INSERT [dbo].[tbl_AnalyticReportSystem] ([ID], [AnalyticReportID], [AnalyticAxisID], [AxisTypeID], [IsDefault]) VALUES (N'bd5e270e-c589-4f46-9d84-4e003a8c2f44', N'b4bff2b6-167b-4342-8c7a-712efbf8a1e1', N'86e7ec15-fcb4-4008-a0e9-49bb20c7d84c', 0, 0)


INSERT [dbo].[tbl_AnalyticAxisFilterValues] ([ID], [AnalyticAxisID], [Title], [ColumnName], [Value], [DisplayOrder], [FilterOperatorID], [IsDefault], [FilterType], [Query]) 
VALUES (N'ae18931e-45d8-4e0a-8f48-6b5437686941', N'86e7ec15-fcb4-4008-a0e9-49bb20c7d84c', N'Нет', NULL, 0, 0, 10, 1, 1, N' ')

INSERT [dbo].[tbl_AnalyticAxisFilterValues] ([ID], [AnalyticAxisID], [Title], [ColumnName], [Value], [DisplayOrder], [FilterOperatorID], [IsDefault], [FilterType], [Query]) 
VALUES (N'db0be41e-6c8c-4faf-b953-cf19aca269e3', N'86e7ec15-fcb4-4008-a0e9-49bb20c7d84c', N'Да', NULL, 1, 0, 10, 0, 1, N' AND COALESCE(TBLRequest.ReactionDateActual, getdate()) > TBLRequest.ReactionDatePlanned')

commit
exec LBC_SetVersion 221
END

/*******************************************************************************
	2012-06-15
	Обновление модуля Счета
*******************************************************************************/
if ( dbo.LBC_Version() < 222 )
BEGIN
begin tran

ALTER TABLE tbl_Invoice ADD PaymentDateFixedByContract datetime null
ALTER TABLE tbl_Invoice ADD IsExistBuyerComplaint bit NOT NULL DEFAULT((0))

CREATE TABLE [dbo].[tbl_InvoiceHistory](
	[ID] [uniqueidentifier] NOT NULL,
	[CreatedAt] [datetime] NOT NULL,
	[InvoiceID] [uniqueidentifier] NOT NULL,
	[AuthorID] [uniqueidentifier] NOT NULL,
	[PaymentDatePlanned] [datetime] NULL,
	[PaymentDateActual] [datetime] NULL,
	[InvoiceAmount] [money] NOT NULL,
	[InvoiceStatusID] [int] NOT NULL,
	[IsExistBuyerComplaint] [bit] NOT NULL,
	[Note] [nvarchar](1024) NULL,
 CONSTRAINT [PK_tbl_InvoiceHistory] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[tbl_InvoiceHistory]  WITH CHECK ADD  CONSTRAINT [FK_tbl_InvoiceHistory_tbl_Contact] FOREIGN KEY([AuthorID])
REFERENCES [dbo].[tbl_Contact] ([ID])
ALTER TABLE [dbo].[tbl_InvoiceHistory] CHECK CONSTRAINT [FK_tbl_InvoiceHistory_tbl_Contact]
ALTER TABLE [dbo].[tbl_InvoiceHistory]  WITH CHECK ADD  CONSTRAINT [FK_tbl_InvoiceHistory_tbl_Invoice] FOREIGN KEY([InvoiceID])
REFERENCES [dbo].[tbl_Invoice] ([ID])
ALTER TABLE [dbo].[tbl_InvoiceHistory] CHECK CONSTRAINT [FK_tbl_InvoiceHistory_tbl_Invoice]
ALTER TABLE [dbo].[tbl_InvoiceHistory] ADD  CONSTRAINT [DF_tbl_InvoiceHistory_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_InvoiceHistory] ADD  CONSTRAINT [DF_tbl_InvoiceHistory_CreatedAt]  DEFAULT (getdate()) FOR [CreatedAt]
ALTER TABLE [dbo].[tbl_InvoiceHistory] ADD  CONSTRAINT [DF_tbl_InvoiceHistory_InvoiceAmount]  DEFAULT ((0)) FOR [InvoiceAmount]
ALTER TABLE [dbo].[tbl_InvoiceHistory] ADD  CONSTRAINT [DF_tbl_InvoiceHistory_IsExistBuyerComplaint]  DEFAULT ((0)) FOR [IsExistBuyerComplaint]

CREATE TABLE [dbo].[tbl_InvoiceComment](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteID] [uniqueidentifier] NOT NULL,
	[CreatedAt] [datetime] NOT NULL,
	[ContentID] [uniqueidentifier] NOT NULL,
	[UserID] [uniqueidentifier] NOT NULL,
	[Comment] [ntext] NOT NULL,
	[FileName] [nvarchar](256) NULL,
	[IsOfficialAnswer] [bit] NULL,
	[DestinationUserID] [uniqueidentifier] NULL,
	[ReplyToID] [uniqueidentifier] NULL,
	[IsInternal] [bit] NOT NULL,
 CONSTRAINT [PK_tbl_InvoiceComment] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

CREATE TABLE [dbo].[tbl_InvoiceCommentMark](
	[ID] [uniqueidentifier] NOT NULL,
	[CreatedAt] [datetime] NOT NULL,
	[ContentCommentID] [uniqueidentifier] NOT NULL,
	[UserID] [uniqueidentifier] NOT NULL,
	[TypeID] [int] NOT NULL,
	[Rank] [int] NOT NULL,
 CONSTRAINT [PK_tbl_InvoiceCommentMark] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[tbl_InvoiceComment] ADD  CONSTRAINT [DF_tbl_InvoiceComment_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_InvoiceComment] ADD  CONSTRAINT [DF_tbl_InvoiceComment_CreatedAt]  DEFAULT (getdate()) FOR [CreatedAt]
ALTER TABLE [dbo].[tbl_InvoiceComment] ADD  CONSTRAINT [DF_tbl_InvoiceComment_IsOfficialAnswer]  DEFAULT ((0)) FOR [IsOfficialAnswer]
ALTER TABLE [dbo].[tbl_InvoiceComment] ADD  DEFAULT ((0)) FOR [IsInternal]
ALTER TABLE [dbo].[tbl_InvoiceCommentMark] ADD  CONSTRAINT [DF_tbl_InvoiceCommentMark_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_InvoiceCommentMark] ADD  CONSTRAINT [DF_tbl_InvoiceCommentMark_CreatedAt]  DEFAULT (getdate()) FOR [CreatedAt]
ALTER TABLE [dbo].[tbl_InvoiceComment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_InvoiceComment_tbl_Requirement] FOREIGN KEY([ContentID])
REFERENCES [dbo].[tbl_Requirement] ([ID])

ALTER TABLE [dbo].[tbl_InvoiceComment] CHECK CONSTRAINT [FK_tbl_InvoiceComment_tbl_Requirement]

ALTER TABLE [dbo].[tbl_InvoiceComment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_InvoiceComment_tbl_InvoiceComment] FOREIGN KEY([ReplyToID])
REFERENCES [dbo].[tbl_InvoiceComment] ([ID])

ALTER TABLE [dbo].[tbl_InvoiceComment] CHECK CONSTRAINT [FK_tbl_InvoiceComment_tbl_InvoiceComment]

ALTER TABLE [dbo].[tbl_InvoiceComment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_InvoiceComment_tbl_Sites] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_Sites] ([ID])

ALTER TABLE [dbo].[tbl_InvoiceComment] CHECK CONSTRAINT [FK_tbl_InvoiceComment_tbl_Sites]

ALTER TABLE [dbo].[tbl_InvoiceComment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_InvoiceComment_tbl_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[tbl_User] ([ID])

ALTER TABLE [dbo].[tbl_InvoiceComment] CHECK CONSTRAINT [FK_tbl_InvoiceComment_tbl_User]
ALTER TABLE [dbo].[tbl_InvoiceComment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_InvoiceComment_tbl_User_Destination] FOREIGN KEY([DestinationUserID])
REFERENCES [dbo].[tbl_User] ([ID])
ALTER TABLE [dbo].[tbl_InvoiceComment] CHECK CONSTRAINT [FK_tbl_InvoiceComment_tbl_User_Destination]
ALTER TABLE [dbo].[tbl_InvoiceCommentMark]  WITH CHECK ADD  CONSTRAINT [FK_tbl_InvoiceCommentMark_tbl_InvoiceComment] FOREIGN KEY([ContentCommentID])
REFERENCES [dbo].[tbl_InvoiceComment] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_InvoiceCommentMark] CHECK CONSTRAINT [FK_tbl_InvoiceCommentMark_tbl_InvoiceComment]
ALTER TABLE [dbo].[tbl_InvoiceCommentMark]  WITH CHECK ADD  CONSTRAINT [FK_tbl_InvoiceCommentMark_tbl_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[tbl_User] ([ID])
ALTER TABLE [dbo].[tbl_InvoiceCommentMark] CHECK CONSTRAINT [FK_tbl_InvoiceCommentMark_tbl_User]

ALTER TABLE tbl_ServiceLevelContact ADD IsInformAboutInvoice bit not null default((0))
ALTER TABLE tbl_ServiceLevelContact ADD IsInformInvoiceComments bit not null default((0))
ALTER TABLE tbl_ServiceLevelContact ADD InvoiceInformCatalogID int NOT NULL default((1))
ALTER TABLE tbl_ServiceLevelContact ADD InvoiceInformFormID int NOT NULL default((1))

CREATE TABLE [dbo].[tbl_InvoiceInformForm](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_tbl_InvoiceInformForm] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

CREATE TABLE [dbo].[tbl_InvoiceInformCatalog](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_tbl_InvoiceInformCatalog] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

commit
exec LBC_SetVersion 222
END

GO

/*******************************************************************************
	2012-06-15
	Обновление модуля Счета
*******************************************************************************/
if ( dbo.LBC_Version() < 223 )
BEGIN
begin tran

SET IDENTITY_INSERT [dbo].[tbl_InvoiceInformForm] ON
INSERT [dbo].[tbl_InvoiceInformForm] ([ID], [Title]) VALUES (1, N'Всегда вложение')
INSERT [dbo].[tbl_InvoiceInformForm] ([ID], [Title]) VALUES (2, N'Вложение для отдельных счетов')
INSERT [dbo].[tbl_InvoiceInformForm] ([ID], [Title]) VALUES (3, N'Без вложения')
SET IDENTITY_INSERT [dbo].[tbl_InvoiceInformForm] OFF

SET IDENTITY_INSERT [dbo].[tbl_InvoiceInformCatalog] ON
INSERT [dbo].[tbl_InvoiceInformCatalog] ([ID], [Title]) VALUES (1, N'Нет')
INSERT [dbo].[tbl_InvoiceInformCatalog] ([ID], [Title]) VALUES (2, N'Еженедельно')
INSERT [dbo].[tbl_InvoiceInformCatalog] ([ID], [Title]) VALUES (3, N'Раз в две недели')
INSERT [dbo].[tbl_InvoiceInformCatalog] ([ID], [Title]) VALUES (4, N'Ежемесячно')
SET IDENTITY_INSERT [dbo].[tbl_InvoiceInformCatalog] OFF

ALTER TABLE [tbl_ServiceLevelContact]  WITH CHECK ADD CONSTRAINT [FK_tbl_ServiceLevelContact_tbl_InvoiceInformCatalog] FOREIGN KEY([InvoiceInformCatalogID])
REFERENCES [dbo].[tbl_InvoiceInformCatalog] ([ID])
ALTER TABLE [tbl_ServiceLevelContact] CHECK CONSTRAINT [FK_tbl_ServiceLevelContact_tbl_InvoiceInformCatalog]

ALTER TABLE [tbl_ServiceLevelContact]  WITH CHECK ADD CONSTRAINT [FK_tbl_ServiceLevelContact_tbl_InvoiceInformForm] FOREIGN KEY([InvoiceInformFormID])
REFERENCES [dbo].[tbl_InvoiceInformForm] ([ID])
ALTER TABLE [tbl_ServiceLevelContact] CHECK CONSTRAINT [FK_tbl_ServiceLevelContact_tbl_InvoiceInformForm]

commit
exec LBC_SetVersion 223
END

/*******************************************************************************
	2012-04-11
	Обновление мониторинга
*******************************************************************************/
if ( dbo.LBC_Version() < 224 )
BEGIN
begin tran

ALTER TABLE tbl_InvoiceComment DROP CONSTRAINT FK_tbl_InvoiceComment_tbl_Requirement 

ALTER TABLE [tbl_InvoiceComment]  WITH CHECK ADD CONSTRAINT [FK_tbl_InvoiceComment_tbl_Invoice] FOREIGN KEY([ContentID])
REFERENCES [dbo].[tbl_Invoice] ([ID])
ALTER TABLE [tbl_InvoiceComment] CHECK CONSTRAINT [FK_tbl_InvoiceComment_tbl_Invoice]

commit
exec LBC_SetVersion 224
END

/*******************************************************************************
	2012-06-18
	Обновление модуля счета
*******************************************************************************/
if ( dbo.LBC_Version() < 225 )
BEGIN
begin tran

ALTER TABLE tbl_Invoice DROP COLUMN PaymentDateFixedByContract
ALTER TABLE tbl_Invoice ADD IsPaymentDateFixedByContract bit NOT NULL DEFAULT((0))

commit
exec LBC_SetVersion 225
END

/*******************************************************************************
	2012-06-19
	Удаление модуля Оценка по активности (События)
*******************************************************************************/
if ( dbo.LBC_Version() < 226 )
BEGIN
begin tran

SELECT ID
INTO #Temp
FROM tbl_ContactActivity
WHERE ActivityTypeID=5

DECLARE @ID uniqueidentifier
WHILE (SELECT COUNT(*) FROM #Temp) > 0
BEGIN
	SELECT TOP 1 @ID=ID FROM #Temp
	
	DECLARE @ActivityCode nvarchar(255) = (SELECT ActivityCode FROM tbl_ContactActivity WHERE ID=@ID)
	DECLARE @SiteEventTemplateID uniqueidentifier = (CAST(@ActivityCode AS uniqueidentifier))
	DECLARE @Title nvarchar(255) = (SELECT Title FROM tbl_SiteEventTemplates WHERE ID=@SiteEventTemplateID)
	
	UPDATE tbl_ContactActivity
	SET ActivityCode=@Title,
		ActivityTypeID=13
	WHERE ID=@ID

	DELETE #Temp WHERE ID=@ID
END
DROP TABLE #Temp


DELETE FROM tbl_ActivityTypes
WHERE ID=5

DECLARE @ModuleID uniqueidentifier = (SELECT ID FROM tbl_Module WHERE Name=N'SiteEventTemplates')
DELETE FROM tbl_Menu
WHERE ModuleID=@ModuleID

DELETE FROM tbl_AccessProfileRecord
WHERE ModuleID=@ModuleID

DELETE FROM tbl_AccessProfileModule
WHERE ModuleID=@ModuleID

DELETE FROM tbl_Module
WHERE ID=@ModuleID

commit
exec LBC_SetVersion 226
END

/*******************************************************************************
	2012-06-21
	Обновление модуля Процессы
*******************************************************************************/
if ( dbo.LBC_Version() < 227 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER TRIGGER [dbo].[CreateSite] ON [dbo].[tbl_Sites]
	FOR INSERT
AS
BEGIN
	DECLARE @_siteID uniqueidentifier
	SELECT @_siteID = ID FROM inserted
	
	DECLARE @_columnCategory1 uniqueidentifier = NEWID() --Демографические данные
	DECLARE @_columnCategory2 uniqueidentifier = NEWID() --Фирмографические данные
	DECLARE @_columnCategory3 uniqueidentifier = NEWID() --Готовность сделки
	INSERT INTO [dbo].[tbl_ColumnCategories] (ID, SiteID, Title) VALUES (@_columnCategory1, @_siteID, N''Демографические данные'')
	INSERT INTO [dbo].[tbl_ColumnCategories] (ID, SiteID, Title) VALUES (@_columnCategory2, @_siteID, N''Фирмографические данные'')
	INSERT INTO [dbo].[tbl_ColumnCategories] (ID, SiteID, Title) VALUES (@_columnCategory3, @_siteID, N''Готовность сделки'')
	
	
	INSERT INTO [dbo].[tbl_Status] (SiteID, Title, [Order], IsDefault) VALUES (@_siteID, N''Активна'', 0, 1)
	INSERT INTO [dbo].[tbl_Status] (SiteID, Title, [Order], IsDefault) VALUES (@_siteID, N''Активна (Возврат)'', 1, 0)
	INSERT INTO [dbo].[tbl_Status] (SiteID, Title, [Order], IsDefault) VALUES (@_siteID, N''Передана в продажи'', 2, 0)
	INSERT INTO [dbo].[tbl_Status] (SiteID, Title, [Order], IsDefault) VALUES (@_siteID, N''Закрыта продажей'', 3, 0)
	INSERT INTO [dbo].[tbl_Status] (SiteID, Title, [Order], IsDefault) VALUES (@_siteID, N''Отказ в продаже'', 4, 0)
	INSERT INTO [dbo].[tbl_Status] (SiteID, Title, [Order], IsDefault) VALUES (@_siteID, N''Отменена'', 5, 0)
	
	
	INSERT INTO [dbo].[tbl_ReadyToSell] (SiteID, Title, IsDefault, MinScore, MaxScore) VALUES (@_siteID, N''Нет информации'', 1, 0, 14)
	INSERT INTO [dbo].[tbl_ReadyToSell] (SiteID, Title, IsDefault, MinScore, MaxScore) VALUES (@_siteID, N''Холодный'', 0, 15, 59)
	INSERT INTO [dbo].[tbl_ReadyToSell] (SiteID, Title, IsDefault, MinScore, MaxScore) VALUES (@_siteID, N''Теплый'', 0, 60, 79)
	INSERT INTO [dbo].[tbl_ReadyToSell] (SiteID, Title, IsDefault, MinScore, MaxScore) VALUES (@_siteID, N''Горячий'', 0, 80, 100)
	
	
	INSERT INTO [dbo].[tbl_Priorities] (SiteID, Title, MinScore, MaxScore) VALUES (@_siteID, N''A'', 80, 100)
	INSERT INTO [dbo].[tbl_Priorities] (SiteID, Title, MinScore, MaxScore) VALUES (@_siteID, N''B'', 50, 79)
	INSERT INTO [dbo].[tbl_Priorities] (SiteID, Title, MinScore, MaxScore) VALUES (@_siteID, N''C'', 20, 49)
	INSERT INTO [dbo].[tbl_Priorities] (SiteID, Title, MinScore, MaxScore) VALUES (@_siteID, N''D'', 0, 19)
	
	
	INSERT INTO [dbo].[tbl_SiteColumns] (SiteID, Name, CategoryID, TypeID, Code) VALUES (@_siteID, N''Страна'', @_columnCategory1, 3, N''country'')
	INSERT INTO [dbo].[tbl_SiteColumns] (SiteID, Name, CategoryID, TypeID, Code) VALUES (@_siteID, N''Город'', @_columnCategory1, 3, N''city'')
	
	DECLARE @_genderID uniqueidentifier = NEWID()
	INSERT INTO [dbo].[tbl_SiteColumns] (ID, SiteID, Name, CategoryID, TypeID, Code) VALUES (@_genderID, @_siteID, N''Пол'', @_columnCategory1, 3, N''gender'')
	INSERT INTO [dbo].[tbl_SiteColumnValues] (SiteColumnID, Value) VALUES (@_genderID, N''Мужской'')
	INSERT INTO [dbo].[tbl_SiteColumnValues] (SiteColumnID, Value) VALUES (@_genderID, N''Женский'')
	
	INSERT INTO [dbo].[tbl_SiteColumns] (SiteID, Name, CategoryID, TypeID, Code) VALUES (@_siteID, N''Размер компании'', @_columnCategory2, 3, N''company-size'')
	INSERT INTO [dbo].[tbl_SiteColumns] (SiteID, Name, CategoryID, TypeID, Code) VALUES (@_siteID, N''Отрасль'', @_columnCategory2, 3, N''industry'')
	INSERT INTO [dbo].[tbl_SiteColumns] (SiteID, Name, CategoryID, TypeID, Code) VALUES (@_siteID, N''Должность'', @_columnCategory2, 3, N''position'')
	
	INSERT INTO [dbo].[tbl_SiteColumns] (SiteID, Name, CategoryID, TypeID, Code) VALUES (@_siteID, N''Бюджет'', @_columnCategory2, 1, N''budget'')
	
	DECLARE @_authorityID uniqueidentifier = NEWID()
	INSERT INTO [dbo].[tbl_SiteColumns] (ID, SiteID, Name, CategoryID, TypeID, Code) VALUES (@_authorityID, @_siteID, N''Роль'', @_columnCategory2, 3, N''authority'')
	INSERT INTO [dbo].[tbl_SiteColumnValues] (SiteColumnID, Value) VALUES (@_authorityID, N''ЛПР'')
	INSERT INTO [dbo].[tbl_SiteColumnValues] (SiteColumnID, Value) VALUES (@_authorityID, N''ЛВР'')
	
	INSERT INTO [dbo].[tbl_SiteColumns] (SiteID, Name, CategoryID, TypeID, Code) VALUES (@_siteID, N''Потребность'', @_columnCategory2, 3, N''need'')
	INSERT INTO [dbo].[tbl_SiteColumns] (SiteID, Name, CategoryID, TypeID, Code) VALUES (@_siteID, N''Срок принятия решения'', @_columnCategory2, 3, N''timeline'')

	INSERT INTO tbl_CompanyType (Name, SiteID) VALUES (N''Клиент'', @_siteID)
	INSERT INTO tbl_CompanyType (Name, SiteID) VALUES (N''Партнер'', @_siteID)
	INSERT INTO tbl_CompanyType (Name, SiteID) VALUES (N''Поставщик'', @_siteID)
	INSERT INTO tbl_CompanyType (Name, SiteID) VALUES (N''Другая компания'', @_siteID)
	INSERT INTO tbl_CompanyType (Name, SiteID) VALUES (N''Наша компания'', @_siteID)

	INSERT INTO tbl_ContactType (Name, SiteID) VALUES (N''Бот'', @_siteID)
	INSERT INTO tbl_ContactType (Name, SiteID) VALUES (N''Потенциальный клиент'', @_siteID)
	INSERT INTO tbl_ContactType (Name, SiteID) VALUES (N''Клиент'', @_siteID)
	INSERT INTO tbl_ContactType (Name, SiteID) VALUES (N''Сотрудник'', @_siteID)

	INSERT INTO tbl_ContactFunctionInCompany (Name, SiteID) VALUES (N''Управление'', @_siteID)
	INSERT INTO tbl_ContactFunctionInCompany (Name, SiteID) VALUES (N''Финансы'', @_siteID)
	INSERT INTO tbl_ContactFunctionInCompany (Name, SiteID) VALUES (N''ИТ'', @_siteID)
	INSERT INTO tbl_ContactFunctionInCompany (Name, SiteID) VALUES (N''Производство'', @_siteID)
	INSERT INTO tbl_ContactFunctionInCompany (Name, SiteID) VALUES (N''Другое'', @_siteID)

	INSERT INTO tbl_ContactJobLevel (Name, SiteID) VALUES (N''Собственник/учредитель'', @_siteID)
	INSERT INTO tbl_ContactJobLevel (Name, SiteID) VALUES (N''Директор'', @_siteID)
	INSERT INTO tbl_ContactJobLevel (Name, SiteID) VALUES (N''Руководитель отдела'', @_siteID)
	INSERT INTO tbl_ContactJobLevel (Name, SiteID) VALUES (N''Сотрудник'', @_siteID)

END'

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[WorkflowInit]
(
	@Parameter uniqueidentifier,
	@SiteID uniqueidentifier,
	@ModuleID uniqueidentifier,
	@AutomaticMethod int,
	@Event int = NULL,
	@MassWorkflowID uniqueidentifier = NULL
)
AS
BEGIN
	DECLARE @sql nvarchar(max)
	DECLARE @ParmDefinition nvarchar(max)
	
	SELECT ID
	INTO #TmpWorkflowTemplate
	FROM tbl_WorkflowTemplate
	WHERE
		SiteID=@SiteID
		AND ModuleID=@ModuleID
		AND [Status]=1 -- Статус действующий
		AND (AutomaticMethod=@AutomaticMethod OR @AutomaticMethod IS NULL)
		AND (StartDate IS NULL OR (StartDate IS NOT NULL AND StartDate<=GETDATE())) -- Актуален по дате
		AND (EndDate IS NULL OR (EndDate IS NOT NULL AND EndDate>=GETDATE())) -- Актуален по дате

		
	DECLARE @_WorkflowTemplateID uniqueidentifier
	DECLARE @_Event int
	
	-- Перебираем подходящие по условию шаблоны
	WHILE (SELECT COUNT(*) FROM #TmpWorkflowTemplate) > 0
	BEGIN
		SELECT TOP 1 @_WorkflowTemplateID=ID
		FROM #TmpWorkflowTemplate
		
		DECLARE @FLAG bit = 1
		
		DECLARE @_WorkflowID uniqueidentifier = NEWID()
		
		-- Берём параметр
		DECLARE @_WorkflowTemplateParameterID uniqueidentifier =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Контакт'' AND IsSystem=1)
		
		-- Проверка на вызов при активном процессе
		DECLARE @_Frequency int
		DECLARE @_DenyMultipleRun bit
		DECLARE @_Condition int
		DECLARE @_ActivityCount int
		SELECT @_Frequency=Frequency, @_DenyMultipleRun=DenyMultipleRun, @_Condition=Condition, @_ActivityCount=ActivityCount, @_Event=[Event]
		FROM tbl_WorkflowTemplate 
		WHERE ID=@_WorkflowTemplateID
		
		-- Есть ли активный процесс по заданному шаблону (нет даты окончания процесса)
		IF ((SELECT COUNT(*)
		FROM tbl_Workflow AS w
		LEFT JOIN tbl_WorkflowParameter AS wp ON wp.WorkflowID=w.ID
		WHERE w.WorkflowTemplateID=@_WorkflowTemplateID
			  AND wp.WorkflowTemplateParameterID=@_WorkflowTemplateParameterID
			  AND wp.Value=@Parameter
			  AND w.EndDate IS NULL) > 0 AND @_DenyMultipleRun = 1)
		BEGIN
			SET @FLAG = 0
		END
			
		-- Проверка на частоту вызова в днях
		DECLARE @_StartDate datetime = (SELECT TOP 1 w.StartDate
									   FROM tbl_Workflow AS w
									   LEFT JOIN tbl_WorkflowParameter AS wp ON wp.WorkflowID=w.ID
									   WHERE w.WorkflowTemplateID=@_WorkflowTemplateID
											 AND wp.WorkflowTemplateParameterID=@_WorkflowTemplateParameterID
									   ORDER BY w.StartDate DESC)
		--SET @_StartDate = DATEADD(day, @_Frequency, @_StartDate)
		IF (@_Frequency <> 0 AND DATEADD(day, @_Frequency, @_StartDate) > GETDATE())
		BEGIN
			SET @FLAG = 0
		END
		
		-- Проверка условий запуска
		IF (@AutomaticMethod=1 AND @FLAG = 1) -- Создание/Изменение записи
		BEGIN
			IF (@_Event<>@Event)
			BEGIN
				SET @FLAG = 0
			END
		END
		
		
		IF (@AutomaticMethod=2 AND @FLAG = 1) -- По действию пользователя
		BEGIN
			SET @FLAG = 0
			
			SELECT ID
			INTO #TmpConditionEvent
			FROM tbl_WorkflowTemplateConditionEvent
			WHERE WorkflowTemplateID=@_WorkflowTemplateID
			
			DECLARE @TotalRowsReturned int
			DECLARE @Count int = 0
			
			DECLARE @CountConditionEvent int = (SELECT COUNT(*) FROM #TmpConditionEvent)
			DECLARE @_ConditionEventID uniqueidentifier
			DECLARE @_Category int
			DECLARE @_ActivityType int
			DECLARE @_Code nvarchar(max)
			DECLARE @_ActualPeriod int
			DECLARE @_Requisite nvarchar(2000)
			DECLARE @_Formula int
			DECLARE @_Value nvarchar(255)
			WHILE (SELECT COUNT(*) FROM #TmpConditionEvent) > 0
			BEGIN
				SELECT TOP 1 @_ConditionEventID=ID
				FROM #TmpConditionEvent
				
				SELECT @_Category=Category,
					   @_ActivityType=ActivityType,
					   @_Code=Code,
					   @_ActualPeriod=ActualPeriod,
					   @_Requisite=Requisite,
					   @_Formula=Formula,
					   @_Value=Value
				FROM tbl_WorkflowTemplateConditionEvent
				WHERE ID=@_ConditionEventID
				
				IF (@_Category=0) -- Действие
				BEGIN
					SET @sql = ''SELECT @TotalRowsReturnedOUT=COUNT(*)
								FROM tbl_ContactActivity
								WHERE ContactID=@ContactID
									  AND ActivityTypeID=@ActivityType''
									  
					IF (@_ActivityType=1 OR @_ActivityType=11)
					BEGIN
						SET @sql = @sql + '' AND ActivityCode LIKE N''''%@Code%'''' ''
					END
					ELSE
					BEGIN
						SET @sql = @sql + '' AND ActivityCode=@Code ''
					END
					
					IF (@_ActualPeriod <> 0)
					BEGIN
						SET @sql = @sql + '' AND CreatedAt > DATEADD(day, (-1 * @ActualPeriod), GETDATE()) ''
					END
					
					-- Исключаем из выборки активность которая была до вызова предыдущего процесса
					IF (@_StartDate IS NOT NULL)
					BEGIN
						SET @sql = @sql + '' AND CreatedAt > @StartDate ''
					END
					
					SET @ParmDefinition = ''@TotalRowsReturnedOUT int OUTPUT, @ContactID uniqueidentifier, @ActivityType int, @Code nvarchar(max), @ActualPeriod int, @StartDate datetime''
					EXECUTE sp_executesql @sql,
							@ParmDefinition,
							@TotalRowsReturnedOUT=@TotalRowsReturned OUTPUT,
							@ContactID=@Parameter,
							@ActivityType=@_ActivityType,
							@Code=@_Code,
							@ActualPeriod=@_ActualPeriod,
							@StartDate=@_StartDate
				END
				
				IF (@TotalRowsReturned > 0)
				BEGIN
					SET @Count = @Count + 1
				END
				
				IF (@_Category=1) -- Значение реквизита
				BEGIN
					DECLARE @_ColumnTypeID int
					DECLARE @_StringValue nvarchar(512)
					DECLARE @_DateValue datetime
					DECLARE @_SiteColumnValueID uniqueidentifier
					SELECT
						@_ColumnTypeID=tbl_SiteColumns.TypeID,
						@_StringValue=tbl_ContactColumnValues.StringValue,
						@_DateValue=tbl_ContactColumnValues.DateValue,
						@_SiteColumnValueID=tbl_ContactColumnValues.SiteColumnValueID
					FROM tbl_ContactColumnValues
					LEFT JOIN tbl_SiteColumns ON tbl_SiteColumns.ID=tbl_ContactColumnValues.SiteColumnID
					WHERE ContactID=@Parameter AND SiteColumnID=CAST(@_Requisite AS uniqueidentifier)
					
					-- Строка/Число/Текст
					IF ((@_ColumnTypeID=1 OR @_ColumnTypeID=4 OR @_ColumnTypeID=5)
						AND ((@_Formula=4 AND @_StringValue LIKE ''%''+@_Value)
							  OR (@_Formula=5 AND @_StringValue LIKE @_Value)
							)
						)
					BEGIN
						SET @Count = @Count + 1
					END
					-- Дата
					IF (@_ColumnTypeID=2
						AND ((@_Formula=7 AND @_DateValue < CAST(@_Value AS datetime))
							  OR (@_Formula=9 AND @_DateValue <= CAST(@_Value AS datetime))
							  OR (@_Formula=6 AND @_DateValue > CAST(@_Value AS datetime))
							  OR (@_Formula=8 AND @_DateValue >= CAST(@_Value AS datetime))
							)
					   )
					   BEGIN
							SET @Count = @Count + 1
					   END
					--Справочник
					IF (@_ColumnTypeID=3
						AND ((@_Formula=2 AND (@_SiteColumnValueID IS NULL OR @_SiteColumnValueID = N''00000000-0000-0000-0000-000000000000''))
							OR (@_Formula=1 AND (@_SiteColumnValueID IS NOT NULL AND @_SiteColumnValueID <> N''00000000-0000-0000-0000-000000000000''))
							OR (@_Formula=3 AND @_SiteColumnValueID = CAST(@_Value AS uniqueidentifier))
							)
					   )
					   BEGIN
							SET @Count = @Count + 1
					   END
				END
				
				DECLARE @_Scores int
				IF (@_Category=2) -- Балл по поведению
				BEGIN
					SET @_Scores = (SELECT Score FROM tbl_ContactActivityScore WHERE ID=@Parameter AND ScoreCategory=0 AND SiteActivityScoreTypeID=CAST(@_Requisite AS uniqueidentifier))
					IF ((@_Formula = 7 AND @_Scores < @_Value)
						OR (@_Formula = 9 AND @_Scores <= @_Value)
						OR (@_Formula = 6 AND @_Scores > @_Value)
						OR (@_Formula = 8 AND @_Scores >= @_Value))
					BEGIN
						SET @Count = @Count + 1
					END
				END
				
				IF (@_Category=3) -- Балл по характеристикам
				BEGIN
					SET @_Scores = (SELECT Score FROM tbl_ContactActivityScore WHERE ID=@Parameter AND ScoreCategory=1 AND SiteActivityScoreTypeID=CAST(@_Requisite AS uniqueidentifier))
					IF ((@_Formula = 7 AND @_Scores < @_Value)
						OR (@_Formula = 9 AND @_Scores <= @_Value)
						OR (@_Formula = 6 AND @_Scores > @_Value)
						OR (@_Formula = 8 AND @_Scores >= @_Value))
					BEGIN
						SET @Count = @Count + 1
					END
				END
				
				DELETE #TmpConditionEvent WHERE ID=@_ConditionEventID
			END
			DROP TABLE #TmpConditionEvent
			
			IF (@CountConditionEvent<>0
				AND ((@_Condition=0 AND @CountConditionEvent=@Count)
				OR (@_Condition=1 AND @Count>0)
				OR (@_Condition=2 AND @Count>=@_ActivityCount)
				))
			BEGIN
				SET @FLAG = 1
			END
		END
		
		
		IF (@FLAG = 1)
		BEGIN
			DECLARE @_WorkflowTemplateElementID uniqueidentifier = 
			(SELECT tbl_WorkflowTemplateElement.ID FROM tbl_WorkflowTemplate
			LEFT JOIN tbl_WorkflowTemplateElement ON tbl_WorkflowTemplateElement.WorkflowTemplateID=tbl_WorkflowTemplate.ID
			WHERE tbl_WorkflowTemplate.ID=@_WorkflowTemplateID AND tbl_WorkflowTemplateElement.ElementType=5) -- Начало процесса
			
			-- Найден элемент с типом "Начало процесса"
			IF (@_WorkflowTemplateElementID IS NOT NULL)
			BEGIN
				INSERT INTO tbl_Workflow (ID, SiteID, WorkflowTemplateID, StartDate, MassWorkflowID)
				VALUES (@_WorkflowID, @SiteID, @_WorkflowTemplateID, GETDATE(), @MassWorkflowID)
				
				INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
				VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, @Parameter)


		SET @_WorkflowTemplateParameterID =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Компания'' AND IsSystem=1)
		INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
		VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, (SELECT CompanyID FROM tbl_Contact WHERE ID=@Parameter))
		
		SET @_WorkflowTemplateParameterID =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Автор (роль)'' AND IsSystem=1)
		INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
		VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, NULL)
		
		SET @_WorkflowTemplateParameterID =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Ответственный по компании (роль)'' AND IsSystem=1)
		INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
		VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, (SELECT tbl_Company.OwnerID FROM tbl_Contact LEFT JOIN tbl_Company ON tbl_Company.ID=tbl_Contact.CompanyID WHERE tbl_Contact.ID=@Parameter))

				
				DECLARE @WorkflowElementID uniqueidentifier = NEWID()
				INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
				VALUES (@WorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 1)
				
				EXEC WorkflowProcessing @WorkflowElementID
			END
		END
	    
		DELETE #TmpWorkflowTemplate WHERE ID=@_WorkflowTemplateID
	END
	DROP TABLE #TmpWorkflowTemplate
END'

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[WorkflowProcessing]
(
	@_WorkflowElementID uniqueidentifier, -- Входящий элемент
	@_StartElementResult nvarchar(255) = NULL -- Результат выполнения элемента процесса
)
AS
BEGIN
	DECLARE @_SiteID uniqueidentifier
	DECLARE @_WorkflowStartDate datetime
	DECLARE @_WorkflowID uniqueidentifier
	DECLARE @_WorkflowTemplateContactID uniqueidentifier
	DECLARE @_WorkflowTemplateElementID uniqueidentifier
	DECLARE @_WorkflowParameterID uniqueidentifier
	DECLARE @_ControlDate datetime
	DECLARE @_WorkflowElementStatus int = 0
	DECLARE @_WorkflowStatus int = 0
	DECLARE @_WorkflowResult nvarchar(255)
	DECLARE @_MassWorkflowID uniqueidentifier = NULL
	DECLARE @_ElementType int
	
	DECLARE @_StartAfter int
	DECLARE @_StartPeriod int
	DECLARE @_DurationHours int
	DECLARE @_DurationMinutes int
	DECLARE @_ControlAfter int
	DECLARE @_ControlPeriod int
	DECLARE @_ControlFromBeginProccess bit
	
	SELECT @_WorkflowID=w.WorkflowID,
		   @_WorkflowTemplateElementID=w.WorkflowTemplateElementID,
		   @_ControlDate=w.ControlDate,
		   @_WorkflowTemplateContactID=wt.ContactID,
		   @_WorkflowStatus=wf.[Status],
		   @_ElementType=t.ElementType
		   --@_StartAfter=t.StartAfter,
		   --@_StartPeriod=t.StartPeriod,
		   --@_ControlAfter=t.ControlAfter,
		   --@_ControlPeriod=t.ControlPeriod,
		   --@_ControlFromBeginProccess=t.ControlFromBeginProccess
	FROM tbl_WorkflowElement AS w
	LEFT JOIN tbl_WorkflowTemplateElement AS t ON t.ID=w.WorkflowTemplateElementID
	LEFT JOIN tbl_WorkflowTemplate AS wt ON wt.ID=t.WorkflowTemplateID
	LEFT JOIN tbl_Workflow AS wf ON wf.ID=w.WorkflowID
	WHERE w.ID=@_WorkflowElementID AND (t.ElementType<>1 OR (t.ElementType=1 AND w.[Status]=0))
	
	SELECT @_SiteID=SiteID, @_WorkflowStartDate=StartDate, @_MassWorkflowID=MassWorkflowID
	FROM tbl_Workflow
	WHERE ID=@_WorkflowID
	
IF (@_WorkflowStatus=0)
BEGIN	
	
	-- Выбираем все элементы по связям, где входящий элемент является начальным
	-- и с выходящим результатом
	SELECT EndElementID
	INTO #WorkflowTemplateElementRelation
	FROM tbl_WorkflowTemplateElementRelation
	WHERE StartElementID=@_WorkflowTemplateElementID AND (StartElementResult=@_StartElementResult OR @_StartElementResult IS NULL)
	
	-- Если выходы с элемента есть
	IF ((SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0)
	BEGIN
		SET @_WorkflowElementStatus = 1
		
		IF (@_StartElementResult=0 AND @_ElementType=2) -- Событие не произошло (просрочен)
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
		
		-- Входящий элемент не просрочен
		IF (
			((@_ControlDate IS NULL) OR (@_ControlDate > GETDATE()))
			OR (@_ElementType = 2) -- Ожидание события
			)
		BEGIN
					WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0
					BEGIN
						SELECT TOP 1 @_WorkflowTemplateElementID=EndElementID
						FROM #WorkflowTemplateElementRelation
						
						IF ((SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND WorkflowTemplateElementID=@_WorkflowTemplateElementID) = 0)
						BEGIN
							DECLARE @_WorkflowTemplateElementType int
							DECLARE @_WorkflowTemplateElementName nvarchar(255)
							DECLARE @_IsActive bit
							SELECT @_WorkflowTemplateElementType=ElementType, @_WorkflowTemplateElementName=Name, @_IsActive=IsActive
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							DECLARE @_InsertedWorkflowElementID uniqueidentifier = NEWID()
							
							SELECT @_StartAfter=StartAfter,
								   @_StartPeriod=StartPeriod,
								   @_DurationHours=DurationHours,
								   @_DurationMinutes=DurationMinutes,
								   @_ControlAfter=ControlAfter,
								   @_ControlPeriod=ControlPeriod,
								   @_ControlFromBeginProccess=ControlFromBeginProccess
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							-- Тип элемента "Окончание процесса"
							IF (@_WorkflowTemplateElementType=6)
							BEGIN
								-- Если нет больше элементов со статусов в Ожидании (кроме текущего), завершаем процесс
								IF (SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND [Status]=0) = 1
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 1)
									
									UPDATE tbl_Workflow
									SET EndDate=GETDATE(), [Status]=1
									WHERE ID=@_WorkflowID
									
									-- Программа развития "Завершена"
									IF (@_MassWorkflowID IS NOT NULL)
									BEGIN
										IF (SELECT COUNT(*)
										FROM tbl_Workflow
										WHERE MassWorkflowID=@_MassWorkflowID AND [Status]=0) = 0
										BEGIN
											UPDATE tbl_MassWorkflow
											SET [Status]=2
											WHERE ID=@_MassWorkflowID
										END
									END
								END
							END
							
							-- определяем параметер
							SET @_WorkflowParameterID =
							(SELECT tbl_WorkflowParameter.[Value]
							FROM tbl_WorkflowParameter
							LEFT JOIN tbl_WorkflowTemplateParameter ON tbl_WorkflowTemplateParameter.ID=tbl_WorkflowParameter.WorkflowTemplateParameterID
							WHERE tbl_WorkflowParameter.WorkflowID=@_WorkflowID
								  AND tbl_WorkflowTemplateParameter.Name=N''Контакт''
								  AND tbl_WorkflowTemplateParameter.IsSystem=1)
								  
							-- определяем через сколько запускать элемент, если 0 то сразу
							DECLARE @_ActionDate datetime = GETDATE()
							IF (@_StartAfter <> 0)
							BEGIN
								SET @_ActionDate = CASE
									WHEN @_StartPeriod = 0 THEN DATEADD(minute, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 1 THEN DATEADD(hour, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 2 THEN DATEADD(day, @_StartAfter, @_ActionDate)
								END
							END
							
							-- дата контроля
							SET @_ControlDate = GETDATE()
							IF (@_ControlFromBeginProccess=1) -- От начала процесса
							BEGIN
								SET @_ControlDate = @_WorkflowStartDate
							END
							
							SET @_ControlDate = CASE
								WHEN @_ControlPeriod = 0 THEN DATEADD(minute, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 1 THEN DATEADD(hour, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 2 THEN DATEADD(day, @_ControlAfter, @_ControlDate)
							END
							
							
							-- Тип элемента "Сообщение"
							IF (@_WorkflowTemplateElementType = 0)
							BEGIN
								-- Начало добавления сообщения в очередь
								DECLARE @_SiteActionTemplateID uniqueidentifier = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActionTemplateID'')
								
								DECLARE @MessageTitle nvarchar(255)
								DECLARE @MessageText nvarchar(max)
								SELECT @MessageTitle=MessageCaption, @MessageText=MessageBody
								FROM tbl_SiteActionTemplate
								WHERE ID=@_SiteActionTemplateID
								
								DECLARE @_SiteActionID uniqueidentifier = NEWID()
								INSERT INTO tbl_SiteAction (ID, SiteID, SiteActionTemplateID, ContactID, ActionStatusID, ActionDate, MessageTitle, MessageText)
								VALUES (@_SiteActionID, @_SiteID, @_SiteActionTemplateID, @_WorkflowParameterID, 1, @_ActionDate, @MessageTitle, @MessageText)
								-- Конец добавления сообщения в очередь
								
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_SiteActionID)
							END
							
							-- Тип элемента "Ожидание события"
							IF (@_WorkflowTemplateElementType = 2)
							BEGIN
								IF (@_ControlAfter<>0)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], ControlDate)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_ControlDate)
								END
								ELSE
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0)
								END
							END
							
							-- Тип элемента "Действие"
							IF (@_WorkflowTemplateElementType = 3)
							BEGIN
								-- Начало добавления действия
								DECLARE @_ContactActivityDescription nvarchar(255) = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ContactActivityDescription'')
								
								DECLARE @_ContactActivityID uniqueidentifier = NEWID()
								INSERT INTO tbl_ContactActivity (ID, SiteID, ContactID, CreatedAt, ActivityTypeID, ActivityCode)
								VALUES (@_ContactActivityID, @_SiteID, @_WorkflowParameterID, GETDATE(), 13, @_ContactActivityDescription)
								-- Конец добавления действия
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1, @_ContactActivityID)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Задача"
							IF (@_WorkflowTemplateElementType = 1)
							BEGIN
								-- Начало добавления задачи
								DECLARE @_TaskID uniqueidentifier = NEWID()
								DECLARE @_TaskTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskType'') AS uniqueidentifier)
								
								DECLARE @_IsImportantTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsImportantTask'') AS bit)
								
								DECLARE @_IsUrgentTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsUrgentTask'') AS bit)
								
								DECLARE @_TaskEndDate datetime = @_ActionDate
								SET @_TaskEndDate = DATEADD(hour, @_DurationHours, @_TaskEndDate)
								SET @_TaskEndDate = DATEADD(minute, @_DurationMinutes, @_TaskEndDate)
								INSERT INTO tbl_Task (ID, SiteID, Title, TaskTypeID, StartDate, EndDate, DateOfControl, IsImportantTask, PlanDurationMinutes, PlanDurationHours, ResponsibleID, CreatorID, IsUrgentTask, TaskStatusID)
								VALUES (@_TaskID, @_SiteID, @_WorkflowTemplateElementName, @_TaskTypeID, @_ActionDate, @_TaskEndDate, @_ControlDate, @_IsImportantTask, @_DurationMinutes, @_DurationHours, @_WorkflowTemplateContactID, @_WorkflowTemplateContactID, @_IsUrgentTask, 1)
								-- Конец добавления задачи
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, ControlDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), @_ControlDate, 0, @_TaskID)
							END
							
							-- Тип элемента "Сегментация"
							IF (@_WorkflowTemplateElementType = 7)
							BEGIN
								SELECT ID
								INTO #WorkflowTemplateElementTag
								FROM tbl_WorkflowTemplateElementTag
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID
								
								DECLARE @_WorkflowTemplateElementTagID uniqueidentifier
								DECLARE @_SiteTagID uniqueidentifier
								DECLARE @_Operation int
								WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementTag) > 0
								BEGIN
									SELECT TOP 1 @_WorkflowTemplateElementTagID=ID
									FROM #WorkflowTemplateElementTag
									
									SELECT @_SiteTagID=SiteTagID, @_Operation=Operation
									FROM tbl_WorkflowTemplateElementTag
									WHERE ID=@_WorkflowTemplateElementTagID
									
									IF (@_Operation = 0)
									BEGIN
										DELETE FROM tbl_SiteTagObjects
										WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID
									END
									ELSE
									BEGIN
										IF (SELECT COUNT(*) FROM tbl_SiteTagObjects WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID) = 0
										BEGIN
											INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID)
											VALUES (@_SiteTagID, @_WorkflowParameterID)
										END
									END
									
									DELETE #WorkflowTemplateElementTag WHERE ID=@_WorkflowTemplateElementTagID
								END
								DROP TABLE #WorkflowTemplateElementTag

								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Скорринг"
							IF (@_WorkflowTemplateElementType = 8)
							BEGIN
								-- Начало добавления баллов
								--DECLARE @_SiteActivityScoreTypeID uniqueidentifier = NEWID()
								DECLARE @_SiteActivityScoreTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActivityScoreType'') AS uniqueidentifier)
								
								DECLARE @_ScoreCategory int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreCategory'') AS int)
								
								DECLARE @_ScoreOperation int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreOperation'') AS int)
								
								DECLARE @_AddedScore int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''AddedScore'') AS int)
								
								-- есть балл такого типа и такой категории
								DECLARE @_ContactActivityScoreID uniqueidentifier
								DECLARE @_oldScore int
								
								SELECT @_ContactActivityScoreID=ID, @_oldScore=Score
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								
								IF (@_ContactActivityScoreID IS NOT NULL)
								BEGIN
									DECLARE @_newScore int = CASE @_ScoreOperation
															 WHEN 0 THEN @_AddedScore -- (=)
															 WHEN 1 THEN @_oldScore + @_AddedScore -- (+)
															 WHEN 2 THEN @_oldScore - @_AddedScore -- (-)
															 WHEN 3 THEN @_oldScore * @_AddedScore -- (*)
															 END
									UPDATE tbl_ContactActivityScore
									SET Score=@_newScore
									WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								END
								ELSE
								BEGIN
									SET @_ContactActivityScoreID = NEWID()
									
									INSERT INTO tbl_ContactActivityScore (ID, SiteID, SiteActivityScoreTypeID, ContactID, Score, ScoreCategory)
									VALUES (@_ContactActivityScoreID, @_SiteID, @_SiteActivityScoreTypeID, @_WorkflowParameterID, @_AddedScore, @_ScoreCategory)
								END
								
								INSERT INTO tbl_ContactActivityScoreHistory (ContactActivityScoreID, Operation, Score, ActivityDate, Comment)
								VALUES (@_ContactActivityScoreID, @_ScoreOperation, @_AddedScore, GETDATE(), @_InsertedWorkflowElementID)
								-- Конец добавления баллов
								
								-- Начало обновления баллов контакта
								DECLARE @maxScoreTable TABLE
								(
									Score int,
									ScoreTypeID uniqueidentifier
								)

								INSERT INTO @maxScoreTable (Score, ScoreTypeID)
								SELECT TOP 1 SUM(Score) AS scoresum, SiteActivityScoreTypeID
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID
								GROUP BY SiteActivityScoreTypeID
								ORDER BY scoresum DESC

								DECLARE @_BehaviorScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=0 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								DECLARE @_CharacteristicsScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=1 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								IF (@_BehaviorScore IS NOT NULL)
								BEGIN
									DECLARE @_minScoreReadyToSell int = (SELECT MIN(MinScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									DECLARE @_maxScoreReadyToSell int = (SELECT MAX(MaxScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									
									IF (@_BehaviorScore < @_minScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_minScoreReadyToSell
									END
									IF (@_BehaviorScore > @_maxScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_maxScoreReadyToSell
									END

									UPDATE tbl_Contact
									SET BehaviorScore=@_BehaviorScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET ReadyToSellID=(SELECT TOP 1 ID FROM tbl_ReadyToSell WHERE SiteID=@_SiteID AND (@_BehaviorScore >= MinScore AND @_BehaviorScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								IF (@_CharacteristicsScore IS NOT NULL)
								BEGIN
									DECLARE @_minScorePriority int = (SELECT MIN(MinScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									DECLARE @_maxScorePriority int = (SELECT MAX(MaxScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									
									IF (@_CharacteristicsScore < @_minScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_minScorePriority
									END
									IF (@_CharacteristicsScore > @_maxScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_maxScorePriority
									END

									UPDATE tbl_Contact
									SET CharacteristicsScore=@_CharacteristicsScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET PriorityID=(SELECT TOP 1 ID FROM tbl_Priorities WHERE SiteID=@_SiteID AND (@_CharacteristicsScore >= MinScore AND @_CharacteristicsScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								UPDATE tbl_Contact
								SET Score= BehaviorScore + CharacteristicsScore
								WHERE ID=@_WorkflowParameterID
								-- Конец обновления баллов контакта
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
						END
						
						DELETE #WorkflowTemplateElementRelation WHERE EndElementID=@_WorkflowTemplateElementID
					END
					DROP TABLE #WorkflowTemplateElementRelation
		END
		-- Входящие элемент просрочен
		ELSE
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
	END
	-- Если нет выходов с элемента
	ELSE
	BEGIN
		SET @_WorkflowElementStatus = 2
		
		-- Если ошибка элемента и нет больше элементов в ожидании
		IF (SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND [Status]=0) = 1
		BEGIN
			UPDATE tbl_Workflow
			SET EndDate=GETDATE(), [Status]=3
			WHERE ID=@_WorkflowID
		END
	END
	
	
	-- Обновление статуса элемента процесса
	UPDATE tbl_WorkflowElement
	SET EndDate=GETDATE(),
		[Status]=@_WorkflowElementStatus,
		Result=@_StartElementResult
	WHERE ID=@_WorkflowElementID
	
END	
END'

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[WorkflowScheduler] 
AS
BEGIN
	DECLARE @_WorkflowElementID uniqueidentifier
	DECLARE @_WorkflowID uniqueidentifier
	DECLARE @sql nvarchar(max)
	DECLARE @ParmDefinition nvarchar(max)
	DECLARE @Parameter uniqueidentifier
	DECLARE @ElementType int

	SELECT tbl_WorkflowElement.ID, tbl_WorkflowTemplateElement.ElementType
	INTO #TmpWorkflowElement
	FROM tbl_WorkflowElement
	LEFT JOIN tbl_WorkflowTemplateElement ON tbl_WorkflowTemplateElement.ID=tbl_WorkflowElement.WorkflowTemplateElementID
	LEFT JOIN tbl_Workflow ON tbl_Workflow.ID=tbl_WorkflowElement.WorkflowID
	WHERE tbl_WorkflowElement.[Status]=0 -- В ожидании
		  AND tbl_Workflow.[Status]=0 -- Исполняется
		  AND (tbl_WorkflowTemplateElement.ElementType=2 -- Ожидание события
			   OR tbl_WorkflowTemplateElement.ElementType=1) -- Задача
		  
	WHILE (SELECT COUNT(*) FROM #TmpWorkflowElement) > 0
	BEGIN
		SELECT TOP 1 @_WorkflowElementID=ID, @ElementType=ElementType
		FROM #TmpWorkflowElement
		
		DECLARE @_WorkflowElementValue nvarchar(255)
		DECLARE @_WorkflowElementStartDate datetime
		DECLARE @_WorkflowElementControlDate datetime
		
		IF (@ElementType=1)
		BEGIN
					DECLARE @_WorkflowTemplateElementID uniqueidentifier
					DECLARE @_WorkflowTemplateElementResultID uniqueidentifier
					
					SELECT @_WorkflowElementValue=tbl_WorkflowElement.Value,
						   @_WorkflowElementStartDate=tbl_WorkflowElement.StartDate,
						   @_WorkflowElementControlDate=tbl_WorkflowElement.ControlDate,
						   @_WorkflowID=tbl_WorkflowElement.WorkflowID,
						   @_WorkflowTemplateElementID=tbl_WorkflowTemplateElement.ID
					FROM tbl_WorkflowElement
					LEFT JOIN tbl_WorkflowTemplateElement ON tbl_WorkflowTemplateElement.ID=tbl_WorkflowElement.WorkflowTemplateElementID
					WHERE tbl_WorkflowElement.ID=@_WorkflowElementID
					
					IF (@_WorkflowElementControlDate < GETDATE())
					BEGIN
							SELECT @_WorkflowTemplateElementResultID=ID
							FROM tbl_WorkflowTemplateElementResult
							WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''Задача просрочена''
							
							EXEC WorkflowProcessing @_WorkflowElementID, @_WorkflowTemplateElementResultID
					END
					ELSE
					BEGIN
						DECLARE @_TaskStatusID int
						SELECT @_TaskStatusID=TaskStatusID
						FROM tbl_Task
						WHERE ID=CAST(@_WorkflowElementValue AS uniqueidentifier)
						
						IF (@_TaskStatusID = 5) --Отменена
						BEGIN
							SELECT @_WorkflowTemplateElementResultID=ID
							FROM tbl_WorkflowTemplateElementResult
							WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''Задача отменена''
							
							EXEC WorkflowProcessing @_WorkflowElementID, @_WorkflowTemplateElementResultID
						END
					END
		END
		
		IF (@ElementType=2)
		BEGIN
					DECLARE @_WorkflowTemplateElementEventID uniqueidentifier
					
					SELECT @_WorkflowTemplateElementEventID=tbl_WorkflowTemplateElementEvent.ID,
						   @_WorkflowElementStartDate=tbl_WorkflowElement.StartDate,
						   @_WorkflowElementControlDate=tbl_WorkflowElement.ControlDate,
						   @_WorkflowID=tbl_WorkflowElement.WorkflowID
					FROM tbl_WorkflowElement
					LEFT JOIN tbl_WorkflowTemplateElement ON tbl_WorkflowTemplateElement.ID=tbl_WorkflowElement.WorkflowTemplateElementID
					LEFT JOIN tbl_WorkflowTemplateElementEvent ON tbl_WorkflowTemplateElementEvent.WorkflowTemplateElementID=tbl_WorkflowTemplateElement.ID
					WHERE tbl_WorkflowElement.ID=@_WorkflowElementID
					
					IF ((@_WorkflowElementControlDate IS NOT NULL) AND (@_WorkflowElementControlDate < GETDATE()))
					BEGIN
						EXEC WorkflowProcessing @_WorkflowElementID, 0
					END
					ELSE
					BEGIN

					
					SET @Parameter =
					(SELECT tbl_WorkflowParameter.[Value]
					FROM tbl_WorkflowParameter
					LEFT JOIN tbl_WorkflowTemplateParameter ON tbl_WorkflowTemplateParameter.ID=tbl_WorkflowParameter.WorkflowTemplateParameterID
					WHERE tbl_WorkflowParameter.WorkflowID=@_WorkflowID
						  AND tbl_WorkflowTemplateParameter.Name=N''Контакт''
						  AND tbl_WorkflowTemplateParameter.IsSystem=1)
						  
						  
					DECLARE @_Condition int
					DECLARE @_ActivityCount int
					SELECT @_Condition=Condition, @_ActivityCount=ActivityCount
					FROM tbl_WorkflowTemplateElementEvent 
					WHERE ID=@_WorkflowTemplateElementEventID

					
					
						SELECT ID
						INTO #TmpConditionEvent
						FROM tbl_WorkflowTemplateConditionEvent
						WHERE WorkflowTemplateElementEventID=@_WorkflowTemplateElementEventID
						
						DECLARE @TotalRowsReturned int
						DECLARE @Count int = 0
						
						DECLARE @CountConditionEvent int = (SELECT COUNT(*) FROM #TmpConditionEvent)
						DECLARE @_ConditionEventID uniqueidentifier
						DECLARE @_Category int
						DECLARE @_ActivityType int
						DECLARE @_Code nvarchar(max)
						DECLARE @_ActualPeriod int
						DECLARE @_Requisite nvarchar(2000)
						DECLARE @_Formula int
						DECLARE @_Value nvarchar(255)
						WHILE (SELECT COUNT(*) FROM #TmpConditionEvent) > 0
						BEGIN
							SELECT TOP 1 @_ConditionEventID=ID
							FROM #TmpConditionEvent
							
							SELECT @_Category=Category,
								   @_ActivityType=ActivityType,
								   @_Code=Code,
								   @_ActualPeriod=ActualPeriod,
								   @_Requisite=Requisite,
								   @_Formula=Formula,
								   @_Value=Value
							FROM tbl_WorkflowTemplateConditionEvent
							WHERE ID=@_ConditionEventID
							
							IF (@_Category=0) -- Действие
							BEGIN
								SET @sql = ''SELECT @TotalRowsReturnedOUT=COUNT(*)
											FROM tbl_ContactActivity
											WHERE ContactID=@ContactID
												  AND ActivityTypeID=@ActivityType
												  AND CreatedAt > @WorkflowElementStartDate''
												  
								IF (@_ActivityType=1 OR @_ActivityType=11)
								BEGIN
									SET @sql = @sql + '' AND ActivityCode LIKE N''''%@Code%'''' ''
								END
								ELSE
								BEGIN
									SET @sql = @sql + '' AND ActivityCode=@Code ''
								END
								
								IF (@_ActualPeriod <> 0)
								BEGIN
									SET @sql = @sql + '' AND CreatedAt > DATEADD(day, (-1 * @ActualPeriod), GETDATE()) ''
								END
								
								SET @ParmDefinition = ''@TotalRowsReturnedOUT int OUTPUT, @ContactID uniqueidentifier, @ActivityType int, @Code nvarchar(max), @ActualPeriod int, @WorkflowElementStartDate datetime''
								EXECUTE sp_executesql @sql,
										@ParmDefinition,
										@TotalRowsReturnedOUT=@TotalRowsReturned OUTPUT,
										@ContactID=@Parameter,
										@ActivityType=@_ActivityType,
										@Code=@_Code,
										@ActualPeriod=@_ActualPeriod,
										@WorkflowElementStartDate=@_WorkflowElementStartDate
							END
							
							IF (@TotalRowsReturned > 0)
							BEGIN
								SET @Count = @Count + 1
							END
							
							IF (@_Category=1) -- Значение реквизита
							BEGIN
								DECLARE @_ColumnTypeID int
								DECLARE @_StringValue nvarchar(512)
								DECLARE @_DateValue datetime
								DECLARE @_SiteColumnValueID uniqueidentifier
								SELECT
									@_ColumnTypeID=tbl_SiteColumns.TypeID,
									@_StringValue=tbl_ContactColumnValues.StringValue,
									@_DateValue=tbl_ContactColumnValues.DateValue,
									@_SiteColumnValueID=tbl_ContactColumnValues.SiteColumnValueID
								FROM tbl_ContactColumnValues
								LEFT JOIN tbl_SiteColumns ON tbl_SiteColumns.ID=tbl_ContactColumnValues.SiteColumnID
								WHERE ContactID=@Parameter AND SiteColumnID=CAST(@_Requisite AS uniqueidentifier)
								
								-- Строка/Число/Текст
								IF ((@_ColumnTypeID=1 OR @_ColumnTypeID=4 OR @_ColumnTypeID=5)
									AND ((@_Formula=4 AND @_StringValue LIKE ''%''+@_Value)
										  OR (@_Formula=5 AND @_StringValue LIKE @_Value)
										)
									)
								BEGIN
									SET @Count = @Count + 1
								END
								-- Дата
								IF (@_ColumnTypeID=2
									AND ((@_Formula=7 AND @_DateValue < CAST(@_Value AS datetime))
										  OR (@_Formula=9 AND @_DateValue <= CAST(@_Value AS datetime))
										  OR (@_Formula=6 AND @_DateValue > CAST(@_Value AS datetime))
										  OR (@_Formula=8 AND @_DateValue >= CAST(@_Value AS datetime))
										)
								   )
								   BEGIN
										SET @Count = @Count + 1
								   END
								--Справочник
								IF (@_ColumnTypeID=3
									AND ((@_Formula=2 AND (@_SiteColumnValueID IS NULL OR @_SiteColumnValueID = N''00000000-0000-0000-0000-000000000000''))
										OR (@_Formula=1 AND (@_SiteColumnValueID IS NOT NULL AND @_SiteColumnValueID <> N''00000000-0000-0000-0000-000000000000''))
										OR (@_Formula=3 AND @_SiteColumnValueID = CAST(@_Value AS uniqueidentifier))
										)
								   )
								   BEGIN
										SET @Count = @Count + 1
								   END
							END
							
							DECLARE @_Scores int
							IF (@_Category=2) -- Балл по поведению
							BEGIN
								SET @_Scores = (SELECT Score FROM tbl_ContactActivityScore WHERE ID=@Parameter AND ScoreCategory=0 AND SiteActivityScoreTypeID=CAST(@_Requisite AS uniqueidentifier))
								IF ((@_Formula = 7 AND @_Scores < @_Value)
									OR (@_Formula = 9 AND @_Scores <= @_Value)
									OR (@_Formula = 6 AND @_Scores > @_Value)
									OR (@_Formula = 8 AND @_Scores >= @_Value))
								BEGIN
									SET @Count = @Count + 1
								END
							END
							
							IF (@_Category=3) -- Балл по характеристикам
							BEGIN
								--SET @_Scores = (SELECT CharacteristicsScore FROM tbl_Contact WHERE ID=@Parameter)
								SET @_Scores = (SELECT Score FROM tbl_ContactActivityScore WHERE ID=@Parameter AND ScoreCategory=1 AND SiteActivityScoreTypeID=CAST(@_Requisite AS uniqueidentifier))
								IF ((@_Formula = 7 AND @_Scores < @_Value)
									OR (@_Formula = 9 AND @_Scores <= @_Value)
									OR (@_Formula = 6 AND @_Scores > @_Value)
									OR (@_Formula = 8 AND @_Scores >= @_Value))
								BEGIN
									SET @Count = @Count + 1
								END
							END
							
							DELETE #TmpConditionEvent WHERE ID=@_ConditionEventID
						END
						DROP TABLE #TmpConditionEvent
						
					
						IF (@CountConditionEvent<>0
							AND ((@_Condition=0 AND @CountConditionEvent=@Count)
							OR (@_Condition=1 AND @Count>0)
							OR (@_Condition=2 AND @Count>=@_ActivityCount)
							))
						BEGIN
							EXEC WorkflowProcessing @_WorkflowElementID, 1
						END
						
						END
		END
		
		DELETE #TmpWorkflowElement WHERE ID=@_WorkflowElementID
	END
	DROP TABLE #TmpWorkflowElement
END'

commit
exec LBC_SetVersion 227
END

/*******************************************************************************
	2012-06-21
	Обновление модуля Процессы
*******************************************************************************/
if ( dbo.LBC_Version() < 228 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[WorkflowProcessing]
(
	@_WorkflowElementID uniqueidentifier, -- Входящий элемент
	@_StartElementResult nvarchar(255) = NULL -- Результат выполнения элемента процесса
)
AS
BEGIN
	DECLARE @_SiteID uniqueidentifier
	DECLARE @_WorkflowStartDate datetime
	DECLARE @_WorkflowID uniqueidentifier
	DECLARE @_WorkflowTemplateContactID uniqueidentifier
	DECLARE @_WorkflowTemplateElementID uniqueidentifier
	DECLARE @_WorkflowParameterID uniqueidentifier
	DECLARE @_ControlDate datetime
	DECLARE @_WorkflowElementStatus int = 0
	DECLARE @_WorkflowStatus int = 0
	DECLARE @_WorkflowResult nvarchar(255)
	DECLARE @_MassWorkflowID uniqueidentifier = NULL
	DECLARE @_ElementType int
	DECLARE @_EndDateElement datetime = GETDATE()
	
	DECLARE @_StartAfter int
	DECLARE @_StartPeriod int
	DECLARE @_DurationHours int
	DECLARE @_DurationMinutes int
	DECLARE @_ControlAfter int
	DECLARE @_ControlPeriod int
	DECLARE @_ControlFromBeginProccess bit
	
	SELECT @_WorkflowID=w.WorkflowID,
		   @_WorkflowTemplateElementID=w.WorkflowTemplateElementID,
		   @_ControlDate=w.ControlDate,
		   @_WorkflowTemplateContactID=wt.ContactID,
		   @_WorkflowStatus=wf.[Status],
		   @_ElementType=t.ElementType
		   --@_StartAfter=t.StartAfter,
		   --@_StartPeriod=t.StartPeriod,
		   --@_ControlAfter=t.ControlAfter,
		   --@_ControlPeriod=t.ControlPeriod,
		   --@_ControlFromBeginProccess=t.ControlFromBeginProccess
	FROM tbl_WorkflowElement AS w
	LEFT JOIN tbl_WorkflowTemplateElement AS t ON t.ID=w.WorkflowTemplateElementID
	LEFT JOIN tbl_WorkflowTemplate AS wt ON wt.ID=t.WorkflowTemplateID
	LEFT JOIN tbl_Workflow AS wf ON wf.ID=w.WorkflowID
	WHERE w.ID=@_WorkflowElementID AND (t.ElementType<>1 OR (t.ElementType=1 AND w.[Status]=0))
	
	SELECT @_SiteID=SiteID, @_WorkflowStartDate=StartDate, @_MassWorkflowID=MassWorkflowID
	FROM tbl_Workflow
	WHERE ID=@_WorkflowID
	
IF (@_WorkflowStatus=0)
BEGIN	
	
	-- Выбираем все элементы по связям, где входящий элемент является начальным
	-- и с выходящим результатом
	SELECT EndElementID
	INTO #WorkflowTemplateElementRelation
	FROM tbl_WorkflowTemplateElementRelation
	WHERE StartElementID=@_WorkflowTemplateElementID AND (StartElementResult=@_StartElementResult OR @_StartElementResult IS NULL)
	
	-- Если выходы с элемента есть
	IF ((SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0)
	BEGIN
		SET @_WorkflowElementStatus = 1
		
		IF (@_StartElementResult=0 AND @_ElementType=2) -- Событие не произошло (просрочен)
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
		
		-- Входящий элемент не просрочен
		IF (
			((@_ControlDate IS NULL) OR (@_ControlDate > GETDATE()))
			OR (@_ElementType = 2) -- Ожидание события
			)
		BEGIN
					WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0
					BEGIN
						SELECT TOP 1 @_WorkflowTemplateElementID=EndElementID
						FROM #WorkflowTemplateElementRelation
						
						IF ((SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND WorkflowTemplateElementID=@_WorkflowTemplateElementID) = 0)
						BEGIN
							DECLARE @_WorkflowTemplateElementType int
							DECLARE @_WorkflowTemplateElementName nvarchar(255)
							DECLARE @_IsActive bit
							SELECT @_WorkflowTemplateElementType=ElementType, @_WorkflowTemplateElementName=Name, @_IsActive=IsActive
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							DECLARE @_InsertedWorkflowElementID uniqueidentifier = NEWID()
							
							SELECT @_StartAfter=StartAfter,
								   @_StartPeriod=StartPeriod,
								   @_DurationHours=DurationHours,
								   @_DurationMinutes=DurationMinutes,
								   @_ControlAfter=ControlAfter,
								   @_ControlPeriod=ControlPeriod,
								   @_ControlFromBeginProccess=ControlFromBeginProccess
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							-- Тип элемента "Окончание процесса"
							IF (@_WorkflowTemplateElementType=6)
							BEGIN
								-- Если нет больше элементов со статусов в Ожидании (кроме текущего), завершаем процесс
								IF (SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND [Status]=0) = 1
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 1)
									
									UPDATE tbl_Workflow
									SET EndDate=GETDATE(), [Status]=1
									WHERE ID=@_WorkflowID
									
									-- Программа развития "Завершена"
									IF (@_MassWorkflowID IS NOT NULL)
									BEGIN
										IF (SELECT COUNT(*)
										FROM tbl_Workflow
										WHERE MassWorkflowID=@_MassWorkflowID AND [Status]=0) = 0
										BEGIN
											UPDATE tbl_MassWorkflow
											SET [Status]=2
											WHERE ID=@_MassWorkflowID
										END
									END
								END
							END
							
							-- определяем параметер
							SET @_WorkflowParameterID =
							(SELECT tbl_WorkflowParameter.[Value]
							FROM tbl_WorkflowParameter
							LEFT JOIN tbl_WorkflowTemplateParameter ON tbl_WorkflowTemplateParameter.ID=tbl_WorkflowParameter.WorkflowTemplateParameterID
							WHERE tbl_WorkflowParameter.WorkflowID=@_WorkflowID
								  AND tbl_WorkflowTemplateParameter.Name=N''Контакт''
								  AND tbl_WorkflowTemplateParameter.IsSystem=1)
								  
							-- определяем через сколько запускать элемент, если 0 то сразу
							DECLARE @_ActionDate datetime = GETDATE()
							IF (@_StartAfter <> 0)
							BEGIN
								SET @_ActionDate = CASE
									WHEN @_StartPeriod = 0 THEN DATEADD(minute, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 1 THEN DATEADD(hour, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 2 THEN DATEADD(day, @_StartAfter, @_ActionDate)
								END
							END
							
							-- дата контроля
							SET @_ControlDate = GETDATE()
							IF (@_ControlFromBeginProccess=1) -- От начала процесса
							BEGIN
								SET @_ControlDate = @_WorkflowStartDate
							END
							
							SET @_ControlDate = CASE
								WHEN @_ControlPeriod = 0 THEN DATEADD(minute, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 1 THEN DATEADD(hour, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 2 THEN DATEADD(day, @_ControlAfter, @_ControlDate)
							END
							
							
							-- Тип элемента "Сообщение"
							IF (@_WorkflowTemplateElementType = 0)
							BEGIN
								-- Начало добавления сообщения в очередь
								DECLARE @_SiteActionTemplateID uniqueidentifier = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActionTemplateID'')
								
								DECLARE @MessageTitle nvarchar(255)
								DECLARE @MessageText nvarchar(max)
								SELECT @MessageTitle=MessageCaption, @MessageText=MessageBody
								FROM tbl_SiteActionTemplate
								WHERE ID=@_SiteActionTemplateID
								
								DECLARE @_SiteActionID uniqueidentifier = NEWID()
								INSERT INTO tbl_SiteAction (ID, SiteID, SiteActionTemplateID, ContactID, ActionStatusID, ActionDate, MessageTitle, MessageText)
								VALUES (@_SiteActionID, @_SiteID, @_SiteActionTemplateID, @_WorkflowParameterID, 1, @_ActionDate, @MessageTitle, @MessageText)
								-- Конец добавления сообщения в очередь
								
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_SiteActionID)
							END
							
							-- Тип элемента "Ожидание события"
							IF (@_WorkflowTemplateElementType = 2)
							BEGIN
								IF (@_ControlAfter<>0)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], ControlDate)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_ControlDate)
								END
								ELSE
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0)
								END
							END
							
							-- Тип элемента "Действие"
							IF (@_WorkflowTemplateElementType = 3)
							BEGIN
								-- Начало добавления действия
								DECLARE @_ContactActivityDescription nvarchar(255) = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ContactActivityDescription'')
								
								DECLARE @_ContactActivityID uniqueidentifier = NEWID()
								INSERT INTO tbl_ContactActivity (ID, SiteID, ContactID, CreatedAt, ActivityTypeID, ActivityCode)
								VALUES (@_ContactActivityID, @_SiteID, @_WorkflowParameterID, GETDATE(), 13, @_ContactActivityDescription)
								-- Конец добавления действия
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1, @_ContactActivityID)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Задача"
							IF (@_WorkflowTemplateElementType = 1)
							BEGIN
								-- Начало добавления задачи
								DECLARE @_TaskID uniqueidentifier = NEWID()
								DECLARE @_TaskTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskType'') AS uniqueidentifier)
								
								DECLARE @_IsImportantTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsImportantTask'') AS bit)
								
								DECLARE @_IsUrgentTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsUrgentTask'') AS bit)
								
								DECLARE @_TaskEndDate datetime = @_ActionDate
								SET @_TaskEndDate = DATEADD(hour, @_DurationHours, @_TaskEndDate)
								SET @_TaskEndDate = DATEADD(minute, @_DurationMinutes, @_TaskEndDate)
								INSERT INTO tbl_Task (ID, SiteID, Title, TaskTypeID, StartDate, EndDate, DateOfControl, IsImportantTask, PlanDurationMinutes, PlanDurationHours, ResponsibleID, CreatorID, IsUrgentTask, TaskStatusID)
								VALUES (@_TaskID, @_SiteID, @_WorkflowTemplateElementName, @_TaskTypeID, @_ActionDate, @_TaskEndDate, @_ControlDate, @_IsImportantTask, @_DurationMinutes, @_DurationHours, @_WorkflowTemplateContactID, @_WorkflowTemplateContactID, @_IsUrgentTask, 1)
								-- Конец добавления задачи
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, ControlDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), @_ControlDate, 0, @_TaskID)
							END
							
							-- Тип элемента "Сегментация"
							IF (@_WorkflowTemplateElementType = 7)
							BEGIN
								SELECT ID
								INTO #WorkflowTemplateElementTag
								FROM tbl_WorkflowTemplateElementTag
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID
								
								DECLARE @_WorkflowTemplateElementTagID uniqueidentifier
								DECLARE @_SiteTagID uniqueidentifier
								DECLARE @_Operation int
								WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementTag) > 0
								BEGIN
									SELECT TOP 1 @_WorkflowTemplateElementTagID=ID
									FROM #WorkflowTemplateElementTag
									
									SELECT @_SiteTagID=SiteTagID, @_Operation=Operation
									FROM tbl_WorkflowTemplateElementTag
									WHERE ID=@_WorkflowTemplateElementTagID
									
									IF (@_Operation = 0)
									BEGIN
										DELETE FROM tbl_SiteTagObjects
										WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID
									END
									ELSE
									BEGIN
										IF (SELECT COUNT(*) FROM tbl_SiteTagObjects WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID) = 0
										BEGIN
											INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID)
											VALUES (@_SiteTagID, @_WorkflowParameterID)
										END
									END
									
									DELETE #WorkflowTemplateElementTag WHERE ID=@_WorkflowTemplateElementTagID
								END
								DROP TABLE #WorkflowTemplateElementTag

								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Скорринг"
							IF (@_WorkflowTemplateElementType = 8)
							BEGIN
								-- Начало добавления баллов
								--DECLARE @_SiteActivityScoreTypeID uniqueidentifier = NEWID()
								DECLARE @_SiteActivityScoreTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActivityScoreType'') AS uniqueidentifier)
								
								DECLARE @_ScoreCategory int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreCategory'') AS int)
								
								DECLARE @_ScoreOperation int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreOperation'') AS int)
								
								DECLARE @_AddedScore int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''AddedScore'') AS int)
								
								-- есть балл такого типа и такой категории
								DECLARE @_ContactActivityScoreID uniqueidentifier
								DECLARE @_oldScore int
								
								SELECT @_ContactActivityScoreID=ID, @_oldScore=Score
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								
								IF (@_ContactActivityScoreID IS NOT NULL)
								BEGIN
									DECLARE @_newScore int = CASE @_ScoreOperation
															 WHEN 0 THEN @_AddedScore -- (=)
															 WHEN 1 THEN @_oldScore + @_AddedScore -- (+)
															 WHEN 2 THEN @_oldScore - @_AddedScore -- (-)
															 WHEN 3 THEN @_oldScore * @_AddedScore -- (*)
															 END
									UPDATE tbl_ContactActivityScore
									SET Score=@_newScore
									WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								END
								ELSE
								BEGIN
									SET @_ContactActivityScoreID = NEWID()
									
									INSERT INTO tbl_ContactActivityScore (ID, SiteID, SiteActivityScoreTypeID, ContactID, Score, ScoreCategory)
									VALUES (@_ContactActivityScoreID, @_SiteID, @_SiteActivityScoreTypeID, @_WorkflowParameterID, @_AddedScore, @_ScoreCategory)
								END
								
								INSERT INTO tbl_ContactActivityScoreHistory (ContactActivityScoreID, Operation, Score, ActivityDate, Comment)
								VALUES (@_ContactActivityScoreID, @_ScoreOperation, @_AddedScore, GETDATE(), @_InsertedWorkflowElementID)
								-- Конец добавления баллов
								
								-- Начало обновления баллов контакта
								DECLARE @maxScoreTable TABLE
								(
									Score int,
									ScoreTypeID uniqueidentifier
								)

								INSERT INTO @maxScoreTable (Score, ScoreTypeID)
								SELECT TOP 1 SUM(Score) AS scoresum, SiteActivityScoreTypeID
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID
								GROUP BY SiteActivityScoreTypeID
								ORDER BY scoresum DESC

								DECLARE @_BehaviorScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=0 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								DECLARE @_CharacteristicsScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=1 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								IF (@_BehaviorScore IS NOT NULL)
								BEGIN
									DECLARE @_minScoreReadyToSell int = (SELECT MIN(MinScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									DECLARE @_maxScoreReadyToSell int = (SELECT MAX(MaxScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									
									IF (@_BehaviorScore < @_minScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_minScoreReadyToSell
									END
									IF (@_BehaviorScore > @_maxScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_maxScoreReadyToSell
									END

									UPDATE tbl_Contact
									SET BehaviorScore=@_BehaviorScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET ReadyToSellID=(SELECT TOP 1 ID FROM tbl_ReadyToSell WHERE SiteID=@_SiteID AND (@_BehaviorScore >= MinScore AND @_BehaviorScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								IF (@_CharacteristicsScore IS NOT NULL)
								BEGIN
									DECLARE @_minScorePriority int = (SELECT MIN(MinScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									DECLARE @_maxScorePriority int = (SELECT MAX(MaxScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									
									IF (@_CharacteristicsScore < @_minScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_minScorePriority
									END
									IF (@_CharacteristicsScore > @_maxScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_maxScorePriority
									END

									UPDATE tbl_Contact
									SET CharacteristicsScore=@_CharacteristicsScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET PriorityID=(SELECT TOP 1 ID FROM tbl_Priorities WHERE SiteID=@_SiteID AND (@_CharacteristicsScore >= MinScore AND @_CharacteristicsScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								UPDATE tbl_Contact
								SET Score= BehaviorScore + CharacteristicsScore
								WHERE ID=@_WorkflowParameterID
								-- Конец обновления баллов контакта
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
						END
						
						DELETE #WorkflowTemplateElementRelation WHERE EndElementID=@_WorkflowTemplateElementID
					END
					DROP TABLE #WorkflowTemplateElementRelation
		END
		-- Входящие элемент просрочен
		ELSE
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
	END
	-- Если нет выходов с элемента
	ELSE
	BEGIN
		SET @_WorkflowElementStatus = 2
		
		-- Если ошибка элемента и нет больше элементов в ожидании
		IF (SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND [Status]=0) = 1
		BEGIN
			UPDATE tbl_Workflow
			SET EndDate=GETDATE(), [Status]=3
			WHERE ID=@_WorkflowID
		END
	END
	
	
	-- Обновление статуса элемента процесса
	UPDATE tbl_WorkflowElement
	SET EndDate=@_EndDateElement,
		[Status]=@_WorkflowElementStatus,
		Result=@_StartElementResult
	WHERE ID=@_WorkflowElementID
	
END	
END'

commit
exec LBC_SetVersion 228
END

/*******************************************************************************
	2012-06-25
	Стили для кнопки формы
*******************************************************************************/
if ( dbo.LBC_Version() < 229 )
BEGIN
begin tran

ALTER TABLE [dbo].[tbl_SiteActivityRules] ADD [CSSButton] nvarchar(500) NULL

commit
exec LBC_SetVersion 229
END


/*******************************************************************************
	2012-07-04
	Изменение типа поля
*******************************************************************************/
if ( dbo.LBC_Version() < 230 )
BEGIN
begin tran

ALTER TABLE tbl_RequestHistory ALTER COLUMN ResponsibleID uniqueidentifier NULL

commit
exec LBC_SetVersion 230
END


/*******************************************************************************
	2012-07-06
	Добавлен крон
*******************************************************************************/
if ( dbo.LBC_Version() < 231 )
BEGIN
begin tran

INSERT [dbo].[tbl_CronJob] ([ID], [Name], [Assembly], [Type], [Period], [LastRunAt], [LastRunStatusID], [NextRunPlannedAt]) 
VALUES (N'55aae932-5773-4424-8530-92935a4153cd', N'SendMail', N'Labitec.LeadForce.CronJobs.dll', N'Labitec.LeadForce.CronJobs.SendMailJob', 5, CAST(0x0000A08600DDC150 AS DateTime), 0, CAST(0x0000A01C015C1B41 AS DateTime))

commit
exec LBC_SetVersion 231
END

/*******************************************************************************
	2012-07-10
	Исправление открытия опросных форм
*******************************************************************************/
if ( dbo.LBC_Version() < 232 )
BEGIN
begin tran

SELECT tbl_SiteColumns.ID, tbl_SiteActivityRuleLayout.SiteActivityRuleID
INTO #SiteActivityRuleLayoutTemp
FROM tbl_SiteActivityRuleLayout
LEFT JOIN tbl_SiteColumns ON tbl_SiteColumns.ID=tbl_SiteActivityRuleLayout.SiteColumnID
WHERE tbl_SiteActivityRuleLayout.LayoutType=3
AND tbl_SiteColumns.SiteActivityRuleID='00000000-0000-0000-0000-000000000000'

DECLARE @SiteColumnID uniqueidentifier
DECLARE @SiteActivityRuleID uniqueidentifier
WHILE (SELECT COUNT(*) FROM #SiteActivityRuleLayoutTemp) > 0
BEGIN
	SELECT TOP 1 @SiteColumnID=ID, @SiteActivityRuleID=SiteActivityRuleID FROM #SiteActivityRuleLayoutTemp
	
	UPDATE tbl_SiteColumns
	SET SiteActivityRuleID=@SiteActivityRuleID
	WHERE ID=@SiteColumnID

	DELETE #SiteActivityRuleLayoutTemp WHERE ID=@SiteColumnID
END

DROP TABLE #SiteActivityRuleLayoutTemp

commit
exec LBC_SetVersion 232
END


/*******************************************************************************
	2012-07-10
	Фикс истории для требований
*******************************************************************************/
if ( dbo.LBC_Version() < 233 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[API_UpdateRequirement]
	(
		@SiteID uniqueidentifier, 
		@UserID uniqueidentifier,   
	    @ParamsXml xml
	)
AS
BEGIN
	DECLARE @IsNew int = 0
	
	DECLARE @OldRequirementStatusID uniqueidentifier = NULL
	DECLARE @OldResponsibleID uniqueidentifier = NULL
	
	DECLARE @AuthorID uniqueidentifier = NULL
	SET @AuthorID = (SELECT TOP 1 ContactID FROM tbl_User WHERE ID = @UserID)

	DECLARE @RequirementID uniqueidentifier = NULL
	SET @RequirementID = @ParamsXml.value(''(/LeadForceRequest/Requirement/@RequirementID)[1]'',''uniqueidentifier'')
	
	IF @RequirementID IS NULL
	    RETURN 0
	    
	DECLARE @ParentID uniqueidentifier = NULL
	SET @ParentID = @ParamsXml.value(''(/LeadForceRequest/Requirement/@ParentID)[1]'',''uniqueidentifier'')
	
	DECLARE @Status nvarchar(256) = NULL
	SET @Status = @ParamsXml.value(''(/LeadForceRequest/Requirement/Status)[1]'',''nvarchar(256)'')
	DECLARE @RequirementStatusID uniqueidentifier = NULL	
	IF @Status IS NOT NULL AND @Status <> ''''
	    SELECT TOP 1 @RequirementStatusID = ID FROM tbl_RequirementStatus WHERE Title = @Status AND SiteID = @SiteID
	
	DECLARE @Responsible nvarchar(255) = NULL
	SET @Responsible = @ParamsXml.value(''(/LeadForceRequest/Requirement/Responsible)[1]'',''nvarchar(255)'')
	DECLARE @ResponsibleID uniqueidentifier = NULL	
	IF @Responsible IS NOT NULL AND @Responsible <> ''''
	    SELECT TOP 1 @ResponsibleID = ID FROM tbl_Contact WHERE UserFullName = @Responsible AND SiteID = @SiteID
	    
	DECLARE @RealizationDatePlanned datetime = NULL
	SET @RealizationDatePlanned = @ParamsXml.value(''(/LeadForceRequest/Requirement/RealizationDatePlanned)[1]'',''datetime'')
	
	DECLARE @RealizationDateActual datetime = NULL
	SET @RealizationDateActual = @ParamsXml.value(''(/LeadForceRequest/Requirement/RealizationDateActual)[1]'',''datetime'')
	
	DECLARE @ShortDescription nvarchar(2048) = NULL
	SET @ShortDescription = @ParamsXml.value(''(/LeadForceRequest/Requirement/ShortDescription)[1]'',''nvarchar(2048)'')
	
    DECLARE @RequestSourceType nvarchar(256) = NULL
	SET @RequestSourceType = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/RequestType)[1]'',''nvarchar(256)'')
	DECLARE @RequestSourceTypeID uniqueidentifier = NULL	
	IF @RequestSourceType IS NOT NULL AND @RequestSourceType <> ''''
	    SELECT TOP 1 @RequestSourceTypeID = ID FROM tbl_RequestSourceType WHERE Title = @RequestSourceType AND SiteID = @SiteID
	    
	DECLARE @Request nvarchar(256) = NULL
	SET @Request = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/Request)[1]'',''nvarchar(256)'')
	DECLARE @RequestID uniqueidentifier = NULL	
	IF @Request IS NOT NULL AND @Request <> ''''
	    SELECT TOP 1 @RequestID = ID FROM tbl_Request WHERE Number = @Request AND SiteID = @SiteID
	    
	DECLARE @Company nvarchar(255) = NULL
	SET @Company = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/Company)[1]'',''nvarchar(255)'')
	DECLARE @CompanyID uniqueidentifier = NULL	
	IF @Company IS NOT NULL AND @Company <> ''''
	    SELECT TOP 1 @CompanyID = ID FROM tbl_Company WHERE Name = @Company AND SiteID = @SiteID

	DECLARE @Contact nvarchar(255) = NULL
	SET @Contact = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/Contact)[1]'',''nvarchar(255)'')
	DECLARE @ContactID uniqueidentifier = NULL	
	IF @Contact IS NOT NULL AND @Contact <> ''''
	    SELECT TOP 1 @ContactID = ID FROM tbl_Contact WHERE UserFullName = @Contact AND SiteID = @SiteID
	    
	DECLARE @Product nvarchar(250) = NULL
	SET @Product = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/Product)[1]'',''nvarchar(255)'')
	DECLARE @ProductID uniqueidentifier = NULL	
	IF @Product IS NOT NULL AND @Product <> ''''
	    SELECT TOP 1 @ProductID = ID FROM tbl_Product WHERE Title = @Product AND SiteID = @SiteID
	    
	DECLARE @ProductSeriesNumber nvarchar(256) = NULL
	SET @ProductSeriesNumber = @ParamsXml.value(''(/LeadForceRequest/Requirement/Source/ProductSeriesNumber)[1]'',''nvarchar(256)'')
	
	DECLARE @RequirementType nvarchar(256) = NULL
	SET @RequirementType = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/RequirementType)[1]'',''nvarchar(256)'')
	DECLARE @RequirementTypeID uniqueidentifier = NULL	
	IF @RequirementType IS NOT NULL AND @RequirementType <> ''''
	    SELECT TOP 1 @RequirementTypeID = ID FROM tbl_RequirementType WHERE Title = @RequirementType AND SiteID = @SiteID
	    
	DECLARE @ServiceLevel nvarchar(256) = NULL
	SET @ServiceLevel = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/ServiceLevel)[1]'',''nvarchar(256)'')
	DECLARE @ServiceLevelID uniqueidentifier = NULL	
	IF @ServiceLevel IS NOT NULL AND @ServiceLevel <> ''''
	    SELECT TOP 1 @ServiceLevelID = ID FROM tbl_ServiceLevel WHERE Title = @ServiceLevel AND SiteID = @SiteID
	    
	DECLARE @SeverityOfExposure nvarchar(256) = NULL
	SET @SeverityOfExposure = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/SeverityOfExposure)[1]'',''nvarchar(256)'')
	DECLARE @RequirementSeverityOfExposureID uniqueidentifier = NULL	
	IF @SeverityOfExposure IS NOT NULL AND @SeverityOfExposure <> ''''
	    SELECT TOP 1 @RequirementSeverityOfExposureID = ID FROM tbl_RequirementSeverityOfExposure WHERE Title = @SeverityOfExposure AND SiteID = @SiteID
	    
	DECLARE @Priority nvarchar(256) = NULL
	SET @Priority = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/Priority)[1]'',''nvarchar(256)'')
	DECLARE @RequirementPriorityID uniqueidentifier = NULL	
	IF @Priority IS NOT NULL AND @Priority <> ''''
	    SELECT TOP 1 @RequirementPriorityID = ID FROM tbl_RequirementPriority WHERE Title = @Priority AND SiteID = @SiteID	    
	    	    
	DECLARE @Complexity nvarchar(256) = NULL
	SET @Complexity = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/Complexity)[1]'',''nvarchar(256)'')
	DECLARE @RequirementComplexityID uniqueidentifier = NULL	
	IF @Complexity IS NOT NULL AND @Complexity <> ''''
	    SELECT TOP 1 @RequirementComplexityID = ID FROM tbl_RequirementComplexity WHERE Title = @Complexity AND SiteID = @SiteID
	
	DECLARE @Category nvarchar(250) = NULL
	SET @Category = @ParamsXml.value(''(/LeadForceRequest/Requirement/Classification/Category)[1]'',''nvarchar(250)'')
	DECLARE @PublicationCategoryID uniqueidentifier = NULL	
	IF @Category IS NOT NULL AND @Category <> ''''
	    SELECT TOP 1 @PublicationCategoryID = ID FROM tbl_PublicationCategory WHERE Title = @Category AND SiteID = @SiteID	    
	
	DECLARE @Contract nvarchar(256) = NULL
	SET @Contract = @ParamsXml.value(''(/LeadForceRequest/Requirement/Relationship/Contract)[1]'',''nvarchar(256)'')
	DECLARE @ContractID uniqueidentifier = NULL	
	IF @Contract IS NOT NULL AND @Contract <> ''''
	    SELECT TOP 1 @ContractID = ID FROM tbl_Contract WHERE Number = @Contract AND SiteID = @SiteID	    
	    
	DECLARE @Order nvarchar(256) = NULL
	SET @Order = @ParamsXml.value(''(/LeadForceRequest/Requirement/Relationship/Order)[1]'',''nvarchar(256)'')
	DECLARE @OrderID uniqueidentifier = NULL	
	IF @Order IS NOT NULL AND @Order <> ''''
	    SELECT TOP 1 @OrderID = ID FROM tbl_Order WHERE Number = @Order AND SiteID = @SiteID
			    
	DECLARE @Invoice nvarchar(256) = NULL
	SET @Invoice = @ParamsXml.value(''(/LeadForceRequest/Requirement/Relationship/Invoice)[1]'',''nvarchar(256)'')
	DECLARE @InvoiceID uniqueidentifier = NULL	
	IF @Invoice IS NOT NULL AND @Invoice <> ''''
	    SELECT TOP 1 @InvoiceID = ID FROM tbl_Invoice WHERE Number = @Invoice AND SiteID = @SiteID
	    
	DECLARE @ImplementationComplete nvarchar(256) = NULL
	SET @ImplementationComplete = @ParamsXml.value(''(/LeadForceRequest/Requirement/ClientReview/ImplementationComplete)[1]'',''nvarchar(256)'')
	DECLARE @RequirementImplementationCompleteID uniqueidentifier = NULL	
	IF @ImplementationComplete IS NOT NULL AND @ImplementationComplete <> ''''
	    SELECT TOP 1 @RequirementImplementationCompleteID = ID FROM tbl_RequirementImplementationComplete WHERE Title = @ImplementationComplete AND SiteID = @SiteID
	
	DECLARE @SpeedTime nvarchar(256) = NULL
	SET @SpeedTime = @ParamsXml.value(''(/LeadForceRequest/Requirement/ClientReview/SpeedTime)[1]'',''nvarchar(256)'')
	DECLARE @RequirementSpeedTimeID uniqueidentifier = NULL	
	IF @SpeedTime IS NOT NULL AND @SpeedTime <> ''''
	    SELECT TOP 1 @RequirementSpeedTimeID = ID FROM tbl_RequirementSpeedTime WHERE Title = @SpeedTime AND SiteID = @SiteID
	    		
	DECLARE @Satisfaction nvarchar(256) = NULL
	SET @Satisfaction = @ParamsXml.value(''(/LeadForceRequest/Requirement/ClientReview/Satisfaction)[1]'',''nvarchar(256)'')
	DECLARE @RequirementSatisfactionID uniqueidentifier = NULL	
	IF @Satisfaction IS NOT NULL AND @Satisfaction <> ''''
	    SELECT TOP 1 @RequirementSatisfactionID = ID FROM tbl_RequirementSatisfaction WHERE Title = @Satisfaction AND SiteID = @SiteID
 
 	DECLARE @EstimationComment nvarchar(2048) = NULL
	SET @EstimationComment = @ParamsXml.value(''(/LeadForceRequest/Requirement/ClientReview/Comment)[1]'',''nvarchar(2048)'')
	
	DECLARE @EvaluationRequirementsProduct nvarchar(250) = NULL
	SET @EvaluationRequirementsProduct = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Product)[1]'',''nvarchar(255)'')
	DECLARE @EvaluationRequirementsProductID uniqueidentifier = NULL	
	IF @EvaluationRequirementsProduct IS NOT NULL AND @EvaluationRequirementsProduct <> ''''
	    SELECT TOP 1 @EvaluationRequirementsProductID = ID FROM tbl_Product WHERE Title = @EvaluationRequirementsProduct AND SiteID = @SiteID
 
	DECLARE @AnyProductName nvarchar(255) = NULL
	SET @AnyProductName = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/AnyProductName)[1]'',''nvarchar(255)'')
	
	DECLARE @Quantity decimal(18,4) = 0
	SET @Quantity = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Quantity)[1]'',''decimal(18,4)'')
 
 	DECLARE @Unit nvarchar(50) = NULL
	SET @Unit = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Unit)[1]'',''nvarchar(50)'')
	DECLARE @UnitID uniqueidentifier = NULL	
	IF @Unit IS NOT NULL AND @Unit <> ''''
	    SELECT TOP 1 @UnitID = ID FROM tbl_Unit WHERE Title = @Unit AND SiteID = @SiteID
	    
	DECLARE @Currency nvarchar(255) = NULL
	SET @Currency = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Currency)[1]'',''nvarchar(255)'')
	DECLARE @CurrencyID uniqueidentifier = NULL	
	IF @Currency IS NOT NULL AND @Currency <> ''''
	    SELECT TOP 1 @CurrencyID = ID FROM tbl_Currency WHERE Name = @Currency AND SiteID = @SiteID
	    
	DECLARE @Rate money = 1
	SET @Rate = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Quantity)[1]'',''money'')
	
	SET @Rate = (CASE WHEN @Rate = 0 THEN 1 ELSE @Rate END)
	
	DECLARE @CurrencyPrice money = 0
	SET @CurrencyPrice = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/CurrencyPrice)[1]'',''money'')
		
	DECLARE @CurrencyAmount money = 0
	SET @CurrencyAmount = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/CurrencyAmount)[1]'',''money'')
	
	DECLARE @Price money = 0
	SET @Price = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Price)[1]'',''money'')	
	
	DECLARE @Amount money = 0
	SET @Amount = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Amount)[1]'',''money'')
	
	DECLARE @EstimateCommentForClient nvarchar(2048) = 0
	SET @EstimateCommentForClient = @ParamsXml.value(''(/LeadForceRequest/Requirement/EstimateForClient/Comment)[1]'',''nvarchar(2048)'')
	    
	DECLARE @InternalQuantity decimal(18,4) = 0
	SET @InternalQuantity = @ParamsXml.value(''(/LeadForceRequest/Requirement/InternalEstimate/Quantity)[1]'',''decimal(18,4)'')
 
 	DECLARE @InternalUnit nvarchar(50) = NULL
	SET @InternalUnit = @ParamsXml.value(''(/LeadForceRequest/Requirement/InternalEstimate/Unit)[1]'',''nvarchar(50)'')
	DECLARE @InternalUnitID uniqueidentifier = NULL	
	IF @InternalUnit IS NOT NULL AND @InternalUnit <> ''''
	    SELECT TOP 1 @InternalUnitID = ID FROM tbl_Unit WHERE Title = @InternalUnit AND SiteID = @SiteID    
	    
	DECLARE @EstimateCommentInternal nvarchar(2048) = 0
	SET @EstimateCommentInternal = @ParamsXml.value(''(/LeadForceRequest/Requirement/InternalEstimate/Comment)[1]'',''nvarchar(2048)'')	    
	    	    
	IF (SELECT COUNT(*) FROM tbl_Requirement WHERE ID = @RequirementID AND SiteID = @SiteID) = 0
    BEGIN	    
	    INSERT [dbo].[tbl_Requirement] (
			[ID], 
			[SiteID], 
			[Number], 
			[SerialNumber], 
			[CreatedAt], 
			[ShortDescription], 
			[RequestID], 
			[CompanyID], 
			[ContactID], 
			[ProductID], 
			[ProductSeriesNumber], 
			[RequirementTypeID], 
			[ServiceLevelID], 
			[RequirementSeverityOfExposureID], 
			[ParentID], 
			[RequirementPriorityID], 
			[RequirementComplexityID], 
			[PublicationCategoryID], 
			[RequirementStatusID], 
			[ResponsibleID], 
			[RealizationDatePlanned], 
			[RealizationDateActual], 
			[ContractID], 
			[OrderID], 
			[InvoiceID], 
			[EvaluationRequirementsProductID], 
			[AnyProductName], 
			[Quantity], 
			[UnitID], 
			[CurrencyID], 
			[Rate], 
			[CurrencyPrice], 
			[CurrencyAmount], 
			[Price], 
			[Amount], 
			[RequirementImplementationCompleteID], 
			[RequirementSpeedTimeID], 
			[RequirementSatisfactionID], 
			[EstimationComment], 	    
			[RequestSourceTypeID], 
			[InternalQuantity], 
			[InternalUnitID], 
			[EstimateCommentInternal], 
			[EstimateCommentForClient]) 
	    VALUES (
			@RequirementID, 
			@SiteID, 
			'''', 
			0, 
			GETDATE(), 
			@ShortDescription, 
			@RequestID, 
			@CompanyID, 
			@ContactID, 
			@ProductID, 
			@ProductSeriesNumber, 
			@RequirementTypeID, 
			@ServiceLevelID,
			@RequirementSeverityOfExposureID, 
			@ParentID,
			@RequirementPriorityID,
			@RequirementComplexityID, 
			@PublicationCategoryID, 
			@RequirementStatusID, 
			@ResponsibleID, 
			@RealizationDatePlanned, 
			@RealizationDateActual, 
			@ContractID, 
			@OrderID, 
			@InvoiceID, 
			@EvaluationRequirementsProductID, 
			@AnyProductName, 
			@Quantity, 
			@UnitID, 
			@CurrencyID, 
			@Rate, 
			@CurrencyPrice, 
			@CurrencyAmount, 
			@Price, 
			@Amount, 
			@RequirementImplementationCompleteID, 
			@RequirementSpeedTimeID, 
			@RequirementSatisfactionID, 
			@EstimationComment, 	    
			@RequestSourceTypeID, 
			@InternalQuantity, 
			@InternalUnitID, 
			@EstimateCommentInternal,
			@EstimateCommentForClient
	    )
	    
	    SET @IsNew = 1
	    
	    INSERT [dbo].[tbl_RequirementHistory] ([ID], [RequirementID], [CreatedAt], [RequirementStatusID], [ContactID], [ResponsibleID]) 
	    VALUES (newid(), @RequirementID, getdate(), @RequirementStatusID, @AuthorID, @ResponsibleID)
	END
	ELSE
	BEGIN
		SELECT @OldRequirementStatusID = RequirementStatusID, @OldResponsibleID = ResponsibleID
		FROM tbl_Requirement
		WHERE ID = @RequirementID AND SiteID = @SiteID					
	
		UPDATE tbl_Requirement
		SET [ShortDescription] = @ShortDescription, 
			[RequestID] = @RequestID, 
			[CompanyID] = @CompanyID, 
			[ContactID] = @ContactID, 
			[ProductID] = @ProductID, 
			[ProductSeriesNumber] = @ProductSeriesNumber, 
			[RequirementTypeID] = @RequirementTypeID, 
			[ServiceLevelID] = @ServiceLevelID, 
			[RequirementSeverityOfExposureID] = @RequirementSeverityOfExposureID, 
			[ParentID] = @ParentID, 
			[RequirementPriorityID] = @RequirementPriorityID, 
			[RequirementComplexityID] = @RequirementComplexityID, 
			[PublicationCategoryID] = @PublicationCategoryID, 
			[RequirementStatusID] = @RequirementStatusID, 
			[ResponsibleID] = @ResponsibleID, 
			[RealizationDatePlanned] = @RealizationDatePlanned, 
			[RealizationDateActual] = @RealizationDateActual, 
			[ContractID] = @ContractID, 
			[OrderID] = @OrderID, 
			[InvoiceID] = @InvoiceID, 
			[EvaluationRequirementsProductID] = @EvaluationRequirementsProductID, 
			[AnyProductName] = @AnyProductName, 
			[Quantity] = @Quantity, 
			[UnitID] = @UnitID, 
			[CurrencyID] = @CurrencyID, 
			[Rate] = @Rate, 
			[CurrencyPrice] = @CurrencyPrice, 
			[CurrencyAmount] = @CurrencyAmount, 
			[Price] = @Price, 
			[Amount] = @Amount, 
			[RequirementImplementationCompleteID] = @RequirementImplementationCompleteID, 
			[RequirementSpeedTimeID] = @RequirementSpeedTimeID, 
			[RequirementSatisfactionID] = @RequirementSatisfactionID, 
			[EstimationComment] = @EstimationComment,
			[RequestSourceTypeID] = @RequestSourceTypeID, 
			[InternalQuantity] = @InternalQuantity, 
			[InternalUnitID] = @InternalUnitID, 
			[EstimateCommentInternal] = @EstimateCommentInternal, 
			[EstimateCommentForClient] = @EstimateCommentForClient
		WHERE ID = @RequirementID AND SiteID = @SiteID			
		
		IF @OldRequirementStatusID <> @RequirementStatusID OR @OldResponsibleID <> @ResponsibleID
			INSERT [dbo].[tbl_RequirementHistory] ([ID], [RequirementID], [CreatedAt], [RequirementStatusID], [ContactID], [ResponsibleID]) 
			VALUES (newid(), @RequirementID, getdate(), @RequirementStatusID, @AuthorID, @ResponsibleID)				
	END
	
	DECLARE @CommentID uniqueidentifier
	DECLARE @CommentatorUserID uniqueidentifier
	DECLARE @Comment nvarchar(max)
	DECLARE @IsOfficialAnswer bit
	DECLARE @DestinationUserID uniqueidentifier
	DECLARE @ReplyToID uniqueidentifier
	
	DECLARE @Comments_Cursor xml
	DECLARE Comments_Cursor CURSOR FOR
	SELECT T.c.query(''.'') AS result
	FROM   @ParamsXml.nodes(''/LeadForceRequest/Requirement/Comments/Comment'') T(c)
	OPEN Comments_Cursor
	FETCH NEXT FROM Comments_Cursor INTO @Comments_Cursor
	WHILE @@FETCH_STATUS = 0
	BEGIN	
		SET @CommentID =null
		SET @CommentatorUserID = null		
		SET @IsOfficialAnswer = 0
		SET @DestinationUserID = null
		SET @ReplyToID = null
		SET @Comment = null			
				
		SET @CommentID = @Comments_Cursor.value(''(/Comment/@CommentID)[1]'',''uniqueidentifier'')
		SET @CommentatorUserID = @Comments_Cursor.value(''(/Comment/@UserID)[1]'',''uniqueidentifier'')
		SET @IsOfficialAnswer = @Comments_Cursor.value(''(/Comment/@IsOfficialAnswer)[1]'',''bit'')
		SET @DestinationUserID = @Comments_Cursor.value(''(/Comment/@DestinationUserID)[1]'',''uniqueidentifier'')
		SET @ReplyToID = @Comments_Cursor.value(''(/Comment/@ReplyToID)[1]'',''uniqueidentifier'')
		SET @Comment = @Comments_Cursor.value(''(/Comment/Text)[1]'',''nvarchar(max)'')
		
		IF @CommentatorUserID IS NULL
			SET @CommentatorUserID = @UserID

		IF @IsOfficialAnswer IS NULL
			SET @IsOfficialAnswer = 0
		
		IF @CommentID IS NOT NULL AND (SELECT COUNT(*) FROM tbl_RequirementComment WHERE ID = @CommentID AND ContentID = @RequirementID) = 0
		BEGIN
			INSERT INTO tbl_RequirementComment ([ID], [SiteID], [CreatedAt], [ContentID], [UserID], [Comment], [IsOfficialAnswer], [DestinationUserID], [ReplyToID])
			VALUES (@CommentID, @SiteID, GETDATE(), @RequirementID, @CommentatorUserID, @Comment, @IsOfficialAnswer, @DestinationUserID, @ReplyToID)
		END
		ELSE
		BEGIN
			UPDATE tbl_RequirementComment
			SET [Comment] = @Comment, [IsOfficialAnswer] = @IsOfficialAnswer
			WHERE ContentID = @RequirementID AND ID = @CommentID
		END
		
		FETCH NEXT FROM Comments_Cursor INTO @Comments_Cursor
	END
	CLOSE Comments_Cursor
	DEALLOCATE Comments_Cursor
	
	SELECT (CASE WHEN @IsNew = 1 THEN @RequirementID ELSE NULL END)
END' 

commit
exec LBC_SetVersion 233
END


/*******************************************************************************
	2012-07-13
	Изменения в профиле сайтов
*******************************************************************************/
if ( dbo.LBC_Version() < 234 )
BEGIN
begin tran

CREATE TABLE [dbo].[tbl_ModuleEdition](
	[ID] [uniqueidentifier] NOT NULL,
	[ModuleID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_tbl_ModuleEdition] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
CREATE TABLE [dbo].[tbl_ModuleEditionOption](
	[ID] [uniqueidentifier] NOT NULL,
	[ModuleEditionID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
	[SystemName] [varchar](256) NOT NULL,
	[ModuleEditionOptionType] [int] NOT NULL,
 CONSTRAINT [PK_tbl_ModuleEditionOption] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
SET ANSI_PADDING OFF
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[tbl_AccessProfileModuleEditionOption](
	[AccessProfileModuleID] [uniqueidentifier] NOT NULL,
	[ModuleEditionOptionID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_tbl_AccessProfileModuleEditionOption] PRIMARY KEY CLUSTERED 
(
	[AccessProfileModuleID] ASC,
	[ModuleEditionOptionID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
CREATE TABLE [dbo].[tbl_ModuleEditionAction](
	[ID] [uniqueidentifier] NOT NULL,
	[ModuleEditionID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
	[SystemName] [varchar](256) NOT NULL,
	[IconPath] [nvarchar](1024) NULL,
	[UserControl] [nvarchar](1024) NOT NULL,
 CONSTRAINT [PK_tbl_ModuleEditionAction] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
SET ANSI_PADDING OFF
ALTER TABLE [dbo].[tbl_ModuleEdition] ADD  CONSTRAINT [DF_tbl_ModuleEdition_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_ModuleEditionAction] ADD  CONSTRAINT [DF_tbl_ModuleEditionAction_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_ModuleEditionOption] ADD  CONSTRAINT [DF_tbl_ModuleEditionOption_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_ModuleEditionOption] ADD  CONSTRAINT [DF_tbl_ModuleEditionOption_ModuleEditionOptionType]  DEFAULT ((0)) FOR [ModuleEditionOptionType]
ALTER TABLE [dbo].[tbl_AccessProfileModuleEditionOption]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AccessProfileModuleEditionOption_tbl_AccessProfileModule] FOREIGN KEY([AccessProfileModuleID])
REFERENCES [dbo].[tbl_AccessProfileModule] ([ID])
ALTER TABLE [dbo].[tbl_AccessProfileModuleEditionOption] CHECK CONSTRAINT [FK_tbl_AccessProfileModuleEditionOption_tbl_AccessProfileModule]
ALTER TABLE [dbo].[tbl_AccessProfileModuleEditionOption]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AccessProfileModuleEditionOption_tbl_ModuleEditionOption] FOREIGN KEY([ModuleEditionOptionID])
REFERENCES [dbo].[tbl_ModuleEditionOption] ([ID])
ALTER TABLE [dbo].[tbl_AccessProfileModuleEditionOption] CHECK CONSTRAINT [FK_tbl_AccessProfileModuleEditionOption_tbl_ModuleEditionOption]
ALTER TABLE [dbo].[tbl_ModuleEdition]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ModuleEdition_tbl_Module] FOREIGN KEY([ModuleID])
REFERENCES [dbo].[tbl_Module] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_ModuleEdition] CHECK CONSTRAINT [FK_tbl_ModuleEdition_tbl_Module]
ALTER TABLE [dbo].[tbl_ModuleEditionAction]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ModuleEditionAction_tbl_ModuleEdition] FOREIGN KEY([ModuleEditionID])
REFERENCES [dbo].[tbl_ModuleEdition] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_ModuleEditionAction] CHECK CONSTRAINT [FK_tbl_ModuleEditionAction_tbl_ModuleEdition]
ALTER TABLE [dbo].[tbl_ModuleEditionOption]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ModuleEditionOption_tbl_ModuleEdition] FOREIGN KEY([ModuleEditionID])
REFERENCES [dbo].[tbl_ModuleEdition] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_ModuleEditionOption] CHECK CONSTRAINT [FK_tbl_ModuleEditionOption_tbl_ModuleEdition]

commit
exec LBC_SetVersion 234
END

GO

/*******************************************************************************
	2012-07-13
	Изменения в профиле сайтов
*******************************************************************************/
if ( dbo.LBC_Version() < 235 )
BEGIN
begin tran

INSERT [dbo].[tbl_ModuleEdition] ([ID], [ModuleID], [Title]) VALUES (N'b2601158-b1ad-4270-958d-161b374fec3b', N'3e8d5dff-00e3-4ec4-bb8d-a7d78cf20640', N'Контакты упрощенные')
INSERT [dbo].[tbl_ModuleEditionOption] ([ID], [ModuleEditionID], [Title], [SystemName], [ModuleEditionOptionType]) VALUES (N'd49a8478-25c0-4af1-87ce-bfc7217f01e0', N'b2601158-b1ad-4270-958d-161b374fec3b', N'Email', N'Email', 0)
INSERT [dbo].[tbl_ModuleEditionOption] ([ID], [ModuleEditionID], [Title], [SystemName], [ModuleEditionOptionType]) VALUES (N'f24ff294-8fc9-4458-af64-e5fbe2db2d7d', N'b2601158-b1ad-4270-958d-161b374fec3b', N'ФИО', N'UserFullName', 0)

INSERT [dbo].[tbl_ModuleEditionAction] ([ID], [ModuleEditionID], [Title], [SystemName], [IconPath], [UserControl]) VALUES (N'68e0eb0c-3d0d-4202-bb50-60a8dae9ccc3', N'b2601158-b1ad-4270-958d-161b374fec3b', N'Добавление', N'Add', NULL, N' ')
INSERT [dbo].[tbl_ModuleEditionAction] ([ID], [ModuleEditionID], [Title], [SystemName], [IconPath], [UserControl]) VALUES (N'b3e78d9d-988a-409c-820e-7c9a2029deb7', N'b2601158-b1ad-4270-958d-161b374fec3b', N'Список', N'List', NULL, N' ')

ALTER TABLE [tbl_AccessProfileModule] ADD ModuleEditionID uniqueidentifier NULL

ALTER TABLE [tbl_AccessProfileModule]  WITH CHECK ADD CONSTRAINT [FK_tbl_AccessProfileModule_tbl_ModuleEdition] FOREIGN KEY([ModuleEditionID])
REFERENCES [dbo].[tbl_ModuleEdition] ([ID])
ALTER TABLE [tbl_AccessProfileModule] CHECK CONSTRAINT [FK_tbl_AccessProfileModule_tbl_ModuleEdition]

EXEC sp_rename 'tbl_Menu.[TabTitle]', 'Title', 'COLUMN'

ALTER TABLE [tbl_Menu] ADD ModuleEditionActionID uniqueidentifier NULL

ALTER TABLE [tbl_Menu]  WITH CHECK ADD CONSTRAINT [FK_tbl_Menu_tbl_ModuleEditionAction] FOREIGN KEY([ModuleEditionActionID])
REFERENCES [dbo].[tbl_ModuleEditionAction] ([ID])
ALTER TABLE [tbl_Menu] CHECK CONSTRAINT [FK_tbl_Menu_tbl_ModuleEditionAction]

commit
exec LBC_SetVersion 235
END

/*******************************************************************************
	2012-07-13
	Добавлен модуль оплаты
*******************************************************************************/
if ( dbo.LBC_Version() < 236 )
BEGIN
begin tran


CREATE TABLE [dbo].[tbl_Payment] (
    [ID]                      UNIQUEIDENTIFIER NOT NULL,
    [OwnerID]                 UNIQUEIDENTIFIER NULL,
    [SiteID]                  UNIQUEIDENTIFIER NOT NULL,
    [CreatedAt]               DATETIME         NOT NULL,
    [Assignment]              NVARCHAR (250)   NOT NULL,
    [DatePlan]                DATE             NOT NULL,
    [DateFact]                DATE             NULL,
    [PaymentTypeID]           INT              NULL,
    [StatusID]                UNIQUEIDENTIFIER NULL,
    [PayerID]                 UNIQUEIDENTIFIER NULL,
    [PayerLegalAccountID]     UNIQUEIDENTIFIER NULL,
    [RecipientID]             UNIQUEIDENTIFIER NULL,
    [RecipientLegalAccountID] UNIQUEIDENTIFIER NULL,
    [CurrencyID]              UNIQUEIDENTIFIER NOT NULL,
    [Course]                  FLOAT            NOT NULL,
    [Amount]                  MONEY            NOT NULL,
    [Total]                   MONEY            NOT NULL,
    [PaymentPassRuleID]       UNIQUEIDENTIFIER NULL,
    [OrderID]                 UNIQUEIDENTIFIER NULL,
    [InvoiceID]               UNIQUEIDENTIFIER NULL
);


ALTER TABLE [dbo].[tbl_Payment]
    ADD CONSTRAINT [PK_tbl_Payment] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF);

CREATE TABLE [dbo].[tbl_PaymentArticle] (
    [ID]                    UNIQUEIDENTIFIER NOT NULL,
    [SiteID]                UNIQUEIDENTIFIER NOT NULL,
    [Title]                 NVARCHAR (256)   NOT NULL,
    [PaymentPassCategoryID] UNIQUEIDENTIFIER NOT NULL,
    [Note]                  NTEXT            NOT NULL
);
ALTER TABLE [dbo].[tbl_PaymentArticle]
    ADD CONSTRAINT [PK_tbl_PaymentArticle] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF);


CREATE TABLE [dbo].[tbl_PaymentBalance] (
    [ID]                    UNIQUEIDENTIFIER NOT NULL,
    [SiteID]                UNIQUEIDENTIFIER NOT NULL,
    [PaymentPassCategoryID] UNIQUEIDENTIFIER NULL,
    [CFOID]                 UNIQUEIDENTIFIER NULL,
    [PaymentArticleID]      UNIQUEIDENTIFIER NULL,
    [Date]                  DATE             NULL,
    [BalancePlan]           MONEY            NULL,
    [BalanceFact]           MONEY            NULL
);
ALTER TABLE [dbo].[tbl_PaymentBalance]
    ADD CONSTRAINT [PK_tbl_PaymentBalance] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF);

CREATE TABLE [dbo].[tbl_PaymentCFO] (
    [ID]                    UNIQUEIDENTIFIER NOT NULL,
    [SiteID]                UNIQUEIDENTIFIER NOT NULL,
    [Title]                 NVARCHAR (256)   NOT NULL,
    [PaymentPassCategoryID] UNIQUEIDENTIFIER NOT NULL,
    [Note]                  NTEXT            NOT NULL
);


ALTER TABLE [dbo].[tbl_PaymentCFO]
    ADD CONSTRAINT [PK_tbl_PaymentCFO] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF);
CREATE TABLE [dbo].[tbl_PaymentPass] (
    [ID]                            UNIQUEIDENTIFIER NOT NULL,
    [SiteID]                        UNIQUEIDENTIFIER NOT NULL,
    [PaymentID]                     UNIQUEIDENTIFIER NULL,
    [CreatedAt]                     DATETIME         NULL,
    [OutgoPaymentPassCategoryID]    UNIQUEIDENTIFIER NULL,
    [OutgoCFOID]                    UNIQUEIDENTIFIER NULL,
    [OutgoPaymentArticleID]         UNIQUEIDENTIFIER NULL,
    [IncomePaymentPassCategoryID]   UNIQUEIDENTIFIER NULL,
    [IncomeCFOID]                   UNIQUEIDENTIFIER NULL,
    [IncomePaymentArticleID]        UNIQUEIDENTIFIER NULL,
    [FormulaID]                     INT              NULL,
    [Value]                         FLOAT            NULL,
    [Amount]                        FLOAT            NULL,
    [ProcessedByCron]               BIT              NOT NULL,
    [ToDelete]                      BIT              NOT NULL,
    [OldOutgoPaymentPassCategoryID] UNIQUEIDENTIFIER NULL,
    [OldOutgoCFOID]                 UNIQUEIDENTIFIER NULL,
    [OldOutgoPaymentArticleID]      UNIQUEIDENTIFIER NULL,
    [OldAmount]                     FLOAT            NULL,
    [OldCreatedAt]                  DATE             NULL,
    [IsFact]                        BIT              NULL
);
ALTER TABLE [dbo].[tbl_PaymentPass]
    ADD CONSTRAINT [PK_tbl_PaymentPass] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF);


CREATE TABLE [dbo].[tbl_PaymentPassCategory] (
    [ID]     UNIQUEIDENTIFIER NOT NULL,
    [SiteID] UNIQUEIDENTIFIER NULL,
    [Title]  NVARCHAR (250)   NOT NULL,
    [Note]   NTEXT            NULL
);
ALTER TABLE [dbo].[tbl_PaymentPassCategory]
    ADD CONSTRAINT [PK_tbl_PaymentPassCategory] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF);

CREATE TABLE [dbo].[tbl_PaymentPassRule] (
    [ID]            UNIQUEIDENTIFIER NOT NULL,
    [SiteID]        UNIQUEIDENTIFIER NOT NULL,
    [Title]         NVARCHAR (256)   NOT NULL,
    [PaymentTypeID] INT              NULL,
    [IsActive]      BIT              NULL,
    [IsAutomatic]   BIT              NULL
);
ALTER TABLE [dbo].[tbl_PaymentPassRule]
    ADD CONSTRAINT [PK_tbl_PaymentPassRule] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF);

CREATE TABLE [dbo].[tbl_PaymentPassRuleCompany] (
    [ID]                      UNIQUEIDENTIFIER NOT NULL,
    [SiteID]                  UNIQUEIDENTIFIER NOT NULL,
    [PaymentPassRuleID]       UNIQUEIDENTIFIER NOT NULL,
    [PayerID]                 UNIQUEIDENTIFIER NULL,
    [PayerLegalAccountID]     UNIQUEIDENTIFIER NULL,
    [RecipientID]             UNIQUEIDENTIFIER NULL,
    [RecipientLegalAccountID] UNIQUEIDENTIFIER NULL
);
ALTER TABLE [dbo].[tbl_PaymentPassRuleCompany]
    ADD CONSTRAINT [PK_tbl_PaymentPassRuleCompany] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF);

CREATE TABLE [dbo].[tbl_PaymentPassRulePass] (
    [ID]                          UNIQUEIDENTIFIER NOT NULL,
    [SiteID]                      UNIQUEIDENTIFIER NOT NULL,
    [PaymentPassRuleID]           UNIQUEIDENTIFIER NULL,
    [OutgoPaymentPassCategoryID]  UNIQUEIDENTIFIER NULL,
    [OutgoCFOID]                  UNIQUEIDENTIFIER NULL,
    [OutgoPaymentArticleID]       UNIQUEIDENTIFIER NULL,
    [IncomePaymentPassCategoryID] UNIQUEIDENTIFIER NULL,
    [IncomeCFOID]                 UNIQUEIDENTIFIER NULL,
    [IncomePaymentArticleID]      UNIQUEIDENTIFIER NULL,
    [FormulaID]                   INT              NULL,
    [Value]                       FLOAT            NULL
);
ALTER TABLE [dbo].[tbl_PaymentPassRulePass]
    ADD CONSTRAINT [PK_tbl_PaymentPassRulePass] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF);

CREATE TABLE [dbo].[tbl_PaymentStatus] (
    [ID]        UNIQUEIDENTIFIER NOT NULL,
    [SiteID]    UNIQUEIDENTIFIER NOT NULL,
    [Title]     NVARCHAR (256)   NOT NULL,
    [IsDefault] BIT              NOT NULL,
    [IsLast]    BIT              NOT NULL
);
ALTER TABLE [dbo].[tbl_PaymentStatus]
    ADD CONSTRAINT [PK_tbl_PaymentStatus] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF);

CREATE TABLE [dbo].[tbl_PaymentTransition] (
    [ID]                     UNIQUEIDENTIFIER NOT NULL,
    [SiteID]                 UNIQUEIDENTIFIER NOT NULL,
    [Title]                  NVARCHAR (256)   NOT NULL,
    [IsActive]               BIT              NOT NULL,
    [InitialPaymentStatusID] UNIQUEIDENTIFIER NOT NULL,
    [FinalPaymentStatusID]   UNIQUEIDENTIFIER NOT NULL
);
ALTER TABLE [dbo].[tbl_PaymentTransition]
    ADD CONSTRAINT [PK_tbl_PaymentTransition] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF);


CREATE TABLE [dbo].[tbl_PaymentType] (
    [ID]    INT            NOT NULL,
    [Title] NVARCHAR (250) NULL
);
ALTER TABLE [dbo].[tbl_PaymentType]
    ADD CONSTRAINT [PK_tbl_PaymentType] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF);

ALTER TABLE [dbo].[tbl_Payment]
    ADD CONSTRAINT [DF_tbl_Payment_ID] DEFAULT (newid()) FOR [ID];
ALTER TABLE [dbo].[tbl_Payment]
    ADD CONSTRAINT [DF_tbl_Payment_CreatedAt] DEFAULT (getdate()) FOR [CreatedAt];
ALTER TABLE [dbo].[tbl_Payment]
    ADD CONSTRAINT [DF_tbl_Payment_Course] DEFAULT ((1)) FOR [Course];
ALTER TABLE [dbo].[tbl_PaymentArticle]
    ADD CONSTRAINT [DF_tbl_PaymentArticle_ID] DEFAULT (newid()) FOR [ID];
ALTER TABLE [dbo].[tbl_PaymentBalance]
    ADD CONSTRAINT [DF_tbl_PaymentBalance_ID] DEFAULT (newid()) FOR [ID];
ALTER TABLE [dbo].[tbl_PaymentCFO]
    ADD CONSTRAINT [DF_tbl_PaymentCFO_ID] DEFAULT (newid()) FOR [ID];
ALTER TABLE [dbo].[tbl_PaymentPass]
    ADD CONSTRAINT [DF_tbl_PaymentPass_CreatedAt] DEFAULT (getdate()) FOR [CreatedAt];
ALTER TABLE [dbo].[tbl_PaymentPass]
    ADD CONSTRAINT [DF_tbl_PaymentPass_ProcessedByCron] DEFAULT ((0)) FOR [ProcessedByCron];
ALTER TABLE [dbo].[tbl_PaymentPass]
    ADD CONSTRAINT [DF_tbl_PaymentPass_ToDeleted] DEFAULT ((0)) FOR [ToDelete];
ALTER TABLE [dbo].[tbl_PaymentPass]
    ADD CONSTRAINT [DF_tbl_PaymentPass_IsFact] DEFAULT ((0)) FOR [IsFact];
ALTER TABLE [dbo].[tbl_PaymentPass]
    ADD CONSTRAINT [DF_tbl_PaymentPass_ID] DEFAULT (newid()) FOR [ID];
ALTER TABLE [dbo].[tbl_PaymentPassCategory]
    ADD CONSTRAINT [DF_tbl_PaymentPassCategory_ID] DEFAULT (newid()) FOR [ID];
ALTER TABLE [dbo].[tbl_PaymentPassRule]
    ADD CONSTRAINT [DF_tbl_PaymentPassRule_ID] DEFAULT (newid()) FOR [ID];
ALTER TABLE [dbo].[tbl_PaymentPassRule]
    ADD CONSTRAINT [DF_tbl_PaymentPassRule_IsActive] DEFAULT ((0)) FOR [IsActive];
ALTER TABLE [dbo].[tbl_PaymentPassRule]
    ADD CONSTRAINT [DF_tbl_PaymentPassRule_IsAutomatic] DEFAULT ((0)) FOR [IsAutomatic];
ALTER TABLE [dbo].[tbl_PaymentPassRuleCompany]
    ADD CONSTRAINT [DF_tbl_PaymentPassRuleCompany_ID] DEFAULT (newid()) FOR [ID];
ALTER TABLE [dbo].[tbl_PaymentPassRulePass]
    ADD CONSTRAINT [DF_tbl_PaymentPassRulePass_ID] DEFAULT (newid()) FOR [ID];
ALTER TABLE [dbo].[tbl_PaymentStatus]
    ADD CONSTRAINT [DF_tbl_PaymentStatus_IsLast] DEFAULT ((0)) FOR [IsLast];
ALTER TABLE [dbo].[tbl_PaymentStatus]
    ADD CONSTRAINT [DF_tbl_PaymentStatus_IsDefault] DEFAULT ((0)) FOR [IsDefault];
ALTER TABLE [dbo].[tbl_PaymentStatus]
    ADD CONSTRAINT [DF_tbl_PaymentStatus_ID] DEFAULT (newid()) FOR [ID];
ALTER TABLE [dbo].[tbl_PaymentTransition]
    ADD CONSTRAINT [DF_tbl_PaymentTransition_ID] DEFAULT (newid()) FOR [ID];
ALTER TABLE [dbo].[tbl_PaymentTransition]
    ADD CONSTRAINT [DF_tbl_PaymentTransition_IsActive] DEFAULT ((0)) FOR [IsActive];
ALTER TABLE [dbo].[tbl_Payment] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_Payment_tbl_PaymentStatus] FOREIGN KEY ([StatusID]) REFERENCES [dbo].[tbl_PaymentStatus] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_Payment] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_Payment_tbl_Company] FOREIGN KEY ([PayerID]) REFERENCES [dbo].[tbl_Company] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_Payment] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_Payment_tbl_CompanyLegalAccount] FOREIGN KEY ([PayerLegalAccountID]) REFERENCES [dbo].[tbl_CompanyLegalAccount] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_Payment] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_Payment_tbl_Company1] FOREIGN KEY ([RecipientID]) REFERENCES [dbo].[tbl_Company] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_Payment] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_Payment_tbl_CompanyLegalAccount1] FOREIGN KEY ([RecipientLegalAccountID]) REFERENCES [dbo].[tbl_CompanyLegalAccount] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_Payment] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_Payment_tbl_Currency] FOREIGN KEY ([CurrencyID]) REFERENCES [dbo].[tbl_Currency] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_Payment] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_Payment_tbl_Invoice] FOREIGN KEY ([InvoiceID]) REFERENCES [dbo].[tbl_Invoice] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_Payment] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_Payment_tbl_Order] FOREIGN KEY ([OrderID]) REFERENCES [dbo].[tbl_Order] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_Payment] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_Payment_tbl_Sites] FOREIGN KEY ([SiteID]) REFERENCES [dbo].[tbl_Sites] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_Payment] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_Payment_tbl_PaymentType] FOREIGN KEY ([PaymentTypeID]) REFERENCES [dbo].[tbl_PaymentType] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_Payment] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_Payment_tbl_PaymentPassRule] FOREIGN KEY ([PaymentPassRuleID]) REFERENCES [dbo].[tbl_PaymentPassRule] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentArticle] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentArticle_tbl_Sites] FOREIGN KEY ([SiteID]) REFERENCES [dbo].[tbl_Sites] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentArticle] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentArticle_tbl_PaymentPassCategory] FOREIGN KEY ([PaymentPassCategoryID]) REFERENCES [dbo].[tbl_PaymentPassCategory] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentBalance] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentBalance_tbl_Sites] FOREIGN KEY ([SiteID]) REFERENCES [dbo].[tbl_Sites] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentBalance] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentBalance_tbl_PaymentBalance] FOREIGN KEY ([PaymentPassCategoryID]) REFERENCES [dbo].[tbl_PaymentPassCategory] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentBalance] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentBalance_tbl_PaymentCFO] FOREIGN KEY ([CFOID]) REFERENCES [dbo].[tbl_PaymentCFO] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentBalance] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentBalance_tbl_PaymentArticle] FOREIGN KEY ([PaymentArticleID]) REFERENCES [dbo].[tbl_PaymentArticle] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentCFO] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentCFO_tbl_Sites] FOREIGN KEY ([SiteID]) REFERENCES [dbo].[tbl_Sites] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentCFO] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentCFO_tbl_PaymentPassCategory] FOREIGN KEY ([PaymentPassCategoryID]) REFERENCES [dbo].[tbl_PaymentPassCategory] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPass] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPass_tbl_Sites] FOREIGN KEY ([SiteID]) REFERENCES [dbo].[tbl_Sites] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPass] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPass_tbl_PaymentPassCategory] FOREIGN KEY ([OutgoPaymentPassCategoryID]) REFERENCES [dbo].[tbl_PaymentPassCategory] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPass] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPass_tbl_PaymentPassCategory1] FOREIGN KEY ([IncomePaymentPassCategoryID]) REFERENCES [dbo].[tbl_PaymentPassCategory] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPass] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPass_tbl_PaymentCFO] FOREIGN KEY ([OutgoCFOID]) REFERENCES [dbo].[tbl_PaymentCFO] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPass] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPass_tbl_PaymentCFO1] FOREIGN KEY ([IncomeCFOID]) REFERENCES [dbo].[tbl_PaymentCFO] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPass] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPass_tbl_PaymentArticle] FOREIGN KEY ([OutgoPaymentArticleID]) REFERENCES [dbo].[tbl_PaymentArticle] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPass] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPass_tbl_PaymentArticle1] FOREIGN KEY ([IncomePaymentArticleID]) REFERENCES [dbo].[tbl_PaymentArticle] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPass] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPass_tbl_Payment] FOREIGN KEY ([PaymentID]) REFERENCES [dbo].[tbl_Payment] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPassCategory] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPassCategory_tbl_Sites1] FOREIGN KEY ([SiteID]) REFERENCES [dbo].[tbl_Sites] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPassRule] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPassRule_tbl_Sites] FOREIGN KEY ([SiteID]) REFERENCES [dbo].[tbl_Sites] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPassRule] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPassRule_tbl_PaymentType] FOREIGN KEY ([PaymentTypeID]) REFERENCES [dbo].[tbl_PaymentType] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPassRuleCompany] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPassRuleCompany_tbl_Company] FOREIGN KEY ([PayerID]) REFERENCES [dbo].[tbl_Company] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPassRuleCompany] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPassRuleCompany_tbl_Company1] FOREIGN KEY ([RecipientID]) REFERENCES [dbo].[tbl_Company] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPassRuleCompany] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPassRuleCompany_tbl_CompanyLegalAccount] FOREIGN KEY ([PayerLegalAccountID]) REFERENCES [dbo].[tbl_CompanyLegalAccount] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPassRuleCompany] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPassRuleCompany_tbl_CompanyLegalAccount1] FOREIGN KEY ([RecipientLegalAccountID]) REFERENCES [dbo].[tbl_CompanyLegalAccount] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPassRuleCompany] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPassRuleCompany_tbl_Sites] FOREIGN KEY ([SiteID]) REFERENCES [dbo].[tbl_Sites] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPassRuleCompany] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPassRuleCompany_tbl_PaymentPassRule] FOREIGN KEY ([PaymentPassRuleID]) REFERENCES [dbo].[tbl_PaymentPassRule] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPassRulePass] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPassRulePass_tbl_Sites] FOREIGN KEY ([SiteID]) REFERENCES [dbo].[tbl_Sites] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPassRulePass] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPassRulePass_tbl_PaymentCFO] FOREIGN KEY ([OutgoCFOID]) REFERENCES [dbo].[tbl_PaymentCFO] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPassRulePass] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPassRulePass_tbl_PaymentCFO1] FOREIGN KEY ([IncomeCFOID]) REFERENCES [dbo].[tbl_PaymentCFO] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPassRulePass] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPassRulePass_tbl_PaymentArticle] FOREIGN KEY ([OutgoPaymentArticleID]) REFERENCES [dbo].[tbl_PaymentArticle] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPassRulePass] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPassRulePass_tbl_PaymentArticle1] FOREIGN KEY ([IncomePaymentArticleID]) REFERENCES [dbo].[tbl_PaymentArticle] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPassRulePass] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPassRulePass_tbl_PaymentPassCategory] FOREIGN KEY ([IncomePaymentPassCategoryID]) REFERENCES [dbo].[tbl_PaymentPassCategory] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPassRulePass] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPassRulePass_tbl_PaymentPassCategory1] FOREIGN KEY ([OutgoPaymentPassCategoryID]) REFERENCES [dbo].[tbl_PaymentPassCategory] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentPassRulePass] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentPassRulePass_tbl_PaymentPassRulePass] FOREIGN KEY ([PaymentPassRuleID]) REFERENCES [dbo].[tbl_PaymentPassRule] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentStatus] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentStatus_tbl_Sites] FOREIGN KEY ([SiteID]) REFERENCES [dbo].[tbl_Sites] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentStatus] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentStatus_tbl_PaymentStatus] FOREIGN KEY ([ID]) REFERENCES [dbo].[tbl_PaymentStatus] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentTransition] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentTransition_tbl_Sites] FOREIGN KEY ([SiteID]) REFERENCES [dbo].[tbl_Sites] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentTransition] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentTransition_tbl_PaymentStatus] FOREIGN KEY ([InitialPaymentStatusID]) REFERENCES [dbo].[tbl_PaymentStatus] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_PaymentTransition] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_PaymentTransition_tbl_PaymentStatus1] FOREIGN KEY ([FinalPaymentStatusID]) REFERENCES [dbo].[tbl_PaymentStatus] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE [dbo].[tbl_Payment] WITH CHECK CHECK CONSTRAINT [FK_tbl_Payment_tbl_PaymentStatus];
ALTER TABLE [dbo].[tbl_Payment] WITH CHECK CHECK CONSTRAINT [FK_tbl_Payment_tbl_Company];
ALTER TABLE [dbo].[tbl_Payment] WITH CHECK CHECK CONSTRAINT [FK_tbl_Payment_tbl_CompanyLegalAccount];
ALTER TABLE [dbo].[tbl_Payment] WITH CHECK CHECK CONSTRAINT [FK_tbl_Payment_tbl_Company1];
ALTER TABLE [dbo].[tbl_Payment] WITH CHECK CHECK CONSTRAINT [FK_tbl_Payment_tbl_CompanyLegalAccount1];
ALTER TABLE [dbo].[tbl_Payment] WITH CHECK CHECK CONSTRAINT [FK_tbl_Payment_tbl_Currency];
ALTER TABLE [dbo].[tbl_Payment] WITH CHECK CHECK CONSTRAINT [FK_tbl_Payment_tbl_Invoice];
ALTER TABLE [dbo].[tbl_Payment] WITH CHECK CHECK CONSTRAINT [FK_tbl_Payment_tbl_Order];
ALTER TABLE [dbo].[tbl_Payment] WITH CHECK CHECK CONSTRAINT [FK_tbl_Payment_tbl_Sites];
ALTER TABLE [dbo].[tbl_Payment] WITH CHECK CHECK CONSTRAINT [FK_tbl_Payment_tbl_PaymentType];
ALTER TABLE [dbo].[tbl_Payment] WITH CHECK CHECK CONSTRAINT [FK_tbl_Payment_tbl_PaymentPassRule];
ALTER TABLE [dbo].[tbl_PaymentArticle] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentArticle_tbl_Sites];
ALTER TABLE [dbo].[tbl_PaymentArticle] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentArticle_tbl_PaymentPassCategory];
ALTER TABLE [dbo].[tbl_PaymentBalance] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentBalance_tbl_Sites];
ALTER TABLE [dbo].[tbl_PaymentBalance] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentBalance_tbl_PaymentBalance];
ALTER TABLE [dbo].[tbl_PaymentBalance] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentBalance_tbl_PaymentCFO];
ALTER TABLE [dbo].[tbl_PaymentBalance] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentBalance_tbl_PaymentArticle];
ALTER TABLE [dbo].[tbl_PaymentCFO] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentCFO_tbl_Sites];
ALTER TABLE [dbo].[tbl_PaymentCFO] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentCFO_tbl_PaymentPassCategory];
ALTER TABLE [dbo].[tbl_PaymentPass] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPass_tbl_Sites];
ALTER TABLE [dbo].[tbl_PaymentPass] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPass_tbl_PaymentPassCategory];
ALTER TABLE [dbo].[tbl_PaymentPass] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPass_tbl_PaymentPassCategory1];
ALTER TABLE [dbo].[tbl_PaymentPass] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPass_tbl_PaymentCFO];
ALTER TABLE [dbo].[tbl_PaymentPass] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPass_tbl_PaymentCFO1];
ALTER TABLE [dbo].[tbl_PaymentPass] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPass_tbl_PaymentArticle];
ALTER TABLE [dbo].[tbl_PaymentPass] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPass_tbl_PaymentArticle1];
ALTER TABLE [dbo].[tbl_PaymentPass] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPass_tbl_Payment];
ALTER TABLE [dbo].[tbl_PaymentPassCategory] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPassCategory_tbl_Sites1];
ALTER TABLE [dbo].[tbl_PaymentPassRule] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPassRule_tbl_Sites];
ALTER TABLE [dbo].[tbl_PaymentPassRule] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPassRule_tbl_PaymentType];
ALTER TABLE [dbo].[tbl_PaymentPassRuleCompany] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPassRuleCompany_tbl_Company];
ALTER TABLE [dbo].[tbl_PaymentPassRuleCompany] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPassRuleCompany_tbl_Company1];
ALTER TABLE [dbo].[tbl_PaymentPassRuleCompany] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPassRuleCompany_tbl_CompanyLegalAccount];
ALTER TABLE [dbo].[tbl_PaymentPassRuleCompany] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPassRuleCompany_tbl_CompanyLegalAccount1];
ALTER TABLE [dbo].[tbl_PaymentPassRuleCompany] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPassRuleCompany_tbl_Sites];
ALTER TABLE [dbo].[tbl_PaymentPassRuleCompany] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPassRuleCompany_tbl_PaymentPassRule];
ALTER TABLE [dbo].[tbl_PaymentPassRulePass] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPassRulePass_tbl_Sites];
ALTER TABLE [dbo].[tbl_PaymentPassRulePass] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPassRulePass_tbl_PaymentCFO];
ALTER TABLE [dbo].[tbl_PaymentPassRulePass] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPassRulePass_tbl_PaymentCFO1];
ALTER TABLE [dbo].[tbl_PaymentPassRulePass] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPassRulePass_tbl_PaymentArticle];
ALTER TABLE [dbo].[tbl_PaymentPassRulePass] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPassRulePass_tbl_PaymentArticle1];
ALTER TABLE [dbo].[tbl_PaymentPassRulePass] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPassRulePass_tbl_PaymentPassCategory];
ALTER TABLE [dbo].[tbl_PaymentPassRulePass] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPassRulePass_tbl_PaymentPassCategory1];
ALTER TABLE [dbo].[tbl_PaymentPassRulePass] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentPassRulePass_tbl_PaymentPassRulePass];
ALTER TABLE [dbo].[tbl_PaymentStatus] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentStatus_tbl_Sites];
ALTER TABLE [dbo].[tbl_PaymentStatus] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentStatus_tbl_PaymentStatus];
ALTER TABLE [dbo].[tbl_PaymentTransition] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentTransition_tbl_Sites];
ALTER TABLE [dbo].[tbl_PaymentTransition] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentTransition_tbl_PaymentStatus];
ALTER TABLE [dbo].[tbl_PaymentTransition] WITH CHECK CHECK CONSTRAINT [FK_tbl_PaymentTransition_tbl_PaymentStatus1];


INSERT INTO [dbo].[tbl_Module] ([Title], [Name], [TableName]) VALUES (N'Оплаты', N'Payments', N'tbl_Payment')

INSERT INTO [dbo].[tbl_PaymentType] ([ID], [Title]) VALUES (0, N'Приход')
INSERT INTO [dbo].[tbl_PaymentType] ([ID], [Title]) VALUES (1, N'Расход')
INSERT INTO [dbo].[tbl_PaymentType] ([ID], [Title]) VALUES (2, N'Трансфер')
INSERT INTO [dbo].[tbl_PaymentType] ([ID], [Title]) VALUES (3, N'Акт приход')
INSERT INTO [dbo].[tbl_PaymentType] ([ID], [Title]) VALUES (4, N'Акт расход')

INSERT INTO [dbo].[tbl_DictionaryGroup] ([ID], [Title], [ModuleID]) VALUES (N'e1e6fe7b-6ca6-4058-9bb3-ec7834cd8723', N'Оплаты', NULL)

INSERT INTO [dbo].[tbl_ObjectTypes] ([Name]) VALUES (N'tbl_Payment')

INSERT INTO [dbo].[tbl_Dictionary] ([Title], [DataSet], [AccessLevelID], [DictionaryGroupID], [EditFormUserControl]) VALUES (N'ЦФО', N'tbl_PaymentCFO', 0, N'e1e6fe7b-6ca6-4058-9bb3-ec7834cd8723', N'~/UserControls/DictionaryEditForm/PaymentCFOEdit.ascx')
INSERT INTO [dbo].[tbl_Dictionary] ([Title], [DataSet], [AccessLevelID], [DictionaryGroupID], [EditFormUserControl]) VALUES (N'Правила проводок', N'tbl_PaymentPassRule', 0, N'e1e6fe7b-6ca6-4058-9bb3-ec7834cd8723', N'~/UserControls/DictionaryEditForm/PaymentPassRuleEdit.ascx')
INSERT INTO [dbo].[tbl_Dictionary] ([Title], [DataSet], [AccessLevelID], [DictionaryGroupID], [EditFormUserControl]) VALUES (N'Категории проводок', N'tbl_PaymentPassCategory', 0, N'e1e6fe7b-6ca6-4058-9bb3-ec7834cd8723', NULL)
INSERT INTO [dbo].[tbl_Dictionary] ([Title], [DataSet], [AccessLevelID], [DictionaryGroupID], [EditFormUserControl]) VALUES (N'План статей', N'tbl_PaymentArticle', 0, N'e1e6fe7b-6ca6-4058-9bb3-ec7834cd8723', N'~/UserControls/DictionaryEditForm/PaymentArticleEdit.ascx')

DECLARE @SiteID uniqueidentifier

DECLARE @Guid1 uniqueidentifier
DECLARE @Guid2 uniqueidentifier
DECLARE @Guid3 uniqueidentifier
DECLARE @Guid4 uniqueidentifier

DECLARE @CURSOR CURSOR
SET @CURSOR  = CURSOR SCROLL
FOR
SELECT  ID 
  FROM  tbl_Sites 
OPEN @CURSOR
FETCH NEXT FROM @CURSOR INTO @SiteID
WHILE @@FETCH_STATUS = 0
BEGIN
SET @Guid1 = newID()
SET @Guid2 = newID()
SET @Guid3 = newID()
SET @Guid4 = newID()

INSERT INTO [dbo].[tbl_PaymentStatus] ([ID], [SiteID], [Title], [IsDefault], [IsLast]) VALUES (@Guid1, @SiteID, N'Проведена', 0, 1)
INSERT INTO [dbo].[tbl_PaymentStatus] ([ID], [SiteID], [Title], [IsDefault], [IsLast]) VALUES (@Guid2, @SiteID, N'Факт', 0, 0)
INSERT INTO [dbo].[tbl_PaymentStatus] ([ID], [SiteID], [Title], [IsDefault], [IsLast]) VALUES (@Guid3, @SiteID, N'План', 1, 0)
INSERT INTO [dbo].[tbl_PaymentStatus] ([ID], [SiteID], [Title], [IsDefault], [IsLast]) VALUES (@Guid4, @SiteID, N'Отменена', 0, 0)

INSERT INTO [dbo].[tbl_PaymentTransition] ([SiteID], [Title], [IsActive], [InitialPaymentStatusID], [FinalPaymentStatusID]) VALUES (@SiteID, N'Факт', 1, @Guid3, @Guid2)
INSERT INTO [dbo].[tbl_PaymentTransition] ([SiteID], [Title], [IsActive], [InitialPaymentStatusID], [FinalPaymentStatusID]) VALUES (@SiteID, N'Отменена', 1, @Guid3, @Guid4)
INSERT INTO [dbo].[tbl_PaymentTransition] ([SiteID], [Title], [IsActive], [InitialPaymentStatusID], [FinalPaymentStatusID]) VALUES (@SiteID, N'Проведена', 1, @Guid2, @Guid1)


FETCH NEXT FROM @CURSOR INTO @SiteID
END
CLOSE @CURSOR


commit
exec LBC_SetVersion 236
END

/*******************************************************************************
	2012-07-19
	Способ вызова формы
*******************************************************************************/
if ( dbo.LBC_Version() < 237 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[CheckForm]
(
 @SiteID uniqueidentifier,
 @ContactID uniqueidentifier,
 @ActivityCode nvarchar(255),
 @Mode int,
 @FromVisit int = NULL,
 @Through int = NULL,
 @Period int = NULL,
 @ContactCategory int = NULL,
 @CurrentDate datetime = NULL
)
AS
BEGIN
 DECLARE @Result bit = 1

 IF (@FromVisit IS NOT NULL)
 BEGIN
  IF ((SELECT COUNT(*) FROM tbl_ContactActivity WHERE SiteID = @SiteID AND ContactID = @ContactID AND ActivityTypeID = 1) < @FromVisit)
  BEGIN
   SET @Result = 0
  END
 END
 

 IF ((@Result = 1) AND (@Through IS NOT NULL) AND (@Period IS NOT NULL))
 BEGIN
  DECLARE @LastDate datetime = NULL
  SELECT TOP 1 @LastDate = CreatedAt FROM tbl_ContactActivity WHERE SiteID = @SiteID AND ContactID = @ContactID AND ActivityCode = @ActivityCode ORDER BY CreatedAt DESC
  
  IF (@LastDate IS NOT NULL)
  BEGIN
   IF ((@Period = 0 AND ((SELECT COUNT(*) FROM tbl_ContactActivity WHERE SiteID = @SiteID AND ContactID = @ContactID AND ActivityTypeID = 1 AND CreatedAt > @LastDate) < @Through + 1))
    OR (@Period = 1 AND (DATEADD(hour, @Through, @LastDate) >= @CurrentDate))
    OR (@Period = 2 AND (DATEADD(day, @Through, @LastDate) >= @CurrentDate))
    OR (@Period = 3 AND (DATEADD(month, @Through, @LastDate) >= @CurrentDate))
    )
   BEGIN
    SET @Result = 0
   END
  END
 END
 
 IF ((@Result = 1) AND (@ContactCategory=1 OR @ContactCategory=2))
 BEGIN
	DECLARE @UserFullName nvarchar(255)
	DECLARE @Email nvarchar(255)
	
	SELECT @UserFullName=UserFullName, @Email=Email
	FROM tbl_Contact
	WHERE ID=@ContactID
	
	IF (@ContactCategory=1 AND ((@UserFullName IS NULL OR @UserFullName='') AND (@Email IS NULL OR @Email='')))
	BEGIN
		SET @Result = 0
	END
	
	IF (@ContactCategory=2 AND ((@UserFullName IS NOT NULL AND @UserFullName<>'') OR (@Email IS NOT NULL AND @Email<>'')))
	BEGIN
		SET @Result = 0
	END
 END
 
 SELECT @Result
END'

commit
exec LBC_SetVersion 237
END

/*******************************************************************************
	2012-07-19
	Добавлен текст для кнопки "Сохранить"
*******************************************************************************/
if ( dbo.LBC_Version() < 238 )
BEGIN
begin tran

ALTER TABLE tbl_SiteActivityRules ADD [TextButton] nvarchar(255) NULL

commit
exec LBC_SetVersion 238
END

/*******************************************************************************
	2012-07-19
	Исправлены надписи в аналитике
*******************************************************************************/
if ( dbo.LBC_Version() < 239 )
BEGIN
begin tran


UPDATE [dbo].[tbl_AnalyticAxis] SET [Title]=N'Категория клиента' WHERE [ID]=N'aea0b7f3-7afb-43c6-a047-cbdf906fde71'
UPDATE [dbo].[tbl_AnalyticAxis] SET [Title]=N'Категория клиента' WHERE [ID]=N'6d8164a1-dce5-4d5b-adf0-8acdf458c914'


UPDATE [dbo].[tbl_AnalyticAxisFilterValues] SET [Title] = N'Анонимные клиенты' WHERE [ID]=N'5d6876e6-ca8d-4c70-8272-5b66c85f87c3'
UPDATE [dbo].[tbl_AnalyticAxisFilterValues] SET [Title] = N'Идентифицированные клиенты' WHERE [ID]=N'87f34a17-9a21-4b4e-8be7-43c0cf0fd77a'

UPDATE [dbo].[tbl_AnalyticAxisFilterValues] SET [Title] = N'Анонимные клиенты' WHERE [ID]=N'fb2badf8-ee4f-4bbb-a24d-8039dd3a5cde'
UPDATE [dbo].[tbl_AnalyticAxisFilterValues] SET [Title] = N'Идентифицированные клиенты' WHERE [ID]=N'ec793c39-6a1a-451a-8569-afd8f48011cb'

UPDATE [dbo].[tbl_AnalyticReport] SET [Title]=N'Статистика визитов по категориям клиентов' WHERE [ID]='1830007b-c79e-4e2f-ad89-960782911c4d'
UPDATE [dbo].[tbl_AnalyticReport] SET [Title]=N'Статистика посетителей по категориям клиентов' WHERE [ID]='67e0f054-f41b-4157-8ed5-054b64958528'
UPDATE [dbo].[tbl_AnalyticReport] SET [Title]=N'Статистика просмотров по категориям клиентов' WHERE [ID]='ffb3e5f5-f76a-4e0e-b6ce-90b0e2bc4cfa'

UPDATE [dbo].[tbl_AnalyticAxis] SET [Title] = N'Анонимные визиты' WHERE ID='5bf65c8c-1846-44ef-a4af-266324573f29'
UPDATE [dbo].[tbl_AnalyticAxis] SET [Title] = N'Анонимные просмотры' WHERE ID='ec3ec097-b8dd-40c8-baa8-2d06da095825'
UPDATE [dbo].[tbl_AnalyticAxis] SET [Title] = N'Анонимные посетители' WHERE ID='e394ee4b-5705-4154-9cb7-da19c38b6f56'
UPDATE [dbo].[tbl_AnalyticAxis] SET [Title] = N'Идентифицированные визиты' WHERE ID='227097b8-af87-4835-a889-2e55d776c3e4'
UPDATE [dbo].[tbl_AnalyticAxis] SET [Title] = N'Идентифицированные посетители' WHERE ID='f6467518-9394-4db6-8c1d-5aee2310a0fc'
UPDATE [dbo].[tbl_AnalyticAxis] SET [Title] = N'Идентифицированные просмотры' WHERE ID='0b34a8df-1b3b-402a-9bff-c38c4ae4a969'

UPDATE [dbo].[tbl_AnalyticAxisFilterValues] SET
[FilterOperatorID]=10,
[ColumnName]=NULL,
[Query]=' AND (TBLContact.UserFullName IS NULL OR TBLContact.UserFullName='''') AND (TBLContact.Email IS NULL OR TBLContact.Email='''')'
WHERE ID='5d6876e6-ca8d-4c70-8272-5b66c85f87c3'

UPDATE [dbo].[tbl_AnalyticAxisFilterValues] SET
[FilterOperatorID]=10,
[ColumnName]=NULL,
[Query]=' AND (TBLContact.UserFullName IS NULL OR TBLContact.UserFullName='''') AND (TBLContact.Email IS NULL OR TBLContact.Email='''')'
WHERE ID='fb2badf8-ee4f-4bbb-a24d-8039dd3a5cde'

UPDATE [dbo].[tbl_AnalyticAxisFilterValues] SET
[FilterOperatorID]=10,
[ColumnName]=NULL,
[Query]=' AND (TBLContact.UserFullName IS NOT NULL AND TBLContact.UserFullName<>'''') OR (TBLContact.Email IS NOT NULL OR TBLContact.Email<>'''')'
WHERE ID='87f34a17-9a21-4b4e-8be7-43c0cf0fd77a'

UPDATE [dbo].[tbl_AnalyticAxisFilterValues] SET
[FilterOperatorID]=10,
[ColumnName]=NULL,
[Query]=' AND (TBLContact.UserFullName IS NOT NULL AND TBLContact.UserFullName<>'''') OR (TBLContact.Email IS NOT NULL OR TBLContact.Email<>'''')'
WHERE ID='ec793c39-6a1a-451a-8569-afd8f48011cb'



UPDATE [dbo].[tbl_Analytic] SET [Query]=N'
DECLARE @GroupByDays bit = #GroupByDays#
DECLARE @SiteID uniqueidentifier = ''#SiteID#''
DECLARE @StartDate datetime = ''#StartDate#''
DECLARE @EndDate datetime = ''#EndDate#''
DECLARE @ColumnName nvarchar(max) = ''#FilterColumnName#''
DECLARE @Value nvarchar(max) = N''#FilterColumnValue#''
DECLARE @FilterOperator nvarchar(max) = ''#FilterOperator#''
DECLARE @SQL nvarchar(max)
DECLARE @Period nvarchar(256)
DECLARE @FilterQuery nvarchar(max) = ''#FilterQuery#''

IF @GroupByDays = 1
	SET @Period = ''CAST(ca.CreatedAt AS DATE)''
ELSE
	SET @Period = ''DATEPART(HOUR, ca.CreatedAt)''

SET @SQL = ''SELECT A.CreatedAt AS Period, A.[Views], A.Visitors, A.Visits, A.PotentialViews, A.PerspectiveViews,
ISNULL(B.PotentialVisitors,0) AS PotentialVisitors, ISNULL(B.PotentialVisits,0) AS PotentialVisits,
ISNULL(C.PerspectiveVisitors,0) AS PerspectiveVisitors, ISNULL(C.PerspectiveVisits,0) AS PerspectiveVisits
FROM (SELECT '' + @Period + '' AS CreatedAt, 
COUNT(*) AS [Views],
COUNT(DISTINCT(ContactID)) AS [Visitors],
COUNT(DISTINCT(ContactSessionID)) AS [Visits],
COUNT(CASE WHEN TBLContact.UserFullName IS NOT NULL AND TBLContact.UserFullName <> '''''''' OR TBLContact.Email IS NOT NULL AND TBLContact.Email <> '''''''' THEN 1 ELSE NULL END) AS [PotentialViews],
COUNT(CASE WHEN (TBLContact.UserFullName IS NULL OR TBLContact.UserFullName = '''''''') AND (TBLContact.Email IS NULL OR TBLContact.Email = '''''''') THEN 1 ELSE NULL END) AS [PerspectiveViews]	
FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS TBLContact ON TBLContact.ID = CA.ContactID
WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate'' + @FilterQuery

EXEC @SQL = Analytic_GetFilterQuery @SQL, @ColumnName, @Value, @FilterOperator
	
SET @SQL = @SQL + '' GROUP BY '' + @Period + '' ) 
AS A LEFT JOIN (SELECT '' + @Period + '' AS CreatedAt,
COUNT(DISTINCT(ContactID)) AS [PotentialVisitors],
COUNT(DISTINCT(ContactSessionID)) AS [PotentialVisits]
FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS C ON C.ID = CA.ContactID
WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate
AND C.UserFullName IS NOT NULL AND C.UserFullName <> ''''''''
GROUP BY '' + @Period + ''
) AS B ON A.CreatedAt = B.CreatedAt 
LEFT JOIN (SELECT '' + @Period + '' AS CreatedAt, 
COUNT(DISTINCT(ContactID)) AS [PerspectiveVisitors],
COUNT(DISTINCT(ContactSessionID)) AS [PerspectiveVisits]
FROM tbl_ContactActivity as ca LEFT JOIN tbl_Contact AS C ON C.ID = CA.ContactID
WHERE ActivityTypeID = 1 AND ca.SiteID = @SiteID AND ca.CreatedAt >= @StartDate AND ca.CreatedAt <= @EndDate
AND (C.UserFullName IS NULL OR C.UserFullName = '''''''')
GROUP BY ''+ @Period +'' ) AS C ON A.CreatedAt = C.CreatedAt ''

IF @GroupByDays = 1
	SET @SQL = @SQL + ''ORDER BY CAST(A.CreatedAt AS DATE)''
ELSE
	SET @SQL = @SQL + ''ORDER BY DATEPART(HOUR, A.CreatedAt)''


EXEC sp_executesql @SQL, N''@SiteID uniqueidentifier, @StartDate datetime, @EndDate datetime'', @SiteID, @StartDate, @EndDate' WHERE [ID]='7dd817de-0ebe-4583-b2a7-dadfd1642148'

commit
exec LBC_SetVersion 239
END

/*******************************************************************************
	2012-07-23
	Добавил поле описание для тегов
*******************************************************************************/
if ( dbo.LBC_Version() < 240 )
BEGIN
begin tran

ALTER TABLE [tbl_SiteTags] ADD [Description] nvarchar(250) NULL

INSERT INTO tbl_Module (Title, Name, TableName)
VALUES (N'Профиль контакта', 'SiteColumns','tbl_SiteColumns')

INSERT INTO tbl_Module (Title, Name)
VALUES (N'Сегментация клиентов', 'ContactSegment')


commit
exec LBC_SetVersion 240
END


/*******************************************************************************
	2012-07-25
	Добавил размер файла
*******************************************************************************/
if ( dbo.LBC_Version() < 241 )
BEGIN
begin tran

ALTER TABLE [tbl_SiteActivityRules] ADD [FileSize] bigint

commit
exec LBC_SetVersion 241
END


/*******************************************************************************
	2012-08-02
	Добавил справочник терминов
*******************************************************************************/
if ( dbo.LBC_Version() < 242 )
BEGIN
begin tran

CREATE TABLE [dbo].[tbl_Term] (
    [ID]            UNIQUEIDENTIFIER NOT NULL,
    [SiteID]        UNIQUEIDENTIFIER NOT NULL,
    [Title]         NVARCHAR (250)   NOT NULL,
    [PublicationID] UNIQUEIDENTIFIER NULL,
    [Code]          NVARCHAR (100)   NULL,
    [Description]   NTEXT            NULL
);

ALTER TABLE [dbo].[tbl_Term]
    ADD CONSTRAINT [PK_tbl_Term] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (ALLOW_PAGE_LOCKS = ON, ALLOW_ROW_LOCKS = ON, PAD_INDEX = OFF, IGNORE_DUP_KEY = OFF, STATISTICS_NORECOMPUTE = OFF);
ALTER TABLE [dbo].[tbl_Term]
    ADD CONSTRAINT [DF_tbl_Term_ID] DEFAULT (newid()) FOR [ID];
ALTER TABLE [dbo].[tbl_Term] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_Term_tbl_Publication] FOREIGN KEY ([PublicationID]) REFERENCES [dbo].[tbl_Publication] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_Term] WITH CHECK CHECK CONSTRAINT [FK_tbl_Term_tbl_Publication];
ALTER TABLE [dbo].[tbl_Term] WITH NOCHECK
    ADD CONSTRAINT [FK_tbl_Term_tbl_Sites] FOREIGN KEY ([SiteID]) REFERENCES [dbo].[tbl_Sites] ([ID]) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE [dbo].[tbl_Term] WITH CHECK CHECK CONSTRAINT [FK_tbl_Term_tbl_Sites];

INSERT INTO [dbo].[tbl_Dictionary] ([Title], [DataSet], [AccessLevelID], [DictionaryGroupID], [EditFormUserControl]) VALUES (N'Термины', N'tbl_Term', 0, N'c947aebb-fe87-40bb-8478-d1f192932418', NULL)

commit
exec LBC_SetVersion 242
END


/*******************************************************************************
	2012-08-03
	Обновление статусов сотового и имейл для контактов
*******************************************************************************/
if ( dbo.LBC_Version() < 243 )
BEGIN
begin tran

UPDATE tbl_Contact SET CellularPhoneStatusID = 0 WHERE CellularPhoneStatusID IS NULL
UPDATE tbl_Contact SET EmailStatusID = 0 WHERE EmailStatusID IS NULL

commit
exec LBC_SetVersion 243
END

/*******************************************************************************
	2012-08-06
	Добавлена упрощенная редакция для обсуждений
*******************************************************************************/
if ( dbo.LBC_Version() < 244 )
BEGIN
begin tran

ALTER TABLE [tbl_PortalSettings] ADD FacebookProfile nvarchar(512) NULL
ALTER TABLE [tbl_PortalSettings] ADD VkontakteProfile nvarchar(512) NULL
ALTER TABLE [tbl_PortalSettings] ADD TwitterProfile nvarchar(512) NULL

INSERT INTO tbl_ModuleEdition ([ID],[ModuleID], [Title])
VALUES (N'182dfb46-aefe-4afd-87ed-89c1df7ea438', (SELECT TOP 1 ID FROM tbl_Module WHERE Name = N'Discussions'), N'Обсуждения упрощенные')

INSERT INTO tbl_ModuleEditionAction ([ModuleEditionID], [Title], [SystemName], [UserControl], [IconPath])
VALUES (N'182dfb46-aefe-4afd-87ed-89c1df7ea438', N'Настройка портала', N'PortalSetting', N'~/UserControls/ModuleEditionAction/Discussion/PortalSetting.ascx', N'~/App_Themes/Default/images/menu-icons/SystemSettings.png')

commit
exec LBC_SetVersion 244
END 

/*******************************************************************************
 2012-08-09
 Добавлено поле для публикаций
*******************************************************************************/
if ( dbo.LBC_Version() < 245 )
BEGIN
begin tran

ALTER TABLE [tbl_Publication] ADD IsHideFromPublic bit NOT NULL DEFAULT(0)

commit
exec LBC_SetVersion 245
END

/*******************************************************************************
	2012-08-09
	Добавлена упрощенная редакция для обсуждений
*******************************************************************************/
if ( dbo.LBC_Version() < 246 )
BEGIN
begin tran

DELETE FROM tbl_UserSettings
WHERE ClassName=N'WebCounter.AdminPanel.SiteActionTemplates'

commit
exec LBC_SetVersion 246
END


/*******************************************************************************
	2012-08-10
	ДОбавлен поиск по типу
*******************************************************************************/
if ( dbo.LBC_Version() < 247 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[SearchPublication]
	(
	    @SiteID uniqueidentifier,
	    @ContactID uniqueidentifier = null,
	    @Word nvarchar(4000),
	    @PageIndex int,
	    @PageSize int,
	    @IsPortal bit,
	    @PublicationKindID int = null,
	    @PublicationTypeID uniqueidentifier = null,
	    @OrderBy int = 1
	)
AS
BEGIN
	DECLARE @SQL nvarchar(max)

    SET @Word = ''"'' + @Word + ''"''
    DECLARE @CompanyID uniqueidentifier = (SELECT CompanyID FROM tbl_Contact WHERE ID = @ContactID)
	
	IF (@OrderBy = 1)
	BEGIN
		;WITH PublicationsRN AS
		(
			SELECT ROW_NUMBER() OVER(ORDER BY [Date]) AS RowNum
				  ,P.ID
				  ,P.[Date]
				  ,P.[Title]
				  ,P.[Text]
				  ,P.[Noun]
				  ,PT.[PublicationKindID]
			  FROM tbl_Publication AS P LEFT JOIN tbl_PublicationType AS PT ON P.PublicationTypeID = PT.ID
				   LEFT JOIN tbl_PublicationStatus AS PS ON P.PublicationStatusID = PS.ID
			  WHERE CONTAINS(P.*, @Word) AND P.SiteID = @SiteID AND PT.IsSearchable = 1 AND PS.isActive = 1 
			  AND (@PublicationKindID IS NULL OR PT.PublicationKindID = @PublicationKindID)
			  AND (@IsPortal = 0 OR ((@IsPortal = 1 AND @ContactID IS NULL AND P.AccessRecord = 4) 
			  AND (@PublicationTypeID IS NULL OR P.PublicationTypeID = @PublicationTypeID)
			  OR (@IsPortal = 1 AND @ContactID IS NOT NULL AND P.AccessRecord = 4) 
			  OR (@IsPortal = 1 AND @ContactID IS NOT NULL AND P.AccessRecord = 1)
			  OR (@IsPortal = 1 AND @ContactID IS NOT NULL AND P.AccessRecord = 3 AND P.AuthorID = @ContactID)
			  OR (@IsPortal = 1 AND @ContactID IS NOT NULL AND P.AccessRecord = 2 AND P.AccessCompanyID =  @CompanyID)))
		)	
		SELECT *, ( Select Count(*) From PublicationsRN ) As TotalCount
		FROM PublicationsRN
		WHERE RowNum BETWEEN (@PageIndex - 1) * @PageSize + 1 AND @PageIndex * @PageSize
		ORDER BY [Date] DESC;
    END    
END'

commit
exec LBC_SetVersion 247
END

/*******************************************************************************
 2012-08-13
 Добавлено поле для коструктора форм
*******************************************************************************/
if ( dbo.LBC_Version() < 248 )
BEGIN
begin tran

ALTER TABLE [tbl_SiteActivityRuleLayout] ADD LayoutParams xml NULL

commit
exec LBC_SetVersion 248
END

/*******************************************************************************
	2012-08-15
	Обновление поиска
*******************************************************************************/
if ( dbo.LBC_Version() < 249 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[SearchPublication]
	(
	    @SiteID uniqueidentifier,
	    @ContactID uniqueidentifier = null,
	    @Word nvarchar(4000),
	    @PageIndex int,
	    @PageSize int,
	    @IsPortal bit,
	    @PublicationKindID int = null,
	    @PublicationTypeID uniqueidentifier = null,
	    @OrderBy int = 1
	)
AS
BEGIN
	DECLARE @SQL nvarchar(max)

    SET @Word = ''"'' + @Word + ''"''
    DECLARE @CompanyID uniqueidentifier = (SELECT CompanyID FROM tbl_Contact WHERE ID = @ContactID)
	
	IF (@OrderBy = 1)
	BEGIN
		;WITH PublicationsRN AS
		(
			SELECT ROW_NUMBER() OVER(ORDER BY [Date]) AS RowNum
				  ,P.ID
				  ,P.[Date]
				  ,P.[Title]
				  ,P.[Text]
				  ,P.[Noun]
				  ,PT.[PublicationKindID]
			  FROM tbl_Publication AS P LEFT JOIN tbl_PublicationType AS PT ON P.PublicationTypeID = PT.ID
				   LEFT JOIN tbl_PublicationStatus AS PS ON P.PublicationStatusID = PS.ID
			  WHERE (@Word = ''"*"'' OR (CONTAINS(P.*, @Word)) AND P.SiteID = @SiteID AND PT.IsSearchable = 1 AND PS.isActive = 1
			  AND (@PublicationKindID IS NULL OR PT.PublicationKindID = @PublicationKindID)
			  AND (@IsPortal = 0 OR ((@IsPortal = 1 AND @ContactID IS NULL AND P.AccessRecord = 4) 			  
			  OR (@IsPortal = 1 AND @ContactID IS NOT NULL AND P.AccessRecord = 4) 
			  OR (@IsPortal = 1 AND @ContactID IS NOT NULL AND P.AccessRecord = 1)
			  OR (@IsPortal = 1 AND @ContactID IS NOT NULL AND P.AccessRecord = 3 AND P.AuthorID = @ContactID)
			  OR (@IsPortal = 1 AND @ContactID IS NOT NULL AND P.AccessRecord = 2 AND P.AccessCompanyID =  @CompanyID))))
			  AND (@PublicationTypeID IS NULL OR P.PublicationTypeID = @PublicationTypeID)
		)	
		SELECT *, ( Select Count(*) From PublicationsRN ) As TotalCount
		FROM PublicationsRN
		WHERE RowNum BETWEEN (@PageIndex - 1) * @PageSize + 1 AND @PageIndex * @PageSize
		ORDER BY [Date] DESC;
    END    
END'

commit
exec LBC_SetVersion 249
END


/*******************************************************************************
	2012-08-15
	Обновление поиска
*******************************************************************************/
if ( dbo.LBC_Version() < 250 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[SearchPublication]
	(
	    @SiteID uniqueidentifier,
	    @ContactID uniqueidentifier = null,
	    @Word nvarchar(4000),
	    @PageIndex int,
	    @PageSize int,
	    @IsPortal bit,
	    @PublicationKindID int = null,
	    @PublicationTypeID uniqueidentifier = null,
	    @OrderBy int = 1
	)
AS
BEGIN
	DECLARE @SQL nvarchar(max)

    --SET @Word = '''' + @Word + ''''
    DECLARE @CompanyID uniqueidentifier = (SELECT CompanyID FROM tbl_Contact WHERE ID = @ContactID)
	
	IF (@OrderBy = 1)
	BEGIN
		;WITH PublicationsRN AS
		(
			SELECT ROW_NUMBER() OVER(ORDER BY [Date]) AS RowNum
				  ,P.ID
				  ,P.[Date]
				  ,P.[Title]
				  ,P.[Text]
				  ,P.[Noun]
				  ,PT.[PublicationKindID]
			  FROM tbl_Publication AS P LEFT JOIN tbl_PublicationType AS PT ON P.PublicationTypeID = PT.ID
				   LEFT JOIN tbl_PublicationStatus AS PS ON P.PublicationStatusID = PS.ID				   
			  WHERE ((@Word = ''*'' OR (FREETEXT(P.*, @Word))) AND P.SiteID = @SiteID AND PT.IsSearchable = 1 AND PS.isActive = 1
			  AND (@PublicationKindID IS NULL OR PT.PublicationKindID = @PublicationKindID)
			  AND (@IsPortal = 0 OR ((@IsPortal = 1 AND @ContactID IS NULL AND P.AccessRecord = 4) 			  
			  OR (@IsPortal = 1 AND @ContactID IS NOT NULL AND P.AccessRecord = 4) 
			  OR (@IsPortal = 1 AND @ContactID IS NOT NULL AND P.AccessRecord = 1)
			  OR (@IsPortal = 1 AND @ContactID IS NOT NULL AND P.AccessRecord = 3 AND P.AuthorID = @ContactID)
			  OR (@IsPortal = 1 AND @ContactID IS NOT NULL AND P.AccessRecord = 2 AND P.AccessCompanyID =  @CompanyID))))
			  AND (@PublicationTypeID IS NULL OR P.PublicationTypeID = @PublicationTypeID)
		)	
		SELECT *, ( Select Count(*) From PublicationsRN ) As TotalCount
		FROM PublicationsRN
		WHERE RowNum BETWEEN (@PageIndex - 1) * @PageSize + 1 AND @PageIndex * @PageSize
		ORDER BY [Date] DESC;
    END    
END'

commit
exec LBC_SetVersion 250
END

/*******************************************************************************
	2012-08-16
	Оптимизация модуля Рассылки
*******************************************************************************/
if ( dbo.LBC_Version() < 251 )
BEGIN
begin tran

ALTER TABLE tbl_MassMail ADD SiteTagID uniqueidentifier NULL

DECLARE @ModuleEditionId uniqueidentifier = NEWID()
INSERT INTO tbl_ModuleEdition (ID, ModuleID, Title)
VALUES (@ModuleEditionId, (SELECT ID FROM tbl_Module WHERE Name=N'SiteActionTemplates'), N'Основная редакция')

INSERT INTO tbl_ModuleEditionOption (ModuleEditionID, Title, SystemName, ModuleEditionOptionType)
VALUES (@ModuleEditionId, N'Настраивать Email и имя для ответа', 'ReplyEmailName', 0)

SET @ModuleEditionId = NEWID()
INSERT INTO tbl_ModuleEdition (ID, ModuleID, Title)
VALUES (@ModuleEditionId, (SELECT ID FROM tbl_Module WHERE Name=N'MassMails'), N'Основная редакция')
INSERT INTO tbl_ModuleEditionOption (ModuleEditionID, Title, SystemName, ModuleEditionOptionType)
VALUES (@ModuleEditionId, N'Настраивать Email и имя для ответа', 'ReplyEmailName', 0)


DELETE FROM tbl_UserSettings
WHERE ClassName = 'WebCounter.AdminPanel.MassMails'

ALTER TABLE tbl_MassMail DROP FK_tbl_MassMail_tbl_MassMailStatus

UPDATE tbl_MassMail
SET MassMailStatusID = 0
WHERE MassMailStatusID = 1

UPDATE tbl_MassMail
SET MassMailStatusID = 1
WHERE MassMailStatusID = 2 OR MassMailStatusID = 3

INSERT INTO tbl_CronJob (Name, Assembly, Type, Period)
VALUES (N'MassMail', N'Labitec.LeadForce.CronJobs.dll', N'Labitec.LeadForce.CronJobs.MassMailJob', 5)

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[WorkflowInit]
(
	@Parameter uniqueidentifier,
	@SiteID uniqueidentifier,
	@ModuleID uniqueidentifier,
	@AutomaticMethod int,
	@Event int = NULL,
	@MassWorkflowID uniqueidentifier = NULL
)
AS
BEGIN
	DECLARE @sql nvarchar(max)
	DECLARE @ParmDefinition nvarchar(max)
	
	SELECT tbl_WorkflowTemplate.ID
	INTO #TmpWorkflowTemplate
	FROM tbl_WorkflowTemplate
	WHERE
		SiteID=@SiteID
		AND ModuleID=@ModuleID
		AND [Status]=1 -- Статус действующий
		AND (AutomaticMethod=@AutomaticMethod OR @AutomaticMethod IS NULL)
		AND (StartDate IS NULL OR (StartDate IS NOT NULL AND StartDate<=GETDATE())) -- Актуален по дате
		AND (EndDate IS NULL OR (EndDate IS NOT NULL AND EndDate>=GETDATE())) -- Актуален по дате
		AND ((@MassWorkflowID IS NULL) OR (tbl_WorkflowTemplate.ID IN (SELECT tbl_MassWorkflow.WorkflowTemplateID FROM tbl_MassWorkflow WHERE tbl_MassWorkflow.ID=@MassWorkflowID)))

		
	DECLARE @_WorkflowTemplateID uniqueidentifier
	DECLARE @_Event int
	
	-- Перебираем подходящие по условию шаблоны
	WHILE (SELECT COUNT(*) FROM #TmpWorkflowTemplate) > 0
	BEGIN
		SELECT TOP 1 @_WorkflowTemplateID=ID
		FROM #TmpWorkflowTemplate
		
		DECLARE @FLAG bit = 1
		
		DECLARE @_WorkflowID uniqueidentifier = NEWID()
		
		-- Берём параметр
		DECLARE @_WorkflowTemplateParameterID uniqueidentifier =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Контакт'' AND IsSystem=1)
		
		-- Проверка на вызов при активном процессе
		DECLARE @_Frequency int
		DECLARE @_DenyMultipleRun bit
		DECLARE @_Condition int
		DECLARE @_ActivityCount int
		SELECT @_Frequency=Frequency, @_DenyMultipleRun=DenyMultipleRun, @_Condition=Condition, @_ActivityCount=ActivityCount, @_Event=[Event]
		FROM tbl_WorkflowTemplate 
		WHERE ID=@_WorkflowTemplateID
		
		-- Есть ли активный процесс по заданному шаблону (нет даты окончания процесса)
		IF ((SELECT COUNT(*)
		FROM tbl_Workflow AS w
		LEFT JOIN tbl_WorkflowParameter AS wp ON wp.WorkflowID=w.ID
		WHERE w.WorkflowTemplateID=@_WorkflowTemplateID
			  AND wp.WorkflowTemplateParameterID=@_WorkflowTemplateParameterID
			  AND wp.Value=@Parameter
			  AND w.EndDate IS NULL) > 0 AND @_DenyMultipleRun = 1)
		BEGIN
			SET @FLAG = 0
		END
			
		-- Проверка на частоту вызова в днях
		DECLARE @_StartDate datetime = (SELECT TOP 1 w.StartDate
									   FROM tbl_Workflow AS w
									   LEFT JOIN tbl_WorkflowParameter AS wp ON wp.WorkflowID=w.ID
									   WHERE w.WorkflowTemplateID=@_WorkflowTemplateID
											 AND wp.WorkflowTemplateParameterID=@_WorkflowTemplateParameterID
									   ORDER BY w.StartDate DESC)
		--SET @_StartDate = DATEADD(day, @_Frequency, @_StartDate)
		IF (@_Frequency <> 0 AND DATEADD(day, @_Frequency, @_StartDate) > GETDATE())
		BEGIN
			SET @FLAG = 0
		END
		
		-- Проверка условий запуска
		IF (@AutomaticMethod=1 AND @FLAG = 1) -- Создание/Изменение записи
		BEGIN
			IF (@_Event<>@Event)
			BEGIN
				SET @FLAG = 0
			END
		END
		
		
		IF (@AutomaticMethod=2 AND @FLAG = 1) -- По действию пользователя
		BEGIN
			SET @FLAG = 0
			
			SELECT ID
			INTO #TmpConditionEvent
			FROM tbl_WorkflowTemplateConditionEvent
			WHERE WorkflowTemplateID=@_WorkflowTemplateID
			
			DECLARE @TotalRowsReturned int
			DECLARE @Count int = 0
			
			DECLARE @CountConditionEvent int = (SELECT COUNT(*) FROM #TmpConditionEvent)
			DECLARE @_ConditionEventID uniqueidentifier
			DECLARE @_Category int
			DECLARE @_ActivityType int
			DECLARE @_Code nvarchar(max)
			DECLARE @_ActualPeriod int
			DECLARE @_Requisite nvarchar(2000)
			DECLARE @_Formula int
			DECLARE @_Value nvarchar(255)
			WHILE (SELECT COUNT(*) FROM #TmpConditionEvent) > 0
			BEGIN
				SELECT TOP 1 @_ConditionEventID=ID
				FROM #TmpConditionEvent
				
				SELECT @_Category=Category,
					   @_ActivityType=ActivityType,
					   @_Code=Code,
					   @_ActualPeriod=ActualPeriod,
					   @_Requisite=Requisite,
					   @_Formula=Formula,
					   @_Value=Value
				FROM tbl_WorkflowTemplateConditionEvent
				WHERE ID=@_ConditionEventID
				
				IF (@_Category=0) -- Действие
				BEGIN
					SET @sql = ''SELECT @TotalRowsReturnedOUT=COUNT(*)
								FROM tbl_ContactActivity
								WHERE ContactID=@ContactID
									  AND ActivityTypeID=@ActivityType''
									  
					IF (@_ActivityType=1 OR @_ActivityType=11)
					BEGIN
						SET @sql = @sql + '' AND ActivityCode LIKE N''''%@Code%'''' ''
					END
					ELSE
					BEGIN
						SET @sql = @sql + '' AND ActivityCode=@Code ''
					END
					
					IF (@_ActualPeriod <> 0)
					BEGIN
						SET @sql = @sql + '' AND CreatedAt > DATEADD(day, (-1 * @ActualPeriod), GETDATE()) ''
					END
					
					-- Исключаем из выборки активность которая была до вызова предыдущего процесса
					IF (@_StartDate IS NOT NULL)
					BEGIN
						SET @sql = @sql + '' AND CreatedAt > @StartDate ''
					END
					
					SET @ParmDefinition = ''@TotalRowsReturnedOUT int OUTPUT, @ContactID uniqueidentifier, @ActivityType int, @Code nvarchar(max), @ActualPeriod int, @StartDate datetime''
					EXECUTE sp_executesql @sql,
							@ParmDefinition,
							@TotalRowsReturnedOUT=@TotalRowsReturned OUTPUT,
							@ContactID=@Parameter,
							@ActivityType=@_ActivityType,
							@Code=@_Code,
							@ActualPeriod=@_ActualPeriod,
							@StartDate=@_StartDate
				END
				
				IF (@TotalRowsReturned > 0)
				BEGIN
					SET @Count = @Count + 1
				END
				
				IF (@_Category=1) -- Значение реквизита
				BEGIN
					DECLARE @_ColumnTypeID int
					DECLARE @_StringValue nvarchar(512)
					DECLARE @_DateValue datetime
					DECLARE @_SiteColumnValueID uniqueidentifier
					SELECT
						@_ColumnTypeID=tbl_SiteColumns.TypeID,
						@_StringValue=tbl_ContactColumnValues.StringValue,
						@_DateValue=tbl_ContactColumnValues.DateValue,
						@_SiteColumnValueID=tbl_ContactColumnValues.SiteColumnValueID
					FROM tbl_ContactColumnValues
					LEFT JOIN tbl_SiteColumns ON tbl_SiteColumns.ID=tbl_ContactColumnValues.SiteColumnID
					WHERE ContactID=@Parameter AND SiteColumnID=CAST(@_Requisite AS uniqueidentifier)
					
					-- Строка/Число/Текст
					IF ((@_ColumnTypeID=1 OR @_ColumnTypeID=4 OR @_ColumnTypeID=5)
						AND ((@_Formula=4 AND @_StringValue LIKE ''%''+@_Value)
							  OR (@_Formula=5 AND @_StringValue LIKE @_Value)
							)
						)
					BEGIN
						SET @Count = @Count + 1
					END
					-- Дата
					IF (@_ColumnTypeID=2
						AND ((@_Formula=7 AND @_DateValue < CAST(@_Value AS datetime))
							  OR (@_Formula=9 AND @_DateValue <= CAST(@_Value AS datetime))
							  OR (@_Formula=6 AND @_DateValue > CAST(@_Value AS datetime))
							  OR (@_Formula=8 AND @_DateValue >= CAST(@_Value AS datetime))
							)
					   )
					   BEGIN
							SET @Count = @Count + 1
					   END
					--Справочник
					IF (@_ColumnTypeID=3
						AND ((@_Formula=2 AND (@_SiteColumnValueID IS NULL OR @_SiteColumnValueID = N''00000000-0000-0000-0000-000000000000''))
							OR (@_Formula=1 AND (@_SiteColumnValueID IS NOT NULL AND @_SiteColumnValueID <> N''00000000-0000-0000-0000-000000000000''))
							OR (@_Formula=3 AND @_SiteColumnValueID = CAST(@_Value AS uniqueidentifier))
							)
					   )
					   BEGIN
							SET @Count = @Count + 1
					   END
				END
				
				DECLARE @_Scores int
				IF (@_Category=2) -- Балл по поведению
				BEGIN
					SET @_Scores = (SELECT Score FROM tbl_ContactActivityScore WHERE ID=@Parameter AND ScoreCategory=0 AND SiteActivityScoreTypeID=CAST(@_Requisite AS uniqueidentifier))
					IF ((@_Formula = 7 AND @_Scores < @_Value)
						OR (@_Formula = 9 AND @_Scores <= @_Value)
						OR (@_Formula = 6 AND @_Scores > @_Value)
						OR (@_Formula = 8 AND @_Scores >= @_Value))
					BEGIN
						SET @Count = @Count + 1
					END
				END
				
				IF (@_Category=3) -- Балл по характеристикам
				BEGIN
					SET @_Scores = (SELECT Score FROM tbl_ContactActivityScore WHERE ID=@Parameter AND ScoreCategory=1 AND SiteActivityScoreTypeID=CAST(@_Requisite AS uniqueidentifier))
					IF ((@_Formula = 7 AND @_Scores < @_Value)
						OR (@_Formula = 9 AND @_Scores <= @_Value)
						OR (@_Formula = 6 AND @_Scores > @_Value)
						OR (@_Formula = 8 AND @_Scores >= @_Value))
					BEGIN
						SET @Count = @Count + 1
					END
				END
				
				DELETE #TmpConditionEvent WHERE ID=@_ConditionEventID
			END
			DROP TABLE #TmpConditionEvent
			
			IF (@CountConditionEvent<>0
				AND ((@_Condition=0 AND @CountConditionEvent=@Count)
				OR (@_Condition=1 AND @Count>0)
				OR (@_Condition=2 AND @Count>=@_ActivityCount)
				))
			BEGIN
				SET @FLAG = 1
			END
		END
		
		
		IF (@FLAG = 1)
		BEGIN
			DECLARE @_WorkflowTemplateElementID uniqueidentifier = 
			(SELECT tbl_WorkflowTemplateElement.ID FROM tbl_WorkflowTemplate
			LEFT JOIN tbl_WorkflowTemplateElement ON tbl_WorkflowTemplateElement.WorkflowTemplateID=tbl_WorkflowTemplate.ID
			WHERE tbl_WorkflowTemplate.ID=@_WorkflowTemplateID AND tbl_WorkflowTemplateElement.ElementType=5) -- Начало процесса
			
			-- Найден элемент с типом "Начало процесса"
			IF (@_WorkflowTemplateElementID IS NOT NULL)
			BEGIN
				INSERT INTO tbl_Workflow (ID, SiteID, WorkflowTemplateID, StartDate, MassWorkflowID)
				VALUES (@_WorkflowID, @SiteID, @_WorkflowTemplateID, GETDATE(), @MassWorkflowID)
				
				INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
				VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, @Parameter)


		SET @_WorkflowTemplateParameterID =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Компания'' AND IsSystem=1)
		INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
		VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, (SELECT CompanyID FROM tbl_Contact WHERE ID=@Parameter))
		
		SET @_WorkflowTemplateParameterID =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Автор (роль)'' AND IsSystem=1)
		INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
		VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, NULL)
		
		SET @_WorkflowTemplateParameterID =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Ответственный по компании (роль)'' AND IsSystem=1)
		INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
		VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, (SELECT tbl_Company.OwnerID FROM tbl_Contact LEFT JOIN tbl_Company ON tbl_Company.ID=tbl_Contact.CompanyID WHERE tbl_Contact.ID=@Parameter))

				
				DECLARE @WorkflowElementID uniqueidentifier = NEWID()
				INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
				VALUES (@WorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 1)
				
				EXEC WorkflowProcessing @WorkflowElementID
			END
		END
	    
		DELETE #TmpWorkflowTemplate WHERE ID=@_WorkflowTemplateID
	END
	DROP TABLE #TmpWorkflowTemplate
END'

commit
exec LBC_SetVersion 251
END

/*******************************************************************************
	2012-08-16
	Описание для файла
*******************************************************************************/
if ( dbo.LBC_Version() < 252 )
BEGIN
begin tran

ALTER TABLE [dbo].[tbl_SiteActivityRules] ADD [Description] nvarchar(500) NULL

commit
exec LBC_SetVersion 252
END

/*******************************************************************************
	2012-08-16
	Обновление публикаций
*******************************************************************************/
if ( dbo.LBC_Version() < 253 )
BEGIN
begin tran

--Если ошибка посмотрите у себя в таблице tbl_Publication название Constraint для поля IsHideFromPublic
ALTER TABLE tbl_Publication DROP CONSTRAINT DF__tbl_Publi__IsHid__2AD6269A 
ALTER TABLE tbl_Publication DROP COLUMN IsHideFromPublic

commit
exec LBC_SetVersion 253
END

/*******************************************************************************
	2012-08-16
	Настройка редакций для модулей формы и файла
*******************************************************************************/
if ( dbo.LBC_Version() < 254 )
BEGIN
begin tran

SET @ModuleEditionId = NEWID()
INSERT INTO tbl_ModuleEdition (ID, ModuleID, Title)
VALUES (@ModuleEditionId, (SELECT ID FROM tbl_Module WHERE Name=N'ExternalForm'), N'Основная редакция')
INSERT INTO tbl_ModuleEditionOption (ModuleEditionID, Title, SystemName, ModuleEditionOptionType)
VALUES (@ModuleEditionId, N'Панель тегов', 'TagPanel', 0)

SET @ModuleEditionId = NEWID()
INSERT INTO tbl_ModuleEdition (ID, ModuleID, Title)
VALUES (@ModuleEditionId, (SELECT ID FROM tbl_Module WHERE Name=N'Form'), N'Основная редакция')
INSERT INTO tbl_ModuleEditionOption (ModuleEditionID, Title, SystemName, ModuleEditionOptionType)
VALUES (@ModuleEditionId, N'Панель тегов', 'TagPanel', 0)

SET @ModuleEditionId = NEWID()
INSERT INTO tbl_ModuleEdition (ID, ModuleID, Title)
VALUES (@ModuleEditionId, (SELECT ID FROM tbl_Module WHERE Name=N'File'), N'Основная редакция')
INSERT INTO tbl_ModuleEditionOption (ModuleEditionID, Title, SystemName, ModuleEditionOptionType)
VALUES (@ModuleEditionId, N'Панель тегов', 'TagPanel', 0)

commit
exec LBC_SetVersion 254
END



/*******************************************************************************
	2012-08-21
	Исправил название модуля сегментов
*******************************************************************************/
if ( dbo.LBC_Version() < 255 )
BEGIN
begin tran

update [tbl_Module] set [name] = 'ContactSegments' where [name]='ContactSegment'

commit
exec LBC_SetVersion 255
END

/*******************************************************************************
	2012-08-22
	Периоды для шаблонов процессов
*******************************************************************************/
if ( dbo.LBC_Version() < 256 )
BEGIN
begin tran

CREATE TABLE [dbo].[tbl_WorkflowTemplateElementPeriod](
	[ID] [uniqueidentifier] NOT NULL,
	[WorkflowTemplateElementID] [uniqueidentifier] NOT NULL,
	[DayWeek] [int] NOT NULL,
	[FromDate] [time](7) NULL,
	[ToDate] [time](7) NULL,
 CONSTRAINT [PK_tbl_WorkflowTemplateElementPeriod] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[tbl_WorkflowTemplateElementPeriod]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WorkflowTemplateElementPeriod_tbl_WorkflowTemplateElement] FOREIGN KEY([WorkflowTemplateElementID])
REFERENCES [dbo].[tbl_WorkflowTemplateElement] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_WorkflowTemplateElementPeriod] CHECK CONSTRAINT [FK_tbl_WorkflowTemplateElementPeriod_tbl_WorkflowTemplateElement]
ALTER TABLE [dbo].[tbl_WorkflowTemplateElementPeriod] ADD  CONSTRAINT [DF_tbl_WorkflowTemplateElementPeriod_ID]  DEFAULT (newid()) FOR [ID]

commit
exec LBC_SetVersion 256
END

/*******************************************************************************
	2012-08-28
	Периоды для шаблонов процессов
*******************************************************************************/
if ( dbo.LBC_Version() < 257 )
BEGIN
begin tran

EXEC sp_rename 'tbl_WorkflowTemplateElementPeriod.[FromDate]', 'FromTime', 'COLUMN'
EXEC sp_rename 'tbl_WorkflowTemplateElementPeriod.[ToDate]', 'ToTime', 'COLUMN'

ALTER TABLE tbl_WorkflowTemplateElementPeriod ALTER COLUMN FromTime time(0) NULL
ALTER TABLE tbl_WorkflowTemplateElementPeriod ALTER COLUMN ToTime time(0) NULL

commit
exec LBC_SetVersion 257
END

/*******************************************************************************
	2012-08-28
	Периоды для шаблонов процессов
*******************************************************************************/
if ( dbo.LBC_Version() < 258 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[GetSiteActionPlannedDate] (@WorkflowTemplateElementID uniqueidentifier, @PlannedDate datetime)
	RETURNS datetime AS
BEGIN
	DECLARE @FirstDayOfWeek datetime = (SELECT DATEADD(ww, DATEDIFF(ww,0,@PlannedDate), 0))

	DECLARE @DayWeek int
	DECLARE @FromTime time(7)
	DECLARE @ToTime time(7)
	DECLARE @Coef int = 3
	DECLARE @i int = 0

	DECLARE @PeriodDates TABLE
	(
		FromTime datetime,
		ToTime datetime
	)

	DECLARE @PeriodID_Cursor varchar(max)
	DECLARE PeriodID_Cursor CURSOR FOR
	SELECT ID FROM tbl_WorkflowTemplateElementPeriod
	WHERE WorkflowTemplateElementID=@WorkflowTemplateElementID
	OPEN PeriodID_Cursor
	FETCH NEXT FROM PeriodID_Cursor INTO @PeriodID_Cursor
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SELECT @DayWeek=DayWeek, @FromTime=ISNULL(FromTime, CAST(''00:00'' AS time(7))), @ToTime=ISNULL(ToTime, CAST(''23:59:59'' AS time(7)))
		FROM tbl_WorkflowTemplateElementPeriod
		WHERE ID=@PeriodID_Cursor
		
		SET @i = 0
		
		IF (@DayWeek = 0)
		BEGIN
			WHILE (@i < 14)
			BEGIN
				INSERT INTO @PeriodDates (FromTime, ToTime)
				VALUES (
					CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef) + @i, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@FromTime,108) AS Datetime),
					CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef) + @i, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@ToTime,108) AS Datetime)
				)

				SET @i = @i + 1
			END
		END
		
		IF (@DayWeek = 1 OR @DayWeek = 2)
		BEGIN
			WHILE (@i < 14)
			BEGIN
				IF ((@i <> 5 AND @i <> 6 AND @i <> 12 AND @i <> 13) AND @DayWeek = 1)
				BEGIN
					INSERT INTO @PeriodDates (FromTime, ToTime)
					VALUES (
						CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef) + @i, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@FromTime,108) AS Datetime),
						CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef) + @i, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@ToTime,108) AS Datetime)
					)
				END
				
				IF ((@i = 5 OR @i = 6 OR @i = 12 OR @i = 13) AND @DayWeek = 2)
				BEGIN
					INSERT INTO @PeriodDates (FromTime, ToTime)
					VALUES (
						CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef) + @i, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@FromTime,108) AS Datetime),
						CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef) + @i, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@ToTime,108) AS Datetime)
					)
				END

				SET @i = @i + 1
			END
		END
		
		IF (@DayWeek > 2)
		BEGIN
			INSERT INTO @PeriodDates (FromTime, ToTime)
			VALUES (
				CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef), @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@FromTime,108) AS Datetime),
				CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef), @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@ToTime,108) AS Datetime)
			)
			
			INSERT INTO @PeriodDates (FromTime, ToTime)
			VALUES (
				CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef) + 7, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@FromTime,108) AS Datetime),
				CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef) + 7, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@ToTime,108) AS Datetime)
			)
		END
		
		FETCH NEXT FROM PeriodID_Cursor INTO @PeriodID_Cursor
	END
	CLOSE PeriodID_Cursor
	DEALLOCATE PeriodID_Cursor

	DECLARE @NextPlannedDate datetime = NULL

	SELECT @NextPlannedDate=(CASE WHEN FromTime IS NOT NULL THEN FromTime END)
	FROM @PeriodDates
	WHERE @PlannedDate >= FromTime AND @PlannedDate <= ToTime

	IF (@NextPlannedDate IS NOT NULL)
	BEGIN
		RETURN @PlannedDate
	END
	ELSE
	BEGIN
		SELECT TOP 1 @NextPlannedDate=FromTime
		FROM @PeriodDates
		WHERE @PlannedDate < FromTime
		ORDER BY FromTime ASC
		
		RETURN @NextPlannedDate
	END
	
	RETURN NULL
END'

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[WorkflowProcessing]
(
	@_WorkflowElementID uniqueidentifier, -- Входящий элемент
	@_StartElementResult nvarchar(255) = NULL -- Результат выполнения элемента процесса
)
AS
BEGIN
	DECLARE @_SiteID uniqueidentifier
	DECLARE @_WorkflowStartDate datetime
	DECLARE @_WorkflowID uniqueidentifier
	DECLARE @_WorkflowTemplateContactID uniqueidentifier
	DECLARE @_WorkflowTemplateElementID uniqueidentifier
	DECLARE @_WorkflowParameterID uniqueidentifier
	DECLARE @_ControlDate datetime
	DECLARE @_WorkflowElementStatus int = 0
	DECLARE @_WorkflowStatus int = 0
	DECLARE @_WorkflowResult nvarchar(255)
	DECLARE @_MassWorkflowID uniqueidentifier = NULL
	DECLARE @_ElementType int
	DECLARE @_EndDateElement datetime = GETDATE()
	
	DECLARE @_StartAfter int
	DECLARE @_StartPeriod int
	DECLARE @_DurationHours int
	DECLARE @_DurationMinutes int
	DECLARE @_ControlAfter int
	DECLARE @_ControlPeriod int
	DECLARE @_ControlFromBeginProccess bit
	
	SELECT @_WorkflowID=w.WorkflowID,
		   @_WorkflowTemplateElementID=w.WorkflowTemplateElementID,
		   @_ControlDate=w.ControlDate,
		   @_WorkflowTemplateContactID=wt.ContactID,
		   @_WorkflowStatus=wf.[Status],
		   @_ElementType=t.ElementType
		   --@_StartAfter=t.StartAfter,
		   --@_StartPeriod=t.StartPeriod,
		   --@_ControlAfter=t.ControlAfter,
		   --@_ControlPeriod=t.ControlPeriod,
		   --@_ControlFromBeginProccess=t.ControlFromBeginProccess
	FROM tbl_WorkflowElement AS w
	LEFT JOIN tbl_WorkflowTemplateElement AS t ON t.ID=w.WorkflowTemplateElementID
	LEFT JOIN tbl_WorkflowTemplate AS wt ON wt.ID=t.WorkflowTemplateID
	LEFT JOIN tbl_Workflow AS wf ON wf.ID=w.WorkflowID
	WHERE w.ID=@_WorkflowElementID AND (t.ElementType<>1 OR (t.ElementType=1 AND w.[Status]=0))
	
	SELECT @_SiteID=SiteID, @_WorkflowStartDate=StartDate, @_MassWorkflowID=MassWorkflowID
	FROM tbl_Workflow
	WHERE ID=@_WorkflowID
	
IF (@_WorkflowStatus=0)
BEGIN	
	
	-- Выбираем все элементы по связям, где входящий элемент является начальным
	-- и с выходящим результатом
	SELECT EndElementID
	INTO #WorkflowTemplateElementRelation
	FROM tbl_WorkflowTemplateElementRelation
	WHERE StartElementID=@_WorkflowTemplateElementID AND (StartElementResult=@_StartElementResult OR @_StartElementResult IS NULL)
	
	-- Если выходы с элемента есть
	IF ((SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0)
	BEGIN
		SET @_WorkflowElementStatus = 1
		
		IF (@_StartElementResult=0 AND @_ElementType=2) -- Событие не произошло (просрочен)
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
		
		-- Входящий элемент не просрочен
		IF (
			((@_ControlDate IS NULL) OR (@_ControlDate > GETDATE()))
			OR (@_ElementType = 2) -- Ожидание события
			)
		BEGIN
					WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0
					BEGIN
						SELECT TOP 1 @_WorkflowTemplateElementID=EndElementID
						FROM #WorkflowTemplateElementRelation
						
						IF ((SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND WorkflowTemplateElementID=@_WorkflowTemplateElementID) = 0)
						BEGIN
							DECLARE @_WorkflowTemplateElementType int
							DECLARE @_WorkflowTemplateElementName nvarchar(255)
							DECLARE @_IsActive bit
							SELECT @_WorkflowTemplateElementType=ElementType, @_WorkflowTemplateElementName=Name, @_IsActive=IsActive
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							DECLARE @_InsertedWorkflowElementID uniqueidentifier = NEWID()
							
							SELECT @_StartAfter=StartAfter,
								   @_StartPeriod=StartPeriod,
								   @_DurationHours=DurationHours,
								   @_DurationMinutes=DurationMinutes,
								   @_ControlAfter=ControlAfter,
								   @_ControlPeriod=ControlPeriod,
								   @_ControlFromBeginProccess=ControlFromBeginProccess
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							-- Тип элемента "Окончание процесса"
							IF (@_WorkflowTemplateElementType=6)
							BEGIN
								-- Если нет больше элементов со статусов в Ожидании (кроме текущего), завершаем процесс
								IF (SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND [Status]=0) = 1
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 1)
									
									UPDATE tbl_Workflow
									SET EndDate=GETDATE(), [Status]=1
									WHERE ID=@_WorkflowID
									
									-- Программа развития "Завершена"
									IF (@_MassWorkflowID IS NOT NULL)
									BEGIN
										IF (SELECT COUNT(*)
										FROM tbl_Workflow
										WHERE MassWorkflowID=@_MassWorkflowID AND [Status]=0) = 0
										BEGIN
											UPDATE tbl_MassWorkflow
											SET [Status]=2
											WHERE ID=@_MassWorkflowID
										END
									END
								END
							END
							
							-- определяем параметер
							SET @_WorkflowParameterID =
							(SELECT tbl_WorkflowParameter.[Value]
							FROM tbl_WorkflowParameter
							LEFT JOIN tbl_WorkflowTemplateParameter ON tbl_WorkflowTemplateParameter.ID=tbl_WorkflowParameter.WorkflowTemplateParameterID
							WHERE tbl_WorkflowParameter.WorkflowID=@_WorkflowID
								  AND tbl_WorkflowTemplateParameter.Name=N''Контакт''
								  AND tbl_WorkflowTemplateParameter.IsSystem=1)
								  
							-- определяем через сколько запускать элемент, если 0 то сразу
							DECLARE @_ActionDate datetime = GETDATE()
							IF (@_StartAfter <> 0)
							BEGIN
								SET @_ActionDate = CASE
									WHEN @_StartPeriod = 0 THEN DATEADD(minute, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 1 THEN DATEADD(hour, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 2 THEN DATEADD(day, @_StartAfter, @_ActionDate)
								END
							END
							
							-- дата контроля
							SET @_ControlDate = GETDATE()
							IF (@_ControlFromBeginProccess=1) -- От начала процесса
							BEGIN
								SET @_ControlDate = @_WorkflowStartDate
							END
							
							SET @_ControlDate = CASE
								WHEN @_ControlPeriod = 0 THEN DATEADD(minute, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 1 THEN DATEADD(hour, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 2 THEN DATEADD(day, @_ControlAfter, @_ControlDate)
							END
							
							
							-- Тип элемента "Сообщение"
							IF (@_WorkflowTemplateElementType = 0)
							BEGIN
								-- Начало добавления сообщения в очередь
								DECLARE @_SiteActionTemplateID uniqueidentifier = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActionTemplateID'')
								
								DECLARE @_NotBeforeDate datetime = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''NotBeforeDate'')
								
								DECLARE @_NotLaterDate datetime = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''NotLaterDate'')
								
								DECLARE @_AddSiteAction bit = 1
								
								IF ((@_NotBeforeDate IS NOT NULL) AND (@_ActionDate < @_NotBeforeDate))
								BEGIN
									SET @_ActionDate = @_NotBeforeDate
								END
								
								IF ((@_NotLaterDate IS NOT NULL) AND (@_ActionDate > @_NotLaterDate))
								BEGIN
									SET @_AddSiteAction = 0
								END
								
								IF (@_AddSiteAction = 1)
								BEGIN
									EXEC @_ActionDate = GetSiteActionPlannedDate @_WorkflowTemplateElementID, @_ActionDate
									IF (@_ActionDate IS NULL OR ((@_NotLaterDate IS NOT NULL) AND (@_ActionDate > @_NotLaterDate)))
									BEGIN
										SET @_AddSiteAction = 0
									END
								END
								
								
								IF (@_AddSiteAction = 1)
								BEGIN
									DECLARE @MessageTitle nvarchar(255)
									DECLARE @MessageText nvarchar(max)
									SELECT @MessageTitle=MessageCaption, @MessageText=MessageBody
									FROM tbl_SiteActionTemplate
									WHERE ID=@_SiteActionTemplateID
									
									DECLARE @_SiteActionID uniqueidentifier = NEWID()
									INSERT INTO tbl_SiteAction (ID, SiteID, SiteActionTemplateID, ContactID, ActionStatusID, ActionDate, MessageTitle, MessageText)
									VALUES (@_SiteActionID, @_SiteID, @_SiteActionTemplateID, @_WorkflowParameterID, 1, @_ActionDate, @MessageTitle, @MessageText)
								END
								-- Конец добавления сообщения в очередь
								
								IF (@_AddSiteAction = 1)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_SiteActionID)
								END
								ELSE
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 3)
								END
							END
							
							-- Тип элемента "Ожидание события"
							IF (@_WorkflowTemplateElementType = 2)
							BEGIN
								IF (@_ControlAfter<>0)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], ControlDate)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_ControlDate)
								END
								ELSE
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0)
								END
							END
							
							-- Тип элемента "Действие"
							IF (@_WorkflowTemplateElementType = 3)
							BEGIN
								-- Начало добавления действия
								DECLARE @_ContactActivityDescription nvarchar(255) = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ContactActivityDescription'')
								
								DECLARE @_ContactActivityID uniqueidentifier = NEWID()
								INSERT INTO tbl_ContactActivity (ID, SiteID, ContactID, CreatedAt, ActivityTypeID, ActivityCode)
								VALUES (@_ContactActivityID, @_SiteID, @_WorkflowParameterID, GETDATE(), 13, @_ContactActivityDescription)
								-- Конец добавления действия
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1, @_ContactActivityID)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Задача"
							IF (@_WorkflowTemplateElementType = 1)
							BEGIN
								-- Начало добавления задачи
								DECLARE @_TaskID uniqueidentifier = NEWID()
								DECLARE @_TaskTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskType'') AS uniqueidentifier)
								
								DECLARE @_IsImportantTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsImportantTask'') AS bit)
								
								DECLARE @_IsUrgentTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsUrgentTask'') AS bit)
								
								DECLARE @_TaskEndDate datetime = @_ActionDate
								SET @_TaskEndDate = DATEADD(hour, @_DurationHours, @_TaskEndDate)
								SET @_TaskEndDate = DATEADD(minute, @_DurationMinutes, @_TaskEndDate)
								INSERT INTO tbl_Task (ID, SiteID, Title, TaskTypeID, StartDate, EndDate, DateOfControl, IsImportantTask, PlanDurationMinutes, PlanDurationHours, ResponsibleID, CreatorID, IsUrgentTask, TaskStatusID)
								VALUES (@_TaskID, @_SiteID, @_WorkflowTemplateElementName, @_TaskTypeID, @_ActionDate, @_TaskEndDate, @_ControlDate, @_IsImportantTask, @_DurationMinutes, @_DurationHours, @_WorkflowTemplateContactID, @_WorkflowTemplateContactID, @_IsUrgentTask, 1)
								-- Конец добавления задачи
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, ControlDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), @_ControlDate, 0, @_TaskID)
							END
							
							-- Тип элемента "Сегментация"
							IF (@_WorkflowTemplateElementType = 7)
							BEGIN
								SELECT ID
								INTO #WorkflowTemplateElementTag
								FROM tbl_WorkflowTemplateElementTag
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID
								
								DECLARE @_WorkflowTemplateElementTagID uniqueidentifier
								DECLARE @_SiteTagID uniqueidentifier
								DECLARE @_Operation int
								WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementTag) > 0
								BEGIN
									SELECT TOP 1 @_WorkflowTemplateElementTagID=ID
									FROM #WorkflowTemplateElementTag
									
									SELECT @_SiteTagID=SiteTagID, @_Operation=Operation
									FROM tbl_WorkflowTemplateElementTag
									WHERE ID=@_WorkflowTemplateElementTagID
									
									IF (@_Operation = 0)
									BEGIN
										DELETE FROM tbl_SiteTagObjects
										WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID
									END
									ELSE
									BEGIN
										IF (SELECT COUNT(*) FROM tbl_SiteTagObjects WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID) = 0
										BEGIN
											INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID)
											VALUES (@_SiteTagID, @_WorkflowParameterID)
										END
									END
									
									DELETE #WorkflowTemplateElementTag WHERE ID=@_WorkflowTemplateElementTagID
								END
								DROP TABLE #WorkflowTemplateElementTag

								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Скорринг"
							IF (@_WorkflowTemplateElementType = 8)
							BEGIN
								-- Начало добавления баллов
								--DECLARE @_SiteActivityScoreTypeID uniqueidentifier = NEWID()
								DECLARE @_SiteActivityScoreTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActivityScoreType'') AS uniqueidentifier)
								
								DECLARE @_ScoreCategory int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreCategory'') AS int)
								
								DECLARE @_ScoreOperation int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreOperation'') AS int)
								
								DECLARE @_AddedScore int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''AddedScore'') AS int)
								
								-- есть балл такого типа и такой категории
								DECLARE @_ContactActivityScoreID uniqueidentifier
								DECLARE @_oldScore int
								
								SELECT @_ContactActivityScoreID=ID, @_oldScore=Score
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								
								IF (@_ContactActivityScoreID IS NOT NULL)
								BEGIN
									DECLARE @_newScore int = CASE @_ScoreOperation
															 WHEN 0 THEN @_AddedScore -- (=)
															 WHEN 1 THEN @_oldScore + @_AddedScore -- (+)
															 WHEN 2 THEN @_oldScore - @_AddedScore -- (-)
															 WHEN 3 THEN @_oldScore * @_AddedScore -- (*)
															 END
									UPDATE tbl_ContactActivityScore
									SET Score=@_newScore
									WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								END
								ELSE
								BEGIN
									SET @_ContactActivityScoreID = NEWID()
									
									INSERT INTO tbl_ContactActivityScore (ID, SiteID, SiteActivityScoreTypeID, ContactID, Score, ScoreCategory)
									VALUES (@_ContactActivityScoreID, @_SiteID, @_SiteActivityScoreTypeID, @_WorkflowParameterID, @_AddedScore, @_ScoreCategory)
								END
								
								INSERT INTO tbl_ContactActivityScoreHistory (ContactActivityScoreID, Operation, Score, ActivityDate, Comment)
								VALUES (@_ContactActivityScoreID, @_ScoreOperation, @_AddedScore, GETDATE(), @_InsertedWorkflowElementID)
								-- Конец добавления баллов
								
								-- Начало обновления баллов контакта
								DECLARE @maxScoreTable TABLE
								(
									Score int,
									ScoreTypeID uniqueidentifier
								)

								INSERT INTO @maxScoreTable (Score, ScoreTypeID)
								SELECT TOP 1 SUM(Score) AS scoresum, SiteActivityScoreTypeID
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID
								GROUP BY SiteActivityScoreTypeID
								ORDER BY scoresum DESC

								DECLARE @_BehaviorScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=0 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								DECLARE @_CharacteristicsScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=1 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								IF (@_BehaviorScore IS NOT NULL)
								BEGIN
									DECLARE @_minScoreReadyToSell int = (SELECT MIN(MinScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									DECLARE @_maxScoreReadyToSell int = (SELECT MAX(MaxScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									
									IF (@_BehaviorScore < @_minScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_minScoreReadyToSell
									END
									IF (@_BehaviorScore > @_maxScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_maxScoreReadyToSell
									END

									UPDATE tbl_Contact
									SET BehaviorScore=@_BehaviorScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET ReadyToSellID=(SELECT TOP 1 ID FROM tbl_ReadyToSell WHERE SiteID=@_SiteID AND (@_BehaviorScore >= MinScore AND @_BehaviorScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								IF (@_CharacteristicsScore IS NOT NULL)
								BEGIN
									DECLARE @_minScorePriority int = (SELECT MIN(MinScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									DECLARE @_maxScorePriority int = (SELECT MAX(MaxScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									
									IF (@_CharacteristicsScore < @_minScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_minScorePriority
									END
									IF (@_CharacteristicsScore > @_maxScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_maxScorePriority
									END

									UPDATE tbl_Contact
									SET CharacteristicsScore=@_CharacteristicsScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET PriorityID=(SELECT TOP 1 ID FROM tbl_Priorities WHERE SiteID=@_SiteID AND (@_CharacteristicsScore >= MinScore AND @_CharacteristicsScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								UPDATE tbl_Contact
								SET Score= BehaviorScore + CharacteristicsScore
								WHERE ID=@_WorkflowParameterID
								-- Конец обновления баллов контакта
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
						END
						
						DELETE #WorkflowTemplateElementRelation WHERE EndElementID=@_WorkflowTemplateElementID
					END
					DROP TABLE #WorkflowTemplateElementRelation
		END
		-- Входящие элемент просрочен
		ELSE
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
	END
	-- Если нет выходов с элемента
	ELSE
	BEGIN
		SET @_WorkflowElementStatus = 2
		
		-- Если ошибка элемента и нет больше элементов в ожидании
		IF (SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND [Status]=0) = 1
		BEGIN
			UPDATE tbl_Workflow
			SET EndDate=GETDATE(), [Status]=3
			WHERE ID=@_WorkflowID
		END
	END
	
	
	-- Обновление статуса элемента процесса
	UPDATE tbl_WorkflowElement
	SET EndDate=@_EndDateElement,
		[Status]=@_WorkflowElementStatus,
		Result=@_StartElementResult
	WHERE ID=@_WorkflowElementID
	
END	
END'

commit
exec LBC_SetVersion 258
END

/*******************************************************************************
	2012-08-28
	Периоды для шаблонов процессов
*******************************************************************************/
if ( dbo.LBC_Version() < 259 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER FUNCTION [dbo].[GetSiteActionPlannedDate] (@WorkflowTemplateElementID uniqueidentifier, @PlannedDate datetime)
	RETURNS datetime AS
BEGIN
	IF (SELECT COUNT(*) FROM tbl_WorkflowTemplateElementPeriod WHERE WorkflowTemplateElementID=@WorkflowTemplateElementID) = 0
	BEGIN
		RETURN @PlannedDate
	END

	DECLARE @FirstDayOfWeek datetime = (SELECT DATEADD(ww, DATEDIFF(ww,0,@PlannedDate), 0))

	DECLARE @DayWeek int
	DECLARE @FromTime time(7)
	DECLARE @ToTime time(7)
	DECLARE @Coef int = 3
	DECLARE @i int = 0

	DECLARE @PeriodDates TABLE
	(
		FromTime datetime,
		ToTime datetime
	)

	DECLARE @PeriodID_Cursor varchar(max)
	DECLARE PeriodID_Cursor CURSOR FOR
	SELECT ID FROM tbl_WorkflowTemplateElementPeriod
	WHERE WorkflowTemplateElementID=@WorkflowTemplateElementID
	OPEN PeriodID_Cursor
	FETCH NEXT FROM PeriodID_Cursor INTO @PeriodID_Cursor
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SELECT @DayWeek=DayWeek, @FromTime=ISNULL(FromTime, CAST(''00:00'' AS time(7))), @ToTime=ISNULL(ToTime, CAST(''23:59:59'' AS time(7)))
		FROM tbl_WorkflowTemplateElementPeriod
		WHERE ID=@PeriodID_Cursor
		
		SET @i = 0
		
		IF (@DayWeek = 0)
		BEGIN
			WHILE (@i < 14)
			BEGIN
				INSERT INTO @PeriodDates (FromTime, ToTime)
				VALUES (
					CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef) + @i, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@FromTime,108) AS Datetime),
					CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef) + @i, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@ToTime,108) AS Datetime)
				)

				SET @i = @i + 1
			END
		END
		
		IF (@DayWeek = 1 OR @DayWeek = 2)
		BEGIN
			WHILE (@i < 14)
			BEGIN
				IF ((@i <> 5 AND @i <> 6 AND @i <> 12 AND @i <> 13) AND @DayWeek = 1)
				BEGIN
					INSERT INTO @PeriodDates (FromTime, ToTime)
					VALUES (
						CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef) + @i, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@FromTime,108) AS Datetime),
						CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef) + @i, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@ToTime,108) AS Datetime)
					)
				END
				
				IF ((@i = 5 OR @i = 6 OR @i = 12 OR @i = 13) AND @DayWeek = 2)
				BEGIN
					INSERT INTO @PeriodDates (FromTime, ToTime)
					VALUES (
						CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef) + @i, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@FromTime,108) AS Datetime),
						CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef) + @i, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@ToTime,108) AS Datetime)
					)
				END

				SET @i = @i + 1
			END
		END
		
		IF (@DayWeek > 2)
		BEGIN
			INSERT INTO @PeriodDates (FromTime, ToTime)
			VALUES (
				CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef), @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@FromTime,108) AS Datetime),
				CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef), @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@ToTime,108) AS Datetime)
			)
			
			INSERT INTO @PeriodDates (FromTime, ToTime)
			VALUES (
				CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef) + 7, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@FromTime,108) AS Datetime),
				CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef) + 7, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@ToTime,108) AS Datetime)
			)
		END
		
		FETCH NEXT FROM PeriodID_Cursor INTO @PeriodID_Cursor
	END
	CLOSE PeriodID_Cursor
	DEALLOCATE PeriodID_Cursor

	DECLARE @NextPlannedDate datetime = NULL

	SELECT @NextPlannedDate=(CASE WHEN FromTime IS NOT NULL THEN FromTime END)
	FROM @PeriodDates
	WHERE @PlannedDate >= FromTime AND @PlannedDate <= ToTime

	IF (@NextPlannedDate IS NOT NULL)
	BEGIN
		RETURN @PlannedDate
	END
	ELSE
	BEGIN
		SELECT TOP 1 @NextPlannedDate=FromTime
		FROM @PeriodDates
		WHERE @PlannedDate < FromTime
		ORDER BY FromTime ASC
		
		RETURN @NextPlannedDate
	END
	
	RETURN NULL
END'

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[WorkflowProcessing]
(
	@_WorkflowElementID uniqueidentifier, -- Входящий элемент
	@_StartElementResult nvarchar(255) = NULL -- Результат выполнения элемента процесса
)
AS
BEGIN
	DECLARE @_SiteID uniqueidentifier
	DECLARE @_WorkflowStartDate datetime
	DECLARE @_WorkflowID uniqueidentifier
	DECLARE @_WorkflowTemplateContactID uniqueidentifier
	DECLARE @_WorkflowTemplateElementID uniqueidentifier
	DECLARE @_WorkflowParameterID uniqueidentifier
	DECLARE @_ControlDate datetime
	DECLARE @_WorkflowElementStatus int = 0
	DECLARE @_WorkflowStatus int = 0
	DECLARE @_WorkflowResult nvarchar(255)
	DECLARE @_MassWorkflowID uniqueidentifier = NULL
	DECLARE @_ElementType int
	DECLARE @_EndDateElement datetime = GETDATE()
	
	DECLARE @_StartAfter int
	DECLARE @_StartPeriod int
	DECLARE @_DurationHours int
	DECLARE @_DurationMinutes int
	DECLARE @_ControlAfter int
	DECLARE @_ControlPeriod int
	DECLARE @_ControlFromBeginProccess bit
	
	SELECT @_WorkflowID=w.WorkflowID,
		   @_WorkflowTemplateElementID=w.WorkflowTemplateElementID,
		   @_ControlDate=w.ControlDate,
		   @_WorkflowTemplateContactID=wt.ContactID,
		   @_WorkflowStatus=wf.[Status],
		   @_ElementType=t.ElementType
		   --@_StartAfter=t.StartAfter,
		   --@_StartPeriod=t.StartPeriod,
		   --@_ControlAfter=t.ControlAfter,
		   --@_ControlPeriod=t.ControlPeriod,
		   --@_ControlFromBeginProccess=t.ControlFromBeginProccess
	FROM tbl_WorkflowElement AS w
	LEFT JOIN tbl_WorkflowTemplateElement AS t ON t.ID=w.WorkflowTemplateElementID
	LEFT JOIN tbl_WorkflowTemplate AS wt ON wt.ID=t.WorkflowTemplateID
	LEFT JOIN tbl_Workflow AS wf ON wf.ID=w.WorkflowID
	WHERE w.ID=@_WorkflowElementID AND (t.ElementType<>1 OR (t.ElementType=1 AND w.[Status]=0))
	
	SELECT @_SiteID=SiteID, @_WorkflowStartDate=StartDate, @_MassWorkflowID=MassWorkflowID
	FROM tbl_Workflow
	WHERE ID=@_WorkflowID
	
IF (@_WorkflowStatus=0)
BEGIN	
	
	-- Выбираем все элементы по связям, где входящий элемент является начальным
	-- и с выходящим результатом
	SELECT EndElementID
	INTO #WorkflowTemplateElementRelation
	FROM tbl_WorkflowTemplateElementRelation
	WHERE StartElementID=@_WorkflowTemplateElementID AND (StartElementResult=@_StartElementResult OR @_StartElementResult IS NULL)
	
	-- Если выходы с элемента есть
	IF ((SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0)
	BEGIN
		SET @_WorkflowElementStatus = 1
		
		IF (@_StartElementResult=0 AND @_ElementType=2) -- Событие не произошло (просрочен)
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
		
		-- Входящий элемент не просрочен
		IF (
			((@_ControlDate IS NULL) OR (@_ControlDate > GETDATE()))
			OR (@_ElementType = 2) -- Ожидание события
			)
		BEGIN
					WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0
					BEGIN
						SELECT TOP 1 @_WorkflowTemplateElementID=EndElementID
						FROM #WorkflowTemplateElementRelation
						
						IF ((SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND WorkflowTemplateElementID=@_WorkflowTemplateElementID) = 0)
						BEGIN
							DECLARE @_WorkflowTemplateElementType int
							DECLARE @_WorkflowTemplateElementName nvarchar(255)
							DECLARE @_IsActive bit
							SELECT @_WorkflowTemplateElementType=ElementType, @_WorkflowTemplateElementName=Name, @_IsActive=IsActive
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							DECLARE @_InsertedWorkflowElementID uniqueidentifier = NEWID()
							
							SELECT @_StartAfter=StartAfter,
								   @_StartPeriod=StartPeriod,
								   @_DurationHours=DurationHours,
								   @_DurationMinutes=DurationMinutes,
								   @_ControlAfter=ControlAfter,
								   @_ControlPeriod=ControlPeriod,
								   @_ControlFromBeginProccess=ControlFromBeginProccess
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							-- Тип элемента "Окончание процесса"
							IF (@_WorkflowTemplateElementType=6)
							BEGIN
								-- Если нет больше элементов со статусов в Ожидании (кроме текущего), завершаем процесс
								IF (SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND [Status]=0) = 1
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 1)
									
									UPDATE tbl_Workflow
									SET EndDate=GETDATE(), [Status]=1
									WHERE ID=@_WorkflowID
									
									-- Программа развития "Завершена"
									IF (@_MassWorkflowID IS NOT NULL)
									BEGIN
										IF (SELECT COUNT(*)
										FROM tbl_Workflow
										WHERE MassWorkflowID=@_MassWorkflowID AND [Status]=0) = 0
										BEGIN
											UPDATE tbl_MassWorkflow
											SET [Status]=2
											WHERE ID=@_MassWorkflowID
										END
									END
								END
							END
							
							-- определяем параметер
							SET @_WorkflowParameterID =
							(SELECT tbl_WorkflowParameter.[Value]
							FROM tbl_WorkflowParameter
							LEFT JOIN tbl_WorkflowTemplateParameter ON tbl_WorkflowTemplateParameter.ID=tbl_WorkflowParameter.WorkflowTemplateParameterID
							WHERE tbl_WorkflowParameter.WorkflowID=@_WorkflowID
								  AND tbl_WorkflowTemplateParameter.Name=N''Контакт''
								  AND tbl_WorkflowTemplateParameter.IsSystem=1)
								  
							-- определяем через сколько запускать элемент, если 0 то сразу
							DECLARE @_ActionDate datetime = GETDATE()
							IF (@_StartAfter <> 0)
							BEGIN
								SET @_ActionDate = CASE
									WHEN @_StartPeriod = 0 THEN DATEADD(minute, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 1 THEN DATEADD(hour, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 2 THEN DATEADD(day, @_StartAfter, @_ActionDate)
								END
							END
							
							-- дата контроля
							SET @_ControlDate = GETDATE()
							IF (@_ControlFromBeginProccess=1) -- От начала процесса
							BEGIN
								SET @_ControlDate = @_WorkflowStartDate
							END
							
							SET @_ControlDate = CASE
								WHEN @_ControlPeriod = 0 THEN DATEADD(minute, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 1 THEN DATEADD(hour, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 2 THEN DATEADD(day, @_ControlAfter, @_ControlDate)
							END
							
							
							-- Тип элемента "Сообщение"
							IF (@_WorkflowTemplateElementType = 0)
							BEGIN
								-- Начало добавления сообщения в очередь
								DECLARE @_SiteActionTemplateID uniqueidentifier = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActionTemplateID'')
								
								DECLARE @_NotBeforeDate datetime = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''NotBeforeDate'')
								
								DECLARE @_NotLaterDate datetime = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''NotLaterDate'')
								
								DECLARE @_AddSiteAction bit = 1
								
								IF ((@_NotBeforeDate IS NOT NULL) AND (@_ActionDate < @_NotBeforeDate))
								BEGIN
									SET @_ActionDate = @_NotBeforeDate
								END
								
								IF ((@_NotLaterDate IS NOT NULL) AND (@_ActionDate > @_NotLaterDate))
								BEGIN
									SET @_AddSiteAction = 0
								END
								
								IF (@_AddSiteAction = 1)
								BEGIN
									EXEC @_ActionDate = GetSiteActionPlannedDate @_WorkflowTemplateElementID, @_ActionDate
									IF (@_ActionDate IS NULL OR ((@_NotLaterDate IS NOT NULL) AND (@_ActionDate > @_NotLaterDate)))
									BEGIN
										SET @_AddSiteAction = 0
									END
								END
								
								
								IF (@_AddSiteAction = 1)
								BEGIN
									DECLARE @MessageTitle nvarchar(255)
									DECLARE @MessageText nvarchar(max)
									SELECT @MessageTitle=MessageCaption, @MessageText=MessageBody
									FROM tbl_SiteActionTemplate
									WHERE ID=@_SiteActionTemplateID
									
									DECLARE @_SiteActionID uniqueidentifier = NEWID()
									INSERT INTO tbl_SiteAction (ID, SiteID, SiteActionTemplateID, ContactID, ActionStatusID, ActionDate, MessageTitle, MessageText)
									VALUES (@_SiteActionID, @_SiteID, @_SiteActionTemplateID, @_WorkflowParameterID, 1, @_ActionDate, @MessageTitle, @MessageText)
								END
								-- Конец добавления сообщения в очередь
								
								IF (@_AddSiteAction = 1)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_SiteActionID)
								END
								ELSE
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 2)
								END
							END
							
							-- Тип элемента "Ожидание события"
							IF (@_WorkflowTemplateElementType = 2)
							BEGIN
								IF (@_ControlAfter<>0)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], ControlDate)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_ControlDate)
								END
								ELSE
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0)
								END
							END
							
							-- Тип элемента "Действие"
							IF (@_WorkflowTemplateElementType = 3)
							BEGIN
								-- Начало добавления действия
								DECLARE @_ContactActivityDescription nvarchar(255) = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ContactActivityDescription'')
								
								DECLARE @_ContactActivityID uniqueidentifier = NEWID()
								INSERT INTO tbl_ContactActivity (ID, SiteID, ContactID, CreatedAt, ActivityTypeID, ActivityCode)
								VALUES (@_ContactActivityID, @_SiteID, @_WorkflowParameterID, GETDATE(), 13, @_ContactActivityDescription)
								-- Конец добавления действия
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1, @_ContactActivityID)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Задача"
							IF (@_WorkflowTemplateElementType = 1)
							BEGIN
								-- Начало добавления задачи
								DECLARE @_TaskID uniqueidentifier = NEWID()
								DECLARE @_TaskTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskType'') AS uniqueidentifier)
								
								DECLARE @_IsImportantTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsImportantTask'') AS bit)
								
								DECLARE @_IsUrgentTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsUrgentTask'') AS bit)
								
								DECLARE @_TaskEndDate datetime = @_ActionDate
								SET @_TaskEndDate = DATEADD(hour, @_DurationHours, @_TaskEndDate)
								SET @_TaskEndDate = DATEADD(minute, @_DurationMinutes, @_TaskEndDate)
								INSERT INTO tbl_Task (ID, SiteID, Title, TaskTypeID, StartDate, EndDate, DateOfControl, IsImportantTask, PlanDurationMinutes, PlanDurationHours, ResponsibleID, CreatorID, IsUrgentTask, TaskStatusID)
								VALUES (@_TaskID, @_SiteID, @_WorkflowTemplateElementName, @_TaskTypeID, @_ActionDate, @_TaskEndDate, @_ControlDate, @_IsImportantTask, @_DurationMinutes, @_DurationHours, @_WorkflowTemplateContactID, @_WorkflowTemplateContactID, @_IsUrgentTask, 1)
								-- Конец добавления задачи
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, ControlDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), @_ControlDate, 0, @_TaskID)
							END
							
							-- Тип элемента "Сегментация"
							IF (@_WorkflowTemplateElementType = 7)
							BEGIN
								SELECT ID
								INTO #WorkflowTemplateElementTag
								FROM tbl_WorkflowTemplateElementTag
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID
								
								DECLARE @_WorkflowTemplateElementTagID uniqueidentifier
								DECLARE @_SiteTagID uniqueidentifier
								DECLARE @_Operation int
								WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementTag) > 0
								BEGIN
									SELECT TOP 1 @_WorkflowTemplateElementTagID=ID
									FROM #WorkflowTemplateElementTag
									
									SELECT @_SiteTagID=SiteTagID, @_Operation=Operation
									FROM tbl_WorkflowTemplateElementTag
									WHERE ID=@_WorkflowTemplateElementTagID
									
									IF (@_Operation = 0)
									BEGIN
										DELETE FROM tbl_SiteTagObjects
										WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID
									END
									ELSE
									BEGIN
										IF (SELECT COUNT(*) FROM tbl_SiteTagObjects WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID) = 0
										BEGIN
											INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID)
											VALUES (@_SiteTagID, @_WorkflowParameterID)
										END
									END
									
									DELETE #WorkflowTemplateElementTag WHERE ID=@_WorkflowTemplateElementTagID
								END
								DROP TABLE #WorkflowTemplateElementTag

								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Скорринг"
							IF (@_WorkflowTemplateElementType = 8)
							BEGIN
								-- Начало добавления баллов
								--DECLARE @_SiteActivityScoreTypeID uniqueidentifier = NEWID()
								DECLARE @_SiteActivityScoreTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActivityScoreType'') AS uniqueidentifier)
								
								DECLARE @_ScoreCategory int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreCategory'') AS int)
								
								DECLARE @_ScoreOperation int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreOperation'') AS int)
								
								DECLARE @_AddedScore int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''AddedScore'') AS int)
								
								-- есть балл такого типа и такой категории
								DECLARE @_ContactActivityScoreID uniqueidentifier
								DECLARE @_oldScore int
								
								SELECT @_ContactActivityScoreID=ID, @_oldScore=Score
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								
								IF (@_ContactActivityScoreID IS NOT NULL)
								BEGIN
									DECLARE @_newScore int = CASE @_ScoreOperation
															 WHEN 0 THEN @_AddedScore -- (=)
															 WHEN 1 THEN @_oldScore + @_AddedScore -- (+)
															 WHEN 2 THEN @_oldScore - @_AddedScore -- (-)
															 WHEN 3 THEN @_oldScore * @_AddedScore -- (*)
															 END
									UPDATE tbl_ContactActivityScore
									SET Score=@_newScore
									WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								END
								ELSE
								BEGIN
									SET @_ContactActivityScoreID = NEWID()
									
									INSERT INTO tbl_ContactActivityScore (ID, SiteID, SiteActivityScoreTypeID, ContactID, Score, ScoreCategory)
									VALUES (@_ContactActivityScoreID, @_SiteID, @_SiteActivityScoreTypeID, @_WorkflowParameterID, @_AddedScore, @_ScoreCategory)
								END
								
								INSERT INTO tbl_ContactActivityScoreHistory (ContactActivityScoreID, Operation, Score, ActivityDate, Comment)
								VALUES (@_ContactActivityScoreID, @_ScoreOperation, @_AddedScore, GETDATE(), @_InsertedWorkflowElementID)
								-- Конец добавления баллов
								
								-- Начало обновления баллов контакта
								DECLARE @maxScoreTable TABLE
								(
									Score int,
									ScoreTypeID uniqueidentifier
								)

								INSERT INTO @maxScoreTable (Score, ScoreTypeID)
								SELECT TOP 1 SUM(Score) AS scoresum, SiteActivityScoreTypeID
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID
								GROUP BY SiteActivityScoreTypeID
								ORDER BY scoresum DESC

								DECLARE @_BehaviorScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=0 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								DECLARE @_CharacteristicsScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=1 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								IF (@_BehaviorScore IS NOT NULL)
								BEGIN
									DECLARE @_minScoreReadyToSell int = (SELECT MIN(MinScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									DECLARE @_maxScoreReadyToSell int = (SELECT MAX(MaxScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									
									IF (@_BehaviorScore < @_minScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_minScoreReadyToSell
									END
									IF (@_BehaviorScore > @_maxScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_maxScoreReadyToSell
									END

									UPDATE tbl_Contact
									SET BehaviorScore=@_BehaviorScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET ReadyToSellID=(SELECT TOP 1 ID FROM tbl_ReadyToSell WHERE SiteID=@_SiteID AND (@_BehaviorScore >= MinScore AND @_BehaviorScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								IF (@_CharacteristicsScore IS NOT NULL)
								BEGIN
									DECLARE @_minScorePriority int = (SELECT MIN(MinScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									DECLARE @_maxScorePriority int = (SELECT MAX(MaxScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									
									IF (@_CharacteristicsScore < @_minScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_minScorePriority
									END
									IF (@_CharacteristicsScore > @_maxScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_maxScorePriority
									END

									UPDATE tbl_Contact
									SET CharacteristicsScore=@_CharacteristicsScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET PriorityID=(SELECT TOP 1 ID FROM tbl_Priorities WHERE SiteID=@_SiteID AND (@_CharacteristicsScore >= MinScore AND @_CharacteristicsScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								UPDATE tbl_Contact
								SET Score= BehaviorScore + CharacteristicsScore
								WHERE ID=@_WorkflowParameterID
								-- Конец обновления баллов контакта
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
						END
						
						DELETE #WorkflowTemplateElementRelation WHERE EndElementID=@_WorkflowTemplateElementID
					END
					DROP TABLE #WorkflowTemplateElementRelation
		END
		-- Входящие элемент просрочен
		ELSE
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
	END
	-- Если нет выходов с элемента
	ELSE
	BEGIN
		SET @_WorkflowElementStatus = 2
		
		-- Если ошибка элемента и нет больше элементов в ожидании
		IF (SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND [Status]=0) = 1
		BEGIN
			UPDATE tbl_Workflow
			SET EndDate=GETDATE(), [Status]=3
			WHERE ID=@_WorkflowID
		END
	END
	
	
	-- Обновление статуса элемента процесса
	UPDATE tbl_WorkflowElement
	SET EndDate=@_EndDateElement,
		[Status]=@_WorkflowElementStatus,
		Result=@_StartElementResult
	WHERE ID=@_WorkflowElementID
	
END	
END'

commit
exec LBC_SetVersion 259
END

/*******************************************************************************
	2012-08-28
	Периоды для шаблонов процессов
*******************************************************************************/
if ( dbo.LBC_Version() < 260 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER FUNCTION [dbo].[GetSiteActionPlannedDate] (@WorkflowTemplateElementID uniqueidentifier, @PlannedDate datetime)
	RETURNS datetime AS
BEGIN
	IF (SELECT COUNT(*) FROM tbl_WorkflowTemplateElementPeriod WHERE WorkflowTemplateElementID=@WorkflowTemplateElementID) = 0
	BEGIN
		RETURN @PlannedDate
	END

	DECLARE @FirstDayOfWeek datetime = (SELECT DATEADD(ww, DATEDIFF(ww,0,@PlannedDate), 0))

	DECLARE @DayWeek int
	DECLARE @FromTime time(0)
	DECLARE @ToTime time(0)
	DECLARE @Coef int = 3
	DECLARE @i int = 0

	DECLARE @PeriodDates TABLE
	(
		FromTime datetime,
		ToTime datetime
	)

	DECLARE @PeriodID_Cursor varchar(max)
	DECLARE PeriodID_Cursor CURSOR FOR
	SELECT ID FROM tbl_WorkflowTemplateElementPeriod
	WHERE WorkflowTemplateElementID=@WorkflowTemplateElementID
	OPEN PeriodID_Cursor
	FETCH NEXT FROM PeriodID_Cursor INTO @PeriodID_Cursor
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SELECT @DayWeek=DayWeek, @FromTime=ISNULL(FromTime, CAST(''00:00'' AS time(0))), @ToTime=ISNULL(ToTime, CAST(''23:59:59'' AS time(0)))
		FROM tbl_WorkflowTemplateElementPeriod
		WHERE ID=@PeriodID_Cursor
		
		SET @i = 0
		
		IF (@DayWeek = 0)
		BEGIN
			WHILE (@i < 14)
			BEGIN
				INSERT INTO @PeriodDates (FromTime, ToTime)
				VALUES (
					CAST(convert(varchar, DATEADD(day, @i, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@FromTime,108) AS Datetime),
					CAST(convert(varchar, DATEADD(day, @i, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@ToTime,108) AS Datetime)
				)

				SET @i = @i + 1
			END
		END
		
		IF (@DayWeek = 1 OR @DayWeek = 2)
		BEGIN
			WHILE (@i < 14)
			BEGIN
				IF ((@i <> 5 AND @i <> 6 AND @i <> 12 AND @i <> 13) AND @DayWeek = 1)
				BEGIN
					INSERT INTO @PeriodDates (FromTime, ToTime)
					VALUES (
						CAST(convert(varchar, DATEADD(day, @i, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@FromTime,108) AS Datetime),
						CAST(convert(varchar, DATEADD(day, @i, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@ToTime,108) AS Datetime)
					)
				END
				
				IF ((@i = 5 OR @i = 6 OR @i = 12 OR @i = 13) AND @DayWeek = 2)
				BEGIN
					INSERT INTO @PeriodDates (FromTime, ToTime)
					VALUES (
						CAST(convert(varchar, DATEADD(day, @i, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@FromTime,108) AS Datetime),
						CAST(convert(varchar, DATEADD(day, @i, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@ToTime,108) AS Datetime)
					)
				END

				SET @i = @i + 1
			END
		END
		
		IF (@DayWeek > 2)
		BEGIN
			INSERT INTO @PeriodDates (FromTime, ToTime)
			VALUES (
				CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef), @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@FromTime,108) AS Datetime),
				CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef), @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@ToTime,108) AS Datetime)
			)
			
			INSERT INTO @PeriodDates (FromTime, ToTime)
			VALUES (
				CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef) + 7, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@FromTime,108) AS Datetime),
				CAST(convert(varchar, DATEADD(day, (@DayWeek - @Coef) + 7, @FirstDayOfWeek), 1) + '' '' + CONVERT(VARCHAR,@ToTime,108) AS Datetime)
			)
		END
		
		FETCH NEXT FROM PeriodID_Cursor INTO @PeriodID_Cursor
	END
	CLOSE PeriodID_Cursor
	DEALLOCATE PeriodID_Cursor

	DECLARE @NextPlannedDate datetime = NULL

	SELECT @NextPlannedDate=(CASE WHEN FromTime IS NOT NULL THEN FromTime END)
	FROM @PeriodDates
	WHERE @PlannedDate >= FromTime AND @PlannedDate <= ToTime

	IF (@NextPlannedDate IS NOT NULL)
	BEGIN
		RETURN @PlannedDate
	END
	ELSE
	BEGIN
		SELECT TOP 1 @NextPlannedDate=FromTime
		FROM @PeriodDates
		WHERE @PlannedDate < FromTime
		ORDER BY FromTime ASC
		
		RETURN @NextPlannedDate
	END
	
	RETURN NULL
END'

commit
exec LBC_SetVersion 260
END

/*******************************************************************************
	2012-08-28
	Периоды для шаблонов процессов
*******************************************************************************/
if ( dbo.LBC_Version() < 261 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[WorkflowProcessing]
(
	@_WorkflowElementID uniqueidentifier, -- Входящий элемент
	@_StartElementResult nvarchar(255) = NULL -- Результат выполнения элемента процесса
)
AS
BEGIN
	DECLARE @_SiteID uniqueidentifier
	DECLARE @_WorkflowStartDate datetime
	DECLARE @_WorkflowID uniqueidentifier
	DECLARE @_WorkflowTemplateContactID uniqueidentifier
	DECLARE @_WorkflowTemplateElementID uniqueidentifier
	DECLARE @_WorkflowParameterID uniqueidentifier
	DECLARE @_ControlDate datetime
	DECLARE @_WorkflowElementStatus int = 0
	DECLARE @_WorkflowStatus int = 0
	DECLARE @_WorkflowResult nvarchar(255)
	DECLARE @_MassWorkflowID uniqueidentifier = NULL
	DECLARE @_ElementType int
	DECLARE @_EndDateElement datetime = GETDATE()
	
	DECLARE @_StartAfter int
	DECLARE @_StartPeriod int
	DECLARE @_DurationHours int
	DECLARE @_DurationMinutes int
	DECLARE @_ControlAfter int
	DECLARE @_ControlPeriod int
	DECLARE @_ControlFromBeginProccess bit
	
	DECLARE @_CountWaitingElement int
	
	SELECT @_WorkflowID=w.WorkflowID,
		   @_WorkflowTemplateElementID=w.WorkflowTemplateElementID,
		   @_ControlDate=w.ControlDate,
		   @_WorkflowTemplateContactID=wt.ContactID,
		   @_WorkflowStatus=wf.[Status],
		   @_ElementType=t.ElementType
		   --@_StartAfter=t.StartAfter,
		   --@_StartPeriod=t.StartPeriod,
		   --@_ControlAfter=t.ControlAfter,
		   --@_ControlPeriod=t.ControlPeriod,
		   --@_ControlFromBeginProccess=t.ControlFromBeginProccess
	FROM tbl_WorkflowElement AS w
	LEFT JOIN tbl_WorkflowTemplateElement AS t ON t.ID=w.WorkflowTemplateElementID
	LEFT JOIN tbl_WorkflowTemplate AS wt ON wt.ID=t.WorkflowTemplateID
	LEFT JOIN tbl_Workflow AS wf ON wf.ID=w.WorkflowID
	WHERE w.ID=@_WorkflowElementID AND (t.ElementType<>1 OR (t.ElementType=1 AND w.[Status]=0))
	
	SELECT @_SiteID=SiteID, @_WorkflowStartDate=StartDate, @_MassWorkflowID=MassWorkflowID
	FROM tbl_Workflow
	WHERE ID=@_WorkflowID
	
IF (@_WorkflowStatus=0)
BEGIN	
	
	-- Выбираем все элементы по связям, где входящий элемент является начальным
	-- и с выходящим результатом
	SELECT EndElementID
	INTO #WorkflowTemplateElementRelation
	FROM tbl_WorkflowTemplateElementRelation
	WHERE StartElementID=@_WorkflowTemplateElementID AND (StartElementResult=@_StartElementResult OR @_StartElementResult IS NULL)
	
	-- Если выходы с элемента есть
	IF ((SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0)
	BEGIN
		SET @_WorkflowElementStatus = 1
		
		IF (@_StartElementResult=0 AND @_ElementType=2) -- Событие не произошло (просрочен)
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
		
		-- Входящий элемент не просрочен
		IF (
			((@_ControlDate IS NULL) OR (@_ControlDate > GETDATE()))
			OR (@_ElementType = 2) -- Ожидание события
			)
		BEGIN
					WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0
					BEGIN
						SELECT TOP 1 @_WorkflowTemplateElementID=EndElementID
						FROM #WorkflowTemplateElementRelation
						
						IF ((SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND WorkflowTemplateElementID=@_WorkflowTemplateElementID) = 0)
						BEGIN
							DECLARE @_WorkflowTemplateElementType int
							DECLARE @_WorkflowTemplateElementName nvarchar(255)
							DECLARE @_IsActive bit
							SELECT @_WorkflowTemplateElementType=ElementType, @_WorkflowTemplateElementName=Name, @_IsActive=IsActive
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							DECLARE @_InsertedWorkflowElementID uniqueidentifier = NEWID()
							
							SELECT @_StartAfter=StartAfter,
								   @_StartPeriod=StartPeriod,
								   @_DurationHours=DurationHours,
								   @_DurationMinutes=DurationMinutes,
								   @_ControlAfter=ControlAfter,
								   @_ControlPeriod=ControlPeriod,
								   @_ControlFromBeginProccess=ControlFromBeginProccess
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							-- Тип элемента "Окончание процесса"
							IF (@_WorkflowTemplateElementType=6)
							BEGIN
								-- Если нет больше элементов со статусов в Ожидании (кроме текущего), завершаем процесс
								SET @_CountWaitingElement = (SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND [Status]=0)
								IF (@_CountWaitingElement = 0 OR @_CountWaitingElement = 1)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 1)
									
									UPDATE tbl_Workflow
									SET EndDate=GETDATE(), [Status]=1
									WHERE ID=@_WorkflowID
									
									-- Программа развития "Завершена"
									IF (@_MassWorkflowID IS NOT NULL)
									BEGIN
										IF (SELECT COUNT(*)
										FROM tbl_Workflow
										WHERE MassWorkflowID=@_MassWorkflowID AND [Status]=0) = 0
										BEGIN
											UPDATE tbl_MassWorkflow
											SET [Status]=2
											WHERE ID=@_MassWorkflowID
										END
									END
								END
							END
							
							-- определяем параметер
							SET @_WorkflowParameterID =
							(SELECT tbl_WorkflowParameter.[Value]
							FROM tbl_WorkflowParameter
							LEFT JOIN tbl_WorkflowTemplateParameter ON tbl_WorkflowTemplateParameter.ID=tbl_WorkflowParameter.WorkflowTemplateParameterID
							WHERE tbl_WorkflowParameter.WorkflowID=@_WorkflowID
								  AND tbl_WorkflowTemplateParameter.Name=N''Контакт''
								  AND tbl_WorkflowTemplateParameter.IsSystem=1)
								  
							-- определяем через сколько запускать элемент, если 0 то сразу
							DECLARE @_ActionDate datetime = GETDATE()
							IF (@_StartAfter <> 0)
							BEGIN
								SET @_ActionDate = CASE
									WHEN @_StartPeriod = 0 THEN DATEADD(minute, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 1 THEN DATEADD(hour, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 2 THEN DATEADD(day, @_StartAfter, @_ActionDate)
								END
							END
							
							-- дата контроля
							SET @_ControlDate = GETDATE()
							IF (@_ControlFromBeginProccess=1) -- От начала процесса
							BEGIN
								SET @_ControlDate = @_WorkflowStartDate
							END
							
							SET @_ControlDate = CASE
								WHEN @_ControlPeriod = 0 THEN DATEADD(minute, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 1 THEN DATEADD(hour, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 2 THEN DATEADD(day, @_ControlAfter, @_ControlDate)
							END
							
							
							-- Тип элемента "Сообщение"
							IF (@_WorkflowTemplateElementType = 0)
							BEGIN
								-- Начало добавления сообщения в очередь
								DECLARE @_SiteActionTemplateID uniqueidentifier = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActionTemplateID'')
								
								DECLARE @_NotBeforeDate datetime = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''NotBeforeDate'')
								
								DECLARE @_NotLaterDate datetime = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''NotLaterDate'')
								
								DECLARE @_AddSiteAction bit = 1
								
								IF ((@_NotBeforeDate IS NOT NULL) AND (@_ActionDate < @_NotBeforeDate))
								BEGIN
									SET @_ActionDate = @_NotBeforeDate
								END
								
								IF ((@_NotLaterDate IS NOT NULL) AND (@_ActionDate > @_NotLaterDate))
								BEGIN
									SET @_AddSiteAction = 0
								END
								
								IF (@_AddSiteAction = 1)
								BEGIN
									EXEC @_ActionDate = GetSiteActionPlannedDate @_WorkflowTemplateElementID, @_ActionDate
									IF (@_ActionDate IS NULL OR ((@_NotLaterDate IS NOT NULL) AND (@_ActionDate > @_NotLaterDate)))
									BEGIN
										SET @_AddSiteAction = 0
									END
								END
								
								
								IF (@_AddSiteAction = 1)
								BEGIN
									DECLARE @MessageTitle nvarchar(255)
									DECLARE @MessageText nvarchar(max)
									SELECT @MessageTitle=MessageCaption, @MessageText=MessageBody
									FROM tbl_SiteActionTemplate
									WHERE ID=@_SiteActionTemplateID
									
									DECLARE @_SiteActionID uniqueidentifier = NEWID()
									INSERT INTO tbl_SiteAction (ID, SiteID, SiteActionTemplateID, ContactID, ActionStatusID, ActionDate, MessageTitle, MessageText)
									VALUES (@_SiteActionID, @_SiteID, @_SiteActionTemplateID, @_WorkflowParameterID, 1, @_ActionDate, @MessageTitle, @MessageText)
								END
								-- Конец добавления сообщения в очередь
								
								IF (@_AddSiteAction = 1)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_SiteActionID)
								END
								ELSE
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 2)
									
									EXEC WorkflowProcessing @_InsertedWorkflowElementID, 4
								END
							END
							
							-- Тип элемента "Ожидание события"
							IF (@_WorkflowTemplateElementType = 2)
							BEGIN
								IF (@_ControlAfter<>0)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], ControlDate)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_ControlDate)
								END
								ELSE
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0)
								END
							END
							
							-- Тип элемента "Действие"
							IF (@_WorkflowTemplateElementType = 3)
							BEGIN
								-- Начало добавления действия
								DECLARE @_ContactActivityDescription nvarchar(255) = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ContactActivityDescription'')
								
								DECLARE @_ContactActivityID uniqueidentifier = NEWID()
								INSERT INTO tbl_ContactActivity (ID, SiteID, ContactID, CreatedAt, ActivityTypeID, ActivityCode)
								VALUES (@_ContactActivityID, @_SiteID, @_WorkflowParameterID, GETDATE(), 13, @_ContactActivityDescription)
								-- Конец добавления действия
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1, @_ContactActivityID)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Задача"
							IF (@_WorkflowTemplateElementType = 1)
							BEGIN
								-- Начало добавления задачи
								DECLARE @_TaskID uniqueidentifier = NEWID()
								DECLARE @_TaskTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskType'') AS uniqueidentifier)
								
								DECLARE @_IsImportantTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsImportantTask'') AS bit)
								
								DECLARE @_IsUrgentTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsUrgentTask'') AS bit)
								
								DECLARE @_TaskEndDate datetime = @_ActionDate
								SET @_TaskEndDate = DATEADD(hour, @_DurationHours, @_TaskEndDate)
								SET @_TaskEndDate = DATEADD(minute, @_DurationMinutes, @_TaskEndDate)
								INSERT INTO tbl_Task (ID, SiteID, Title, TaskTypeID, StartDate, EndDate, DateOfControl, IsImportantTask, PlanDurationMinutes, PlanDurationHours, ResponsibleID, CreatorID, IsUrgentTask, TaskStatusID)
								VALUES (@_TaskID, @_SiteID, @_WorkflowTemplateElementName, @_TaskTypeID, @_ActionDate, @_TaskEndDate, @_ControlDate, @_IsImportantTask, @_DurationMinutes, @_DurationHours, @_WorkflowTemplateContactID, @_WorkflowTemplateContactID, @_IsUrgentTask, 1)
								-- Конец добавления задачи
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, ControlDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), @_ControlDate, 0, @_TaskID)
							END
							
							-- Тип элемента "Сегментация"
							IF (@_WorkflowTemplateElementType = 7)
							BEGIN
								SELECT ID
								INTO #WorkflowTemplateElementTag
								FROM tbl_WorkflowTemplateElementTag
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID
								
								DECLARE @_WorkflowTemplateElementTagID uniqueidentifier
								DECLARE @_SiteTagID uniqueidentifier
								DECLARE @_Operation int
								WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementTag) > 0
								BEGIN
									SELECT TOP 1 @_WorkflowTemplateElementTagID=ID
									FROM #WorkflowTemplateElementTag
									
									SELECT @_SiteTagID=SiteTagID, @_Operation=Operation
									FROM tbl_WorkflowTemplateElementTag
									WHERE ID=@_WorkflowTemplateElementTagID
									
									IF (@_Operation = 0)
									BEGIN
										DELETE FROM tbl_SiteTagObjects
										WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID
									END
									ELSE
									BEGIN
										IF (SELECT COUNT(*) FROM tbl_SiteTagObjects WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID) = 0
										BEGIN
											INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID)
											VALUES (@_SiteTagID, @_WorkflowParameterID)
										END
									END
									
									DELETE #WorkflowTemplateElementTag WHERE ID=@_WorkflowTemplateElementTagID
								END
								DROP TABLE #WorkflowTemplateElementTag

								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Скорринг"
							IF (@_WorkflowTemplateElementType = 8)
							BEGIN
								-- Начало добавления баллов
								--DECLARE @_SiteActivityScoreTypeID uniqueidentifier = NEWID()
								DECLARE @_SiteActivityScoreTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActivityScoreType'') AS uniqueidentifier)
								
								DECLARE @_ScoreCategory int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreCategory'') AS int)
								
								DECLARE @_ScoreOperation int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreOperation'') AS int)
								
								DECLARE @_AddedScore int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''AddedScore'') AS int)
								
								-- есть балл такого типа и такой категории
								DECLARE @_ContactActivityScoreID uniqueidentifier
								DECLARE @_oldScore int
								
								SELECT @_ContactActivityScoreID=ID, @_oldScore=Score
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								
								IF (@_ContactActivityScoreID IS NOT NULL)
								BEGIN
									DECLARE @_newScore int = CASE @_ScoreOperation
															 WHEN 0 THEN @_AddedScore -- (=)
															 WHEN 1 THEN @_oldScore + @_AddedScore -- (+)
															 WHEN 2 THEN @_oldScore - @_AddedScore -- (-)
															 WHEN 3 THEN @_oldScore * @_AddedScore -- (*)
															 END
									UPDATE tbl_ContactActivityScore
									SET Score=@_newScore
									WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								END
								ELSE
								BEGIN
									SET @_ContactActivityScoreID = NEWID()
									
									INSERT INTO tbl_ContactActivityScore (ID, SiteID, SiteActivityScoreTypeID, ContactID, Score, ScoreCategory)
									VALUES (@_ContactActivityScoreID, @_SiteID, @_SiteActivityScoreTypeID, @_WorkflowParameterID, @_AddedScore, @_ScoreCategory)
								END
								
								INSERT INTO tbl_ContactActivityScoreHistory (ContactActivityScoreID, Operation, Score, ActivityDate, Comment)
								VALUES (@_ContactActivityScoreID, @_ScoreOperation, @_AddedScore, GETDATE(), @_InsertedWorkflowElementID)
								-- Конец добавления баллов
								
								-- Начало обновления баллов контакта
								DECLARE @maxScoreTable TABLE
								(
									Score int,
									ScoreTypeID uniqueidentifier
								)

								INSERT INTO @maxScoreTable (Score, ScoreTypeID)
								SELECT TOP 1 SUM(Score) AS scoresum, SiteActivityScoreTypeID
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID
								GROUP BY SiteActivityScoreTypeID
								ORDER BY scoresum DESC

								DECLARE @_BehaviorScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=0 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								DECLARE @_CharacteristicsScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=1 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								IF (@_BehaviorScore IS NOT NULL)
								BEGIN
									DECLARE @_minScoreReadyToSell int = (SELECT MIN(MinScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									DECLARE @_maxScoreReadyToSell int = (SELECT MAX(MaxScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									
									IF (@_BehaviorScore < @_minScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_minScoreReadyToSell
									END
									IF (@_BehaviorScore > @_maxScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_maxScoreReadyToSell
									END

									UPDATE tbl_Contact
									SET BehaviorScore=@_BehaviorScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET ReadyToSellID=(SELECT TOP 1 ID FROM tbl_ReadyToSell WHERE SiteID=@_SiteID AND (@_BehaviorScore >= MinScore AND @_BehaviorScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								IF (@_CharacteristicsScore IS NOT NULL)
								BEGIN
									DECLARE @_minScorePriority int = (SELECT MIN(MinScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									DECLARE @_maxScorePriority int = (SELECT MAX(MaxScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									
									IF (@_CharacteristicsScore < @_minScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_minScorePriority
									END
									IF (@_CharacteristicsScore > @_maxScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_maxScorePriority
									END

									UPDATE tbl_Contact
									SET CharacteristicsScore=@_CharacteristicsScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET PriorityID=(SELECT TOP 1 ID FROM tbl_Priorities WHERE SiteID=@_SiteID AND (@_CharacteristicsScore >= MinScore AND @_CharacteristicsScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								UPDATE tbl_Contact
								SET Score= BehaviorScore + CharacteristicsScore
								WHERE ID=@_WorkflowParameterID
								-- Конец обновления баллов контакта
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
						END
						
						DELETE #WorkflowTemplateElementRelation WHERE EndElementID=@_WorkflowTemplateElementID
					END
					DROP TABLE #WorkflowTemplateElementRelation
		END
		-- Входящие элемент просрочен
		ELSE
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
	END
	-- Если нет выходов с элемента
	ELSE
	BEGIN
		SET @_WorkflowElementStatus = 2
		
		-- Если ошибка элемента и нет больше элементов в ожидании
		SET @_CountWaitingElement = (SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND [Status]=0)
		IF (@_CountWaitingElement = 0 OR @_CountWaitingElement = 1)
		BEGIN
			UPDATE tbl_Workflow
			SET EndDate=GETDATE(), [Status]=3
			WHERE ID=@_WorkflowID
		END
	END
	
	
	-- Обновление статуса элемента процесса
	UPDATE tbl_WorkflowElement
	SET EndDate=@_EndDateElement,
		[Status]=@_WorkflowElementStatus,
		Result=@_StartElementResult
	WHERE ID=@_WorkflowElementID
	
END	
END'

commit
exec LBC_SetVersion 261
END

/*******************************************************************************
	2012-08-28
	Добавлена таблица для хранения тегов для писем
*******************************************************************************/
if ( dbo.LBC_Version() < 262 )
BEGIN
begin tran

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[tbl_SiteActionTagValue](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteActionID] [uniqueidentifier] NOT NULL,
	[Tag] [nvarchar](256) NOT NULL,
	[Value] [nvarchar](2048) NOT NULL,
 CONSTRAINT [PK_tbl_SiteActionTagValue] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[tbl_SiteActionTagValue]  WITH CHECK ADD  CONSTRAINT [FK_tbl_SiteActionTagValue_tbl_SiteAction] FOREIGN KEY([SiteActionID])
REFERENCES [dbo].[tbl_SiteAction] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_SiteActionTagValue] CHECK CONSTRAINT [FK_tbl_SiteActionTagValue_tbl_SiteAction]
ALTER TABLE [dbo].[tbl_SiteActionTagValue] ADD  CONSTRAINT [DF_tbl_SiteActionTagValue_ID]  DEFAULT (newid()) FOR [ID]

commit
exec LBC_SetVersion 262
END


/*******************************************************************************
	2012-08-29
	Убрал внешние формы
*******************************************************************************/
if ( dbo.LBC_Version() < 263 )
BEGIN
begin tran

DECLARE  @ExternalFormID uniqueidentifier 
SET @ExternalFormID = (SELECT ID FROM tbl_Module WHERE [Name]='ExternalForm')

DELETE FROM tbl_Menu WHERE ModuleID = @ExternalFormID
DELETE FROM tbl_AccessProfileModule WHERE ModuleID = @ExternalFormID
DELETE FROM tbl_Module WHERE ID = @ExternalFormID

DECLARE  @FormID uniqueidentifier 
SET @FormID = (SELECT ID FROM tbl_Module WHERE [Name]='Form')

SET @ModuleEditionId = (SELECT ID FROM tbl_ModuleEdition WHERE ModuleID=@FormID)

INSERT INTO tbl_ModuleEditionOption (ModuleEditionID, Title, SystemName, ModuleEditionOptionType)
VALUES (@ModuleEditionId, N'Поддерживать внешние формы', 'AllowExternalForm', 0)


commit
exec LBC_SetVersion 263
END

/*******************************************************************************
	2012-08-29
	Добавлена таблица для внешних запросов
*******************************************************************************/
if ( dbo.LBC_Version() < 264 )
BEGIN
begin tran

CREATE TABLE [dbo].[tbl_WorkflowTemplateElementExternalRequest](
	[ID] [uniqueidentifier] NOT NULL,
	[WorkflowTemplateElementID] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](255) NOT NULL,
	[Value] [nvarchar](255) NULL,
 CONSTRAINT [PK_tbl_WorkflowTemplateElementRequest] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[tbl_WorkflowTemplateElementExternalRequest]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WorkflowTemplateElementExternalRequest_tbl_WorkflowTemplateElement] FOREIGN KEY([WorkflowTemplateElementID])
REFERENCES [dbo].[tbl_WorkflowTemplateElement] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_WorkflowTemplateElementExternalRequest] CHECK CONSTRAINT [FK_tbl_WorkflowTemplateElementExternalRequest_tbl_WorkflowTemplateElement]
ALTER TABLE [dbo].[tbl_WorkflowTemplateElementExternalRequest] ADD  CONSTRAINT [DF_tbl_WorkflowTemplateElementRequest_ID]  DEFAULT (newid()) FOR [ID]

commit
exec LBC_SetVersion 264
END

/*******************************************************************************
	2012-08-29
	clr enabled
*******************************************************************************/
if ( dbo.LBC_Version() < 265 )
BEGIN

EXEC sp_configure 'clr enabled', '1'
RECONFIGURE

ALTER DATABASE [LeadForce] SET TRUSTWORTHY ON

exec LBC_SetVersion 265
END
GO


/*******************************************************************************
	2012-08-29
	Добавлен CLR
*******************************************************************************/
if ( dbo.LBC_Version() < 266 )
BEGIN
begin tran

EXEC sp_changedbowner 'sa'

-- Подредактировать свой путь к Labitec.LeadForce.CLR.dll
CREATE ASSEMBLY LeadForceCLR FROM 'D:\LeadForceRepository\WebCounter\Labitec.LeadForce.CLR\bin\Release\Labitec.LeadForce.CLR.dll' WITH PERMISSION_SET = EXTERNAL_ACCESS

EXEC dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[DoExternalRequestFunc](@workflowTemplateElementId uniqueidentifier, @workflowParameterId uniqueidentifier)
RETURNS [nvarchar](1) WITH EXECUTE AS CALLER
AS
EXTERNAL NAME LeadForceCLR.StoredProcedures.DoExternalRequest'

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[WorkflowProcessing]
(
	@_WorkflowElementID uniqueidentifier, -- Входящий элемент
	@_StartElementResult nvarchar(255) = NULL -- Результат выполнения элемента процесса
)
AS
BEGIN
	DECLARE @_SiteID uniqueidentifier
	DECLARE @_WorkflowStartDate datetime
	DECLARE @_WorkflowID uniqueidentifier
	DECLARE @_WorkflowTemplateContactID uniqueidentifier
	DECLARE @_WorkflowTemplateElementID uniqueidentifier
	DECLARE @_WorkflowParameterID uniqueidentifier
	DECLARE @_ControlDate datetime
	DECLARE @_WorkflowElementStatus int = 0
	DECLARE @_WorkflowStatus int = 0
	DECLARE @_WorkflowResult nvarchar(255)
	DECLARE @_MassWorkflowID uniqueidentifier = NULL
	DECLARE @_ElementType int
	DECLARE @_EndDateElement datetime = GETDATE()
	
	DECLARE @_StartAfter int
	DECLARE @_StartPeriod int
	DECLARE @_DurationHours int
	DECLARE @_DurationMinutes int
	DECLARE @_ControlAfter int
	DECLARE @_ControlPeriod int
	DECLARE @_ControlFromBeginProccess bit
	
	DECLARE @_CountWaitingElement int
	
	SELECT @_WorkflowID=w.WorkflowID,
		   @_WorkflowTemplateElementID=w.WorkflowTemplateElementID,
		   @_ControlDate=w.ControlDate,
		   @_WorkflowTemplateContactID=wt.ContactID,
		   @_WorkflowStatus=wf.[Status],
		   @_ElementType=t.ElementType
		   --@_StartAfter=t.StartAfter,
		   --@_StartPeriod=t.StartPeriod,
		   --@_ControlAfter=t.ControlAfter,
		   --@_ControlPeriod=t.ControlPeriod,
		   --@_ControlFromBeginProccess=t.ControlFromBeginProccess
	FROM tbl_WorkflowElement AS w
	LEFT JOIN tbl_WorkflowTemplateElement AS t ON t.ID=w.WorkflowTemplateElementID
	LEFT JOIN tbl_WorkflowTemplate AS wt ON wt.ID=t.WorkflowTemplateID
	LEFT JOIN tbl_Workflow AS wf ON wf.ID=w.WorkflowID
	WHERE w.ID=@_WorkflowElementID AND (t.ElementType<>1 OR (t.ElementType=1 AND w.[Status]=0))
	
	SELECT @_SiteID=SiteID, @_WorkflowStartDate=StartDate, @_MassWorkflowID=MassWorkflowID
	FROM tbl_Workflow
	WHERE ID=@_WorkflowID
	
IF (@_WorkflowStatus=0)
BEGIN	
	
	-- Выбираем все элементы по связям, где входящий элемент является начальным
	-- и с выходящим результатом
	SELECT EndElementID
	INTO #WorkflowTemplateElementRelation
	FROM tbl_WorkflowTemplateElementRelation
	WHERE StartElementID=@_WorkflowTemplateElementID AND (StartElementResult=@_StartElementResult OR @_StartElementResult IS NULL)
	
	-- Если выходы с элемента есть
	IF ((SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0)
	BEGIN
		SET @_WorkflowElementStatus = 1
		
		IF (@_StartElementResult=0 AND @_ElementType=2) -- Событие не произошло (просрочен)
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
		
		-- Входящий элемент не просрочен
		IF (
			((@_ControlDate IS NULL) OR (@_ControlDate > GETDATE()))
			OR (@_ElementType = 2) -- Ожидание события
			)
		BEGIN
					WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0
					BEGIN
						SELECT TOP 1 @_WorkflowTemplateElementID=EndElementID
						FROM #WorkflowTemplateElementRelation
						
						IF ((SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND WorkflowTemplateElementID=@_WorkflowTemplateElementID) = 0)
						BEGIN
							DECLARE @_WorkflowTemplateElementType int
							DECLARE @_WorkflowTemplateElementName nvarchar(255)
							DECLARE @_IsActive bit
							SELECT @_WorkflowTemplateElementType=ElementType, @_WorkflowTemplateElementName=Name, @_IsActive=IsActive
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							DECLARE @_InsertedWorkflowElementID uniqueidentifier = NEWID()
							
							SELECT @_StartAfter=StartAfter,
								   @_StartPeriod=StartPeriod,
								   @_DurationHours=DurationHours,
								   @_DurationMinutes=DurationMinutes,
								   @_ControlAfter=ControlAfter,
								   @_ControlPeriod=ControlPeriod,
								   @_ControlFromBeginProccess=ControlFromBeginProccess
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							-- Тип элемента "Окончание процесса"
							IF (@_WorkflowTemplateElementType=6)
							BEGIN
								-- Если нет больше элементов со статусов в Ожидании (кроме текущего), завершаем процесс
								SET @_CountWaitingElement = (SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND [Status]=0)
								IF (@_CountWaitingElement = 0 OR @_CountWaitingElement = 1)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 1)
									
									UPDATE tbl_Workflow
									SET EndDate=GETDATE(), [Status]=1
									WHERE ID=@_WorkflowID
									
									-- Программа развития "Завершена"
									IF (@_MassWorkflowID IS NOT NULL)
									BEGIN
										IF (SELECT COUNT(*)
										FROM tbl_Workflow
										WHERE MassWorkflowID=@_MassWorkflowID AND [Status]=0) = 0
										BEGIN
											UPDATE tbl_MassWorkflow
											SET [Status]=2
											WHERE ID=@_MassWorkflowID
										END
									END
								END
							END
							
							-- определяем параметер
							SET @_WorkflowParameterID =
							(SELECT tbl_WorkflowParameter.[Value]
							FROM tbl_WorkflowParameter
							LEFT JOIN tbl_WorkflowTemplateParameter ON tbl_WorkflowTemplateParameter.ID=tbl_WorkflowParameter.WorkflowTemplateParameterID
							WHERE tbl_WorkflowParameter.WorkflowID=@_WorkflowID
								  AND tbl_WorkflowTemplateParameter.Name=N''Контакт''
								  AND tbl_WorkflowTemplateParameter.IsSystem=1)
								  
							-- определяем через сколько запускать элемент, если 0 то сразу
							DECLARE @_ActionDate datetime = GETDATE()
							IF (@_StartAfter <> 0)
							BEGIN
								SET @_ActionDate = CASE
									WHEN @_StartPeriod = 0 THEN DATEADD(minute, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 1 THEN DATEADD(hour, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 2 THEN DATEADD(day, @_StartAfter, @_ActionDate)
								END
							END
							
							-- дата контроля
							SET @_ControlDate = GETDATE()
							IF (@_ControlFromBeginProccess=1) -- От начала процесса
							BEGIN
								SET @_ControlDate = @_WorkflowStartDate
							END
							
							SET @_ControlDate = CASE
								WHEN @_ControlPeriod = 0 THEN DATEADD(minute, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 1 THEN DATEADD(hour, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 2 THEN DATEADD(day, @_ControlAfter, @_ControlDate)
							END
							
							
							-- Тип элемента "Сообщение"
							IF (@_WorkflowTemplateElementType = 0)
							BEGIN
								-- Начало добавления сообщения в очередь
								DECLARE @_SiteActionTemplateID uniqueidentifier = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActionTemplateID'')
								
								DECLARE @_NotBeforeDate datetime = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''NotBeforeDate'')
								
								DECLARE @_NotLaterDate datetime = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''NotLaterDate'')
								
								DECLARE @_AddSiteAction bit = 1
								
								IF ((@_NotBeforeDate IS NOT NULL) AND (@_ActionDate < @_NotBeforeDate))
								BEGIN
									SET @_ActionDate = @_NotBeforeDate
								END
								
								IF ((@_NotLaterDate IS NOT NULL) AND (@_ActionDate > @_NotLaterDate))
								BEGIN
									SET @_AddSiteAction = 0
								END
								
								IF (@_AddSiteAction = 1)
								BEGIN
									EXEC @_ActionDate = GetSiteActionPlannedDate @_WorkflowTemplateElementID, @_ActionDate
									IF (@_ActionDate IS NULL OR ((@_NotLaterDate IS NOT NULL) AND (@_ActionDate > @_NotLaterDate)))
									BEGIN
										SET @_AddSiteAction = 0
									END
								END
								
								
								IF (@_AddSiteAction = 1)
								BEGIN
									DECLARE @MessageTitle nvarchar(255)
									DECLARE @MessageText nvarchar(max)
									SELECT @MessageTitle=MessageCaption, @MessageText=MessageBody
									FROM tbl_SiteActionTemplate
									WHERE ID=@_SiteActionTemplateID
									
									DECLARE @_SiteActionID uniqueidentifier = NEWID()
									INSERT INTO tbl_SiteAction (ID, SiteID, SiteActionTemplateID, ContactID, ActionStatusID, ActionDate, MessageTitle, MessageText)
									VALUES (@_SiteActionID, @_SiteID, @_SiteActionTemplateID, @_WorkflowParameterID, 1, @_ActionDate, @MessageTitle, @MessageText)
								END
								-- Конец добавления сообщения в очередь
								
								IF (@_AddSiteAction = 1)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_SiteActionID)
								END
								ELSE
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 2)
									
									EXEC WorkflowProcessing @_InsertedWorkflowElementID, 4
								END
							END
							
							-- Тип элемента "Ожидание события"
							IF (@_WorkflowTemplateElementType = 2)
							BEGIN
								IF (@_ControlAfter<>0)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], ControlDate)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_ControlDate)
								END
								ELSE
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0)
								END
							END
							
							-- Тип элемента "Действие"
							IF (@_WorkflowTemplateElementType = 3)
							BEGIN
								-- Начало добавления действия
								DECLARE @_ContactActivityDescription nvarchar(255) = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ContactActivityDescription'')
								
								DECLARE @_ContactActivityID uniqueidentifier = NEWID()
								INSERT INTO tbl_ContactActivity (ID, SiteID, ContactID, CreatedAt, ActivityTypeID, ActivityCode)
								VALUES (@_ContactActivityID, @_SiteID, @_WorkflowParameterID, GETDATE(), 13, @_ContactActivityDescription)
								-- Конец добавления действия
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1, @_ContactActivityID)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Задача"
							IF (@_WorkflowTemplateElementType = 1)
							BEGIN
								-- Начало добавления задачи
								DECLARE @_TaskID uniqueidentifier = NEWID()
								DECLARE @_TaskTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskType'') AS uniqueidentifier)
								
								DECLARE @_IsImportantTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsImportantTask'') AS bit)
								
								DECLARE @_IsUrgentTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsUrgentTask'') AS bit)
								
								DECLARE @_TaskEndDate datetime = @_ActionDate
								SET @_TaskEndDate = DATEADD(hour, @_DurationHours, @_TaskEndDate)
								SET @_TaskEndDate = DATEADD(minute, @_DurationMinutes, @_TaskEndDate)
								INSERT INTO tbl_Task (ID, SiteID, Title, TaskTypeID, StartDate, EndDate, DateOfControl, IsImportantTask, PlanDurationMinutes, PlanDurationHours, ResponsibleID, CreatorID, IsUrgentTask, TaskStatusID)
								VALUES (@_TaskID, @_SiteID, @_WorkflowTemplateElementName, @_TaskTypeID, @_ActionDate, @_TaskEndDate, @_ControlDate, @_IsImportantTask, @_DurationMinutes, @_DurationHours, @_WorkflowTemplateContactID, @_WorkflowTemplateContactID, @_IsUrgentTask, 1)
								-- Конец добавления задачи
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, ControlDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), @_ControlDate, 0, @_TaskID)
							END
							
							-- Тип элемента "Сегментация"
							IF (@_WorkflowTemplateElementType = 7)
							BEGIN
								SELECT ID
								INTO #WorkflowTemplateElementTag
								FROM tbl_WorkflowTemplateElementTag
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID
								
								DECLARE @_WorkflowTemplateElementTagID uniqueidentifier
								DECLARE @_SiteTagID uniqueidentifier
								DECLARE @_Operation int
								WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementTag) > 0
								BEGIN
									SELECT TOP 1 @_WorkflowTemplateElementTagID=ID
									FROM #WorkflowTemplateElementTag
									
									SELECT @_SiteTagID=SiteTagID, @_Operation=Operation
									FROM tbl_WorkflowTemplateElementTag
									WHERE ID=@_WorkflowTemplateElementTagID
									
									IF (@_Operation = 0)
									BEGIN
										DELETE FROM tbl_SiteTagObjects
										WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID
									END
									ELSE
									BEGIN
										IF (SELECT COUNT(*) FROM tbl_SiteTagObjects WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID) = 0
										BEGIN
											INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID)
											VALUES (@_SiteTagID, @_WorkflowParameterID)
										END
									END
									
									DELETE #WorkflowTemplateElementTag WHERE ID=@_WorkflowTemplateElementTagID
								END
								DROP TABLE #WorkflowTemplateElementTag

								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Скорринг"
							IF (@_WorkflowTemplateElementType = 8)
							BEGIN
								-- Начало добавления баллов
								--DECLARE @_SiteActivityScoreTypeID uniqueidentifier = NEWID()
								DECLARE @_SiteActivityScoreTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActivityScoreType'') AS uniqueidentifier)
								
								DECLARE @_ScoreCategory int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreCategory'') AS int)
								
								DECLARE @_ScoreOperation int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreOperation'') AS int)
								
								DECLARE @_AddedScore int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''AddedScore'') AS int)
								
								-- есть балл такого типа и такой категории
								DECLARE @_ContactActivityScoreID uniqueidentifier
								DECLARE @_oldScore int
								
								SELECT @_ContactActivityScoreID=ID, @_oldScore=Score
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								
								IF (@_ContactActivityScoreID IS NOT NULL)
								BEGIN
									DECLARE @_newScore int = CASE @_ScoreOperation
															 WHEN 0 THEN @_AddedScore -- (=)
															 WHEN 1 THEN @_oldScore + @_AddedScore -- (+)
															 WHEN 2 THEN @_oldScore - @_AddedScore -- (-)
															 WHEN 3 THEN @_oldScore * @_AddedScore -- (*)
															 END
									UPDATE tbl_ContactActivityScore
									SET Score=@_newScore
									WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								END
								ELSE
								BEGIN
									SET @_ContactActivityScoreID = NEWID()
									
									INSERT INTO tbl_ContactActivityScore (ID, SiteID, SiteActivityScoreTypeID, ContactID, Score, ScoreCategory)
									VALUES (@_ContactActivityScoreID, @_SiteID, @_SiteActivityScoreTypeID, @_WorkflowParameterID, @_AddedScore, @_ScoreCategory)
								END
								
								INSERT INTO tbl_ContactActivityScoreHistory (ContactActivityScoreID, Operation, Score, ActivityDate, Comment)
								VALUES (@_ContactActivityScoreID, @_ScoreOperation, @_AddedScore, GETDATE(), @_InsertedWorkflowElementID)
								-- Конец добавления баллов
								
								-- Начало обновления баллов контакта
								DECLARE @maxScoreTable TABLE
								(
									Score int,
									ScoreTypeID uniqueidentifier
								)

								INSERT INTO @maxScoreTable (Score, ScoreTypeID)
								SELECT TOP 1 SUM(Score) AS scoresum, SiteActivityScoreTypeID
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID
								GROUP BY SiteActivityScoreTypeID
								ORDER BY scoresum DESC

								DECLARE @_BehaviorScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=0 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								DECLARE @_CharacteristicsScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=1 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								IF (@_BehaviorScore IS NOT NULL)
								BEGIN
									DECLARE @_minScoreReadyToSell int = (SELECT MIN(MinScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									DECLARE @_maxScoreReadyToSell int = (SELECT MAX(MaxScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									
									IF (@_BehaviorScore < @_minScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_minScoreReadyToSell
									END
									IF (@_BehaviorScore > @_maxScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_maxScoreReadyToSell
									END

									UPDATE tbl_Contact
									SET BehaviorScore=@_BehaviorScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET ReadyToSellID=(SELECT TOP 1 ID FROM tbl_ReadyToSell WHERE SiteID=@_SiteID AND (@_BehaviorScore >= MinScore AND @_BehaviorScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								IF (@_CharacteristicsScore IS NOT NULL)
								BEGIN
									DECLARE @_minScorePriority int = (SELECT MIN(MinScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									DECLARE @_maxScorePriority int = (SELECT MAX(MaxScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									
									IF (@_CharacteristicsScore < @_minScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_minScorePriority
									END
									IF (@_CharacteristicsScore > @_maxScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_maxScorePriority
									END

									UPDATE tbl_Contact
									SET CharacteristicsScore=@_CharacteristicsScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET PriorityID=(SELECT TOP 1 ID FROM tbl_Priorities WHERE SiteID=@_SiteID AND (@_CharacteristicsScore >= MinScore AND @_CharacteristicsScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								UPDATE tbl_Contact
								SET Score= BehaviorScore + CharacteristicsScore
								WHERE ID=@_WorkflowParameterID
								-- Конец обновления баллов контакта
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							IF (@_WorkflowTemplateElementType = 9)
							BEGIN
								DECLARE @_ExternalRequestResult nvarchar(1)
								EXEC @_ExternalRequestResult = DoExternalRequestFunc @_WorkflowTemplateElementID, @_WorkflowParameterID
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), @_ExternalRequestResult)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, @_ExternalRequestResult
							END
						END
						
						DELETE #WorkflowTemplateElementRelation WHERE EndElementID=@_WorkflowTemplateElementID
					END
					DROP TABLE #WorkflowTemplateElementRelation
		END
		-- Входящие элемент просрочен
		ELSE
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
	END
	-- Если нет выходов с элемента
	ELSE
	BEGIN
		SET @_WorkflowElementStatus = 2
		
		-- Если ошибка элемента и нет больше элементов в ожидании
		SET @_CountWaitingElement = (SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND [Status]=0)
		IF (@_CountWaitingElement = 0 OR @_CountWaitingElement = 1)
		BEGIN
			UPDATE tbl_Workflow
			SET EndDate=GETDATE(), [Status]=3
			WHERE ID=@_WorkflowID
		END
	END
	
	
	-- Обновление статуса элемента процесса
	UPDATE tbl_WorkflowElement
	SET EndDate=@_EndDateElement,
		[Status]=@_WorkflowElementStatus,
		Result=@_StartElementResult
	WHERE ID=@_WorkflowElementID
	
END	
END'

commit
exec LBC_SetVersion 266
END

/*******************************************************************************
	2012-09-03
	Добавлен CLR
*******************************************************************************/
if ( dbo.LBC_Version() < 267 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[Import] 
(
	@ImportID uniqueidentifier = NULL
)
AS
BEGIN
	DECLARE @SiteID uniqueidentifier = (SELECT TOP 1 SiteID FROM tbl_Import WHERE ID=@ImportID)
	DECLARE @StatusID uniqueidentifier = (SELECT TOP 1 ID FROM tbl_Status WHERE SiteID=@SiteID AND IsDefault=1)

	DECLARE @IDString varchar(50) = REPLACE(@ImportID, ''-'', '''')
	
	
	DECLARE @SQLString nvarchar(max)
	DECLARE @ParmDefinition nvarchar(max) = NULL
	DECLARE @InsertSQL nvarchar(max)
	DECLARE @InsertValues nvarchar(max)
	DECLARE @InsertKeys nvarchar(max)
	DECLARE @UpdateSQL nvarchar(max)
	
	DECLARE @TmpTableName nvarchar(50)
	DECLARE @TmpSystemName nvarchar(50)
	
	DECLARE @Counter int = 0
	
	
	DECLARE @TmpKey nvarchar(max)
	DECLARE @TmpValue nvarchar(max)
	DECLARE @CompositeQuery nvarchar(max)
	
	DECLARE @KeyValueTable TABLE ([Key] nvarchar(max), [Value] nvarchar(max), PrimaryKey bit, CompositeKey bit, ImportFieldDictionaryID uniqueidentifier)
	
	DECLARE @TmpImport_Cursor int
	EXEC(''DECLARE TmpImport_Cursor CURSOR FOR SELECT ID FROM TmpImport_'' + @IDString)
	OPEN TmpImport_Cursor
	FETCH NEXT FROM TmpImport_Cursor INTO @TmpImport_Cursor
	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- Выбираем все таблицы для полей LeadForce tbl_Company, tbl_Contact...
		SELECT DISTINCT tbl_ImportField.TableName INTO #TmpTableNames FROM tbl_ImportColumnRule
		LEFT JOIN tbl_ImportField ON tbl_ImportField.ID = tbl_ImportColumnRule.ImportFieldID
		LEFT JOIN tbl_Import ON tbl_Import.SiteID = tbl_ImportColumnRule.ImportID
		WHERE tbl_ImportColumnRule.ImportID = @ImportID AND IsDictionary = 0 AND IsAddress = 0
		
		
		WHILE (SELECT COUNT(*) FROM #TmpTableNames) > 0
		BEGIN
			SELECT TOP 1 @TmpTableName = TableName FROM #TmpTableNames
			
			-- Генерируем таблицу поле-ключ
			DELETE FROM @KeyValueTable
			
			SELECT tbl_ImportColumnRule.ID, FieldName, SystemName, PrimaryKey, CompositeKey, tbl_ImportColumnRule.ImportFieldDictionaryID INTO #TmpImportColumnRules
			FROM tbl_ImportColumnRule
			LEFT JOIN tbl_ImportField ON tbl_ImportField.ID = tbl_ImportColumnRule.ImportFieldID
			LEFT JOIN tbl_ImportColumn ON tbl_ImportColumn.ID = tbl_ImportColumnRule.ImportColumnID
			LEFT JOIN tbl_Import ON tbl_Import.SiteID = tbl_ImportColumnRule.ImportID
			WHERE tbl_ImportColumnRule.ImportID = @ImportID AND tbl_ImportField.TableName = @TmpTableName AND IsAddress = 0
			
			WHILE (SELECT COUNT(*) FROM #TmpImportColumnRules) > 0
			BEGIN
				DECLARE @TmpImportColumnRuleID uniqueidentifier
				DECLARE @TmpImportColumnRuleFieldName nvarchar(max)
				DECLARE @TmpImportColumnRuleSystemName nvarchar(max)
				DECLARE @TmpImportColumnRulePrimaryKey nvarchar(max)
				DECLARE @TmpImportColumnRuleCompositeKey nvarchar(max)
				DECLARE @TmpImportColumnRuleImportFieldDictionaryID uniqueidentifier
				
				SELECT TOP 1 @TmpImportColumnRuleID = ID,
							 @TmpImportColumnRuleFieldName = FieldName,
							 @TmpImportColumnRuleSystemName = SystemName,
							 @TmpImportColumnRulePrimaryKey = PrimaryKey,
							 @TmpImportColumnRuleCompositeKey = CompositeKey,
							 @TmpImportColumnRuleImportFieldDictionaryID = ImportFieldDictionaryID
				FROM #TmpImportColumnRules
				
				IF (@TmpImportColumnRuleFieldName = ''AddressID'')
				BEGIN
					SET @SQLString = N''SELECT @TmpValueOUT=CASE WHEN Column12 IS NOT NULL THEN Column12 + '''', '''' ELSE '''''''' END + CASE WHEN Column11 IS NOT NULL THEN Column11 + '''', '''' ELSE '''''''' END + CASE WHEN Column10 IS NOT NULL THEN Column10 + '''', '''' ELSE '''''''' END + CASE WHEN Column13 IS NOT NULL THEN Column13 + '''', '''' ELSE '''''''' END FROM TmpImport_'' + @IDString + '' WHERE ID=@ID''
					SET @ParmDefinition = N''@ID int, @TmpValueOUT nvarchar(max) OUTPUT''
					execute dbo.sp_executesql @SQLString, @ParmDefinition, @ID = @TmpImport_Cursor, @TmpValueOUT=@TmpValue OUTPUT
					
					SET @TmpValue = SUBSTRING(@TmpValue, 0, LEN(@TmpValue))
				END
				ELSE
				BEGIN
					SET @SQLString = N''SELECT @TmpValueOUT='' + @TmpImportColumnRuleSystemName + '' FROM TmpImport_'' + @IDString + '' WHERE ID=@ID''
					SET @ParmDefinition = N''@ID int, @TmpValueOUT nvarchar(max) OUTPUT''
					execute dbo.sp_executesql @SQLString, @ParmDefinition, @ID = @TmpImport_Cursor, @TmpValueOUT=@TmpValue OUTPUT
				END
				
				INSERT INTO @KeyValueTable ([Key], [Value], PrimaryKey, CompositeKey, ImportFieldDictionaryID) VALUES (@TmpImportColumnRuleFieldName, @TmpValue, @TmpImportColumnRulePrimaryKey, @TmpImportColumnRuleCompositeKey, @TmpImportColumnRuleImportFieldDictionaryID)
				
				DELETE #TmpImportColumnRules WHERE ID = @TmpImportColumnRuleID
			END
			DROP TABLE #TmpImportColumnRules
			
			
			
			-- Генерация запроса на UPDATE/INSERT
			-- проверка на составные ключи
			SET @CompositeQuery = NULL
			IF (SELECT COUNT(*) FROM @KeyValueTable) > 0
			BEGIN
				SELECT @CompositeQuery = COALESCE(@CompositeQuery +  '' AND '', '''') + [Key] + ''=N'''''' + [Value] + ''''''''
				FROM @KeyValueTable
				WHERE CompositeKey = 1
			END
			
			DECLARE @CompositeID uniqueidentifier = NULL
			SET @SQLString = N''SELECT @CompositeIDOUT = ID FROM '' + @TmpTableName + '' WHERE '' + @CompositeQuery
			SET @ParmDefinition = N''@CompositeIDOUT uniqueidentifier OUTPUT''
			execute dbo.sp_executesql @SQLString, @ParmDefinition, @CompositeIDOUT=@CompositeID OUTPUT

			DECLARE @TmpImportFieldDictionaryID uniqueidentifier
			IF (@CompositeID IS NULL)
			BEGIN
				SET @InsertKeys = ''''
				SET @InsertValues = ''''
				
				PRINT ''~~~''
								
				WHILE (SELECT COUNT(*) FROM @KeyValueTable) > 0
				BEGIN
					SELECT TOP 1 @TmpKey = [Key], @TmpValue = [Value], @TmpImportFieldDictionaryID = ImportFieldDictionaryID FROM @KeyValueTable
					
					SET @InsertKeys = @InsertKeys + ''['' + @TmpKey + ''],''
					IF (@TmpImportFieldDictionaryID IS NOT NULL)
					BEGIN
						DECLARE @TmpDictionaryID uniqueidentifier = NEWID()
						DECLARE @TmpImportFieldDictionaryTableName nvarchar(max)
						DECLARE @TmpImportFieldDictionaryName nvarchar(max)
						SELECT @TmpImportFieldDictionaryTableName = TableName, @TmpImportFieldDictionaryName = Name FROM tbl_ImportFieldDictionary WHERE ID = @TmpImportFieldDictionaryID
						
						IF (@TmpValue IS NOT NULL OR @TmpValue <> '''')
						BEGIN
							IF (@TmpImportFieldDictionaryTableName = ''tbl_CompanySector'')
							BEGIN
								SET @TmpDictionaryID = (SELECT ID FROM tbl_CompanySector WHERE Name = @TmpValue)
								IF (@TmpDictionaryID IS NULL)
								BEGIN
									SET @TmpDictionaryID = NEWID()
									SET @SQLString = N''INSERT INTO '' + @TmpImportFieldDictionaryTableName + '' (ID, SiteID, ['' + @TmpImportFieldDictionaryName + '']) VALUES (@_TmpDictionaryID, N'''''' + CAST(@SiteID AS nvarchar(50)) + '''''', N'''''' + @TmpValue + '''''')''
									SET @ParmDefinition = N''@_TmpDictionaryID uniqueidentifier''
									execute dbo.sp_executesql @SQLString, @ParmDefinition, @_TmpDictionaryID=@TmpDictionaryID
								END
								
								SET @InsertValues = @InsertValues + ''N'''''' + CAST(@TmpDictionaryID AS varchar(50)) + '''''''' + '',''
							END
							ELSE
							BEGIN
								SET @SQLString = N''INSERT INTO '' + @TmpImportFieldDictionaryTableName + '' (ID, ['' + @TmpImportFieldDictionaryName + '']) VALUES (@_TmpDictionaryID, N'''''' + @TmpValue + '''''')''
								SET @ParmDefinition = N''@_TmpDictionaryID uniqueidentifier''
								execute dbo.sp_executesql @SQLString, @ParmDefinition, @_TmpDictionaryID=@TmpDictionaryID
								
								SET @InsertValues = @InsertValues + ''N'''''' + CAST(@TmpDictionaryID AS varchar(50)) + '''''''' + '',''
							END
						END
						ELSE
						BEGIN
							SET @InsertValues = @InsertValues + ''NULL'' + '',''
						END
					END
					ELSE
					BEGIN
						SET @InsertValues = @InsertValues + ''N''''''+ ISNULL(@TmpValue, '''') + '''''''' + '',''
					END
					
					
					DELETE @KeyValueTable WHERE [Key] = @TmpKey
				END
				
				IF (@TmpTableName = ''tbl_Contact'' OR @TmpTableName = ''tbl_Company'')
				BEGIN
					SET @InsertKeys = @InsertKeys + ''StatusID,''
					SET @InsertValues = @InsertValues + ''N'''''' + CAST(@StatusID AS varchar(50)) + '''''',''
				END
				
				IF (@TmpTableName = ''tbl_Contact'')
				BEGIN
					SET @InsertKeys = @InsertKeys + ''RefferURL,''
					SET @InsertValues = @InsertValues + ''N'''''''',''
					SET @InsertKeys = @InsertKeys + ''UserIP,''
					SET @InsertValues = @InsertValues + ''N'''''''',''
				END
				
				SET @InsertKeys = @InsertKeys + ''SiteID''
				SET @InsertValues = @InsertValues + ''N'''''' + CAST(@SiteID AS varchar(50)) + ''''''''
				--SET @InsertKeys = (SELECT SUBSTRING(@InsertKeys, 0, LEN(@InsertKeys)))
				--SET @InsertValues = (SELECT SUBSTRING(@InsertValues, 0, LEN(@InsertValues)))
				
				--SET @InsertSQL = N''INSERT INTO '' + @TmpTableName + '' ('' + @InsertKeys + '') VALUES ('' + @InsertValues + '')''
				--PRINT @InsertSQL
				--EXEC @InsertSQL
				
				IF (@TmpTableName IS NULL)
				PRINT ''TmpTableName''
				IF (@InsertKeys IS NULL)
				PRINT ''InsertKeys''
				IF (@InsertValues IS NULL)
				PRINT ''InsertValues''

				
				SET @SQLString = N''INSERT INTO '' + @TmpTableName + '' ('' + @InsertKeys + '') VALUES ('' + @InsertValues + '')''
				execute dbo.sp_executesql @SQLString
			END
			
			/*ELSE
			BEGIN
				SET @UpdateSQL = ''''
				WHILE (SELECT COUNT(*) FROM @KeyValueTable) > 0
				BEGIN
					SELECT TOP 1 @TmpKey = [Key], @TmpValue = [Value] FROM @KeyValueTable
					
					SET @UpdateSQL = @UpdateSQL + ''['' + @TmpKey + '']'' + ''=N'''''' + ISNULL(@TmpValue, '''') + '''''''' + '',''
					
					DELETE @KeyValueTable WHERE [Key] = @TmpKey
				END
				SET @UpdateSQL = (SELECT SUBSTRING(@UpdateSQL, 0, LEN(@UpdateSQL)))
				
				
				SET @UpdateSQL = ''UPDATE '' + @TmpTableName + '' SET '' + @UpdateSQL + '' WHERE ID = '''''' + CONVERT(varchar(38), @CompositeID) + ''''''''
				PRINT @UpdateSQL
			END*/
			
			DELETE #TmpTableNames WHERE TableName = @TmpTableName
		END

		DROP TABLE #TmpTableNames
		
		FETCH NEXT FROM TmpImport_Cursor INTO @TmpImport_Cursor
	END
	CLOSE TmpImport_Cursor
	DEALLOCATE TmpImport_Cursor
	
	EXEC(''DROP TABLE TmpImport_'' + @IDString)
END'

commit
exec LBC_SetVersion 267
END

/*******************************************************************************
	2012-09-03
	Добавлена опция "Поддержка собственных форм" в модуль форм
*******************************************************************************/
if ( dbo.LBC_Version() < 268 )
BEGIN
begin tran

DECLARE  @FormID uniqueidentifier 
SET @FormID = (SELECT ID FROM tbl_Module WHERE [Name]='Form')


INSERT INTO tbl_ModuleEditionOption (ModuleEditionID, Title, SystemName, ModuleEditionOptionType)
VALUES ((SELECT TOP 1 ID FROM tbl_ModuleEdition WHERE ModuleID=@FormID), N'Поддержка собственных форм', 'AllowOwnForm', 0)

commit
exec LBC_SetVersion 268
END



/*******************************************************************************
	2012-09-06
	Обновление вкладки оценка трудоемкости в модуле требований
*******************************************************************************/
if ( dbo.LBC_Version() < 269 )
BEGIN
begin tran

ALTER TABLE [tbl_SiteActivityRules] ADD TemplateID uniqueidentifier NULL

ALTER TABLE [dbo].[tbl_SiteActivityRules]  WITH CHECK ADD  CONSTRAINT [FK_tbl_SiteActivityRules_tbl_SiteActivityRules_Template] FOREIGN KEY(TemplateID)
REFERENCES [dbo].[tbl_SiteActivityRules] ([ID])
ALTER TABLE [dbo].[tbl_SiteActivityRules] CHECK CONSTRAINT [FK_tbl_SiteActivityRules_tbl_SiteActivityRules_Template]

ALTER TABLE [tbl_SiteActivityRules] ADD CSSColumns nvarchar(500) NULL
ALTER TABLE [tbl_SiteActivityRules] ADD CSSInstruction nvarchar(500) NULL

commit
exec LBC_SetVersion 269
END

/*******************************************************************************
	2012-09-07
	Убрал обязательные поля из таблицы товаров
*******************************************************************************/
if ( dbo.LBC_Version() < 270 )
BEGIN
begin tran

ALTER TABLE tbl_Product ALTER COLUMN ProductStatusID int NULL
ALTER TABLE tbl_Product ALTER COLUMN ProductCategoryID uniqueidentifier NULL
ALTER TABLE tbl_Product ALTER COLUMN ProductTypeID uniqueidentifier NULL
ALTER TABLE tbl_Product ALTER COLUMN [Description] nvarchar(MAX) NULL

commit
exec LBC_SetVersion 270
END

/*******************************************************************************
	2012-09-07
	Добавил Продукты упрощенный
*******************************************************************************/
if ( dbo.LBC_Version() < 271 )
BEGIN
begin tran

	DECLARE @ProductModuleEdtitionID uniqueidentifier = NEWID()

	INSERT INTO tbl_ModuleEdition ([ID],[ModuleID], [Title]) 
	VALUES (@ProductModuleEdtitionID,(SELECT TOP 1 ID FROM tbl_Module WHERE Name = N'Products'), N'Продукты упрощенный')

	INSERT INTO tbl_ModuleEditionAction ([ModuleEditionID], [Title], [SystemName], [UserControl])
	VALUES (@ProductModuleEdtitionID, N'Список', N'List', N'~/UserControls/ModuleEditionAction/Product/Products.ascx')

commit
exec LBC_SetVersion 271
END

/*******************************************************************************
	2012-09-10
	Удаление лишнего реквизита
*******************************************************************************/
if ( dbo.LBC_Version() < 272 )
BEGIN
begin tran

ALTER TABLE [tbl_SiteActivityRules] DROP CONSTRAINT [FK_tbl_SiteActivityRules_tbl_SiteActivityRules_Template] 
ALTER TABLE [tbl_SiteActivityRules] DROP COLUMN TemplateID

commit
exec LBC_SetVersion 272
END

/*******************************************************************************
	2012-09-10
	Добавлен реквизит для фона формы
*******************************************************************************/
if ( dbo.LBC_Version() < 273 )
BEGIN
begin tran

ALTER TABLE [tbl_SiteActivityRules] ADD CSSForm nvarchar(500) NULL

commit
exec LBC_SetVersion 273
END

/*******************************************************************************
	2012-09-11
	Удаление действия Событие процесса
*******************************************************************************/
if ( dbo.LBC_Version() < 274 )
BEGIN
begin tran

UPDATE tbl_ContactActivity
SET ActivityTypeID=6
WHERE ActivityTypeID=13

UPDATE tbl_ActivityTypes
SET Title=N'Пользовательское событие'
WHERE Title=N'Внешнее событие'

DELETE FROM tbl_ActivityTypes
WHERE Title=N'Событие процесса'

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[WorkflowInit]
(
	@Parameter uniqueidentifier,
	@SiteID uniqueidentifier,
	@ModuleID uniqueidentifier,
	@AutomaticMethod int,
	@Event int = NULL,
	@MassWorkflowID uniqueidentifier = NULL
)
AS
BEGIN
	DECLARE @sql nvarchar(max)
	DECLARE @ParmDefinition nvarchar(max)
	
	SELECT tbl_WorkflowTemplate.ID
	INTO #TmpWorkflowTemplate
	FROM tbl_WorkflowTemplate
	WHERE
		SiteID=@SiteID
		AND ModuleID=@ModuleID
		AND [Status]=1 -- Статус действующий
		AND (AutomaticMethod=@AutomaticMethod OR @AutomaticMethod IS NULL)
		AND (StartDate IS NULL OR (StartDate IS NOT NULL AND StartDate<=GETDATE())) -- Актуален по дате
		AND (EndDate IS NULL OR (EndDate IS NOT NULL AND EndDate>=GETDATE())) -- Актуален по дате
		AND ((@MassWorkflowID IS NULL) OR (tbl_WorkflowTemplate.ID IN (SELECT tbl_MassWorkflow.WorkflowTemplateID FROM tbl_MassWorkflow WHERE tbl_MassWorkflow.ID=@MassWorkflowID)))

		
	DECLARE @_WorkflowTemplateID uniqueidentifier
	DECLARE @_Event int
	
	-- Перебираем подходящие по условию шаблоны
	WHILE (SELECT COUNT(*) FROM #TmpWorkflowTemplate) > 0
	BEGIN
		SELECT TOP 1 @_WorkflowTemplateID=ID
		FROM #TmpWorkflowTemplate
		
		DECLARE @FLAG bit = 1
		
		DECLARE @_WorkflowID uniqueidentifier = NEWID()
		
		-- Берём параметр
		DECLARE @_WorkflowTemplateParameterID uniqueidentifier =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Контакт'' AND IsSystem=1)
		
		-- Проверка на вызов при активном процессе
		DECLARE @_Frequency int
		DECLARE @_DenyMultipleRun bit
		DECLARE @_Condition int
		DECLARE @_ActivityCount int
		SELECT @_Frequency=Frequency, @_DenyMultipleRun=DenyMultipleRun, @_Condition=Condition, @_ActivityCount=ActivityCount, @_Event=[Event]
		FROM tbl_WorkflowTemplate 
		WHERE ID=@_WorkflowTemplateID
		
		-- Есть ли активный процесс по заданному шаблону (нет даты окончания процесса)
		IF ((SELECT COUNT(*)
		FROM tbl_Workflow AS w
		LEFT JOIN tbl_WorkflowParameter AS wp ON wp.WorkflowID=w.ID
		WHERE w.WorkflowTemplateID=@_WorkflowTemplateID
			  AND wp.WorkflowTemplateParameterID=@_WorkflowTemplateParameterID
			  AND wp.Value=@Parameter
			  AND w.EndDate IS NULL) > 0 AND @_DenyMultipleRun = 1)
		BEGIN
			SET @FLAG = 0
		END
			
		-- Проверка на частоту вызова в днях
		DECLARE @_StartDate datetime = (SELECT TOP 1 w.StartDate
									   FROM tbl_Workflow AS w
									   LEFT JOIN tbl_WorkflowParameter AS wp ON wp.WorkflowID=w.ID
									   WHERE w.WorkflowTemplateID=@_WorkflowTemplateID
											 AND wp.WorkflowTemplateParameterID=@_WorkflowTemplateParameterID
									   ORDER BY w.StartDate DESC)
		--SET @_StartDate = DATEADD(day, @_Frequency, @_StartDate)
		IF (@_Frequency <> 0 AND DATEADD(day, @_Frequency, @_StartDate) > GETDATE())
		BEGIN
			SET @FLAG = 0
		END
		
		-- Проверка условий запуска
		IF (@AutomaticMethod=1 AND @FLAG = 1) -- Создание/Изменение записи
		BEGIN
			IF (@_Event<>@Event)
			BEGIN
				SET @FLAG = 0
			END
		END
		
		
		IF (@AutomaticMethod=2 AND @FLAG = 1) -- По действию пользователя
		BEGIN
			SET @FLAG = 0
			
			SELECT ID
			INTO #TmpConditionEvent
			FROM tbl_WorkflowTemplateConditionEvent
			WHERE WorkflowTemplateID=@_WorkflowTemplateID
			
			DECLARE @TotalRowsReturned int
			DECLARE @Count int = 0
			
			DECLARE @CountConditionEvent int = (SELECT COUNT(*) FROM #TmpConditionEvent)
			DECLARE @_ConditionEventID uniqueidentifier
			DECLARE @_Category int
			DECLARE @_ActivityType int
			DECLARE @_Code nvarchar(max)
			DECLARE @_ActualPeriod int
			DECLARE @_Requisite nvarchar(2000)
			DECLARE @_Formula int
			DECLARE @_Value nvarchar(255)
			WHILE (SELECT COUNT(*) FROM #TmpConditionEvent) > 0
			BEGIN
				SELECT TOP 1 @_ConditionEventID=ID
				FROM #TmpConditionEvent
				
				SELECT @_Category=Category,
					   @_ActivityType=ActivityType,
					   @_Code=Code,
					   @_ActualPeriod=ActualPeriod,
					   @_Requisite=Requisite,
					   @_Formula=Formula,
					   @_Value=Value
				FROM tbl_WorkflowTemplateConditionEvent
				WHERE ID=@_ConditionEventID
				
				SET @_Code = REPLACE(@_Code, '''''''', '''''''''''')
				
				IF (@_Category=0) -- Действие
				BEGIN
					SET @sql = ''SELECT @TotalRowsReturnedOUT=COUNT(*)
								FROM tbl_ContactActivity
								WHERE ContactID=@ContactID
									  AND ActivityTypeID=@ActivityType''
									  
					IF (@_ActivityType=1 OR @_ActivityType=11 OR @_ActivityType=6)
					BEGIN
						IF (@_ActivityType=1 OR @_ActivityType=11)
						BEGIN
							SET @sql = @sql + '' AND ActivityCode LIKE N''''%'''' + @Code+ ''''%'''' ''
						END
						IF (@_ActivityType=6)
						BEGIN
							SET @sql = @sql + '' AND ActivityCode LIKE N'''''''' + @Code + '''''''' ''
						END
					END
					ELSE
					BEGIN
						SET @sql = @sql + '' AND ActivityCode=@Code ''
					END
					
					IF (@_ActualPeriod <> 0)
					BEGIN
						SET @sql = @sql + '' AND CreatedAt > DATEADD(day, (-1 * @ActualPeriod), GETDATE()) ''
					END
					
					-- Исключаем из выборки активность которая была до вызова предыдущего процесса
					IF (@_StartDate IS NOT NULL)
					BEGIN
						SET @sql = @sql + '' AND CreatedAt > @StartDate ''
					END
										
					SET @ParmDefinition = ''@TotalRowsReturnedOUT int OUTPUT, @ContactID uniqueidentifier, @ActivityType int, @Code nvarchar(max), @ActualPeriod int, @StartDate datetime''
					EXECUTE sp_executesql @sql,
							@ParmDefinition,
							@TotalRowsReturnedOUT=@TotalRowsReturned OUTPUT,
							@ContactID=@Parameter,
							@ActivityType=@_ActivityType,
							@Code=@_Code,
							@ActualPeriod=@_ActualPeriod,
							@StartDate=@_StartDate
				END
				print @TotalRowsReturned
				
				IF (@TotalRowsReturned > 0)
				BEGIN
					SET @Count = @Count + 1
				END
				
				IF (@_Category=1) -- Значение реквизита
				BEGIN
					DECLARE @_ColumnTypeID int
					DECLARE @_StringValue nvarchar(512)
					DECLARE @_DateValue datetime
					DECLARE @_SiteColumnValueID uniqueidentifier
					SELECT
						@_ColumnTypeID=tbl_SiteColumns.TypeID,
						@_StringValue=tbl_ContactColumnValues.StringValue,
						@_DateValue=tbl_ContactColumnValues.DateValue,
						@_SiteColumnValueID=tbl_ContactColumnValues.SiteColumnValueID
					FROM tbl_ContactColumnValues
					LEFT JOIN tbl_SiteColumns ON tbl_SiteColumns.ID=tbl_ContactColumnValues.SiteColumnID
					WHERE ContactID=@Parameter AND SiteColumnID=CAST(@_Requisite AS uniqueidentifier)
					
					-- Строка/Число/Текст
					IF ((@_ColumnTypeID=1 OR @_ColumnTypeID=4 OR @_ColumnTypeID=5)
						AND ((@_Formula=4 AND @_StringValue LIKE ''%''+@_Value)
							  OR (@_Formula=5 AND @_StringValue LIKE @_Value)
							)
						)
					BEGIN
						SET @Count = @Count + 1
					END
					-- Дата
					IF (@_ColumnTypeID=2
						AND ((@_Formula=7 AND @_DateValue < CAST(@_Value AS datetime))
							  OR (@_Formula=9 AND @_DateValue <= CAST(@_Value AS datetime))
							  OR (@_Formula=6 AND @_DateValue > CAST(@_Value AS datetime))
							  OR (@_Formula=8 AND @_DateValue >= CAST(@_Value AS datetime))
							)
					   )
					   BEGIN
							SET @Count = @Count + 1
					   END
					--Справочник
					IF (@_ColumnTypeID=3
						AND ((@_Formula=2 AND (@_SiteColumnValueID IS NULL OR @_SiteColumnValueID = N''00000000-0000-0000-0000-000000000000''))
							OR (@_Formula=1 AND (@_SiteColumnValueID IS NOT NULL AND @_SiteColumnValueID <> N''00000000-0000-0000-0000-000000000000''))
							OR (@_Formula=3 AND @_SiteColumnValueID = CAST(@_Value AS uniqueidentifier))
							)
					   )
					   BEGIN
							SET @Count = @Count + 1
					   END
				END
				
				DECLARE @_Scores int
				IF (@_Category=2) -- Балл по поведению
				BEGIN
					SET @_Scores = (SELECT Score FROM tbl_ContactActivityScore WHERE ID=@Parameter AND ScoreCategory=0 AND SiteActivityScoreTypeID=CAST(@_Requisite AS uniqueidentifier))
					IF ((@_Formula = 7 AND @_Scores < @_Value)
						OR (@_Formula = 9 AND @_Scores <= @_Value)
						OR (@_Formula = 6 AND @_Scores > @_Value)
						OR (@_Formula = 8 AND @_Scores >= @_Value))
					BEGIN
						SET @Count = @Count + 1
					END
				END
				
				IF (@_Category=3) -- Балл по характеристикам
				BEGIN
					SET @_Scores = (SELECT Score FROM tbl_ContactActivityScore WHERE ID=@Parameter AND ScoreCategory=1 AND SiteActivityScoreTypeID=CAST(@_Requisite AS uniqueidentifier))
					IF ((@_Formula = 7 AND @_Scores < @_Value)
						OR (@_Formula = 9 AND @_Scores <= @_Value)
						OR (@_Formula = 6 AND @_Scores > @_Value)
						OR (@_Formula = 8 AND @_Scores >= @_Value))
					BEGIN
						SET @Count = @Count + 1
					END
				END
				
				DELETE #TmpConditionEvent WHERE ID=@_ConditionEventID
			END
			DROP TABLE #TmpConditionEvent
			
			IF (@CountConditionEvent<>0
				AND ((@_Condition=0 AND @CountConditionEvent=@Count)
				OR (@_Condition=1 AND @Count>0)
				OR (@_Condition=2 AND @Count>=@_ActivityCount)
				))
			BEGIN
				SET @FLAG = 1
			END
		END
		
		
		IF (@FLAG = 1)
		BEGIN
			DECLARE @_WorkflowTemplateElementID uniqueidentifier = 
			(SELECT tbl_WorkflowTemplateElement.ID FROM tbl_WorkflowTemplate
			LEFT JOIN tbl_WorkflowTemplateElement ON tbl_WorkflowTemplateElement.WorkflowTemplateID=tbl_WorkflowTemplate.ID
			WHERE tbl_WorkflowTemplate.ID=@_WorkflowTemplateID AND tbl_WorkflowTemplateElement.ElementType=5) -- Начало процесса
			
			-- Найден элемент с типом "Начало процесса"
			IF (@_WorkflowTemplateElementID IS NOT NULL)
			BEGIN
				INSERT INTO tbl_Workflow (ID, SiteID, WorkflowTemplateID, StartDate, MassWorkflowID)
				VALUES (@_WorkflowID, @SiteID, @_WorkflowTemplateID, GETDATE(), @MassWorkflowID)
				
				INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
				VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, @Parameter)


		SET @_WorkflowTemplateParameterID =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Компания'' AND IsSystem=1)
		INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
		VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, (SELECT CompanyID FROM tbl_Contact WHERE ID=@Parameter))
		
		SET @_WorkflowTemplateParameterID =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Автор (роль)'' AND IsSystem=1)
		INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
		VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, NULL)
		
		SET @_WorkflowTemplateParameterID =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Ответственный по компании (роль)'' AND IsSystem=1)
		INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
		VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, (SELECT tbl_Company.OwnerID FROM tbl_Contact LEFT JOIN tbl_Company ON tbl_Company.ID=tbl_Contact.CompanyID WHERE tbl_Contact.ID=@Parameter))

				
				DECLARE @WorkflowElementID uniqueidentifier = NEWID()
				INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
				VALUES (@WorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 1)
				
				EXEC WorkflowProcessing @WorkflowElementID
			END
		END
	    
		DELETE #TmpWorkflowTemplate WHERE ID=@_WorkflowTemplateID
	END
	DROP TABLE #TmpWorkflowTemplate
END'

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[WorkflowProcessing]
(
	@_WorkflowElementID uniqueidentifier, -- Входящий элемент
	@_StartElementResult nvarchar(255) = NULL -- Результат выполнения элемента процесса
)
AS
BEGIN
	DECLARE @_SiteID uniqueidentifier
	DECLARE @_WorkflowStartDate datetime
	DECLARE @_WorkflowID uniqueidentifier
	DECLARE @_WorkflowTemplateContactID uniqueidentifier
	DECLARE @_WorkflowTemplateElementID uniqueidentifier
	DECLARE @_WorkflowParameterID uniqueidentifier
	DECLARE @_ControlDate datetime
	DECLARE @_WorkflowElementStatus int = 0
	DECLARE @_WorkflowStatus int = 0
	DECLARE @_WorkflowResult nvarchar(255)
	DECLARE @_MassWorkflowID uniqueidentifier = NULL
	DECLARE @_ElementType int
	DECLARE @_EndDateElement datetime = GETDATE()
	
	DECLARE @_StartAfter int
	DECLARE @_StartPeriod int
	DECLARE @_DurationHours int
	DECLARE @_DurationMinutes int
	DECLARE @_ControlAfter int
	DECLARE @_ControlPeriod int
	DECLARE @_ControlFromBeginProccess bit
	
	DECLARE @_CountWaitingElement int
	
	SELECT @_WorkflowID=w.WorkflowID,
		   @_WorkflowTemplateElementID=w.WorkflowTemplateElementID,
		   @_ControlDate=w.ControlDate,
		   @_WorkflowTemplateContactID=wt.ContactID,
		   @_WorkflowStatus=wf.[Status],
		   @_ElementType=t.ElementType,
		   @_StartAfter=t.StartAfter,
		   @_StartPeriod=t.StartPeriod
		   --@_ControlAfter=t.ControlAfter,
		   --@_ControlPeriod=t.ControlPeriod,
		   --@_ControlFromBeginProccess=t.ControlFromBeginProccess
	FROM tbl_WorkflowElement AS w
	LEFT JOIN tbl_WorkflowTemplateElement AS t ON t.ID=w.WorkflowTemplateElementID
	LEFT JOIN tbl_WorkflowTemplate AS wt ON wt.ID=t.WorkflowTemplateID
	LEFT JOIN tbl_Workflow AS wf ON wf.ID=w.WorkflowID
	WHERE w.ID=@_WorkflowElementID AND (t.ElementType<>1 OR (t.ElementType=1 AND w.[Status]=0))
	
	SELECT @_SiteID=SiteID, @_WorkflowStartDate=StartDate, @_MassWorkflowID=MassWorkflowID
	FROM tbl_Workflow
	WHERE ID=@_WorkflowID
	
IF (@_WorkflowStatus=0)
BEGIN
	
	-- Выбираем все элементы по связям, где входящий элемент является начальным
	-- и с выходящим результатом
	SELECT EndElementID
	INTO #WorkflowTemplateElementRelation
	FROM tbl_WorkflowTemplateElementRelation
	WHERE StartElementID=@_WorkflowTemplateElementID AND (StartElementResult=@_StartElementResult OR @_StartElementResult IS NULL)
	
	-- Если выходы с элемента есть
	IF ((SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0)
	BEGIN
		SET @_WorkflowElementStatus = 1
		
		IF (@_StartElementResult=0 AND @_ElementType=2) -- Событие не произошло (просрочен)
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
		
		-- Входящий элемент не просрочен
		IF (
			((@_ControlDate IS NULL) OR (@_ControlDate > GETDATE()))
			OR (@_ElementType = 2) -- Ожидание события
			)
		BEGIN
					WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0
					BEGIN
						SELECT TOP 1 @_WorkflowTemplateElementID=EndElementID
						FROM #WorkflowTemplateElementRelation
						
						IF ((SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND WorkflowTemplateElementID=@_WorkflowTemplateElementID) = 0)
						BEGIN
							DECLARE @_WorkflowTemplateElementType int
							DECLARE @_WorkflowTemplateElementName nvarchar(255)
							DECLARE @_IsActive bit
							SELECT @_WorkflowTemplateElementType=ElementType, @_WorkflowTemplateElementName=Name, @_IsActive=IsActive
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							DECLARE @_InsertedWorkflowElementID uniqueidentifier = NEWID()
							
							SELECT --@_StartAfter=StartAfter,
								   --@_StartPeriod=StartPeriod,
								   @_DurationHours=DurationHours,
								   @_DurationMinutes=DurationMinutes,
								   @_ControlAfter=ControlAfter,
								   @_ControlPeriod=ControlPeriod,
								   @_ControlFromBeginProccess=ControlFromBeginProccess
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							-- Тип элемента "Окончание процесса"
							IF (@_WorkflowTemplateElementType=6)
							BEGIN
								-- Если нет больше элементов со статусов в Ожидании (кроме текущего), завершаем процесс
								SET @_CountWaitingElement = (SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND [Status]=0)
								IF (@_CountWaitingElement = 0 OR @_CountWaitingElement = 1)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 1)
									
									UPDATE tbl_Workflow
									SET EndDate=GETDATE(), [Status]=1
									WHERE ID=@_WorkflowID
									
									-- Программа развития "Завершена"
									IF (@_MassWorkflowID IS NOT NULL)
									BEGIN
										IF (SELECT COUNT(*)
										FROM tbl_Workflow
										WHERE MassWorkflowID=@_MassWorkflowID AND [Status]=0) = 0
										BEGIN
											UPDATE tbl_MassWorkflow
											SET [Status]=2
											WHERE ID=@_MassWorkflowID
										END
									END
								END
							END
							
							-- определяем параметер
							SET @_WorkflowParameterID =
							(SELECT tbl_WorkflowParameter.[Value]
							FROM tbl_WorkflowParameter
							LEFT JOIN tbl_WorkflowTemplateParameter ON tbl_WorkflowTemplateParameter.ID=tbl_WorkflowParameter.WorkflowTemplateParameterID
							WHERE tbl_WorkflowParameter.WorkflowID=@_WorkflowID
								  AND tbl_WorkflowTemplateParameter.Name=N''Контакт''
								  AND tbl_WorkflowTemplateParameter.IsSystem=1)
								  
							-- определяем через сколько запускать элемент, если 0 то сразу
							DECLARE @_ActionDate datetime = GETDATE()
							IF (@_StartAfter <> 0)
							BEGIN
								SET @_ActionDate = CASE
									WHEN @_StartPeriod = 0 THEN DATEADD(minute, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 1 THEN DATEADD(hour, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 2 THEN DATEADD(day, @_StartAfter, @_ActionDate)
								END
							END
							
							-- дата контроля
							SET @_ControlDate = GETDATE()
							IF (@_ControlFromBeginProccess=1) -- От начала процесса
							BEGIN
								SET @_ControlDate = @_WorkflowStartDate
							END
							
							SET @_ControlDate = CASE
								WHEN @_ControlPeriod = 0 THEN DATEADD(minute, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 1 THEN DATEADD(hour, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 2 THEN DATEADD(day, @_ControlAfter, @_ControlDate)
							END
							
							
							-- Тип элемента "Сообщение"
							IF (@_WorkflowTemplateElementType = 0)
							BEGIN
								-- Начало добавления сообщения в очередь
								DECLARE @_SiteActionTemplateID uniqueidentifier = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActionTemplateID'')
								
								DECLARE @_NotBeforeDate datetime = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''NotBeforeDate'')
								
								DECLARE @_NotLaterDate datetime = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''NotLaterDate'')
								
								DECLARE @_AddSiteAction bit = 1
								
								IF ((@_NotBeforeDate IS NOT NULL) AND (@_ActionDate < @_NotBeforeDate))
								BEGIN
									SET @_ActionDate = @_NotBeforeDate
								END
								
								IF ((@_NotLaterDate IS NOT NULL) AND (@_ActionDate > @_NotLaterDate))
								BEGIN
									SET @_AddSiteAction = 0
								END
								
								IF (@_AddSiteAction = 1)
								BEGIN
									EXEC @_ActionDate = GetSiteActionPlannedDate @_WorkflowTemplateElementID, @_ActionDate
									IF (@_ActionDate IS NULL OR ((@_NotLaterDate IS NOT NULL) AND (@_ActionDate > @_NotLaterDate)))
									BEGIN
										SET @_AddSiteAction = 0
									END
								END
								
								
								IF (@_AddSiteAction = 1)
								BEGIN
									DECLARE @MessageTitle nvarchar(255)
									DECLARE @MessageText nvarchar(max)
									SELECT @MessageTitle=MessageCaption, @MessageText=MessageBody
									FROM tbl_SiteActionTemplate
									WHERE ID=@_SiteActionTemplateID
									
									DECLARE @_SiteActionID uniqueidentifier = NEWID()
									INSERT INTO tbl_SiteAction (ID, SiteID, SiteActionTemplateID, ContactID, ActionStatusID, ActionDate, MessageTitle, MessageText)
									VALUES (@_SiteActionID, @_SiteID, @_SiteActionTemplateID, @_WorkflowParameterID, 1, @_ActionDate, @MessageTitle, @MessageText)
								END
								-- Конец добавления сообщения в очередь
								
								IF (@_AddSiteAction = 1)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_SiteActionID)
								END
								ELSE
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 2)
									
									EXEC WorkflowProcessing @_InsertedWorkflowElementID, 4
								END
							END
							
							-- Тип элемента "Ожидание события"
							IF (@_WorkflowTemplateElementType = 2)
							BEGIN
								IF (@_ControlAfter<>0)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], ControlDate)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_ControlDate)
								END
								ELSE
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], ControlDate)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, GETDATE())
								END
							END
							
							-- Тип элемента "Действие"
							IF (@_WorkflowTemplateElementType = 3)
							BEGIN
								-- Начало добавления действия
								DECLARE @_ContactActivityDescription nvarchar(255) = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ContactActivityDescription'')
								
								DECLARE @_ContactActivityID uniqueidentifier = NEWID()
								INSERT INTO tbl_ContactActivity (ID, SiteID, ContactID, CreatedAt, ActivityTypeID, ActivityCode)
								VALUES (@_ContactActivityID, @_SiteID, @_WorkflowParameterID, GETDATE(), 6, @_ContactActivityDescription)
								-- Конец добавления действия
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1, @_ContactActivityID)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Задача"
							IF (@_WorkflowTemplateElementType = 1)
							BEGIN
								-- Начало добавления задачи
								DECLARE @_TaskID uniqueidentifier = NEWID()
								DECLARE @_TaskTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskType'') AS uniqueidentifier)
								
								DECLARE @_IsImportantTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsImportantTask'') AS bit)
								
								DECLARE @_IsUrgentTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsUrgentTask'') AS bit)
								
								DECLARE @_TaskEndDate datetime = @_ActionDate
								SET @_TaskEndDate = DATEADD(hour, @_DurationHours, @_TaskEndDate)
								SET @_TaskEndDate = DATEADD(minute, @_DurationMinutes, @_TaskEndDate)
								INSERT INTO tbl_Task (ID, SiteID, Title, TaskTypeID, StartDate, EndDate, DateOfControl, IsImportantTask, PlanDurationMinutes, PlanDurationHours, ResponsibleID, CreatorID, IsUrgentTask, TaskStatusID)
								VALUES (@_TaskID, @_SiteID, @_WorkflowTemplateElementName, @_TaskTypeID, @_ActionDate, @_TaskEndDate, @_ControlDate, @_IsImportantTask, @_DurationMinutes, @_DurationHours, @_WorkflowTemplateContactID, @_WorkflowTemplateContactID, @_IsUrgentTask, 1)
								-- Конец добавления задачи
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, ControlDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), @_ControlDate, 0, @_TaskID)
							END
							
							-- Тип элемента "Сегментация"
							IF (@_WorkflowTemplateElementType = 7)
							BEGIN
								SELECT ID
								INTO #WorkflowTemplateElementTag
								FROM tbl_WorkflowTemplateElementTag
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID
								
								DECLARE @_WorkflowTemplateElementTagID uniqueidentifier
								DECLARE @_SiteTagID uniqueidentifier
								DECLARE @_Operation int
								WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementTag) > 0
								BEGIN
									SELECT TOP 1 @_WorkflowTemplateElementTagID=ID
									FROM #WorkflowTemplateElementTag
									
									SELECT @_SiteTagID=SiteTagID, @_Operation=Operation
									FROM tbl_WorkflowTemplateElementTag
									WHERE ID=@_WorkflowTemplateElementTagID
									
									IF (@_Operation = 0)
									BEGIN
										DELETE FROM tbl_SiteTagObjects
										WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID
									END
									ELSE
									BEGIN
										IF (SELECT COUNT(*) FROM tbl_SiteTagObjects WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID) = 0
										BEGIN
											INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID)
											VALUES (@_SiteTagID, @_WorkflowParameterID)
										END
									END
									
									DELETE #WorkflowTemplateElementTag WHERE ID=@_WorkflowTemplateElementTagID
								END
								DROP TABLE #WorkflowTemplateElementTag

								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Скорринг"
							IF (@_WorkflowTemplateElementType = 8)
							BEGIN
								-- Начало добавления баллов
								--DECLARE @_SiteActivityScoreTypeID uniqueidentifier = NEWID()
								DECLARE @_SiteActivityScoreTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActivityScoreType'') AS uniqueidentifier)
								
								DECLARE @_ScoreCategory int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreCategory'') AS int)
								
								DECLARE @_ScoreOperation int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreOperation'') AS int)
								
								DECLARE @_AddedScore int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''AddedScore'') AS int)
								
								-- есть балл такого типа и такой категории
								DECLARE @_ContactActivityScoreID uniqueidentifier
								DECLARE @_oldScore int
								
								SELECT @_ContactActivityScoreID=ID, @_oldScore=Score
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								
								IF (@_ContactActivityScoreID IS NOT NULL)
								BEGIN
									DECLARE @_newScore int = CASE @_ScoreOperation
															 WHEN 0 THEN @_AddedScore -- (=)
															 WHEN 1 THEN @_oldScore + @_AddedScore -- (+)
															 WHEN 2 THEN @_oldScore - @_AddedScore -- (-)
															 WHEN 3 THEN @_oldScore * @_AddedScore -- (*)
															 END
									UPDATE tbl_ContactActivityScore
									SET Score=@_newScore
									WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								END
								ELSE
								BEGIN
									SET @_ContactActivityScoreID = NEWID()
									
									INSERT INTO tbl_ContactActivityScore (ID, SiteID, SiteActivityScoreTypeID, ContactID, Score, ScoreCategory)
									VALUES (@_ContactActivityScoreID, @_SiteID, @_SiteActivityScoreTypeID, @_WorkflowParameterID, @_AddedScore, @_ScoreCategory)
								END
								
								INSERT INTO tbl_ContactActivityScoreHistory (ContactActivityScoreID, Operation, Score, ActivityDate, Comment)
								VALUES (@_ContactActivityScoreID, @_ScoreOperation, @_AddedScore, GETDATE(), @_InsertedWorkflowElementID)
								-- Конец добавления баллов
								
								-- Начало обновления баллов контакта
								DECLARE @maxScoreTable TABLE
								(
									Score int,
									ScoreTypeID uniqueidentifier
								)

								INSERT INTO @maxScoreTable (Score, ScoreTypeID)
								SELECT TOP 1 SUM(Score) AS scoresum, SiteActivityScoreTypeID
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID
								GROUP BY SiteActivityScoreTypeID
								ORDER BY scoresum DESC

								DECLARE @_BehaviorScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=0 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								DECLARE @_CharacteristicsScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=1 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								IF (@_BehaviorScore IS NOT NULL)
								BEGIN
									DECLARE @_minScoreReadyToSell int = (SELECT MIN(MinScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									DECLARE @_maxScoreReadyToSell int = (SELECT MAX(MaxScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									
									IF (@_BehaviorScore < @_minScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_minScoreReadyToSell
									END
									IF (@_BehaviorScore > @_maxScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_maxScoreReadyToSell
									END

									UPDATE tbl_Contact
									SET BehaviorScore=@_BehaviorScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET ReadyToSellID=(SELECT TOP 1 ID FROM tbl_ReadyToSell WHERE SiteID=@_SiteID AND (@_BehaviorScore >= MinScore AND @_BehaviorScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								IF (@_CharacteristicsScore IS NOT NULL)
								BEGIN
									DECLARE @_minScorePriority int = (SELECT MIN(MinScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									DECLARE @_maxScorePriority int = (SELECT MAX(MaxScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									
									IF (@_CharacteristicsScore < @_minScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_minScorePriority
									END
									IF (@_CharacteristicsScore > @_maxScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_maxScorePriority
									END

									UPDATE tbl_Contact
									SET CharacteristicsScore=@_CharacteristicsScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET PriorityID=(SELECT TOP 1 ID FROM tbl_Priorities WHERE SiteID=@_SiteID AND (@_CharacteristicsScore >= MinScore AND @_CharacteristicsScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								UPDATE tbl_Contact
								SET Score= BehaviorScore + CharacteristicsScore
								WHERE ID=@_WorkflowParameterID
								-- Конец обновления баллов контакта
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							IF (@_WorkflowTemplateElementType = 9)
							BEGIN
								DECLARE @_ExternalRequestResult nvarchar(1)
								EXEC @_ExternalRequestResult = DoExternalRequestFunc @_WorkflowTemplateElementID, @_WorkflowParameterID
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), @_ExternalRequestResult)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, @_ExternalRequestResult
							END
						END
						
						DELETE #WorkflowTemplateElementRelation WHERE EndElementID=@_WorkflowTemplateElementID
					END
					DROP TABLE #WorkflowTemplateElementRelation
		END
		-- Входящие элемент просрочен
		ELSE
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
	END
	-- Если нет выходов с элемента
	ELSE
	BEGIN
		SET @_WorkflowElementStatus = 2
		
		-- Если ошибка элемента и нет больше элементов в ожидании
		SET @_CountWaitingElement = (SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND [Status]=0)
		IF (@_CountWaitingElement = 0 OR @_CountWaitingElement = 1)
		BEGIN
			UPDATE tbl_Workflow
			SET EndDate=GETDATE(), [Status]=3
			WHERE ID=@_WorkflowID
		END
	END
	
	
	-- Обновление статуса элемента процесса
	UPDATE tbl_WorkflowElement
	SET EndDate=@_EndDateElement,
		[Status]=@_WorkflowElementStatus,
		Result=@_StartElementResult
	WHERE ID=@_WorkflowElementID
	
END	
END'

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[WorkflowScheduler] 
AS
BEGIN
	DECLARE @_WorkflowElementID uniqueidentifier
	DECLARE @_WorkflowID uniqueidentifier
	DECLARE @sql nvarchar(max)
	DECLARE @ParmDefinition nvarchar(max)
	DECLARE @Parameter uniqueidentifier
	DECLARE @ElementType int

	SELECT tbl_WorkflowElement.ID, tbl_WorkflowTemplateElement.ElementType
	INTO #TmpWorkflowElement
	FROM tbl_WorkflowElement
	LEFT JOIN tbl_WorkflowTemplateElement ON tbl_WorkflowTemplateElement.ID=tbl_WorkflowElement.WorkflowTemplateElementID
	LEFT JOIN tbl_Workflow ON tbl_Workflow.ID=tbl_WorkflowElement.WorkflowID
	WHERE tbl_WorkflowElement.[Status]=0 -- В ожидании
		  AND tbl_Workflow.[Status]=0 -- Исполняется
		  AND (tbl_WorkflowTemplateElement.ElementType=2 -- Ожидание события
			   OR tbl_WorkflowTemplateElement.ElementType=1) -- Задача
		  
	WHILE (SELECT COUNT(*) FROM #TmpWorkflowElement) > 0
	BEGIN
		SELECT TOP 1 @_WorkflowElementID=ID, @ElementType=ElementType
		FROM #TmpWorkflowElement
		
		DECLARE @_WorkflowElementValue nvarchar(255)
		DECLARE @_WorkflowElementStartDate datetime
		DECLARE @_WorkflowElementControlDate datetime
		
		IF (@ElementType=1)
		BEGIN
					DECLARE @_WorkflowTemplateElementID uniqueidentifier
					DECLARE @_WorkflowTemplateElementResultID uniqueidentifier
					
					SELECT @_WorkflowElementValue=tbl_WorkflowElement.Value,
						   @_WorkflowElementStartDate=tbl_WorkflowElement.StartDate,
						   @_WorkflowElementControlDate=tbl_WorkflowElement.ControlDate,
						   @_WorkflowID=tbl_WorkflowElement.WorkflowID,
						   @_WorkflowTemplateElementID=tbl_WorkflowTemplateElement.ID
					FROM tbl_WorkflowElement
					LEFT JOIN tbl_WorkflowTemplateElement ON tbl_WorkflowTemplateElement.ID=tbl_WorkflowElement.WorkflowTemplateElementID
					WHERE tbl_WorkflowElement.ID=@_WorkflowElementID
					
					IF (@_WorkflowElementControlDate < GETDATE())
					BEGIN
							SELECT @_WorkflowTemplateElementResultID=ID
							FROM tbl_WorkflowTemplateElementResult
							WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''Задача просрочена''
							
							EXEC WorkflowProcessing @_WorkflowElementID, @_WorkflowTemplateElementResultID
					END
					ELSE
					BEGIN
						DECLARE @_TaskStatusID int
						SELECT @_TaskStatusID=TaskStatusID
						FROM tbl_Task
						WHERE ID=CAST(@_WorkflowElementValue AS uniqueidentifier)
						
						IF (@_TaskStatusID = 5) --Отменена
						BEGIN
							SELECT @_WorkflowTemplateElementResultID=ID
							FROM tbl_WorkflowTemplateElementResult
							WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''Задача отменена''
							
							EXEC WorkflowProcessing @_WorkflowElementID, @_WorkflowTemplateElementResultID
						END
					END
		END
		
		IF (@ElementType=2)
		BEGIN
					DECLARE @_WorkflowTemplateElementEventID uniqueidentifier
					
					SELECT @_WorkflowTemplateElementEventID=tbl_WorkflowTemplateElementEvent.ID,
						   @_WorkflowElementStartDate=tbl_WorkflowElement.StartDate,
						   @_WorkflowElementControlDate=tbl_WorkflowElement.ControlDate,
						   @_WorkflowID=tbl_WorkflowElement.WorkflowID
					FROM tbl_WorkflowElement
					LEFT JOIN tbl_WorkflowTemplateElement ON tbl_WorkflowTemplateElement.ID=tbl_WorkflowElement.WorkflowTemplateElementID
					LEFT JOIN tbl_WorkflowTemplateElementEvent ON tbl_WorkflowTemplateElementEvent.WorkflowTemplateElementID=tbl_WorkflowTemplateElement.ID
					WHERE tbl_WorkflowElement.ID=@_WorkflowElementID
					
					IF ((@_WorkflowElementControlDate IS NOT NULL) AND (@_WorkflowElementControlDate < GETDATE()))
					BEGIN
						EXEC WorkflowProcessing @_WorkflowElementID, 0
					END
					ELSE
					BEGIN

					
					SET @Parameter =
					(SELECT tbl_WorkflowParameter.[Value]
					FROM tbl_WorkflowParameter
					LEFT JOIN tbl_WorkflowTemplateParameter ON tbl_WorkflowTemplateParameter.ID=tbl_WorkflowParameter.WorkflowTemplateParameterID
					WHERE tbl_WorkflowParameter.WorkflowID=@_WorkflowID
						  AND tbl_WorkflowTemplateParameter.Name=N''Контакт''
						  AND tbl_WorkflowTemplateParameter.IsSystem=1)
						  
						  
					DECLARE @_Condition int
					DECLARE @_ActivityCount int
					SELECT @_Condition=Condition, @_ActivityCount=ActivityCount
					FROM tbl_WorkflowTemplateElementEvent 
					WHERE ID=@_WorkflowTemplateElementEventID

					
					
						SELECT ID
						INTO #TmpConditionEvent
						FROM tbl_WorkflowTemplateConditionEvent
						WHERE WorkflowTemplateElementEventID=@_WorkflowTemplateElementEventID
						
						DECLARE @TotalRowsReturned int
						DECLARE @Count int = 0
						
						DECLARE @CountConditionEvent int = (SELECT COUNT(*) FROM #TmpConditionEvent)
						DECLARE @_ConditionEventID uniqueidentifier
						DECLARE @_Category int
						DECLARE @_ActivityType int
						DECLARE @_Code nvarchar(max)
						DECLARE @_ActualPeriod int
						DECLARE @_Requisite nvarchar(2000)
						DECLARE @_Formula int
						DECLARE @_Value nvarchar(255)
						WHILE (SELECT COUNT(*) FROM #TmpConditionEvent) > 0
						BEGIN
							SELECT TOP 1 @_ConditionEventID=ID
							FROM #TmpConditionEvent
							
							SELECT @_Category=Category,
								   @_ActivityType=ActivityType,
								   @_Code=Code,
								   @_ActualPeriod=ActualPeriod,
								   @_Requisite=Requisite,
								   @_Formula=Formula,
								   @_Value=Value
							FROM tbl_WorkflowTemplateConditionEvent
							WHERE ID=@_ConditionEventID
							
							SET @_Code = REPLACE(@_Code, '''''''', '''''''''''')
							
							IF (@_Category=0) -- Действие
							BEGIN
								SET @sql = ''SELECT @TotalRowsReturnedOUT=COUNT(*)
											FROM tbl_ContactActivity
											WHERE ContactID=@ContactID
												  AND ActivityTypeID=@ActivityType
												  AND CreatedAt > @WorkflowElementStartDate''
												  
								IF (@_ActivityType=1 OR @_ActivityType=11 OR @_ActivityType=6)
								BEGIN
									IF (@_ActivityType=1 OR @_ActivityType=11)
									BEGIN
										SET @sql = @sql + '' AND ActivityCode LIKE N''''%'''' + @Code+ ''''%'''' ''
									END
									IF (@_ActivityType=6)
									BEGIN
										SET @sql = @sql + '' AND ActivityCode LIKE N'''''''' + @Code + '''''''' ''
									END
								END
								ELSE
								BEGIN
									SET @sql = @sql + '' AND ActivityCode=@Code ''
								END
								
								IF (@_ActualPeriod <> 0)
								BEGIN
									SET @sql = @sql + '' AND CreatedAt > DATEADD(day, (-1 * @ActualPeriod), GETDATE()) ''
								END
								
								SET @ParmDefinition = ''@TotalRowsReturnedOUT int OUTPUT, @ContactID uniqueidentifier, @ActivityType int, @Code nvarchar(max), @ActualPeriod int, @WorkflowElementStartDate datetime''
								EXECUTE sp_executesql @sql,
										@ParmDefinition,
										@TotalRowsReturnedOUT=@TotalRowsReturned OUTPUT,
										@ContactID=@Parameter,
										@ActivityType=@_ActivityType,
										@Code=@_Code,
										@ActualPeriod=@_ActualPeriod,
										@WorkflowElementStartDate=@_WorkflowElementStartDate
							END
							
							IF (@TotalRowsReturned > 0)
							BEGIN
								SET @Count = @Count + 1
							END
							
							IF (@_Category=1) -- Значение реквизита
							BEGIN
								DECLARE @_ColumnTypeID int
								DECLARE @_StringValue nvarchar(512)
								DECLARE @_DateValue datetime
								DECLARE @_SiteColumnValueID uniqueidentifier
								SELECT
									@_ColumnTypeID=tbl_SiteColumns.TypeID,
									@_StringValue=tbl_ContactColumnValues.StringValue,
									@_DateValue=tbl_ContactColumnValues.DateValue,
									@_SiteColumnValueID=tbl_ContactColumnValues.SiteColumnValueID
								FROM tbl_ContactColumnValues
								LEFT JOIN tbl_SiteColumns ON tbl_SiteColumns.ID=tbl_ContactColumnValues.SiteColumnID
								WHERE ContactID=@Parameter AND SiteColumnID=CAST(@_Requisite AS uniqueidentifier)
								
								-- Строка/Число/Текст
								IF ((@_ColumnTypeID=1 OR @_ColumnTypeID=4 OR @_ColumnTypeID=5)
									AND ((@_Formula=4 AND @_StringValue LIKE ''%''+@_Value)
										  OR (@_Formula=5 AND @_StringValue LIKE @_Value)
										)
									)
								BEGIN
									SET @Count = @Count + 1
								END
								-- Дата
								IF (@_ColumnTypeID=2
									AND ((@_Formula=7 AND @_DateValue < CAST(@_Value AS datetime))
										  OR (@_Formula=9 AND @_DateValue <= CAST(@_Value AS datetime))
										  OR (@_Formula=6 AND @_DateValue > CAST(@_Value AS datetime))
										  OR (@_Formula=8 AND @_DateValue >= CAST(@_Value AS datetime))
										)
								   )
								   BEGIN
										SET @Count = @Count + 1
								   END
								--Справочник
								IF (@_ColumnTypeID=3
									AND ((@_Formula=2 AND (@_SiteColumnValueID IS NULL OR @_SiteColumnValueID = N''00000000-0000-0000-0000-000000000000''))
										OR (@_Formula=1 AND (@_SiteColumnValueID IS NOT NULL AND @_SiteColumnValueID <> N''00000000-0000-0000-0000-000000000000''))
										OR (@_Formula=3 AND @_SiteColumnValueID = CAST(@_Value AS uniqueidentifier))
										)
								   )
								   BEGIN
										SET @Count = @Count + 1
								   END
							END
							
							DECLARE @_Scores int
							IF (@_Category=2) -- Балл по поведению
							BEGIN
								SET @_Scores = (SELECT Score FROM tbl_ContactActivityScore WHERE ID=@Parameter AND ScoreCategory=0 AND SiteActivityScoreTypeID=CAST(@_Requisite AS uniqueidentifier))
								IF ((@_Formula = 7 AND @_Scores < @_Value)
									OR (@_Formula = 9 AND @_Scores <= @_Value)
									OR (@_Formula = 6 AND @_Scores > @_Value)
									OR (@_Formula = 8 AND @_Scores >= @_Value))
								BEGIN
									SET @Count = @Count + 1
								END
							END
							
							IF (@_Category=3) -- Балл по характеристикам
							BEGIN
								--SET @_Scores = (SELECT CharacteristicsScore FROM tbl_Contact WHERE ID=@Parameter)
								SET @_Scores = (SELECT Score FROM tbl_ContactActivityScore WHERE ID=@Parameter AND ScoreCategory=1 AND SiteActivityScoreTypeID=CAST(@_Requisite AS uniqueidentifier))
								IF ((@_Formula = 7 AND @_Scores < @_Value)
									OR (@_Formula = 9 AND @_Scores <= @_Value)
									OR (@_Formula = 6 AND @_Scores > @_Value)
									OR (@_Formula = 8 AND @_Scores >= @_Value))
								BEGIN
									SET @Count = @Count + 1
								END
							END
							
							DELETE #TmpConditionEvent WHERE ID=@_ConditionEventID
						END
						DROP TABLE #TmpConditionEvent
						
					
						IF (@CountConditionEvent<>0
							AND ((@_Condition=0 AND @CountConditionEvent=@Count)
							OR (@_Condition=1 AND @Count>0)
							OR (@_Condition=2 AND @Count>=@_ActivityCount)
							))
						BEGIN
							EXEC WorkflowProcessing @_WorkflowElementID, 1
						END
						
						END
		END
		
		DELETE #TmpWorkflowElement WHERE ID=@_WorkflowElementID
	END
	DROP TABLE #TmpWorkflowElement
END'

commit
exec LBC_SetVersion 274
END

/*******************************************************************************
	2012-09-11
	Удаление лишних реквизитов
*******************************************************************************/
if ( dbo.LBC_Version() < 275 )
BEGIN
begin tran

ALTER TABLE tbl_SiteActivityRules DROP COLUMN CSSInstruction
ALTER TABLE tbl_SiteActivityRules DROP COLUMN CSSColumns

commit
exec LBC_SetVersion 275
END

/*******************************************************************************
	2012-09-11
	Создание крона для процессов
*******************************************************************************/
if ( dbo.LBC_Version() < 276 )
BEGIN
begin tran

INSERT INTO tbl_CronJob (Name, Assembly, Type, Period)
VALUES (N'Workflow', N'Labitec.LeadForce.CronJobs.dll', N'Labitec.LeadForce.CronJobs.WorkflowJob', 5)

commit
exec LBC_SetVersion 276
END

/*******************************************************************************
	2012-09-11
	Создание крона для процессов
*******************************************************************************/
if ( dbo.LBC_Version() < 277 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[WorkflowScheduler] 
AS
BEGIN
	DECLARE @_WorkflowElementID uniqueidentifier
	DECLARE @_WorkflowID uniqueidentifier
	DECLARE @sql nvarchar(max)
	DECLARE @ParmDefinition nvarchar(max)
	DECLARE @Parameter uniqueidentifier
	DECLARE @ElementType int

	SELECT tbl_WorkflowElement.ID, tbl_WorkflowTemplateElement.ElementType
	INTO #TmpWorkflowElement
	FROM tbl_WorkflowElement
	LEFT JOIN tbl_WorkflowTemplateElement ON tbl_WorkflowTemplateElement.ID=tbl_WorkflowElement.WorkflowTemplateElementID
	LEFT JOIN tbl_Workflow ON tbl_Workflow.ID=tbl_WorkflowElement.WorkflowID
	WHERE tbl_WorkflowElement.[Status]=0 -- В ожидании
		  AND tbl_Workflow.[Status]=0 -- Исполняется
		  AND (tbl_WorkflowTemplateElement.ElementType=2 -- Ожидание события
			   OR tbl_WorkflowTemplateElement.ElementType=1) -- Задача
		  
	WHILE (SELECT COUNT(*) FROM #TmpWorkflowElement) > 0
	BEGIN
		SELECT TOP 1 @_WorkflowElementID=ID, @ElementType=ElementType
		FROM #TmpWorkflowElement
		
		DECLARE @_WorkflowElementValue nvarchar(255)
		DECLARE @_WorkflowElementStartDate datetime
		DECLARE @_WorkflowElementControlDate datetime
		
		DECLARE @_LastRunAtWorkflowJob datetime
		DECLARE @_LastRunStatusIDWorkflowJob int
		SELECT @_LastRunAtWorkflowJob=LastRunAt, @_LastRunStatusIDWorkflowJob=LastRunStatusID
		FROM tbl_CronJob
		WHERE Name=N''Workflow''
		
		IF (@ElementType=1)
		BEGIN
					DECLARE @_WorkflowTemplateElementID uniqueidentifier
					DECLARE @_WorkflowTemplateElementResultID uniqueidentifier
					
					SELECT @_WorkflowElementValue=tbl_WorkflowElement.Value,
						   @_WorkflowElementStartDate=tbl_WorkflowElement.StartDate,
						   @_WorkflowElementControlDate=tbl_WorkflowElement.ControlDate,
						   @_WorkflowID=tbl_WorkflowElement.WorkflowID,
						   @_WorkflowTemplateElementID=tbl_WorkflowTemplateElement.ID
					FROM tbl_WorkflowElement
					LEFT JOIN tbl_WorkflowTemplateElement ON tbl_WorkflowTemplateElement.ID=tbl_WorkflowElement.WorkflowTemplateElementID
					WHERE tbl_WorkflowElement.ID=@_WorkflowElementID
					
					IF (
						(@_WorkflowElementControlDate < GETDATE())
						AND (@_WorkflowElementControlDate < @_LastRunAtWorkflowJob)
						AND (@_LastRunStatusIDWorkflowJob = 0)
						)
					BEGIN
							SELECT @_WorkflowTemplateElementResultID=ID
							FROM tbl_WorkflowTemplateElementResult
							WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''Задача просрочена''
							
							EXEC WorkflowProcessing @_WorkflowElementID, @_WorkflowTemplateElementResultID
					END
					ELSE
					BEGIN
						DECLARE @_TaskStatusID int
						SELECT @_TaskStatusID=TaskStatusID
						FROM tbl_Task
						WHERE ID=CAST(@_WorkflowElementValue AS uniqueidentifier)
						
						IF (@_TaskStatusID = 5) --Отменена
						BEGIN
							SELECT @_WorkflowTemplateElementResultID=ID
							FROM tbl_WorkflowTemplateElementResult
							WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''Задача отменена''
							
							EXEC WorkflowProcessing @_WorkflowElementID, @_WorkflowTemplateElementResultID
						END
					END
		END
		
		IF (@ElementType=2)
		BEGIN
					DECLARE @_WorkflowTemplateElementEventID uniqueidentifier
					
					SELECT @_WorkflowTemplateElementEventID=tbl_WorkflowTemplateElementEvent.ID,
						   @_WorkflowElementStartDate=tbl_WorkflowElement.StartDate,
						   @_WorkflowElementControlDate=tbl_WorkflowElement.ControlDate,
						   @_WorkflowID=tbl_WorkflowElement.WorkflowID
					FROM tbl_WorkflowElement
					LEFT JOIN tbl_WorkflowTemplateElement ON tbl_WorkflowTemplateElement.ID=tbl_WorkflowElement.WorkflowTemplateElementID
					LEFT JOIN tbl_WorkflowTemplateElementEvent ON tbl_WorkflowTemplateElementEvent.WorkflowTemplateElementID=tbl_WorkflowTemplateElement.ID
					WHERE tbl_WorkflowElement.ID=@_WorkflowElementID
					
					IF (
						(@_WorkflowElementControlDate IS NOT NULL)
						AND (@_WorkflowElementControlDate < GETDATE())
						AND (@_WorkflowElementControlDate < @_LastRunAtWorkflowJob)
						AND (@_LastRunStatusIDWorkflowJob = 0)
						)
					BEGIN
						EXEC WorkflowProcessing @_WorkflowElementID, 0
					END
					ELSE
					BEGIN

					
					SET @Parameter =
					(SELECT tbl_WorkflowParameter.[Value]
					FROM tbl_WorkflowParameter
					LEFT JOIN tbl_WorkflowTemplateParameter ON tbl_WorkflowTemplateParameter.ID=tbl_WorkflowParameter.WorkflowTemplateParameterID
					WHERE tbl_WorkflowParameter.WorkflowID=@_WorkflowID
						  AND tbl_WorkflowTemplateParameter.Name=N''Контакт''
						  AND tbl_WorkflowTemplateParameter.IsSystem=1)
						  
						  
					DECLARE @_Condition int
					DECLARE @_ActivityCount int
					SELECT @_Condition=Condition, @_ActivityCount=ActivityCount
					FROM tbl_WorkflowTemplateElementEvent 
					WHERE ID=@_WorkflowTemplateElementEventID

					
					
						SELECT ID
						INTO #TmpConditionEvent
						FROM tbl_WorkflowTemplateConditionEvent
						WHERE WorkflowTemplateElementEventID=@_WorkflowTemplateElementEventID
						
						DECLARE @TotalRowsReturned int
						DECLARE @Count int = 0
						
						DECLARE @CountConditionEvent int = (SELECT COUNT(*) FROM #TmpConditionEvent)
						DECLARE @_ConditionEventID uniqueidentifier
						DECLARE @_Category int
						DECLARE @_ActivityType int
						DECLARE @_Code nvarchar(max)
						DECLARE @_ActualPeriod int
						DECLARE @_Requisite nvarchar(2000)
						DECLARE @_Formula int
						DECLARE @_Value nvarchar(255)
						WHILE (SELECT COUNT(*) FROM #TmpConditionEvent) > 0
						BEGIN
							SELECT TOP 1 @_ConditionEventID=ID
							FROM #TmpConditionEvent
							
							SELECT @_Category=Category,
								   @_ActivityType=ActivityType,
								   @_Code=Code,
								   @_ActualPeriod=ActualPeriod,
								   @_Requisite=Requisite,
								   @_Formula=Formula,
								   @_Value=Value
							FROM tbl_WorkflowTemplateConditionEvent
							WHERE ID=@_ConditionEventID
							
							SET @_Code = REPLACE(@_Code, '''''''', '''''''''''')
							
							IF (@_Category=0) -- Действие
							BEGIN
								SET @sql = ''SELECT @TotalRowsReturnedOUT=COUNT(*)
											FROM tbl_ContactActivity
											WHERE ContactID=@ContactID
												  AND ActivityTypeID=@ActivityType''
												  --AND CreatedAt > @WorkflowElementStartDate''
												  
								IF (@_ActivityType=1 OR @_ActivityType=11 OR @_ActivityType=6)
								BEGIN
									IF (@_ActivityType=1 OR @_ActivityType=11)
									BEGIN
										SET @sql = @sql + '' AND ActivityCode LIKE N''''%'''' + @Code+ ''''%'''' ''
									END
									IF (@_ActivityType=6)
									BEGIN
										SET @sql = @sql + '' AND ActivityCode LIKE N'''''''' + @Code + '''''''' ''
									END
								END
								ELSE
								BEGIN
									SET @sql = @sql + '' AND ActivityCode=@Code ''
								END
								
								IF (@_ActualPeriod <> 0)
								BEGIN
									SET @sql = @sql + '' AND CreatedAt > DATEADD(day, (-1 * @ActualPeriod), GETDATE()) ''
								END
								
								SET @ParmDefinition = ''@TotalRowsReturnedOUT int OUTPUT, @ContactID uniqueidentifier, @ActivityType int, @Code nvarchar(max), @ActualPeriod int, @WorkflowElementStartDate datetime''
								EXECUTE sp_executesql @sql,
										@ParmDefinition,
										@TotalRowsReturnedOUT=@TotalRowsReturned OUTPUT,
										@ContactID=@Parameter,
										@ActivityType=@_ActivityType,
										@Code=@_Code,
										@ActualPeriod=@_ActualPeriod,
										@WorkflowElementStartDate=@_WorkflowElementStartDate
							END
							
							IF (@TotalRowsReturned > 0)
							BEGIN
								SET @Count = @Count + 1
							END
							
							IF (@_Category=1) -- Значение реквизита
							BEGIN
								DECLARE @_ColumnTypeID int
								DECLARE @_StringValue nvarchar(512)
								DECLARE @_DateValue datetime
								DECLARE @_SiteColumnValueID uniqueidentifier
								SELECT
									@_ColumnTypeID=tbl_SiteColumns.TypeID,
									@_StringValue=tbl_ContactColumnValues.StringValue,
									@_DateValue=tbl_ContactColumnValues.DateValue,
									@_SiteColumnValueID=tbl_ContactColumnValues.SiteColumnValueID
								FROM tbl_ContactColumnValues
								LEFT JOIN tbl_SiteColumns ON tbl_SiteColumns.ID=tbl_ContactColumnValues.SiteColumnID
								WHERE ContactID=@Parameter AND SiteColumnID=CAST(@_Requisite AS uniqueidentifier)
								
								-- Строка/Число/Текст
								IF ((@_ColumnTypeID=1 OR @_ColumnTypeID=4 OR @_ColumnTypeID=5)
									AND ((@_Formula=4 AND @_StringValue LIKE ''%''+@_Value)
										  OR (@_Formula=5 AND @_StringValue LIKE @_Value)
										)
									)
								BEGIN
									SET @Count = @Count + 1
								END
								-- Дата
								IF (@_ColumnTypeID=2
									AND ((@_Formula=7 AND @_DateValue < CAST(@_Value AS datetime))
										  OR (@_Formula=9 AND @_DateValue <= CAST(@_Value AS datetime))
										  OR (@_Formula=6 AND @_DateValue > CAST(@_Value AS datetime))
										  OR (@_Formula=8 AND @_DateValue >= CAST(@_Value AS datetime))
										)
								   )
								   BEGIN
										SET @Count = @Count + 1
								   END
								--Справочник
								IF (@_ColumnTypeID=3
									AND ((@_Formula=2 AND (@_SiteColumnValueID IS NULL OR @_SiteColumnValueID = N''00000000-0000-0000-0000-000000000000''))
										OR (@_Formula=1 AND (@_SiteColumnValueID IS NOT NULL AND @_SiteColumnValueID <> N''00000000-0000-0000-0000-000000000000''))
										OR (@_Formula=3 AND @_SiteColumnValueID = CAST(@_Value AS uniqueidentifier))
										)
								   )
								   BEGIN
										SET @Count = @Count + 1
								   END
							END
							
							DECLARE @_Scores int
							IF (@_Category=2) -- Балл по поведению
							BEGIN
								SET @_Scores = (SELECT Score FROM tbl_ContactActivityScore WHERE ID=@Parameter AND ScoreCategory=0 AND SiteActivityScoreTypeID=CAST(@_Requisite AS uniqueidentifier))
								IF ((@_Formula = 7 AND @_Scores < @_Value)
									OR (@_Formula = 9 AND @_Scores <= @_Value)
									OR (@_Formula = 6 AND @_Scores > @_Value)
									OR (@_Formula = 8 AND @_Scores >= @_Value))
								BEGIN
									SET @Count = @Count + 1
								END
							END
							
							IF (@_Category=3) -- Балл по характеристикам
							BEGIN
								--SET @_Scores = (SELECT CharacteristicsScore FROM tbl_Contact WHERE ID=@Parameter)
								SET @_Scores = (SELECT Score FROM tbl_ContactActivityScore WHERE ID=@Parameter AND ScoreCategory=1 AND SiteActivityScoreTypeID=CAST(@_Requisite AS uniqueidentifier))
								IF ((@_Formula = 7 AND @_Scores < @_Value)
									OR (@_Formula = 9 AND @_Scores <= @_Value)
									OR (@_Formula = 6 AND @_Scores > @_Value)
									OR (@_Formula = 8 AND @_Scores >= @_Value))
								BEGIN
									SET @Count = @Count + 1
								END
							END
							
							DELETE #TmpConditionEvent WHERE ID=@_ConditionEventID
						END
						DROP TABLE #TmpConditionEvent
						
					
						IF (@CountConditionEvent<>0
							AND ((@_Condition=0 AND @CountConditionEvent=@Count)
							OR (@_Condition=1 AND @Count>0)
							OR (@_Condition=2 AND @Count>=@_ActivityCount)
							))
						BEGIN
							EXEC WorkflowProcessing @_WorkflowElementID, 1
						END
						
						END
		END
		
		DELETE #TmpWorkflowElement WHERE ID=@_WorkflowElementID
	END
	DROP TABLE #TmpWorkflowElement
END'

commit
exec LBC_SetVersion 277
END

/*******************************************************************************
	2012-09-12
	К профилям сайтов добавлен реквизит "Количество доменов"
*******************************************************************************/
if ( dbo.LBC_Version() < 278 )
BEGIN
begin tran

ALTER TABLE [tbl_AccessProfile] ADD DomainsCount int NULL

commit
exec LBC_SetVersion 278
END

/*******************************************************************************
	2012-09-12
	Добавлена таблица хранения доменов
*******************************************************************************/
if ( dbo.LBC_Version() < 279 )
BEGIN
begin tran

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[tbl_SiteDomain](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteID] [uniqueidentifier] NOT NULL,
	[Domain] [nvarchar](256) NOT NULL,
	[Aliases] [nvarchar](max) NOT NULL,
	[IsAttached] [bit] NOT NULL,
	[Note] [nvarchar](2048) NOT NULL,
 CONSTRAINT [PK_tbl_SiteDomain] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[tbl_SiteDomain]  WITH CHECK ADD  CONSTRAINT [FK_tbl_SiteDomain_tbl_Sites] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_Sites] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_SiteDomain] CHECK CONSTRAINT [FK_tbl_SiteDomain_tbl_Sites]
ALTER TABLE [dbo].[tbl_SiteDomain] ADD  CONSTRAINT [DF_tbl_SiteDomain_ID]  DEFAULT (newid()) FOR [ID]

ALTER TABLE [tbl_Sites] ADD IsBlockAccessFromDomainsOutsideOfList bit NOT NULL DEFAULT ((0))

commit
exec LBC_SetVersion 279
END

/*******************************************************************************
	2012-09-12
	Импорт - переработка интерфейса
*******************************************************************************/
if ( dbo.LBC_Version() < 280 )
BEGIN
begin tran

DELETE FROM tbl_UserSettings
WHERE     (ClassName = 'WebCounter.AdminPanel.Imports') OR (ClassName='WebCounter.AdminPanel.MassMails')

commit
exec LBC_SetVersion 280
END


/*******************************************************************************
	2012-09-13
	Добавлена процедура получения списка доменов с лога действий
*******************************************************************************/
if ( dbo.LBC_Version() < 281 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[GetDomainFromURL]  (@strURL nvarchar(max))
RETURNS varchar(1000)
AS
BEGIN
IF CHARINDEX(''http://'',@strURL) > 0 OR CHARINDEX(''https://'',@strURL) > 0
SELECT @strURL = REPLACE(@strURL,''https://'','''')
SELECT @strURL = REPLACE(@strURL,''http://'','''')
SELECT @strURL = REPLACE(@strURL,''www'','''')
-- Remove everything after "/" if one exists
IF CHARINDEX(''/'',@strURL) > 0 (SELECT @strURL = LEFT(@strURL,CHARINDEX(''/'',@strURL)-1))
-- Optional: Remove subdomains but differentiate between www.google.com and www.google.com.au
IF (LEN(@strURL)-LEN(REPLACE(@strURL,''.'','''')))/LEN(''.'') < 3 -- if there are less than 3 periods
SELECT @strURL = PARSENAME(@strURL,2) + ''.'' + PARSENAME(@strURL,1)
ELSE -- It''s likely a google.co.uk, or google.com.au
SELECT @strURL = PARSENAME(@strURL,3) + ''.'' + PARSENAME(@strURL,2) + ''.'' + PARSENAME(@strURL,1)
RETURN @strURL
END'

EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE GetDomainsFromContactActivity
	(
		@SiteID uniqueidentifier
	)
AS
BEGIN
	SELECT dbo.GetDomainFromURL(ActivityCode) as Domain 
	FROM tbl_ContactActivity
	WHERE ActivityTypeID = 1 AND SiteID = @SiteID
	GROUP BY dbo.GetDomainFromURL(ActivityCode)
END'

commit
exec LBC_SetVersion 281
END

/*******************************************************************************
	2012-09-13
	ДОбавлен модуль привязки домена
*******************************************************************************/
if ( dbo.LBC_Version() < 282 )
BEGIN
begin tran

INSERT INTO tbl_Module (Title, Name, TableName)
VALUES (N'Настройка домена', 'DomainSettings','tbl_SiteDomain')
INSERT INTO tbl_ObjectTypes (Name) VALUES (N'tbl_SiteDomain')

commit
exec LBC_SetVersion 282
END

/*******************************************************************************
	2012-09-13
	Добавлен главный модуль
*******************************************************************************/
if ( dbo.LBC_Version() < 283 )
BEGIN
begin tran

INSERT INTO tbl_Module (Title, Name, TableName)
VALUES (N'Главный модуль', 'Main','')

commit
exec LBC_SetVersion 283
END

/*******************************************************************************
	2012-09-13
	Добавлена редакция для главного модуля
*******************************************************************************/
if ( dbo.LBC_Version() < 284 )
BEGIN
begin tran

DECLARE @ModuleEditionId uniqueidentifier = NEWID()
INSERT INTO tbl_ModuleEdition (ID, ModuleID, Title)
VALUES (@ModuleEditionId, (SELECT ID FROM tbl_Module WHERE Name=N'Main'), N'Основная редакция')

INSERT INTO tbl_ModuleEditionOption (ModuleEditionID, Title, SystemName, ModuleEditionOptionType)
VALUES (@ModuleEditionId, N'Отражать статус настройки доменов', 'ShowDomainStatusSettings', 0)

commit
exec LBC_SetVersion 284
END


/*******************************************************************************
	2012-09-13
	Добавлена редакция для модуля рассылок
*******************************************************************************/
if ( dbo.LBC_Version() < 285 )
BEGIN
begin tran

DECLARE @MassMailsModuleID uniqueidentifier
SET @MassMailsModuleID = (SELECT     ID
FROM         tbl_Module
WHERE     (Name = 'MassMails'))

DECLARE @MassMailsModuleEditionID uniqueidentifier = NEWID()

INSERT INTO tbl_ModuleEdition ([ID],[ModuleID], [Title]) 
VALUES (@MassMailsModuleEditionID,@MassMailsModuleID,'Основная редакция')

INSERT INTO tbl_ModuleEditionOption ([ID],[ModuleEditionID], [Title],SystemName) 
VALUES (NEWID(),@MassMailsModuleEditionID,'Отражать теги и фильтры','ShowTagsAndFilters')

commit
exec LBC_SetVersion 285
END

/*******************************************************************************
	2012-09-14
	К профилям сайтов добавлен реквизит "URL страницы контактов"
*******************************************************************************/
if ( dbo.LBC_Version() < 286 )
BEGIN
begin tran

ALTER TABLE [tbl_AccessProfile] ADD ContactsPageUrl nvarchar(2048) NULL

commit
exec LBC_SetVersion 286
END

/*******************************************************************************
	2012-09-17
	Добавлен реквизиты статуса домена
*******************************************************************************/
if ( dbo.LBC_Version() < 287 )
BEGIN
begin tran

ALTER TABLE [tbl_SiteDomain] DROP COLUMN IsAttached
ALTER TABLE [tbl_SiteDomain] ADD StatusID int not null default((1))

commit
exec LBC_SetVersion 287
END

/*******************************************************************************
	2012-09-18
	Добавлен IsDeleted для элеметов шаблона процесса
*******************************************************************************/
if ( dbo.LBC_Version() < 288 )
BEGIN
begin tran

ALTER TABLE tbl_WorkflowTemplateElement ADD IsDeleted bit NOT NULL DEFAULT ((0))

commit
exec LBC_SetVersion 288
END


/*******************************************************************************
	2012-09-18
	Модуль оплаты
*******************************************************************************/
if ( dbo.LBC_Version() < 289 )
BEGIN
begin tran

DELETE FROM tbl_Dictionary WHERE DataSet = N'tbl_LeadForceEdition' OR DataSet = N'tbl_LeadForceProduct'
ALTER TABLE tbl_AccessProfile DROP CONSTRAINT FK_tbl_AccessProfile_tbl_LeadForceEdition
ALTER TABLE tbl_AccessProfile DROP CONSTRAINT FK_tbl_AccessProfile_tbl_LeadForceProduct
ALTER TABLE tbl_AccessProfile DROP COLUMN LeadForceEditionID
ALTER TABLE tbl_AccessProfile DROP COLUMN LeadForceProductID
DROP TABLE tbl_LeadForceEdition
DROP TABLE tbl_LeadForceProduct

ALTER TABLE [tbl_AccessProfile] ADD ProductID uniqueidentifier NULL
ALTER TABLE [dbo].[tbl_AccessProfile]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AccessProfile_tbl_Product] FOREIGN KEY([ProductID])
REFERENCES [dbo].[tbl_Product] ([ID])
ALTER TABLE [dbo].[tbl_AccessProfile] CHECK CONSTRAINT [FK_tbl_AccessProfile_tbl_Product]

ALTER TABLE [tbl_Sites] ADD MainUserID uniqueidentifier NULL
ALTER TABLE [dbo].[tbl_Sites]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Sites_tbl_User] FOREIGN KEY([MainUserID])
REFERENCES [dbo].[tbl_User] ([ID])
ALTER TABLE [dbo].[tbl_Sites] CHECK CONSTRAINT [FK_tbl_Sites_tbl_User]

ALTER TABLE [tbl_Sites] ADD ActiveUntilDate datetime NULL

ALTER TABLE [tbl_Sites] ADD PriceListID uniqueidentifier NULL
ALTER TABLE [dbo].[tbl_Sites]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Sites_tbl_PriceList] FOREIGN KEY([PriceListID])
REFERENCES [dbo].[tbl_PriceList] ([ID])
ALTER TABLE [dbo].[tbl_Sites] CHECK CONSTRAINT [FK_tbl_Sites_tbl_PriceList]

ALTER TABLE [tbl_Sites] ADD PayerCompanyID uniqueidentifier NULL
ALTER TABLE [dbo].[tbl_Sites]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Sites_tbl_Company] FOREIGN KEY([PayerCompanyID])
REFERENCES [dbo].[tbl_Company] ([ID])
ALTER TABLE [dbo].[tbl_Sites] CHECK CONSTRAINT [FK_tbl_Sites_tbl_Company]

commit
exec LBC_SetVersion 289
END

/*******************************************************************************
	2012-09-19
	Добавлен модуль оплаты услуг
*******************************************************************************/
if ( dbo.LBC_Version() < 290 )
BEGIN
begin tran

INSERT INTO tbl_Module (Title, Name, TableName)
VALUES (N'Оплата услуг', 'PaymentServices','tbl_Payment')

commit
exec LBC_SetVersion 290
END

/*******************************************************************************
	2012-09-20
	Добавлены статистические данные для доменов
*******************************************************************************/
if ( dbo.LBC_Version() < 291 )
BEGIN
begin tran

ALTER TABLE [tbl_SiteDomain] ADD PageCountWithCounter int not null default((0))
ALTER TABLE [tbl_SiteDomain] ADD TotalPageCount int not null default((0))
ALTER TABLE [tbl_SiteDomain] ADD PageCountWithForms int not null default((0))
ALTER TABLE [tbl_SiteDomain] ADD PageCountWithOnClosingForms int not null default((0))

commit
exec LBC_SetVersion 291
END

/*******************************************************************************
	2012-09-27
	Добавлена настройка виджетов
*******************************************************************************/
if ( dbo.LBC_Version() < 292 )
BEGIN
begin tran

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[tbl_WidgetCategory](
	[ID] [uniqueidentifier] NOT NULL,
	[ParentID] [uniqueidentifier] NULL,
	[Title] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_tbl_WidgetCategory] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
INSERT [dbo].[tbl_WidgetCategory] ([ID], [ParentID], [Title]) VALUES (N'ae684f1f-f4f8-40eb-94db-023c76bb20c4', NULL, N'Общая')
INSERT [dbo].[tbl_WidgetCategory] ([ID], [ParentID], [Title]) VALUES (N'5d7d1575-e667-4cf9-a04b-1e51a055064c', NULL, N'Контакты')
INSERT [dbo].[tbl_WidgetCategory] ([ID], [ParentID], [Title]) VALUES (N'd7da44e7-5538-4756-9f0d-9c46d57901ff', NULL, N'Аналитика')
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[tbl_Widget](
	[ID] [uniqueidentifier] NOT NULL,
	[WidgetCategoryID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
	[UserControl] [nvarchar](2048) NULL,
 CONSTRAINT [PK_tbl_Widget] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
INSERT [dbo].[tbl_Widget] ([ID], [WidgetCategoryID], [Title], [UserControl]) VALUES (N'5bd3adca-e25f-4f39-a064-222c83debac2', N'ae684f1f-f4f8-40eb-94db-023c76bb20c4', N'Подсказка', NULL)
INSERT [dbo].[tbl_Widget] ([ID], [WidgetCategoryID], [Title], [UserControl]) VALUES (N'3e5d41ff-ea3e-4a35-93dd-28c69290f965', N'd7da44e7-5538-4756-9f0d-9c46d57901ff', N'Источники посетителей', NULL)
INSERT [dbo].[tbl_Widget] ([ID], [WidgetCategoryID], [Title], [UserControl]) VALUES (N'fdf3b7d1-ebb6-44d6-a169-9d8ebcfd467d', N'ae684f1f-f4f8-40eb-94db-023c76bb20c4', N'Домены', NULL)
INSERT [dbo].[tbl_Widget] ([ID], [WidgetCategoryID], [Title], [UserControl]) VALUES (N'c87ca7fd-43e1-49b9-a00b-a3053db8233c', N'5d7d1575-e667-4cf9-a04b-1e51a055064c', N'Категории клиентов', NULL)
INSERT [dbo].[tbl_Widget] ([ID], [WidgetCategoryID], [Title], [UserControl]) VALUES (N'0f0bff3f-b485-49fd-8aba-b873d67ebe90', N'd7da44e7-5538-4756-9f0d-9c46d57901ff', N'График', NULL)
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[tbl_WidgetToAccessProfile](
	[ID] [uniqueidentifier] NOT NULL,
	[WidgetID] [uniqueidentifier] NOT NULL,
	[AccessProfileID] [uniqueidentifier] NOT NULL,
	[Order] [int] NOT NULL,
	[ModuleID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_tbl_WidgetToAccessProfile] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[tbl_Widget] ADD  CONSTRAINT [DF_tbl_Widget_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_WidgetCategory] ADD  CONSTRAINT [DF_tbl_WidgetCategory_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_WidgetToAccessProfile] ADD  CONSTRAINT [DF_tbl_WidgetToAccessProfile_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_WidgetToAccessProfile] ADD  CONSTRAINT [DF_tbl_WidgetToAccessProfile_Order]  DEFAULT ((0)) FOR [Order]
ALTER TABLE [dbo].[tbl_Widget]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Widget_tbl_WidgetCategory] FOREIGN KEY([WidgetCategoryID])
REFERENCES [dbo].[tbl_WidgetCategory] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_Widget] CHECK CONSTRAINT [FK_tbl_Widget_tbl_WidgetCategory]
ALTER TABLE [dbo].[tbl_WidgetCategory]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WidgetCategory_tbl_WidgetCategory] FOREIGN KEY([ParentID])
REFERENCES [dbo].[tbl_WidgetCategory] ([ID])
ALTER TABLE [dbo].[tbl_WidgetCategory] CHECK CONSTRAINT [FK_tbl_WidgetCategory_tbl_WidgetCategory]
ALTER TABLE [dbo].[tbl_WidgetToAccessProfile]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WidgetToAccessProfile_tbl_AccessProfile] FOREIGN KEY([AccessProfileID])
REFERENCES [dbo].[tbl_AccessProfile] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_WidgetToAccessProfile] CHECK CONSTRAINT [FK_tbl_WidgetToAccessProfile_tbl_AccessProfile]
ALTER TABLE [dbo].[tbl_WidgetToAccessProfile]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WidgetToAccessProfile_tbl_Module] FOREIGN KEY([ModuleID])
REFERENCES [dbo].[tbl_Module] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_WidgetToAccessProfile] CHECK CONSTRAINT [FK_tbl_WidgetToAccessProfile_tbl_Module]
ALTER TABLE [dbo].[tbl_WidgetToAccessProfile]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WidgetToAccessProfile_tbl_Widget] FOREIGN KEY([WidgetID])
REFERENCES [dbo].[tbl_Widget] ([ID])
ALTER TABLE [dbo].[tbl_WidgetToAccessProfile] CHECK CONSTRAINT [FK_tbl_WidgetToAccessProfile_tbl_Widget]

commit
exec LBC_SetVersion 292
END

/*******************************************************************************
	2012-09-27
	Добавлена настройка виджетов
*******************************************************************************/
if ( dbo.LBC_Version() < 293 )
BEGIN
begin tran

DELETE FROM tbl_WidgetToAccessProfile WHERE WidgetID = '0f0bff3f-b485-49fd-8aba-b873d67ebe90'
DELETE FROM tbl_Widget WHERE ID = '0f0bff3f-b485-49fd-8aba-b873d67ebe90'

commit
exec LBC_SetVersion 293
END

/*******************************************************************************
	2012-09-27
	Импорт
*******************************************************************************/
if ( dbo.LBC_Version() < 294 )
BEGIN
begin tran

CREATE TABLE [dbo].[tbl_ImportTag](
	[ID] [uniqueidentifier] NOT NULL,
	[ImportID] [uniqueidentifier] NOT NULL,
	[SiteTagID] [uniqueidentifier] NOT NULL,
	[Operation] [int] NOT NULL,
 CONSTRAINT [PK_tbl_ImportTag] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[tbl_ImportTag]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ImportTag_tbl_Import] FOREIGN KEY([ImportID])
REFERENCES [dbo].[tbl_Import] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_ImportTag] CHECK CONSTRAINT [FK_tbl_ImportTag_tbl_Import]
ALTER TABLE [dbo].[tbl_ImportTag] ADD  CONSTRAINT [DF_tbl_ImportTag_ID]  DEFAULT (newid()) FOR [ID]


CREATE TABLE [dbo].[tbl_ImportKey](
	[ID] [uniqueidentifier] NOT NULL,
	[ImportID] [uniqueidentifier] NOT NULL,
	[TableName] [nvarchar](255) NOT NULL,
	[Key] [nvarchar](max) NOT NULL,
	[LeadForceID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_tbl_ImportKey] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[tbl_ImportKey] ADD  CONSTRAINT [DF_tbl_ImportKey_ID]  DEFAULT (newid()) FOR [ID]

EXEC sp_rename 'tbl_ImportColumn.[CompositeKey]', 'SecondaryKey', 'COLUMN'

UPDATE tbl_ImportField SET FieldTitle=N'Почтовый адрес.Адрес', TableName=N'tbl_Address', FieldName=N'Address' WHERE FieldTitle=N'Местоположение.Адрес'
UPDATE tbl_ImportField SET FieldTitle=N'Почтовый адрес.Федеральный округ' WHERE FieldTitle=N'Местоположение.Федеральный округ'
UPDATE tbl_ImportField SET FieldTitle=N'Почтовый адрес.Регион' WHERE FieldTitle=N'Местоположение.Регион'
UPDATE tbl_ImportField SET FieldTitle=N'Почтовый адрес.Город' WHERE FieldTitle=N'Местоположение.Город'
UPDATE tbl_ImportField SET FieldTitle=N'Почтовый адрес.Адрес' WHERE FieldTitle=N'Местоположение.Адрес'


UPDATE tbl_ImportField SET [Order]=25 WHERE [Order]=20
UPDATE tbl_ImportField SET [Order]=24 WHERE [Order]=19
UPDATE tbl_ImportField SET [Order]=23 WHERE [Order]=18
UPDATE tbl_ImportField SET [Order]=22 WHERE [Order]=17
UPDATE tbl_ImportField SET [Order]=21 WHERE [Order]=16
UPDATE tbl_ImportField SET [Order]=20 WHERE [Order]=15
UPDATE tbl_ImportField SET [Order]=19 WHERE [Order]=14
UPDATE tbl_ImportField SET [Order]=18 WHERE [Order]=13
UPDATE tbl_ImportField SET [Order]=17 WHERE [Order]=12
UPDATE tbl_ImportField SET [Order]=16 WHERE [Order]=11
UPDATE tbl_ImportField SET [Order]=15 WHERE [Order]=10
UPDATE tbl_ImportField SET [Order]=14 WHERE [Order]=9

ALTER TABLE tbl_ImportField ADD ParentTableName nvarchar(255) NULL

commit
exec LBC_SetVersion 294
END
GO

/*******************************************************************************
	2012-09-27
	Импорт
*******************************************************************************/
if ( dbo.LBC_Version() < 295 )
BEGIN
begin tran

INSERT INTO tbl_ImportField (ImportTable, FieldTitle, TableName, FieldName, IsDictionary, [Order]) VALUES (1, N'Местоположение.Страна', 'tbl_Country', NULL, 1, 9)
INSERT INTO tbl_ImportField (ImportTable, FieldTitle, TableName, FieldName, IsDictionary, [Order]) VALUES (1, N'Местоположение.Федеральный округ', 'tbl_Region', NULL, 1, 10)
INSERT INTO tbl_ImportField (ImportTable, FieldTitle, TableName, FieldName, IsDictionary, [Order]) VALUES (1, N'Местоположение.Регион', 'tbl_District', NULL, 1, 11)
INSERT INTO tbl_ImportField (ImportTable, FieldTitle, TableName, FieldName, IsDictionary, [Order]) VALUES (1, N'Местоположение.Город', 'tbl_Country', NULL, 1, 12)
INSERT INTO tbl_ImportField (ImportTable, FieldTitle, TableName, FieldName, IsDictionary, [Order]) VALUES (1, N'Местоположение.Адрес', 'tbl_Address', N'Address', 1, 13)

UPDATE tbl_ImportField SET ParentTableName='tbl_Company' WHERE [Order] >=0 AND [Order] < 14
UPDATE tbl_ImportField SET ParentTableName='tbl_Contact' WHERE [Order] >=14
UPDATE tbl_ImportField SET TableName=N'tbl_CompanyType', FieldName=N'Name' WHERE FieldTitle=N'Тип компании'
UPDATE tbl_ImportField SET TableName=N'tbl_CompanySector', FieldName=N'Name' WHERE FieldTitle=N'Отрасль'
UPDATE tbl_ImportField SET TableName=N'tbl_ContactType', FieldName=N'Name' WHERE FieldTitle=N'Тип контакта'

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[Import] 
(
	@ImportID uniqueidentifier = NULL
)
AS
BEGIN
	--DROP TABLE #Rules
	--DROP TABLE #TableNames
	
	DECLARE @IDString varchar(50) = REPLACE(@ImportID, ''-'', '''')

	DECLARE @SiteID uniqueidentifier = (SELECT TOP 1 SiteID FROM tbl_Import WHERE ID=@ImportID)
	DECLARE @StatusID uniqueidentifier = (SELECT TOP 1 ID FROM tbl_Status WHERE SiteID=@SiteID AND IsDefault=1)

	DECLARE @SQLString nvarchar(max)
	DECLARE @ParmDefinition nvarchar(max) = NULL

	-- Выбор правил и внесение в общую таблицу
	DECLARE @ValueNull nvarchar(max) = NULL

	SELECT tbl_ImportField.TableName,
		   tbl_ImportField.ParentTableName,
		   tbl_ImportField.FieldTitle,
		   tbl_ImportField.FieldName,
		   tbl_ImportColumn.Name,
		   tbl_ImportColumn.SystemName,
		   tbl_ImportColumn.PrimaryKey,
		   tbl_ImportColumn.SecondaryKey,
		   tbl_ImportColumnRule.IsRequired,
		   @ValueNull AS Value
	INTO #Rules
	FROM tbl_ImportColumnRule
	LEFT JOIN tbl_ImportColumn ON tbl_ImportColumn.ID=tbl_ImportColumnRule.ImportColumnID
	LEFT JOIN tbl_ImportField ON tbl_ImportField.ID=tbl_ImportColumnRule.ImportFieldID
	WHERE tbl_ImportColumnRule.ImportID=@ImportID

	-- Выбор таблиц для обработки
	DECLARE @LeadForceIDNull uniqueidentifier = NULL
	SELECT DISTINCT TableName, ParentTableName, @LeadForceIDNull AS LeadForceID
	INTO #TableNames
	FROM #Rules
	
	-- Выбор тегов
	SELECT *
	INTO #Tags
	FROM tbl_ImportTag
	WHERE ImportID=@ImportID


	-- Перебираем все записи в Tmp таблице
	DECLARE @TmpImport_Cursor int
	EXEC(''DECLARE TmpImport_Cursor CURSOR FOR SELECT ID FROM TmpImport_'' + @IDString)
	OPEN TmpImport_Cursor
	FETCH NEXT FROM TmpImport_Cursor INTO @TmpImport_Cursor
	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- Добавление в общую таблицу значения
		DECLARE @Rules_Cursor nvarchar(255)
		EXEC(''DECLARE Rules_Cursor CURSOR FOR SELECT SystemName FROM #Rules'')
		OPEN Rules_Cursor
		FETCH NEXT FROM Rules_Cursor INTO @Rules_Cursor
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE @Value nvarchar(max) = NULL
			SET @SQLString = N''SELECT @ValueOUT='' + @Rules_Cursor + '' FROM TmpImport_'' + @IDString + '' WHERE ID='' + CAST(@TmpImport_Cursor AS nvarchar(max))
			SET @ParmDefinition = N''@ValueOUT nvarchar(max) OUTPUT''
			EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @ValueOUT=@Value OUTPUT
		
			UPDATE #Rules
			SET Value=ISNULL(LTRIM(RTRIM(@Value)), '''')
			WHERE SystemName=@Rules_Cursor
		
			FETCH NEXT FROM Rules_Cursor INTO @Rules_Cursor
		END
		CLOSE Rules_Cursor
		DEALLOCATE Rules_Cursor
		
		-- Проверка на обязательность всех полей в общей таблице
		IF (SELECT COUNT(*) FROM #Rules WHERE IsRequired=1 AND (Value IS NULL OR Value='''')) = 0
		BEGIN
				-- Обработка таблиц
				DECLARE @TableName_Cursor nvarchar(255)
				EXEC(''DECLARE TableName_Cursor CURSOR FOR SELECT TableName FROM #TableNames'')
				OPEN TableName_Cursor
				FETCH NEXT FROM TableName_Cursor INTO @TableName_Cursor
				WHILE @@FETCH_STATUS = 0
				BEGIN
					DECLARE @Key nvarchar(max) = CAST(@SiteID AS nvarchar(50))
					DECLARE @PrimaryKey nvarchar(max) = NULL
					DECLARE @InsertPrimaryKey bit = 0
					DECLARE @SecondaryKey nvarchar(max) = NULL
					DECLARE @LeadForceID uniqueidentifier = NULL
				
					SELECT @Key = COALESCE(@Key + '';'', '''') + Value,
						   @PrimaryKey = COALESCE(@PrimaryKey + '' AND '', '''') + FieldName + ''='''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
					FROM #Rules
					WHERE TableName=@TableName_Cursor AND PrimaryKey=1
					ORDER BY TableName, FieldName ASC
					
					SET @Key = LOWER(@Key)
					
					IF (@PrimaryKey IS NOT NULL)
					BEGIN
						SET @InsertPrimaryKey = 1
						IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'' OR @TableName_Cursor=''tbl_CompanyType'' OR @TableName_Cursor=''tbl_CompanySector'' OR @TableName_Cursor=''tbl_ContactType'')
						BEGIN
							SET @PrimaryKey = COALESCE(@PrimaryKey + '' AND '', '''') + ''SiteID='''''' + CAST(@SiteID AS nvarchar(50)) + ''''''''
							--SET @PrimaryKey = @PrimaryKey + ''SiteID='''''' + CAST(@SiteID AS nvarchar(50)) + ''''''''
						END
						-- Поиск первичного ключа в таблице ключей
						SET @LeadForceID = (SELECT TOP 1 LeadForceID FROM tbl_ImportKey WHERE ImportID=@ImportID AND TableName=@TableName_Cursor AND [Key]=@Key)
						
						-- Поиск первичного ключа в таблице LeadForce
						IF (@LeadForceID IS NULL)
						BEGIN
							SET @SQLString = N''SELECT TOP 1 @LeadForceIDOUT=ID FROM '' + @TableName_Cursor + '' WHERE '' + @PrimaryKey
							SET @ParmDefinition = N''@LeadForceIDOUT nvarchar(50) OUTPUT''
							EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @LeadForceIDOUT=@LeadForceID OUTPUT
						END
					END
					
					-- Поиск вторичного ключа в таблице LeadForce
					SELECT @SecondaryKey = COALESCE(@SecondaryKey + '' AND '', '''') + FieldName + ''='''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
					FROM #Rules
					WHERE TableName=@TableName_Cursor AND SecondaryKey=1
					ORDER BY TableName, FieldName ASC
					
					IF ((@LeadForceID IS NULL) AND (@SecondaryKey IS NOT NULL))
					BEGIN
						IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'' OR @TableName_Cursor=''tbl_CompanyType'' OR @TableName_Cursor=''tbl_CompanySector'' OR @TableName_Cursor=''tbl_ContactType'')
						BEGIN
							SET @SecondaryKey = COALESCE(@SecondaryKey + '' AND '', '''') + ''SiteID='''''' + CAST(@SiteID AS nvarchar(50)) + ''''''''
						END

						SET @SQLString = N''SELECT TOP 1 @LeadForceIDOUT=ID FROM '' + @TableName_Cursor + '' WHERE '' + @SecondaryKey
						SET @ParmDefinition = N''@LeadForceIDOUT nvarchar(50) OUTPUT''
						EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @LeadForceIDOUT=@LeadForceID OUTPUT
					END
					
					IF (@LeadForceID IS NULL)
					BEGIN
						-- Добавление записи
						DECLARE @Fields nvarchar(max) = NULL
						DECLARE @Values nvarchar(max) = NULL
						
						SELECT @Fields = COALESCE(@Fields + '', '', '''') + ''['' + FieldName + '']'',
							   @Values = COALESCE(@Values + '', '', '''') + ''N'''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
						FROM #Rules
						WHERE TableName=@TableName_Cursor
						ORDER BY TableName, FieldName ASC
						
						IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'' OR @TableName_Cursor=''tbl_CompanyType'' OR @TableName_Cursor=''tbl_CompanySector'' OR @TableName_Cursor=''tbl_ContactType'')
						BEGIN
							SET @Fields = COALESCE(@Fields + '', '', '''') + ''[SiteID]''
							SET @Values = COALESCE(@Values + '', '', '''') + '''''''' + CAST(@SiteID AS varchar(50)) + ''''''''
						END
						
						IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'')
						BEGIN
							SET @Fields = COALESCE(@Fields + '', '', '''') + ''[StatusID]''
							SET @Values = COALESCE(@Values + '', '', '''') + '''''''' + CAST(@StatusID AS varchar(50)) + ''''''''
						END
						
						IF (@TableName_Cursor=''tbl_Contact'')
						BEGIN
							SET @Fields = COALESCE(@Fields + '', '', '''') + ''[RefferURL], [UserIP]''
							SET @Values = COALESCE(@Values + '', '', '''') + '''''''''', ''''''''''
						END
					
						SET @LeadForceID = NEWID()
						SET @SQLString = ''INSERT INTO '' + @TableName_Cursor + '' (ID, '' + @Fields + '') VALUES ('''''' + CAST(@LeadForceID AS nvarchar(50)) + '''''', '' + @Values + '')''
						EXEC(@SQLString)
						
						-- Добавление записи в таблицу ключей, если есть первичный
						IF (@InsertPrimaryKey=1)
						BEGIN
							INSERT INTO tbl_ImportKey (ImportID, TableName, [Key], LeadForceID) VALUES (@ImportID, @TableName_Cursor, @Key, @LeadForceID)
						END
					END
					ELSE
					BEGIN
						-- Обновление записи
						DECLARE @FieldValues nvarchar(max) = NULL
						
						SELECT @FieldValues = COALESCE(@FieldValues + '', '', '''') + FieldName + ''=N'''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
						FROM #Rules
						WHERE TableName=@TableName_Cursor
						ORDER BY TableName, FieldName ASC

						SET @SQLString = ''UPDATE '' + @TableName_Cursor + '' SET '' + @FieldValues + '' WHERE ID=N'''''' + CAST(@LeadForceID AS nvarchar(50)) + ''''''''
						EXEC(@SQLString)
					END
					
					-- Обновление LeadForceID в таблицу #TableNames
					UPDATE #TableNames
					SET LeadForceID=@LeadForceID
					WHERE TableName=@TableName_Cursor
				
					FETCH NEXT FROM TableName_Cursor INTO @TableName_Cursor
				END
				CLOSE TableName_Cursor
				DEALLOCATE TableName_Cursor
				
				-- Создание связей между записями таблиц
				DECLARE @ContactID uniqueidentifier = (SELECT LeadForceID FROM #TableNames WHERE TableName=''tbl_Contact'')
				DECLARE @CompanyID uniqueidentifier = (SELECT LeadForceID FROM #TableNames WHERE TableName=''tbl_Company'')
				DECLARE @FKID uniqueidentifier = NULL
				
				SELECT * FROM #TableNames
				
				IF (@ContactID IS NOT NULL)
				BEGIN
					IF (@CompanyID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET CompanyID=@CompanyID WHERE ID=@ContactID
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_Address'' AND ParentTableName=''tbl_Contact''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET AddressID=@FKID WHERE ID=@ContactID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_ContactType'' AND ParentTableName=''tbl_Contact''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET ContactTypeID=@FKID WHERE ID=@ContactID
						SET @FKID = NULL
					END
					
					-- Обновление тегов
					DECLARE @Tag_Cursor uniqueidentifier
					EXEC(''DECLARE Tag_Cursor CURSOR FOR SELECT ID FROM #Tags'')
					OPEN Tag_Cursor
					FETCH NEXT FROM Tag_Cursor INTO @Tag_Cursor
					WHILE @@FETCH_STATUS = 0
					BEGIN
						DECLARE @SiteTagID uniqueidentifier = NULL
						DECLARE @Operation int = NULL
						
						SELECT @SiteTagID=SiteTagID, @Operation=Operation
						FROM #Tags
						WHERE ID=@Tag_Cursor
						
						IF (@Operation=0)
						BEGIN
							DELETE FROM tbl_SiteTagObjects
							WHERE SiteTagID=@SiteTagID AND ObjectID=@ContactID
						END
						ELSE
						BEGIN
							IF (SELECT COUNT(*) FROM tbl_SiteTagObjects WHERE SiteTagID=@SiteTagID AND ObjectID=@ContactID) = 0
							BEGIN
								INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID) VALUES (@SiteTagID, @ContactID)
							END
						END
					
						FETCH NEXT FROM Tag_Cursor INTO @Tag_Cursor
					END
					CLOSE Tag_Cursor
					DEALLOCATE Tag_Cursor
				END
				
				IF (@CompanyID IS NOT NULL)
				BEGIN
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_Address'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET LocationAddressID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_CompanyType'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET CompanyTypeID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_CompanySector'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET CompanySectorID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
				END
				
				UPDATE #TableNames SET LeadForceID=NULL
		END
		
		FETCH NEXT FROM TmpImport_Cursor INTO @TmpImport_Cursor
	END
	CLOSE TmpImport_Cursor
	DEALLOCATE TmpImport_Cursor

	DROP TABLE #Rules
	DROP TABLE #TableNames
	DROP TABLE #Tags
	
	EXEC(''DROP TABLE TmpImport_'' + @IDString)
END'

commit
exec LBC_SetVersion 295
END
GO

/*******************************************************************************
	2012-09-28
	Импорт
*******************************************************************************/
if ( dbo.LBC_Version() < 296 )
BEGIN
begin tran

UPDATE tbl_ImportField SET TableName=N'_Owner', FieldName=N'UserFullName' WHERE FieldTitle=N'Ответственный'

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[Import] 
(
	@ImportID uniqueidentifier = NULL
)
AS
BEGIN
	--DROP TABLE #Rules
	--DROP TABLE #TableNames
	
	DECLARE @IDString varchar(50) = REPLACE(@ImportID, ''-'', '''')

	DECLARE @SiteID uniqueidentifier = (SELECT TOP 1 SiteID FROM tbl_Import WHERE ID=@ImportID)
	DECLARE @StatusID uniqueidentifier = (SELECT TOP 1 ID FROM tbl_Status WHERE SiteID=@SiteID AND IsDefault=1)

	DECLARE @SQLString nvarchar(max)
	DECLARE @ParmDefinition nvarchar(max) = NULL

	-- Выбор правил и внесение в общую таблицу
	DECLARE @ValueNull nvarchar(max) = NULL

	SELECT tbl_ImportField.TableName,
		   tbl_ImportField.ParentTableName,
		   tbl_ImportField.FieldTitle,
		   tbl_ImportField.FieldName,
		   tbl_ImportColumn.Name,
		   tbl_ImportColumn.SystemName,
		   tbl_ImportColumn.PrimaryKey,
		   tbl_ImportColumn.SecondaryKey,
		   tbl_ImportColumnRule.IsRequired,
		   @ValueNull AS Value
	INTO #Rules
	FROM tbl_ImportColumnRule
	LEFT JOIN tbl_ImportColumn ON tbl_ImportColumn.ID=tbl_ImportColumnRule.ImportColumnID
	LEFT JOIN tbl_ImportField ON tbl_ImportField.ID=tbl_ImportColumnRule.ImportFieldID
	WHERE tbl_ImportColumnRule.ImportID=@ImportID

	-- Выбор таблиц для обработки
	DECLARE @LeadForceIDNull uniqueidentifier = NULL
	SELECT DISTINCT TableName, ParentTableName, @LeadForceIDNull AS LeadForceID
	INTO #TableNames
	FROM #Rules
	
	-- Выбор тегов
	SELECT *
	INTO #Tags
	FROM tbl_ImportTag
	WHERE ImportID=@ImportID


	-- Перебираем все записи в Tmp таблице
	DECLARE @TmpImport_Cursor int
	EXEC(''DECLARE TmpImport_Cursor CURSOR FOR SELECT ID FROM TmpImport_'' + @IDString)
	OPEN TmpImport_Cursor
	FETCH NEXT FROM TmpImport_Cursor INTO @TmpImport_Cursor
	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- Добавление в общую таблицу значения
		DECLARE @Rules_Cursor nvarchar(255)
		EXEC(''DECLARE Rules_Cursor CURSOR FOR SELECT SystemName FROM #Rules'')
		OPEN Rules_Cursor
		FETCH NEXT FROM Rules_Cursor INTO @Rules_Cursor
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE @Value nvarchar(max) = NULL
			SET @SQLString = N''SELECT @ValueOUT='' + @Rules_Cursor + '' FROM TmpImport_'' + @IDString + '' WHERE ID='' + CAST(@TmpImport_Cursor AS nvarchar(max))
			SET @ParmDefinition = N''@ValueOUT nvarchar(max) OUTPUT''
			EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @ValueOUT=@Value OUTPUT
		
			UPDATE #Rules
			SET Value=ISNULL(LTRIM(RTRIM(@Value)), '''')
			WHERE SystemName=@Rules_Cursor
		
			FETCH NEXT FROM Rules_Cursor INTO @Rules_Cursor
		END
		CLOSE Rules_Cursor
		DEALLOCATE Rules_Cursor
		
		-- Проверка на обязательность всех полей в общей таблице
		IF (SELECT COUNT(*) FROM #Rules WHERE IsRequired=1 AND (Value IS NULL OR Value='''')) = 0
		BEGIN
				-- Обработка таблиц по родительским таблицам
				DECLARE @ParentTableName_Cursor nvarchar(255)
				EXEC(''DECLARE ParentTableName_Cursor CURSOR FOR SELECT DISTINCT ParentTableName FROM #TableNames'')
				OPEN ParentTableName_Cursor
				FETCH NEXT FROM ParentTableName_Cursor INTO @ParentTableName_Cursor
				WHILE @@FETCH_STATUS = 0
				BEGIN
						-- Обработка таблиц
						DECLARE @TableName_Cursor nvarchar(255)
						EXEC(''DECLARE TableName_Cursor CURSOR FOR SELECT TableName FROM #TableNames WHERE ParentTableName='''''' + @ParentTableName_Cursor + '''''''')
						OPEN TableName_Cursor
						FETCH NEXT FROM TableName_Cursor INTO @TableName_Cursor
						WHILE @@FETCH_STATUS = 0
						BEGIN
							DECLARE @LeadForceID uniqueidentifier = NULL
							
							IF (@TableName_Cursor<>''_Owner'')
							BEGIN
									DECLARE @Key nvarchar(max) = CAST(@SiteID AS nvarchar(50))
									DECLARE @PrimaryKey nvarchar(max) = NULL
									DECLARE @InsertPrimaryKey bit = 0
									DECLARE @SecondaryKey nvarchar(max) = NULL
								
									SELECT @Key = COALESCE(@Key + '';'', '''') + Value,
										   @PrimaryKey = COALESCE(@PrimaryKey + '' AND '', '''') + FieldName + ''='''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
									FROM #Rules
									WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor AND PrimaryKey=1
									ORDER BY TableName, FieldName ASC
									
									SET @Key = LOWER(@Key)
									
									IF (@PrimaryKey IS NOT NULL)
									BEGIN
										SET @InsertPrimaryKey = 1
										IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'' OR @TableName_Cursor=''tbl_CompanyType'' OR @TableName_Cursor=''tbl_CompanySector'' OR @TableName_Cursor=''tbl_ContactType'')
										BEGIN
											SET @PrimaryKey = COALESCE(@PrimaryKey + '' AND '', '''') + ''SiteID='''''' + CAST(@SiteID AS nvarchar(50)) + ''''''''
										END
										-- Поиск первичного ключа в таблице ключей
										SET @LeadForceID = (SELECT TOP 1 LeadForceID FROM tbl_ImportKey WHERE ImportID=@ImportID AND TableName=@TableName_Cursor AND [Key]=@Key)
										
										-- Поиск первичного ключа в таблице LeadForce
										IF (@LeadForceID IS NULL)
										BEGIN
											SET @SQLString = N''SELECT TOP 1 @LeadForceIDOUT=ID FROM '' + @TableName_Cursor + '' WHERE '' + @PrimaryKey
											SET @ParmDefinition = N''@LeadForceIDOUT nvarchar(50) OUTPUT''
											EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @LeadForceIDOUT=@LeadForceID OUTPUT
										END
									END
									
									-- Поиск вторичного ключа в таблице LeadForce
									SELECT @SecondaryKey = COALESCE(@SecondaryKey + '' AND '', '''') + FieldName + ''='''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
									FROM #Rules
									WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor AND SecondaryKey=1
									ORDER BY TableName, FieldName ASC
									
									IF ((@LeadForceID IS NULL) AND (@SecondaryKey IS NOT NULL))
									BEGIN
										IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'' OR @TableName_Cursor=''tbl_CompanyType'' OR @TableName_Cursor=''tbl_CompanySector'' OR @TableName_Cursor=''tbl_ContactType'')
										BEGIN
											SET @SecondaryKey = COALESCE(@SecondaryKey + '' AND '', '''') + ''SiteID='''''' + CAST(@SiteID AS nvarchar(50)) + ''''''''
										END

										SET @SQLString = N''SELECT TOP 1 @LeadForceIDOUT=ID FROM '' + @TableName_Cursor + '' WHERE '' + @SecondaryKey
										SET @ParmDefinition = N''@LeadForceIDOUT nvarchar(50) OUTPUT''
										EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @LeadForceIDOUT=@LeadForceID OUTPUT
									END
									
									IF (@LeadForceID IS NULL)
									BEGIN
										-- Добавление записи
										DECLARE @Fields nvarchar(max) = NULL
										DECLARE @Values nvarchar(max) = NULL
										
										SELECT @Fields = COALESCE(@Fields + '', '', '''') + ''['' + FieldName + '']'',
											   @Values = COALESCE(@Values + '', '', '''') + ''N'''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
										FROM #Rules
										WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor
										ORDER BY TableName, FieldName ASC
										
										IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'' OR @TableName_Cursor=''tbl_CompanyType'' OR @TableName_Cursor=''tbl_CompanySector'' OR @TableName_Cursor=''tbl_ContactType'')
										BEGIN
											SET @Fields = COALESCE(@Fields + '', '', '''') + ''[SiteID]''
											SET @Values = COALESCE(@Values + '', '', '''') + '''''''' + CAST(@SiteID AS varchar(50)) + ''''''''
										END
										
										IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'')
										BEGIN
											SET @Fields = COALESCE(@Fields + '', '', '''') + ''[StatusID]''
											SET @Values = COALESCE(@Values + '', '', '''') + '''''''' + CAST(@StatusID AS varchar(50)) + ''''''''
										END
										
										IF (@TableName_Cursor=''tbl_Contact'')
										BEGIN
											SET @Fields = COALESCE(@Fields + '', '', '''') + ''[RefferURL], [UserIP]''
											SET @Values = COALESCE(@Values + '', '', '''') + '''''''''', ''''''''''
										END
									
										SET @LeadForceID = NEWID()
										SET @SQLString = ''INSERT INTO '' + @TableName_Cursor + '' (ID, '' + @Fields + '') VALUES ('''''' + CAST(@LeadForceID AS nvarchar(50)) + '''''', '' + @Values + '')''
										EXEC(@SQLString)
										
										-- Добавление записи в таблицу ключей, если есть первичный
										IF (@InsertPrimaryKey=1)
										BEGIN
											INSERT INTO tbl_ImportKey (ImportID, TableName, [Key], LeadForceID) VALUES (@ImportID, @TableName_Cursor, @Key, @LeadForceID)
										END
									END
									ELSE
									BEGIN
										-- Обновление записи
										DECLARE @FieldValues nvarchar(max) = NULL
										
										SELECT @FieldValues = COALESCE(@FieldValues + '', '', '''') + FieldName + ''=N'''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
										FROM #Rules
										WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor
										ORDER BY TableName, FieldName ASC

										SET @SQLString = ''UPDATE '' + @TableName_Cursor + '' SET '' + @FieldValues + '' WHERE ID=N'''''' + CAST(@LeadForceID AS nvarchar(50)) + ''''''''
										EXEC(@SQLString)
									END
							END
							ELSE
							BEGIN
									-- Поиск ответственных
									DECLARE @OwnerUserFullName nvarchar(255) = (SELECT ISNULL(Value, '''')
									FROM #Rules
									WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor)
									
									IF (@OwnerUserFullName <> '''')
									BEGIN
										DECLARE @OwnerID uniqueidentifier = NULL
										
										SET @SQLString = N''SELECT TOP 1 @LeadForceIDOUT=ID FROM tbl_Contact WHERE UserFullName=N'''''' + @OwnerUserFullName + ''''''''
										SET @ParmDefinition = N''@LeadForceIDOUT nvarchar(50) OUTPUT''
										EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @LeadForceIDOUT=@LeadForceID OUTPUT
										
										IF (@LeadForceID IS NULL)
										BEGIN
											SET @LeadForceID = NEWID()
											INSERT INTO tbl_Contact(ID, SiteID, UserFullName, RefferURL, UserIP, StatusID)
											VALUES (@LeadForceID, @SiteID, @OwnerUserFullName, '''', '''', @StatusID)
										END
									END
							END
							
							-- Обновление LeadForceID в таблицу #TableNames
							UPDATE #TableNames
							SET LeadForceID=@LeadForceID
							WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor
						
							FETCH NEXT FROM TableName_Cursor INTO @TableName_Cursor
						END
						CLOSE TableName_Cursor
						DEALLOCATE TableName_Cursor
				
					FETCH NEXT FROM ParentTableName_Cursor INTO @ParentTableName_Cursor
				END
				CLOSE ParentTableName_Cursor
				DEALLOCATE ParentTableName_Cursor
				
				-- Создание связей между записями таблиц
				DECLARE @ContactID uniqueidentifier = (SELECT LeadForceID FROM #TableNames WHERE TableName=''tbl_Contact'')
				DECLARE @CompanyID uniqueidentifier = (SELECT LeadForceID FROM #TableNames WHERE TableName=''tbl_Company'')
				DECLARE @FKID uniqueidentifier = NULL
				
				IF (@ContactID IS NOT NULL)
				BEGIN
					IF (@CompanyID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET CompanyID=@CompanyID WHERE ID=@ContactID
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_Address'' AND ParentTableName=''tbl_Contact''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET AddressID=@FKID WHERE ID=@ContactID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_ContactType'' AND ParentTableName=''tbl_Contact''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET ContactTypeID=@FKID WHERE ID=@ContactID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''_Owner'' AND ParentTableName=''tbl_Contact''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET OwnerID=@FKID WHERE ID=@ContactID
						SET @FKID = NULL
					END
					
					-- Обновление тегов
					DECLARE @Tag_Cursor uniqueidentifier
					EXEC(''DECLARE Tag_Cursor CURSOR FOR SELECT ID FROM #Tags'')
					OPEN Tag_Cursor
					FETCH NEXT FROM Tag_Cursor INTO @Tag_Cursor
					WHILE @@FETCH_STATUS = 0
					BEGIN
						DECLARE @SiteTagID uniqueidentifier = NULL
						DECLARE @Operation int = NULL
						
						SELECT @SiteTagID=SiteTagID, @Operation=Operation
						FROM #Tags
						WHERE ID=@Tag_Cursor
						
						IF (@Operation=0)
						BEGIN
							DELETE FROM tbl_SiteTagObjects
							WHERE SiteTagID=@SiteTagID AND ObjectID=@ContactID
						END
						ELSE
						BEGIN
							IF (SELECT COUNT(*) FROM tbl_SiteTagObjects WHERE SiteTagID=@SiteTagID AND ObjectID=@ContactID) = 0
							BEGIN
								INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID) VALUES (@SiteTagID, @ContactID)
							END
						END
					
						FETCH NEXT FROM Tag_Cursor INTO @Tag_Cursor
					END
					CLOSE Tag_Cursor
					DEALLOCATE Tag_Cursor
				END
				
				IF (@CompanyID IS NOT NULL)
				BEGIN
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_Address'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET LocationAddressID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_CompanyType'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET CompanyTypeID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_CompanySector'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET CompanySectorID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''_Owner'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET OwnerID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
				END
				
				UPDATE #TableNames SET LeadForceID=NULL
		END
		
		FETCH NEXT FROM TmpImport_Cursor INTO @TmpImport_Cursor
	END
	CLOSE TmpImport_Cursor
	DEALLOCATE TmpImport_Cursor

	DROP TABLE #Rules
	DROP TABLE #TableNames
	DROP TABLE #Tags
	
	EXEC(''DROP TABLE TmpImport_'' + @IDString)
END'

commit
exec LBC_SetVersion 296
END
GO

/*******************************************************************************
	2012-10-01
	Добавлены виджеты на главную страницу
*******************************************************************************/
if ( dbo.LBC_Version() < 297 )
BEGIN
begin tran

DELETE FROM tbl_WidgetToAccessProfile
DELETE FROM tbl_Widget
DELETE FROM tbl_WidgetCategory

INSERT [dbo].[tbl_WidgetCategory] ([ID], [ParentID], [Title]) VALUES (N'ae684f1f-f4f8-40eb-94db-023c76bb20c4', NULL, N'Привлечение клиентов')
INSERT [dbo].[tbl_WidgetCategory] ([ID], [ParentID], [Title]) VALUES (N'd7da44e7-5538-4756-9f0d-9c46d57901ff', NULL, N'Другие виджеты')

INSERT [dbo].[tbl_Widget] ([ID], [WidgetCategoryID], [Title], [UserControl]) VALUES (N'5bd3adca-e25f-4f39-a064-222c83debac2', N'd7da44e7-5538-4756-9f0d-9c46d57901ff', N'Подсказка', N'~/UserControls/Widgets/Prompt.ascx')
INSERT [dbo].[tbl_Widget] ([ID], [WidgetCategoryID], [Title], [UserControl]) VALUES (N'fdf3b7d1-ebb6-44d6-a169-9d8ebcfd467d', N'ae684f1f-f4f8-40eb-94db-023c76bb20c4', N'Домены', N'~/UserControls/Widgets/Domains.ascx')

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[tbl_StatisticData](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteID] [uniqueidentifier] NOT NULL,
	[SystemName] [nvarchar](256) NOT NULL,
	[Value] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_tbl_StatisticData] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[tbl_StatisticData] ADD  CONSTRAINT [DF_tbl_StatisticData_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_StatisticData]  WITH CHECK ADD  CONSTRAINT [FK_tbl_StatisticData_tbl_Sites] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_Sites] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_StatisticData] CHECK CONSTRAINT [FK_tbl_StatisticData_tbl_Sites]

commit
exec LBC_SetVersion 297
END


/*******************************************************************************
	2012-10-02
	Обновлена таблица для сбора статистических данных
*******************************************************************************/
if ( dbo.LBC_Version() < 298 )
BEGIN
begin tran

DROP TABLE [dbo].[tbl_StatisticData]

SET QUOTED_IDENTIFIER ON
SET ANSI_PADDING ON
CREATE TABLE [dbo].[tbl_StatisticData](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteID] [uniqueidentifier] NOT NULL,
	[Code] [varchar](256) NOT NULL,
	[Value] [decimal](18, 2) NOT NULL,
	[RecalculateDate] [datetime] NOT NULL,
 CONSTRAINT [PK_tbl_StatisticData] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
SET ANSI_PADDING OFF
ALTER TABLE [dbo].[tbl_StatisticData]  WITH CHECK ADD  CONSTRAINT [FK_tbl_StatisticData_tbl_Sites] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_Sites] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_StatisticData] CHECK CONSTRAINT [FK_tbl_StatisticData_tbl_Sites]
ALTER TABLE [dbo].[tbl_StatisticData] ADD  CONSTRAINT [DF_tbl_StatisticData_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_StatisticData] ADD  CONSTRAINT [DF_tbl_StatisticData_RecalculateDate]  DEFAULT (getdate()) FOR [RecalculateDate]

commit
exec LBC_SetVersion 298
END

/*******************************************************************************
	2012-10-02
	Обновлена таблица для сбора статистических данных
*******************************************************************************/
if ( dbo.LBC_Version() < 299 )
BEGIN
begin tran

ALTER TABLE [dbo].[tbl_StatisticData] ALTER COLUMN [RecalculateDate] DATETIME NULL

commit
exec LBC_SetVersion 299
END


/*******************************************************************************
	2012-10-02
	Обновлена таблица для сбора статистических данных
*******************************************************************************/
if ( dbo.LBC_Version() < 300 )
BEGIN
begin tran

ALTER TABLE [dbo].[tbl_StatisticData] ADD PreviousValue decimal(18,2) NOT NULL

commit
exec LBC_SetVersion 300
END

/*******************************************************************************
	2012-10-03
	Добавлены виджеты
*******************************************************************************/
if ( dbo.LBC_Version() < 301 )
BEGIN
begin tran

INSERT [dbo].[tbl_Widget] ([WidgetCategoryID], [Title], [UserControl]) VALUES (N'ae684f1f-f4f8-40eb-94db-023c76bb20c4', N'Источники посетителей', N'~/UserControls/Widgets/VisitorSource.ascx')

INSERT [dbo].[tbl_WidgetCategory] ([ID], [Title]) VALUES (N'6eccfaed-6acd-4d64-a3e6-66d8e2597945', N'Клиентская база')
INSERT [dbo].[tbl_Widget] ([WidgetCategoryID], [Title], [UserControl]) VALUES (N'6eccfaed-6acd-4d64-a3e6-66d8e2597945', N'Статистика клиентской базы', N'~/UserControls/Widgets/ClientBaseStatistic.ascx')
INSERT [dbo].[tbl_Widget] ([WidgetCategoryID], [Title], [UserControl]) VALUES (N'6eccfaed-6acd-4d64-a3e6-66d8e2597945', N'Рост клиентской базы', N'~/UserControls/Widgets/ClientBaseGrowth.ascx')
INSERT [dbo].[tbl_Widget] ([WidgetCategoryID], [Title], [UserControl]) VALUES (N'6eccfaed-6acd-4d64-a3e6-66d8e2597945', N'Управление лояльностью', N'~/UserControls/Widgets/LoyaltyManagement.ascx')

INSERT [dbo].[tbl_WidgetCategory] ([ID], [Title]) VALUES (N'35ac55ba-6e5c-4b4e-995c-8cb300d1e0d7', N'Новые продажи')
INSERT [dbo].[tbl_Widget] ([WidgetCategoryID], [Title], [UserControl]) VALUES (N'35ac55ba-6e5c-4b4e-995c-8cb300d1e0d7', N'Потенциальные клиенты', N'~/UserControls/Widgets/NewSalesPotentialClient.ascx')
INSERT [dbo].[tbl_Widget] ([WidgetCategoryID], [Title], [UserControl]) VALUES (N'35ac55ba-6e5c-4b4e-995c-8cb300d1e0d7', N'Счета к оплате', N'~/UserControls/Widgets/NewSalesInvoiceForPayment.ascx')

INSERT [dbo].[tbl_WidgetCategory] ([ID], [Title]) VALUES (N'c542ab9a-deb6-4ba1-84d2-014b818498ba', N'Повторные продажи')
INSERT [dbo].[tbl_Widget] ([WidgetCategoryID], [Title], [UserControl]) VALUES (N'c542ab9a-deb6-4ba1-84d2-014b818498ba', N'Потенциальные клиенты', N'~/UserControls/Widgets/RepeatSalesPotentialClient.ascx')
INSERT [dbo].[tbl_Widget] ([WidgetCategoryID], [Title], [UserControl]) VALUES (N'c542ab9a-deb6-4ba1-84d2-014b818498ba', N'Счета к оплате', N'~/UserControls/Widgets/RepeatSalesInvoiceForPayment.ascx')


INSERT [dbo].[tbl_Widget] ([WidgetCategoryID], [Title], [UserControl]) VALUES (N'd7da44e7-5538-4756-9f0d-9c46d57901ff', N'Категории клиентов', N'~/UserControls/Widgets/ContactCategory.ascx')


commit
exec LBC_SetVersion 301
END

/*******************************************************************************
	2012-10-04
	Добавлены категории для контактов
*******************************************************************************/
if ( dbo.LBC_Version() < 302 )
BEGIN
begin tran

ALTER TABLE tbl_Contact ADD [Category] int NOT NULL DEFAULT ((4))
ALTER TABLE tbl_AccessProfile ADD [ActiveContactsCount] int NULL
ALTER TABLE tbl_AccessProfile ADD [EmailPerContactCount] int NULL
ALTER TABLE tbl_AccessProfile ADD [DurationPeriod] int NULL

commit
exec LBC_SetVersion 302
END
GO

/*******************************************************************************
	2012-10-04
	Добавлены категории для контактов
*******************************************************************************/
if ( dbo.LBC_Version() < 303 )
BEGIN
begin tran

UPDATE tbl_Contact
SET Category=0
WHERE (tbl_Contact.UserFullName IS NOT NULL AND tbl_Contact.UserFullName <> '') OR (tbl_Contact.Email IS NOT NULL AND tbl_Contact.Email<>'')

INSERT INTO tbl_ActionStatus (Title, [Order]) VALUES (N'Отменено (ограничение тарифа)', 5)

commit
exec LBC_SetVersion 303
END

/*******************************************************************************
	2012-10-04
	Добавлен источник нового контакта
*******************************************************************************/
if ( dbo.LBC_Version() < 304 )
BEGIN
begin tran

ALTER TABLE tbl_Contact ADD [RegistrationSourceID] int NOT NULL DEFAULT ((0))

EXEC dbo.sp_executesql @statement = N'
ALTER PROCEDURE [dbo].[API_UpdateContact]
	(
	    @SiteID uniqueidentifier,
	    @UserID uniqueidentifier,
	    @ParamsXml xml
	)
AS
BEGIN

    DECLARE @ContactID uniqueidentifier = NULL
	SET @ContactID = @ParamsXml.value(''(/LeadForceRequest/Contact/@ContactID)[1]'',''uniqueidentifier'')
	
	IF @ContactID IS NULL
	    RETURN 0
	
	DECLARE @UserFullName nvarchar(255) = NULL
	SET @UserFullName = @ParamsXml.value(''(/LeadForceRequest/Contact/UserFullName)[1]'',''nvarchar(255)'')
	
	DECLARE @Email nvarchar(255) = NULL
	SET @Email = @ParamsXml.value(''(/LeadForceRequest/Contact/Email)[1]'',''nvarchar(255)'')
	
	DECLARE @Phone nvarchar(50) = NULL
	SET @Phone = @ParamsXml.value(''(/LeadForceRequest/Contact/Phone)[1]'',''nvarchar(50)'')
		
	DECLARE @Status nvarchar(250) = NULL
	SET @Status = @ParamsXml.value(''(/LeadForceRequest/Contact/Status)[1]'',''nvarchar(250)'')
	DECLARE @StatusID uniqueidentifier = NULL	
	IF @Status IS NOT NULL    
       SELECT @StatusID = ID FROM tbl_Status WHERE SiteID = @SiteID AND Title = @Status        
    IF @StatusID IS NULL   
       SELECT TOP 1 @StatusID = ID FROM tbl_Status WHERE SiteID = @SiteID AND IsDefault = 1	
	
	DECLARE @IsNameChecked bit = NULL
	SET @IsNameChecked = @ParamsXml.value(''(/LeadForceRequest/Contact/IsNameChecked)[1]'',''bit'')
	
	DECLARE @Surname nvarchar(255) = NULL
	SET @Surname = @ParamsXml.value(''(/LeadForceRequest/Contact/Surname)[1]'',''nvarchar(255)'')
	
	DECLARE @Name nvarchar(255) = NULL
	SET @Name = @ParamsXml.value(''(/LeadForceRequest/Contact/Name)[1]'',''nvarchar(255)'')
	
	DECLARE @Patronymic nvarchar(255) = NULL
	SET @Patronymic = @ParamsXml.value(''(/LeadForceRequest/Contact/Patronymic)[1]'',''nvarchar(255)'')
	
	DECLARE @CellularPhone varchar(50) = NULL
	SET @CellularPhone = @ParamsXml.value(''(/LeadForceRequest/Contact/CellularPhone)[1]'',''varchar(50)'')
	
	DECLARE @CellularPhoneStatusID int = NULL
	SET @CellularPhoneStatusID = @ParamsXml.value(''(/LeadForceRequest/Contact/CellularPhoneStatus)[1]'',''int'')
	
	DECLARE @EmailStatusID int = NULL
	SET @EmailStatusID = @ParamsXml.value(''(/LeadForceRequest/Contact/EmailStatus)[1]'',''int'')
	
	DECLARE @ContactType nvarchar(250) = NULL
	SET @ContactType = @ParamsXml.value(''(/LeadForceRequest/Contact/ContactType)[1]'',''nvarchar(250)'')
	DECLARE @ContactTypeID uniqueidentifier = NULL	
	IF @ContactType IS NOT NULL AND @ContactType <> ''''
	    SELECT @ContactTypeID = ID FROM tbl_ContactType WHERE Name = @ContactType AND SiteID = @SiteID
	    
	DECLARE @JobTitle nvarchar(250) = NULL
	SET @JobTitle = @ParamsXml.value(''(/LeadForceRequest/Contact/JobTitle)[1]'',''nvarchar(250)'')
	
	DECLARE @Company nvarchar(255) = NULL
	SET @Company = @ParamsXml.value(''(/LeadForceRequest/Contact/Company)[1]'',''nvarchar(255)'')
	DECLARE @CompanyID uniqueidentifier = NULL	
	IF @Company IS NOT NULL AND @Company <> ''''
	    SELECT TOP 1 @CompanyID = ID FROM tbl_Company WHERE Name = @Company AND SiteID = @SiteID
	    
	DECLARE @Owner nvarchar(255) = NULL
	SET @Owner = @ParamsXml.value(''(/LeadForceRequest/Contact/Owner)[1]'',''nvarchar(255)'')
	DECLARE @OwnerID uniqueidentifier = NULL	
	IF @Owner IS NOT NULL AND @Owner <> ''''
	    SELECT TOP 1 @OwnerID = ID FROM tbl_Contact WHERE UserFullName = @Owner AND SiteID = @SiteID
	
	DECLARE @BirthDate datetime = NULL
	SET @BirthDate = @ParamsXml.value(''(/LeadForceRequest/Contact/BirthDate)[1]'',''datetime'')
	
	DECLARE @ContactFunctionInCompany nvarchar(250) = NULL
	SET @ContactFunctionInCompany = @ParamsXml.value(''(/LeadForceRequest/Contact/ContactFunctionInCompany)[1]'',''nvarchar(250)'')
	DECLARE @ContactFunctionInCompanyID uniqueidentifier = NULL	
	IF @ContactFunctionInCompany IS NOT NULL AND @ContactFunctionInCompany <> ''''
	    SELECT TOP 1 @ContactFunctionInCompanyID = ID FROM tbl_ContactFunctionInCompany WHERE Name = @ContactFunctionInCompany AND SiteID = @SiteID
	
	DECLARE @ContactJobLevel nvarchar(250) = NULL
	SET @ContactJobLevel = @ParamsXml.value(''(/LeadForceRequest/Contact/ContactJobLevel)[1]'',''nvarchar(250)'')
	DECLARE @ContactJobLevelID uniqueidentifier = NULL	
	IF @ContactJobLevel IS NOT NULL AND @ContactJobLevel <> ''''
	    SELECT TOP 1 @ContactJobLevelID = ID FROM tbl_ContactJobLevel WHERE Name = @ContactJobLevel AND SiteID = @SiteID
	    
	DECLARE @Address nvarchar(max) = NULL
	SET @Address = @ParamsXml.value(''(/LeadForceRequest/Contact/Address/@Address)[1]'',''nvarchar(max)'')
	
	DECLARE @Country nvarchar(255) = NULL
	SET @Country = @ParamsXml.value(''(/LeadForceRequest/Contact/Address/Country)[1]'',''nvarchar(255)'')
	DECLARE @CountryID uniqueidentifier = NULL	
	IF @Country IS NOT NULL AND @Country <> ''''
	    SELECT TOP 1 @CountryID = ID FROM tbl_Country WHERE Name = @Country
	
	DECLARE @Region nvarchar(255) = NULL
	SET @Region = @ParamsXml.value(''(/LeadForceRequest/Contact/Address/Region)[1]'',''nvarchar(255)'')
	DECLARE @RegionID uniqueidentifier = NULL	
	IF @Region IS NOT NULL AND @Region <> ''''
	    SELECT TOP 1 @RegionID = ID FROM tbl_Region WHERE Name = @Region
	    
	DECLARE @District nvarchar(255) = NULL
	SET @District = @ParamsXml.value(''(/LeadForceRequest/Contact/Address/District)[1]'',''nvarchar(255)'')
	DECLARE @DistrictID uniqueidentifier = NULL	
	IF @District IS NOT NULL AND @District <> ''''
	    SELECT TOP 1 @DistrictID = ID FROM tbl_District WHERE Name = @District
	    
	DECLARE @City nvarchar(255) = NULL
	SET @City = @ParamsXml.value(''(/LeadForceRequest/Contact/Address/City)[1]'',''nvarchar(255)'')
	DECLARE @CityID uniqueidentifier = NULL	
	IF @City IS NOT NULL AND @City <> ''''
	    SELECT TOP 1 @CityID = ID FROM tbl_City WHERE Name = @City
	
	DECLARE @Reffer nvarchar(255) = NULL
	SET @Reffer = @ParamsXml.value(''(/LeadForceRequest/Contact/Reffer)[1]'',''nvarchar(255)'')
	DECLARE @RefferID uniqueidentifier = NULL	
	IF @Reffer IS NOT NULL AND @Reffer <> ''''
	    SELECT TOP 1 @RefferID = ID FROM tbl_Contact WHERE UserFullName = @Reffer AND SiteID = @SiteID
	    
	DECLARE @Tags nvarchar(max) = NULL
	SET @Tags = @ParamsXml.value(''(/LeadForceRequest/Contact/Tags)[1]'',''nvarchar(max)'')
	
	
	DECLARE @AdvertisingCampaign nvarchar(256) = NULL
	SET @AdvertisingCampaign = @ParamsXml.value(''(/LeadForceRequest/Contact/AdvertisingCampaign)[1]'',''nvarchar(256)'')
	DECLARE @AdvertisingCampaignID uniqueidentifier = NULL
	IF @AdvertisingCampaign IS NOT NULL AND @AdvertisingCampaign <> ''''
	BEGIN
		SELECT TOP 1 @AdvertisingCampaignID = ID FROM tbl_AdvertisingCampaign WHERE Title = @AdvertisingCampaign AND SiteID = @SiteID
		IF @AdvertisingCampaignID IS NULL
		BEGIN
			SET @AdvertisingCampaignID = newid()
			INSERT INTO tbl_AdvertisingCampaign ([ID], [SiteID], [Title], [Code])
			VALUES (@AdvertisingCampaignID, @SiteID, @AdvertisingCampaign, @AdvertisingCampaign)
		END
	END	
	
	DECLARE @AdvertisingPlatform nvarchar(256) = NULL
	SET @AdvertisingPlatform = @ParamsXml.value(''(/LeadForceRequest/Contact/AdvertisingPlatform)[1]'',''nvarchar(256)'')
	DECLARE @AdvertisingPlatformID uniqueidentifier = NULL
	IF @AdvertisingPlatform IS NOT NULL AND @AdvertisingPlatform <> ''''
	BEGIN
		SELECT TOP 1 @AdvertisingPlatformID = ID FROM tbl_AdvertisingPlatform WHERE Title = @AdvertisingPlatform AND SiteID = @SiteID
		IF @AdvertisingPlatformID IS NULL
		BEGIN
			SET @AdvertisingPlatformID = newid()
			INSERT INTO tbl_AdvertisingPlatform ([ID], [SiteID], [Title], [Code])
			VALUES (@AdvertisingPlatformID, @SiteID, @AdvertisingPlatform, @AdvertisingPlatform)
		END
	END	
	
	DECLARE @AdvertisingType nvarchar(256) = NULL
	SET @AdvertisingType = @ParamsXml.value(''(/LeadForceRequest/Contact/AdvertisingType)[1]'',''nvarchar(256)'')
	DECLARE @AdvertisingTypeID uniqueidentifier = NULL
	IF @AdvertisingType IS NOT NULL AND @AdvertisingType <> ''''
	BEGIN
		SELECT TOP 1 @AdvertisingTypeID = ID FROM tbl_AdvertisingType WHERE Title = @AdvertisingType AND SiteID = @SiteID
		IF @AdvertisingTypeID IS NULL
		BEGIN
			SET @AdvertisingTypeID = newid()
			INSERT INTO tbl_AdvertisingType ([ID], [SiteID], [Title], [Code])
			VALUES (@AdvertisingTypeID, @SiteID, @AdvertisingType, @AdvertisingType)
		END
	END	
	
	IF (SELECT COUNT(*) FROM tbl_Contact WHERE ID = @ContactID AND SiteID = @SiteID) = 0
	    BEGIN
    	    INSERT INTO tbl_Contact (ID, 
    	                             SiteID, 
    	                             CreatedAt, 
    	                             UserFullName, 
    	                             Email, 
    	                             Phone,
    	                             StatusID,
    	                             IsNameChecked,
    	                             Surname,
    	                             Name,
    	                             Patronymic,
    	                             CellularPhone,
    	                             CellularPhoneStatusID,
    	                             EmailStatusID,
    	                             ContactTypeID,
    	                             JobTitle,
    	                             CompanyID,
    	                             OwnerID,
    	                             BirthDate,
    	                             ContactFunctionInCompanyID,
    	                             ContactJobLevelID,
    	                             RefferID,
    	                             RefferURL,
    	                             UserIP,
    	                             AdvertisingTypeID,
    	                             AdvertisingPlatformID,
    	                             AdvertisingCampaignID,
    	                             RegistrationSourceID)
    	                     VALUES  (@ContactID, 
    	                             @SiteID, 
    	                             GETDATE(), 
    	                             @UserFullName, 
    	                             @Email, 
    	                             @Phone,
    	                             @StatusID,
    	                             @IsNameChecked,
    	                             @Surname,
    	                             @Name,
    	                             @Patronymic,
    	                             @CellularPhone,
    	                             @CellularPhoneStatusID,
    	                             @EmailStatusID,
    	                             @ContactTypeID,
    	                             @JobTitle,
    	                             @CompanyID,
    	                             @OwnerID,
    	                             @BirthDate,
    	                             @ContactFunctionInCompanyID,
    	                             @ContactJobLevelID,
    	                             @RefferID,
    	                             '''',
    	                             '''',
    	                             @AdvertisingTypeID,
    	                             @AdvertisingPlatformID,
    	                             @AdvertisingCampaignID,
    	                             2)
	    END
	ELSE
	    BEGIN	
    	    UPDATE tbl_Contact
    	    SET  UserFullName = @UserFullName, 
                 Email = @Email, 
                 Phone = @Phone,
                 StatusID = @StatusID,
                 IsNameChecked = @IsNameChecked,
                 Surname = @Surname,
                 Name = @Name,
                 Patronymic = @Patronymic,
                 CellularPhone = @CellularPhone,
                 CellularPhoneStatusID = @CellularPhoneStatusID,
                 EmailStatusID = @EmailStatusID,
                 ContactTypeID = @ContactTypeID,
                 JobTitle = @JobTitle,
                 CompanyID = @CompanyID,
                 OwnerID = @OwnerID,
                 BirthDate = @BirthDate,
                 ContactFunctionInCompanyID = @ContactFunctionInCompanyID,
                 ContactJobLevelID = @ContactJobLevelID,
                 RefferID = @RefferID,
                 AdvertisingTypeID = @AdvertisingTypeID,
                 AdvertisingPlatformID = @AdvertisingPlatformID,
                 AdvertisingCampaignID = @AdvertisingCampaignID
    	    WHERE ID = @ContactID
	    END
	
	DECLARE @AddressID uniqueidentifier = NULL
	
	SELECT @AddressID = AddressID FROM tbl_Contact WHERE ID = @ContactID
	IF @AddressID IS NULL
	    BEGIN
	        SET @AddressID = NEWID()
	        INSERT INTO tbl_Address (ID, [Address], CountryID, CityID, DistrictID, RegionID)
	                        VALUES  (@AddressID, @Address, @CountryID, @CityID, @DistrictID, @RegionID)
	                        
	        UPDATE tbl_Contact
	        SET AddressID = @AddressID
	        WHERE ID = @ContactID
	    END
	ELSE
	    BEGIN
	        UPDATE tbl_Address
	        SET [Address] = @Address, CountryID = @CountryID, CityID = @CityID, DistrictID = @DistrictID, RegionID = @RegionID
	        WHERE ID = @AddressID
	    END	
	    
    IF @Tags IS NOT NULL
    BEGIN    
        DECLARE @ObjectTypeID int = NULL
        DECLARE @SiteTagID uniqueidentifier = NULL        
        SELECT @ObjectTypeID = ID FROM tbl_ObjectTypes WHERE Name = N''tbl_Contact''
        
        DELETE FROM tbl_SiteTagObjects WHERE ObjectID = @ContactID
        
        DECLARE @Tag nvarchar(255)
	
        DECLARE tagCursor CURSOR READ_ONLY
        FOR SELECT val FROM Split(@Tags, '','')
        OPEN tagCursor
        FETCH NEXT FROM tagCursor INTO @Tag
        WHILE @@FETCH_STATUS = 0
        BEGIN	                    
            SET @SiteTagID = NULL
            
	        SELECT @SiteTagID = ID FROM tbl_SiteTags WHERE Name = @Tag AND UserID = @UserID AND ObjectTypeID = @ObjectTypeID	        	        
	        
	        IF @SiteTagID IS NULL
	        BEGIN
	            SET @SiteTagID = NEWID()
	            INSERT INTO tbl_SiteTags (ID, UserID, Name, ObjectTypeID, SiteID)
	            VALUES (@SiteTagID, @UserID, @Tag, @ObjectTypeID, @SiteID)
	        END
	        
	        INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID)
	        VALUES (@SiteTagID, @ContactID)

	        FETCH NEXT FROM tagCursor
	        INTO @Tag
        END
        CLOSE tagCursor
        DEALLOCATE tagCursor
    END
END'

commit
exec LBC_SetVersion 304
END

/*******************************************************************************
	2012-10-04
	Добавлены триггеры для категорий контакта
*******************************************************************************/
if ( dbo.LBC_Version() < 305 )
BEGIN
begin tran

INSERT INTO tbl_CronJob (Name, [Assembly], [Type], Period)
VALUES (N'ContactCategory', N'Labitec.LeadForce.CronJobs.dll', N'Labitec.LeadForce.CronJobs.ContactCategoryJob', 1440)


EXEC dbo.sp_executesql @statement = N'CREATE TRIGGER [dbo].[ContactCategoryContactActivity] ON  [dbo].[tbl_ContactActivity]
   FOR INSERT
AS 
BEGIN
	DECLARE @ContactID uniqueidentifier
	DECLARE @SiteID uniqueidentifier
	DECLARE @UserFullName nvarchar(255)
	DECLARE @Email nvarchar(255)
	DECLARE @Category int
	
	SELECT @ContactID=ContactID, @SiteID=SiteID
	FROM inserted
	
	SELECT @UserFullName=UserFullName, @Email=Email, @Category=Category
	FROM tbl_Contact
	WHERE ID=@ContactID
	
	IF ((@UserFullName IS NOT NULL AND @UserFullName<>'''') OR (@Email IS NOT NULL AND @Email<>''''))
	BEGIN
		IF (@Category=0) -- Известный
		BEGIN
			DECLARE @ActiveContactsCount int
			DECLARE @CurrentActiveContactsCount int = (SELECT COUNT(*) FROM tbl_Contact WHERE SiteID=@SiteID AND Category=1)
			DECLARE @AccessProfileID uniqueidentifier = (SELECT AccessProfileID FROM tbl_Sites WHERE ID=@SiteID)
			
			IF (@AccessProfileID IS NOT NULL) -- Профиль сайта привязан
			BEGIN
				SET @ActiveContactsCount = (SELECT ActiveContactsCount FROM tbl_AccessProfile WHERE ID=@AccessProfileID)
				IF (@ActiveContactsCount IS NULL
					OR @ActiveContactsCount=0
					OR @CurrentActiveContactsCount <= @ActiveContactsCount)
				BEGIN
					UPDATE tbl_Contact
					SET Category=1 -- Активный
					WHERE ID=@ContactID
				END
				ELSE
				BEGIN
					UPDATE tbl_Contact
					SET Category=2 -- Активный сверх тарифа
					WHERE ID=@ContactID
				END
			END
			ELSE -- Профиль сайта не привязан
			BEGIN
				UPDATE tbl_Contact
				SET Category=1 -- Активный
				WHERE ID=@ContactID
			END
		END
		
		
		IF (@Category=4) -- Анонимный
		BEGIN
			UPDATE tbl_Contact
			SET Category=0
			WHERE ID=@ContactID
		END
	END
END'

EXEC dbo.sp_executesql @statement = N'CREATE TRIGGER [dbo].[ContactCategorySiteAction] ON [dbo].[tbl_SiteAction]
   FOR INSERT
AS 
BEGIN
	DECLARE @ContactID uniqueidentifier
	DECLARE @SiteID uniqueidentifier
	DECLARE @UserFullName nvarchar(255)
	DECLARE @Email nvarchar(255)
	DECLARE @Category int
	
	SELECT @ContactID=ContactID, @SiteID=SiteID
	FROM inserted
	
	SELECT @UserFullName=UserFullName, @Email=Email, @Category=Category
	FROM tbl_Contact
	WHERE ID=@ContactID
	
	IF ((@UserFullName IS NOT NULL AND @UserFullName<>'''') OR (@Email IS NOT NULL AND @Email<>''''))
	BEGIN
		IF (@Category=0) -- Известный
		BEGIN
			DECLARE @ActiveContactsCount int
			DECLARE @CurrentActiveContactsCount int = (SELECT COUNT(*) FROM tbl_Contact WHERE SiteID=@SiteID AND Category=1)
			DECLARE @AccessProfileID uniqueidentifier = (SELECT AccessProfileID FROM tbl_Sites WHERE ID=@SiteID)
			
			IF (@AccessProfileID IS NOT NULL) -- Профиль сайта привязан
			BEGIN
				SET @ActiveContactsCount = (SELECT ActiveContactsCount FROM tbl_AccessProfile WHERE ID=@AccessProfileID)
				IF (@ActiveContactsCount IS NULL
					OR @ActiveContactsCount=0
					OR @CurrentActiveContactsCount <= @ActiveContactsCount)
				BEGIN
					UPDATE tbl_Contact
					SET Category=1 -- Активный
					WHERE ID=@ContactID
				END
				ELSE
				BEGIN
					UPDATE tbl_Contact
					SET Category=2 -- Активный сверх тарифа
					WHERE ID=@ContactID
				END
			END
			ELSE -- Профиль сайта не привязан
			BEGIN
				UPDATE tbl_Contact
				SET Category=1 -- Активный
				WHERE ID=@ContactID
			END
		END
		
		
		IF (@Category=4) -- Анонимный
		BEGIN
			UPDATE tbl_Contact
			SET Category=0
			WHERE ID=@ContactID
		END
	END
END'

EXEC dbo.sp_executesql @statement = N'CREATE TRIGGER [dbo].[CancelAboveTariffSiteAction] ON [dbo].[tbl_SiteAction]
   FOR INSERT
AS 
BEGIN
	DECLARE @ID uniqueidentifier
	DECLARE @ContactID uniqueidentifier
	DECLARE @SiteID uniqueidentifier
	DECLARE @ActionStatusID int
	DECLARE @Category int
	
	SELECT @ID=ID, @ContactID=ContactID, @SiteID=SiteID, @ActionStatusID=ActionStatusID 
	FROM inserted
	
	SELECT @Category=Category
	FROM tbl_Contact
	WHERE ID=@ContactID

	IF (@ActionStatusID=1) -- Запланировано новое письмо
	BEGIN
		IF (@Category=2) -- Активный сверх трафика
		BEGIN
			UPDATE tbl_SiteAction
			SET ActionStatusID=6
			WHERE ID=@ID
		END
		ELSE -- Не активный сверх трафика
		BEGIN
			DECLARE @AccessProfileID uniqueidentifier = (SELECT AccessProfileID FROM tbl_Sites WHERE ID=@SiteID)
			
			IF (@AccessProfileID IS NOT NULL) -- Профиль сайта привязан
			BEGIN
				DECLARE @CurrentEmailCount int = 0
				DECLARE @EmailPerContactCount int = 0
				DECLARE @DurationPeriod int = 0
				
				SELECT @EmailPerContactCount=EmailPerContactCount,
					   @DurationPeriod=DurationPeriod
				FROM tbl_AccessProfile
				WHERE ID=@AccessProfileID

				IF (@EmailPerContactCount IS NOT NULL AND @EmailPerContactCount > 0)
				BEGIN
					IF (@DurationPeriod IS NOT NULL AND @DurationPeriod > 0)
					BEGIN
						SET @CurrentEmailCount = (SELECT COUNT(*)
												  FROM tbl_SiteAction
												  WHERE ActionStatusID=2 AND DATEADD(day, (-1 * @DurationPeriod), ActionDate) > GETDATE())
					END
					ELSE
					BEGIN
						SET @CurrentEmailCount = (SELECT COUNT(*)
												  FROM tbl_SiteAction
												  WHERE ActionStatusID=2)
					END
													  
					IF (@CurrentEmailCount IS NOT NULL AND @CurrentEmailCount > @EmailPerContactCount)
					BEGIN
						UPDATE tbl_SiteAction
						SET ActionStatusID=6
						WHERE ID=@ID
					END
				END
			END
		END
	END
END'

commit
exec LBC_SetVersion 305
END

/*******************************************************************************
	2012-10-04
	Обновлены триггеры для категорий контакта
*******************************************************************************/
if ( dbo.LBC_Version() < 306 )
BEGIN
begin tran


EXEC dbo.sp_executesql @statement = N'ALTER TRIGGER [dbo].[CancelAboveTariffSiteAction] ON [dbo].[tbl_SiteAction]
   FOR INSERT
AS 
BEGIN
	DECLARE @ID uniqueidentifier
	DECLARE @ContactID uniqueidentifier
	DECLARE @SiteID uniqueidentifier
	DECLARE @ActionStatusID int
	DECLARE @Category int
	
	SELECT @ID=ID, @ContactID=ContactID, @SiteID=SiteID, @ActionStatusID=ActionStatusID 
	FROM inserted
	
	SELECT @Category=Category
	FROM tbl_Contact
	WHERE ID=@ContactID

	IF (@ActionStatusID=1) -- Запланировано новое письмо
	BEGIN
		IF (@Category=2) -- Активный сверх трафика
		BEGIN
			UPDATE tbl_SiteAction
			SET ActionStatusID=6
			WHERE ID=@ID
		END
		ELSE -- Не активный сверх трафика
		BEGIN
			DECLARE @AccessProfileID uniqueidentifier = (SELECT AccessProfileID FROM tbl_Sites WHERE ID=@SiteID)
			
			IF (@AccessProfileID IS NOT NULL) -- Профиль сайта привязан
			BEGIN
				DECLARE @CurrentEmailCount int = 0
				DECLARE @EmailPerContactCount int = 0
				DECLARE @DurationPeriod int = 0
				
				SELECT @EmailPerContactCount=EmailPerContactCount,
					   @DurationPeriod=DurationPeriod
				FROM tbl_AccessProfile
				WHERE ID=@AccessProfileID

				IF (@EmailPerContactCount IS NOT NULL AND @EmailPerContactCount > 0)
				BEGIN
					IF (@DurationPeriod IS NOT NULL AND @DurationPeriod > 0)
					BEGIN
						SET @CurrentEmailCount = (SELECT COUNT(*)
												  FROM tbl_SiteAction
												  LEFT JOIN tbl_SiteActionTemplate ON tbl_SiteActionTemplate.ID=tbl_SiteAction.SiteActionTemplateID
												  WHERE tbl_SiteAction.ActionStatusID=2
														AND DATEADD(day, (-1 * @DurationPeriod), tbl_SiteAction.ActionDate) > GETDATE()
														AND tbl_SiteActionTemplate.SiteActionTemplateCategoryID<>4 -- Системный
												  )
					END
					ELSE
					BEGIN
						SET @CurrentEmailCount = (SELECT COUNT(*)
												  FROM tbl_SiteAction
												  LEFT JOIN tbl_SiteActionTemplate ON tbl_SiteActionTemplate.ID=tbl_SiteAction.SiteActionTemplateID
												  WHERE tbl_SiteAction.ActionStatusID=2
														AND tbl_SiteActionTemplate.SiteActionTemplateCategoryID<>4 -- Системный
												  )
					END
													  
					IF (@CurrentEmailCount IS NOT NULL AND @CurrentEmailCount > @EmailPerContactCount)
					BEGIN
						UPDATE tbl_SiteAction
						SET ActionStatusID=6
						WHERE ID=@ID
					END
				END
			END
		END
	END
END'

commit
exec LBC_SetVersion 306
END

/*******************************************************************************
	2012-10-04
	Обновлены триггеры для категорий контакта
*******************************************************************************/
if ( dbo.LBC_Version() < 307 )
BEGIN
begin tran

DROP TRIGGER CancelAboveTariffSiteAction

EXEC dbo.sp_executesql @statement = N'ALTER TRIGGER [dbo].[ContactCategorySiteAction] ON [dbo].[tbl_SiteAction]
   FOR INSERT
AS 
BEGIN
	DECLARE @ID uniqueidentifier
	DECLARE @ContactID uniqueidentifier
	DECLARE @SiteID uniqueidentifier
	DECLARE @UserFullName nvarchar(255)
	DECLARE @Email nvarchar(255)
	DECLARE @ActionStatusID int
	DECLARE @Category int
	
	SELECT @ID=ID, @ContactID=ContactID, @SiteID=SiteID, @ActionStatusID=ActionStatusID 
	FROM inserted
	
	SELECT @UserFullName=UserFullName, @Email=Email, @Category=Category
	FROM tbl_Contact
	WHERE ID=@ContactID
	
	DECLARE @AccessProfileID uniqueidentifier = (SELECT AccessProfileID FROM tbl_Sites WHERE ID=@SiteID)
	
	-- Определение категории контакта
	IF ((@UserFullName IS NOT NULL AND @UserFullName<>'''') OR (@Email IS NOT NULL AND @Email<>''''))
	BEGIN
		IF (@Category=0) -- Известный
		BEGIN
			DECLARE @ActiveContactsCount int
			DECLARE @CurrentActiveContactsCount int = (SELECT COUNT(*) FROM tbl_Contact WHERE SiteID=@SiteID AND Category=1)
						
			IF (@AccessProfileID IS NOT NULL) -- Профиль сайта привязан
			BEGIN
				SET @ActiveContactsCount = (SELECT ActiveContactsCount FROM tbl_AccessProfile WHERE ID=@AccessProfileID)
				IF (@ActiveContactsCount IS NULL
					OR @ActiveContactsCount=0
					OR @CurrentActiveContactsCount <= @ActiveContactsCount)
				BEGIN
					UPDATE tbl_Contact
					SET Category=1 -- Активный
					WHERE ID=@ContactID
				END
				ELSE
				BEGIN
					UPDATE tbl_Contact
					SET Category=2 -- Активный сверх тарифа
					WHERE ID=@ContactID
				END
			END
			ELSE -- Профиль сайта не привязан
			BEGIN
				UPDATE tbl_Contact
				SET Category=1 -- Активный
				WHERE ID=@ContactID
			END
		END
		
		
		IF (@Category=4) -- Анонимный
		BEGIN
			UPDATE tbl_Contact
			SET Category=0
			WHERE ID=@ContactID
		END
	END
	
	
	IF (@ActionStatusID=1) -- Запланировано новое письмо
	BEGIN
		IF (@Category=2) -- Активный сверх трафика
		BEGIN
			UPDATE tbl_SiteAction
			SET ActionStatusID=6
			WHERE ID=@ID
		END
		ELSE -- Не активный сверх трафика
		BEGIN
			
			
			IF (@AccessProfileID IS NOT NULL) -- Профиль сайта привязан
			BEGIN
				DECLARE @CurrentEmailCount int = 0
				DECLARE @EmailPerContactCount int = 0
				DECLARE @DurationPeriod int = 0
				
				SELECT @EmailPerContactCount=EmailPerContactCount,
					   @DurationPeriod=DurationPeriod
				FROM tbl_AccessProfile
				WHERE ID=@AccessProfileID

				IF (@EmailPerContactCount IS NOT NULL AND @EmailPerContactCount > 0)
				BEGIN
					IF (@DurationPeriod IS NOT NULL AND @DurationPeriod > 0)
					BEGIN
						SET @CurrentEmailCount = (SELECT COUNT(*)
												  FROM tbl_SiteAction
												  LEFT JOIN tbl_SiteActionTemplate ON tbl_SiteActionTemplate.ID=tbl_SiteAction.SiteActionTemplateID
												  WHERE tbl_SiteAction.ActionStatusID=2
														AND DATEADD(day, (-1 * @DurationPeriod), tbl_SiteAction.ActionDate) > GETDATE()
														AND tbl_SiteActionTemplate.SiteActionTemplateCategoryID<>4 -- Системный
												  )
					END
					ELSE
					BEGIN
						SET @CurrentEmailCount = (SELECT COUNT(*)
												  FROM tbl_SiteAction
												  LEFT JOIN tbl_SiteActionTemplate ON tbl_SiteActionTemplate.ID=tbl_SiteAction.SiteActionTemplateID
												  WHERE tbl_SiteAction.ActionStatusID=2
														AND tbl_SiteActionTemplate.SiteActionTemplateCategoryID<>4 -- Системный
												  )
					END
													  
					IF (@CurrentEmailCount IS NOT NULL AND @CurrentEmailCount > @EmailPerContactCount)
					BEGIN
						UPDATE tbl_SiteAction
						SET ActionStatusID=6
						WHERE ID=@ID
					END
				END
			END
		END
	END
END'

commit
exec LBC_SetVersion 307
END

/*******************************************************************************
	2012-10-04
	Обновлены триггеры для категорий контакта
*******************************************************************************/
if ( dbo.LBC_Version() < 308 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER TRIGGER [dbo].[ContactCategorySiteAction] ON [dbo].[tbl_SiteAction]
   FOR INSERT
AS 
BEGIN
	DECLARE @ID uniqueidentifier
	DECLARE @ContactID uniqueidentifier
	DECLARE @SiteID uniqueidentifier
	DECLARE @UserFullName nvarchar(255)
	DECLARE @Email nvarchar(255)
	DECLARE @ActionStatusID int
	DECLARE @Category int
	
	SELECT @ID=ID, @ContactID=ContactID, @SiteID=SiteID, @ActionStatusID=ActionStatusID 
	FROM inserted
	
	SELECT @UserFullName=UserFullName, @Email=Email, @Category=Category
	FROM tbl_Contact
	WHERE ID=@ContactID
	
	DECLARE @AccessProfileID uniqueidentifier = (SELECT AccessProfileID FROM tbl_Sites WHERE ID=@SiteID)
	
	-- Определение категории контакта
	IF ((@UserFullName IS NOT NULL AND @UserFullName<>'''') OR (@Email IS NOT NULL AND @Email<>''''))
	BEGIN
		IF (@Category=0) -- Известный
		BEGIN
			DECLARE @ActiveContactsCount int
			DECLARE @CurrentActiveContactsCount int = (SELECT COUNT(*) FROM tbl_Contact WHERE SiteID=@SiteID AND Category=1)
						
			IF (@AccessProfileID IS NOT NULL) -- Профиль сайта привязан
			BEGIN
				SET @ActiveContactsCount = (SELECT ActiveContactsCount FROM tbl_AccessProfile WHERE ID=@AccessProfileID)
				IF (@ActiveContactsCount IS NULL
					OR @ActiveContactsCount=0
					OR @CurrentActiveContactsCount <= @ActiveContactsCount)
				BEGIN
					UPDATE tbl_Contact
					SET Category=1 -- Активный
					WHERE ID=@ContactID
				END
				ELSE
				BEGIN
					UPDATE tbl_Contact
					SET Category=2 -- Активный сверх тарифа
					WHERE ID=@ContactID
				END
			END
			ELSE -- Профиль сайта не привязан
			BEGIN
				UPDATE tbl_Contact
				SET Category=1 -- Активный
				WHERE ID=@ContactID
			END
		END
		
		
		IF (@Category=4) -- Анонимный
		BEGIN
			UPDATE tbl_Contact
			SET Category=0
			WHERE ID=@ContactID
		END
	END
	
	
	IF (@ActionStatusID=1) -- Запланировано новое письмо
	BEGIN
		IF (@Category=2) -- Активный сверх трафика
		BEGIN
			UPDATE tbl_SiteAction
			SET ActionStatusID=6
			WHERE ID=@ID
		END
		ELSE -- Не активный сверх трафика
		BEGIN
			IF (@AccessProfileID IS NOT NULL) -- Профиль сайта привязан
			BEGIN
				DECLARE @CurrentEmailCount int = 0
				DECLARE @EmailPerContactCount int = 0
				DECLARE @DurationPeriod int = 0
				
				SELECT @EmailPerContactCount=EmailPerContactCount,
					   @DurationPeriod=DurationPeriod
				FROM tbl_AccessProfile
				WHERE ID=@AccessProfileID

				IF (@EmailPerContactCount IS NOT NULL AND @EmailPerContactCount > 0)
				BEGIN
					IF (@DurationPeriod IS NOT NULL AND @DurationPeriod > 0)
					BEGIN
						SET @CurrentEmailCount = (SELECT COUNT(*)
												  FROM tbl_SiteAction
												  LEFT JOIN tbl_SiteActionTemplate ON tbl_SiteActionTemplate.ID=tbl_SiteAction.SiteActionTemplateID
												  WHERE tbl_SiteAction.ActionStatusID=2
														AND DATEADD(day, (-1 * @DurationPeriod), GETDATE()) >= tbl_SiteAction.ActionDate
														AND tbl_SiteActionTemplate.SiteActionTemplateCategoryID<>4 -- Системный
												  )
					END
					ELSE
					BEGIN
						SET @CurrentEmailCount = (SELECT COUNT(*)
												  FROM tbl_SiteAction
												  LEFT JOIN tbl_SiteActionTemplate ON tbl_SiteActionTemplate.ID=tbl_SiteAction.SiteActionTemplateID
												  WHERE tbl_SiteAction.ActionStatusID=2
														AND tbl_SiteActionTemplate.SiteActionTemplateCategoryID<>4 -- Системный
												  )
					END
													  
					IF (@CurrentEmailCount IS NOT NULL AND @CurrentEmailCount > @EmailPerContactCount)
					BEGIN
						UPDATE tbl_SiteAction
						SET ActionStatusID=6
						WHERE ID=@ID
					END
				END
			END
		END
	END
END'

commit
exec LBC_SetVersion 308
END

/*******************************************************************************
	2012-10-04
	Добавлены триггеры для сбора статистики
*******************************************************************************/
if ( dbo.LBC_Version() < 309 )
BEGIN
begin tran

INSERT INTO tbl_CronJob (Name, [Assembly], [Type], Period)
VALUES (N'RecalculateStatistic', N'Labitec.LeadForce.CronJobs.dll', N'Labitec.LeadForce.CronJobs.RecalculateStatisticJob', 1440)

EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[Statistic_Update]
	(
		@SiteID uniqueidentifier,
		@Code varchar(256),
		@Increment decimal(18,2),
		@Decrement decimal(18,2)
	)
AS
BEGIN
	DECLARE @Value decimal(18,2) = NULL
	SELECT @Value = Value FROM tbl_StatisticData WHERE SiteID = @SiteID AND Code = @Code
	IF @Value IS NULL
	BEGIN
		INSERT INTO tbl_StatisticData ([SiteID], [Code], [Value], [PreviousValue])
		VALUES (@SiteID, @Code, 0, 0)
	END
	
	
	UPDATE tbl_StatisticData
	SET Value = Value + @Increment
	WHERE SiteID = @SiteID AND Code = @Code	
	
	UPDATE tbl_StatisticData
	SET Value = Value - @Decrement
	WHERE SiteID = @SiteID AND Code = @Code	AND Value > 0
	
END'

EXEC dbo.sp_executesql @statement = N'CREATE TRIGGER [dbo].[UpdateStatisticData] ON  [dbo].[tbl_Contact] FOR INSERT, UPDATE
AS 
BEGIN
	DECLARE @SiteID uniqueidentifier
	DECLARE @AdvertisingPlatformID uniqueidentifier
			
	DECLARE @SiteIDs table(
		SiteID uniqueidentifier
	)
	
	DECLARE @AdvertisingPlatformIDs table(
		AdvertisingPlatformID uniqueidentifier
	)
	
	INSERT INTO @SiteIDs (SiteID)	
	SELECT DISTINCT SiteID
	FROM inserted
		
	/* --- Категории контактов --- */
	DECLARE @ContactCategoryKnownCountIncrement int = 0
	DECLARE @ContactCategoryKnownCountDecrement int = 0
	DECLARE @ContactCategoryActiveCountIncrement int = 0
	DECLARE @ContactCategoryActiveCountDecrement int = 0
	DECLARE @ContactCategoryAnonymousCountIncrement int = 0
	DECLARE @ContactCategoryAnonymousCountDecrement int = 0
	DECLARE @ContactCategoryTotalCountIncrement int = 0
	DECLARE @ContactCategoryTotalCountDecrement int = 0
	DECLARE @ContactCategoryDeletedCountIncrement int = 0
	DECLARE @ContactCategoryDeletedCountDecrement int = 0
	
	/* --- Источники посетителей --- */
	DECLARE @VisitorSourceNewAnonymousTotal int = 0	
	DECLARE @VisitorSourceNewAnonymousAdvertisingPlatform int = 0
	DECLARE @VisitorSourceNewAnonymousAdvertisingPlatformKey varchar(256)
	DECLARE @VisitorSourceNewAnonymousReffer int = 0
	DECLARE @VisitorSourceNewAnonymousDirect int = 0
	
	/* --- Статистика клиентской базы --- */
	DECLARE @ClientBaseStatisticCountInBase int = 0
	
	/* --- Рост клиентской базы --- */	
	DECLARE @ClientBaseGrowthNewTotal int = 0
	DECLARE @ClientBaseGrowthNewRegistered int = 0
	DECLARE @ClientBaseGrowthNewImported int = 0
	
	/* --- Новые продажи -> Потенциалные клиенты --- */
	DECLARE @NewSalesPotentialClientActiveCount int = 0
	
	/* --- Повторные продажи -> Потенциалные клиенты --- */
	DECLARE @RepeatSalesPotentialClientActiveCount int = 0

	
	DECLARE @Action as char(1);
    SET @Action = ''I''; -- Set Action to Insert by default.
    IF EXISTS(SELECT * FROM DELETED)
    BEGIN
        SET @Action = 
            CASE
                WHEN EXISTS(SELECT * FROM INSERTED) THEN ''U'' -- Set Action to Updated.
                ELSE ''D'' -- Set Action to Deleted.       
            END
    END    
    
    WHILE EXISTS(SELECT * FROM @SiteIDs)
    BEGIN
		SELECT TOP 1 @SiteID = SiteID FROM @SiteIDs
		
		INSERT INTO @AdvertisingPlatformIDs(AdvertisingPlatformID)
		SELECT AdvertisingPlatformID
		FROM inserted
		WHERE AdvertisingPlatformID IS NOT NULL AND SiteID = @SiteID
		
		IF @Action = ''I''
		BEGIN
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID AND Category = 4)
			BEGIN
				SET @ContactCategoryAnonymousCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND Category = 4)
				EXEC Statistic_Update @SiteID, N''ContactCategoryAnonymousCount'', @ContactCategoryAnonymousCountIncrement, 0
			END
			
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID AND Category <> 3)
			BEGIN
				SET @ContactCategoryTotalCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND Category <> 3)
				EXEC Statistic_Update @SiteID, N''ContactCategoryTotalCount'', @ContactCategoryTotalCountIncrement, 0
			END
			
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID)
			BEGIN
				SET @ClientBaseStatisticCountInBase = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID)
				EXEC Statistic_Update @SiteID, N''ClientBaseStatisticCountInBase'', @ClientBaseStatisticCountInBase, 0
				
				SET @VisitorSourceNewAnonymousTotal = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID)
				EXEC Statistic_Update @SiteID, N''VisitorSourceNewAnonymousTotal'', @VisitorSourceNewAnonymousTotal, 0						
				
				SET @ClientBaseGrowthNewTotal = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID)
				EXEC Statistic_Update @SiteID, N''ClientBaseGrowthNewTotal'', @ClientBaseGrowthNewTotal, 0
			END
			
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID AND RefferID IS NOT NULL)
			BEGIN
				SET @VisitorSourceNewAnonymousReffer = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND RefferID IS NOT NULL)
				EXEC Statistic_Update @SiteID, N''VisitorSourceNewAnonymousReffer'', @VisitorSourceNewAnonymousReffer, 0
			END
			
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID AND RefferURL IS NOT NULL AND RefferURL <> '''')
			BEGIN
				SET @VisitorSourceNewAnonymousDirect = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND RefferURL IS NOT NULL AND RefferURL <> '''')
				EXEC Statistic_Update @SiteID, N''VisitorSourceNewAnonymousDirect'', @VisitorSourceNewAnonymousDirect, 0
			END
			
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID AND RegistrationSourceID = 0)
			BEGIN
				SET @ClientBaseGrowthNewRegistered = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND RegistrationSourceID = 0)
				EXEC Statistic_Update @SiteID, N''ClientBaseGrowthNewRegistered'', @ClientBaseGrowthNewRegistered, 0
			END
			
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID AND RegistrationSourceID = 3)
			BEGIN
				SET @ClientBaseGrowthNewImported = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND RegistrationSourceID = 3)
				EXEC Statistic_Update @SiteID, N''ClientBaseGrowthNewImported'', @ClientBaseGrowthNewImported, 0
			END
		END
		ELSE
		BEGIN
			IF (UPDATE(Category))
			BEGIN
				SET @ContactCategoryKnownCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND (Category = 0 OR Category = 1 OR Category = 2))
				SET @ContactCategoryKnownCountDecrement = (SELECT COUNT(*) FROM deleted WHERE SiteID = @SiteID AND (Category = 0 OR Category = 1 OR Category = 2))
				EXEC Statistic_Update @SiteID, N''ContactCategoryKnownCount'', @ContactCategoryKnownCountIncrement, @ContactCategoryKnownCountDecrement
				
				SET @ContactCategoryActiveCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND (Category = 1 OR Category = 2))
				SET @ContactCategoryActiveCountDecrement = (SELECT COUNT(*) FROM deleted WHERE SiteID = @SiteID AND (Category = 1 OR Category = 2))
				EXEC Statistic_Update @SiteID, N''ContactCategoryActiveCount'', @ContactCategoryActiveCountIncrement, @ContactCategoryActiveCountDecrement
				EXEC Statistic_Update @SiteID, N''ClientBaseStatisticActiveCount'', @ContactCategoryActiveCountIncrement, 0
				
				SET @ContactCategoryAnonymousCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND Category = 4)
				SET @ContactCategoryAnonymousCountDecrement = (SELECT COUNT(*) FROM deleted WHERE SiteID = @SiteID AND Category = 4)
				EXEC Statistic_Update @SiteID, N''ContactCategoryAnonymousCount'', @ContactCategoryAnonymousCountIncrement, @ContactCategoryAnonymousCountDecrement
				
				SET @ContactCategoryTotalCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND Category <> 3)
				SET @ContactCategoryTotalCountDecrement = (SELECT COUNT(*) FROM deleted WHERE SiteID = @SiteID AND Category <> 3)
				EXEC Statistic_Update @SiteID, N''ContactCategoryTotalCount'', @ContactCategoryTotalCountIncrement, @ContactCategoryTotalCountDecrement
				
				SET @ContactCategoryDeletedCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND Category = 3)
				SET @ContactCategoryDeletedCountDecrement = (SELECT COUNT(*) FROM deleted WHERE SiteID = @SiteID AND Category = 3)
				EXEC Statistic_Update @SiteID, N''ContactCategoryDeletedCount'', @ContactCategoryDeletedCountIncrement, @ContactCategoryDeletedCountDecrement
				
				IF EXISTS(SELECT * FROM inserted AS INS LEFT JOIN tbl_Invoice AS I ON INS.ID = I.BuyerContactID WHERE INS.SiteID = @SiteID AND (Category = 1 OR Category = 2) AND I.InvoiceStatusID <> 3 AND INS.ID IN (SELECT ContactID FROM tbl_MassWorkflow AS MW LEFT JOIN tbl_MassWorkflowContact AS MWC ON MW.ID = MWC.MassWorkflowID WHERE SiteID = @SiteID))
				BEGIN
					SET @NewSalesPotentialClientActiveCount = (SELECT COUNT(*) FROM inserted AS INS LEFT JOIN tbl_Invoice AS I ON INS.ID = I.BuyerContactID WHERE INS.SiteID = @SiteID AND (Category = 1 OR Category = 2) AND I.InvoiceStatusID <> 3 AND INS.ID IN (SELECT ContactID FROM tbl_MassWorkflow AS MW LEFT JOIN tbl_MassWorkflowContact AS MWC ON MW.ID = MWC.MassWorkflowID WHERE SiteID = @SiteID))
					EXEC Statistic_Update @SiteID, N''NewSalesPotentialClientActiveCount'', @NewSalesPotentialClientActiveCount, 0
				END
				
				IF EXISTS(SELECT * FROM inserted AS INS LEFT JOIN tbl_Invoice AS I ON INS.ID = I.BuyerContactID WHERE INS.SiteID = @SiteID AND (Category = 1 OR Category = 2) AND I.InvoiceStatusID = 3 AND INS.ID IN (SELECT ContactID FROM tbl_MassWorkflow AS MW LEFT JOIN tbl_MassWorkflowContact AS MWC ON MW.ID = MWC.MassWorkflowID WHERE SiteID = @SiteID))
				BEGIN
					SET @RepeatSalesPotentialClientActiveCount = (SELECT COUNT(*) FROM inserted AS INS LEFT JOIN tbl_Invoice AS I ON INS.ID = I.BuyerContactID WHERE INS.SiteID = @SiteID AND (Category = 1 OR Category = 2) AND I.InvoiceStatusID = 3 AND INS.ID IN (SELECT ContactID FROM tbl_MassWorkflow AS MW LEFT JOIN tbl_MassWorkflowContact AS MWC ON MW.ID = MWC.MassWorkflowID WHERE SiteID = @SiteID))
					EXEC Statistic_Update @SiteID, N''RepeatSalesPotentialClientActiveCount'', @RepeatSalesPotentialClientActiveCount, 0
				END								
			END
			IF (UPDATE(RefferID))
			BEGIN
				SET @VisitorSourceNewAnonymousReffer = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND RefferID IS NOT NULL)
				EXEC Statistic_Update @SiteID, N''VisitorSourceNewAnonymousReffer'', @VisitorSourceNewAnonymousReffer, 0
			END
			IF (UPDATE(RefferURL))
			BEGIN
				SET @VisitorSourceNewAnonymousDirect = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND RefferURL IS NOT NULL AND RefferURL <> '''')
				EXEC Statistic_Update @SiteID, N''VisitorSourceNewAnonymousDirect'', @VisitorSourceNewAnonymousDirect, 0
			END
		END
		
		IF @Action = ''I'' OR UPDATE(AdvertisingPlatformID)
		BEGIN
			WHILE EXISTS(SELECT * FROM @AdvertisingPlatformIDs)
			BEGIN
				SELECT TOP 1 @AdvertisingPlatformID = AdvertisingPlatformID FROM @AdvertisingPlatformIDs
				
				SET @VisitorSourceNewAnonymousAdvertisingPlatform = (SELECT COUNT(*) FROM inserted WHERE AdvertisingPlatformID = @AdvertisingPlatformID)
				SET @VisitorSourceNewAnonymousAdvertisingPlatformKey = N''VisitorSourceNewAnonymousAdvertisingPlatform_'' + CAST(@AdvertisingPlatformID AS varchar(50))
				EXEC Statistic_Update @SiteID, @VisitorSourceNewAnonymousAdvertisingPlatformKey, @VisitorSourceNewAnonymousAdvertisingPlatform, 0				
				
				DELETE FROM @AdvertisingPlatformIDs
				WHERE AdvertisingPlatformID = @AdvertisingPlatformID
			END
		END
		
		DELETE FROM @AdvertisingPlatformIDs
		
		DELETE FROM @SiteIDs
		WHERE SiteID = @SiteID
    END    
END'

commit
exec LBC_SetVersion 309
END

/*******************************************************************************
	2012-10-04
	Обновлён импорт с RegistrationSourceID
*******************************************************************************/
if ( dbo.LBC_Version() < 310 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[Import] 
(
	@ImportID uniqueidentifier = NULL
)
AS
BEGIN
	DECLARE @IDString varchar(50) = REPLACE(@ImportID, ''-'', '''')

	DECLARE @SiteID uniqueidentifier = (SELECT TOP 1 SiteID FROM tbl_Import WHERE ID=@ImportID)
	DECLARE @StatusID uniqueidentifier = (SELECT TOP 1 ID FROM tbl_Status WHERE SiteID=@SiteID AND IsDefault=1)

	DECLARE @SQLString nvarchar(max)
	DECLARE @ParmDefinition nvarchar(max) = NULL

	-- Выбор правил и внесение в общую таблицу
	DECLARE @ValueNull nvarchar(max) = NULL

	SELECT tbl_ImportField.TableName,
		   tbl_ImportField.ParentTableName,
		   tbl_ImportField.FieldTitle,
		   tbl_ImportField.FieldName,
		   tbl_ImportColumn.Name,
		   tbl_ImportColumn.SystemName,
		   tbl_ImportColumn.PrimaryKey,
		   tbl_ImportColumn.SecondaryKey,
		   tbl_ImportColumnRule.IsRequired,
		   @ValueNull AS Value
	INTO #Rules
	FROM tbl_ImportColumnRule
	LEFT JOIN tbl_ImportColumn ON tbl_ImportColumn.ID=tbl_ImportColumnRule.ImportColumnID
	LEFT JOIN tbl_ImportField ON tbl_ImportField.ID=tbl_ImportColumnRule.ImportFieldID
	WHERE tbl_ImportColumnRule.ImportID=@ImportID

	-- Выбор таблиц для обработки
	DECLARE @LeadForceIDNull uniqueidentifier = NULL
	SELECT DISTINCT TableName, ParentTableName, @LeadForceIDNull AS LeadForceID
	INTO #TableNames
	FROM #Rules
	
	-- Выбор тегов
	SELECT *
	INTO #Tags
	FROM tbl_ImportTag
	WHERE ImportID=@ImportID


	-- Перебираем все записи в Tmp таблице
	DECLARE @TmpImport_Cursor int
	EXEC(''DECLARE TmpImport_Cursor CURSOR FOR SELECT ID FROM TmpImport_'' + @IDString)
	OPEN TmpImport_Cursor
	FETCH NEXT FROM TmpImport_Cursor INTO @TmpImport_Cursor
	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- Добавление в общую таблицу значения
		DECLARE @Rules_Cursor nvarchar(255)
		EXEC(''DECLARE Rules_Cursor CURSOR FOR SELECT SystemName FROM #Rules'')
		OPEN Rules_Cursor
		FETCH NEXT FROM Rules_Cursor INTO @Rules_Cursor
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE @Value nvarchar(max) = NULL
			SET @SQLString = N''SELECT @ValueOUT='' + @Rules_Cursor + '' FROM TmpImport_'' + @IDString + '' WHERE ID='' + CAST(@TmpImport_Cursor AS nvarchar(max))
			SET @ParmDefinition = N''@ValueOUT nvarchar(max) OUTPUT''
			EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @ValueOUT=@Value OUTPUT
		
			UPDATE #Rules
			SET Value=ISNULL(LTRIM(RTRIM(@Value)), '''')
			WHERE SystemName=@Rules_Cursor
		
			FETCH NEXT FROM Rules_Cursor INTO @Rules_Cursor
		END
		CLOSE Rules_Cursor
		DEALLOCATE Rules_Cursor
		
		-- Проверка на обязательность всех полей в общей таблице
		IF (SELECT COUNT(*) FROM #Rules WHERE IsRequired=1 AND (Value IS NULL OR Value='''')) = 0
		BEGIN
				-- Обработка таблиц по родительским таблицам
				DECLARE @ParentTableName_Cursor nvarchar(255)
				EXEC(''DECLARE ParentTableName_Cursor CURSOR FOR SELECT DISTINCT ParentTableName FROM #TableNames'')
				OPEN ParentTableName_Cursor
				FETCH NEXT FROM ParentTableName_Cursor INTO @ParentTableName_Cursor
				WHILE @@FETCH_STATUS = 0
				BEGIN
						-- Обработка таблиц
						DECLARE @TableName_Cursor nvarchar(255)
						EXEC(''DECLARE TableName_Cursor CURSOR FOR SELECT TableName FROM #TableNames WHERE ParentTableName='''''' + @ParentTableName_Cursor + '''''''')
						OPEN TableName_Cursor
						FETCH NEXT FROM TableName_Cursor INTO @TableName_Cursor
						WHILE @@FETCH_STATUS = 0
						BEGIN
							DECLARE @LeadForceID uniqueidentifier = NULL
							
							IF (@TableName_Cursor<>''_Owner'')
							BEGIN
									DECLARE @Key nvarchar(max) = CAST(@SiteID AS nvarchar(50))
									DECLARE @PrimaryKey nvarchar(max) = NULL
									DECLARE @InsertPrimaryKey bit = 0
									DECLARE @SecondaryKey nvarchar(max) = NULL
								
									SELECT @Key = COALESCE(@Key + '';'', '''') + Value,
										   @PrimaryKey = COALESCE(@PrimaryKey + '' AND '', '''') + FieldName + ''='''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
									FROM #Rules
									WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor AND PrimaryKey=1
									ORDER BY TableName, FieldName ASC
									
									SET @Key = LOWER(@Key)
									
									IF (@PrimaryKey IS NOT NULL)
									BEGIN
										SET @InsertPrimaryKey = 1
										IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'' OR @TableName_Cursor=''tbl_CompanyType'' OR @TableName_Cursor=''tbl_CompanySector'' OR @TableName_Cursor=''tbl_ContactType'')
										BEGIN
											SET @PrimaryKey = COALESCE(@PrimaryKey + '' AND '', '''') + ''SiteID='''''' + CAST(@SiteID AS nvarchar(50)) + ''''''''
										END
										-- Поиск первичного ключа в таблице ключей
										SET @LeadForceID = (SELECT TOP 1 LeadForceID FROM tbl_ImportKey WHERE ImportID=@ImportID AND TableName=@TableName_Cursor AND [Key]=@Key)
										
										-- Поиск первичного ключа в таблице LeadForce
										IF (@LeadForceID IS NULL)
										BEGIN
											SET @SQLString = N''SELECT TOP 1 @LeadForceIDOUT=ID FROM '' + @TableName_Cursor + '' WHERE '' + @PrimaryKey
											SET @ParmDefinition = N''@LeadForceIDOUT nvarchar(50) OUTPUT''
											EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @LeadForceIDOUT=@LeadForceID OUTPUT
										END
									END
									
									-- Поиск вторичного ключа в таблице LeadForce
									SELECT @SecondaryKey = COALESCE(@SecondaryKey + '' AND '', '''') + FieldName + ''='''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
									FROM #Rules
									WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor AND SecondaryKey=1
									ORDER BY TableName, FieldName ASC
									
									IF ((@LeadForceID IS NULL) AND (@SecondaryKey IS NOT NULL))
									BEGIN
										IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'' OR @TableName_Cursor=''tbl_CompanyType'' OR @TableName_Cursor=''tbl_CompanySector'' OR @TableName_Cursor=''tbl_ContactType'')
										BEGIN
											SET @SecondaryKey = COALESCE(@SecondaryKey + '' AND '', '''') + ''SiteID='''''' + CAST(@SiteID AS nvarchar(50)) + ''''''''
										END

										SET @SQLString = N''SELECT TOP 1 @LeadForceIDOUT=ID FROM '' + @TableName_Cursor + '' WHERE '' + @SecondaryKey
										SET @ParmDefinition = N''@LeadForceIDOUT nvarchar(50) OUTPUT''
										EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @LeadForceIDOUT=@LeadForceID OUTPUT
									END
									
									IF (@LeadForceID IS NULL)
									BEGIN
										-- Добавление записи
										DECLARE @Fields nvarchar(max) = NULL
										DECLARE @Values nvarchar(max) = NULL
										
										SELECT @Fields = COALESCE(@Fields + '', '', '''') + ''['' + FieldName + '']'',
											   @Values = COALESCE(@Values + '', '', '''') + ''N'''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
										FROM #Rules
										WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor
										ORDER BY TableName, FieldName ASC
										
										IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'' OR @TableName_Cursor=''tbl_CompanyType'' OR @TableName_Cursor=''tbl_CompanySector'' OR @TableName_Cursor=''tbl_ContactType'')
										BEGIN
											SET @Fields = COALESCE(@Fields + '', '', '''') + ''[SiteID]''
											SET @Values = COALESCE(@Values + '', '', '''') + '''''''' + CAST(@SiteID AS varchar(50)) + ''''''''
										END
										
										IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'')
										BEGIN
											SET @Fields = COALESCE(@Fields + '', '', '''') + ''[StatusID]''
											SET @Values = COALESCE(@Values + '', '', '''') + '''''''' + CAST(@StatusID AS varchar(50)) + ''''''''
										END
										
										IF (@TableName_Cursor=''tbl_Contact'')
										BEGIN
											SET @Fields = COALESCE(@Fields + '', '', '''') + ''[RefferURL], [UserIP], [RegistrationSourceID]''
											SET @Values = COALESCE(@Values + '', '', '''') + '''''''''', '''''''', 3''
										END
									
										SET @LeadForceID = NEWID()
										SET @SQLString = ''INSERT INTO '' + @TableName_Cursor + '' (ID, '' + @Fields + '') VALUES ('''''' + CAST(@LeadForceID AS nvarchar(50)) + '''''', '' + @Values + '')''
										EXEC(@SQLString)
										
										-- Добавление записи в таблицу ключей, если есть первичный
										IF (@InsertPrimaryKey=1)
										BEGIN
											INSERT INTO tbl_ImportKey (ImportID, TableName, [Key], LeadForceID) VALUES (@ImportID, @TableName_Cursor, @Key, @LeadForceID)
										END
									END
									ELSE
									BEGIN
										-- Обновление записи
										DECLARE @FieldValues nvarchar(max) = NULL
										
										SELECT @FieldValues = COALESCE(@FieldValues + '', '', '''') + FieldName + ''=N'''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
										FROM #Rules
										WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor
										ORDER BY TableName, FieldName ASC

										SET @SQLString = ''UPDATE '' + @TableName_Cursor + '' SET '' + @FieldValues + '' WHERE ID=N'''''' + CAST(@LeadForceID AS nvarchar(50)) + ''''''''
										EXEC(@SQLString)
									END
							END
							ELSE
							BEGIN
									-- Поиск ответственных
									DECLARE @OwnerUserFullName nvarchar(255) = (SELECT ISNULL(Value, '''')
									FROM #Rules
									WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor)
									
									IF (@OwnerUserFullName <> '''')
									BEGIN
										DECLARE @OwnerID uniqueidentifier = NULL
										
										SET @SQLString = N''SELECT TOP 1 @LeadForceIDOUT=ID FROM tbl_Contact WHERE UserFullName=N'''''' + @OwnerUserFullName + ''''''''
										SET @ParmDefinition = N''@LeadForceIDOUT nvarchar(50) OUTPUT''
										EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @LeadForceIDOUT=@LeadForceID OUTPUT
										
										IF (@LeadForceID IS NULL)
										BEGIN
											SET @LeadForceID = NEWID()
											INSERT INTO tbl_Contact(ID, SiteID, UserFullName, RefferURL, UserIP, StatusID)
											VALUES (@LeadForceID, @SiteID, @OwnerUserFullName, '''', '''', @StatusID)
										END
									END
							END
							
							-- Обновление LeadForceID в таблицу #TableNames
							UPDATE #TableNames
							SET LeadForceID=@LeadForceID
							WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor
						
							FETCH NEXT FROM TableName_Cursor INTO @TableName_Cursor
						END
						CLOSE TableName_Cursor
						DEALLOCATE TableName_Cursor
				
					FETCH NEXT FROM ParentTableName_Cursor INTO @ParentTableName_Cursor
				END
				CLOSE ParentTableName_Cursor
				DEALLOCATE ParentTableName_Cursor
				
				-- Создание связей между записями таблиц
				DECLARE @ContactID uniqueidentifier = (SELECT LeadForceID FROM #TableNames WHERE TableName=''tbl_Contact'')
				DECLARE @CompanyID uniqueidentifier = (SELECT LeadForceID FROM #TableNames WHERE TableName=''tbl_Company'')
				DECLARE @FKID uniqueidentifier = NULL
				
				IF (@ContactID IS NOT NULL)
				BEGIN
					IF (@CompanyID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET CompanyID=@CompanyID WHERE ID=@ContactID
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_Address'' AND ParentTableName=''tbl_Contact''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET AddressID=@FKID WHERE ID=@ContactID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_ContactType'' AND ParentTableName=''tbl_Contact''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET ContactTypeID=@FKID WHERE ID=@ContactID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''_Owner'' AND ParentTableName=''tbl_Contact''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET OwnerID=@FKID WHERE ID=@ContactID
						SET @FKID = NULL
					END
					
					-- Обновление тегов
					DECLARE @Tag_Cursor uniqueidentifier
					EXEC(''DECLARE Tag_Cursor CURSOR FOR SELECT ID FROM #Tags'')
					OPEN Tag_Cursor
					FETCH NEXT FROM Tag_Cursor INTO @Tag_Cursor
					WHILE @@FETCH_STATUS = 0
					BEGIN
						DECLARE @SiteTagID uniqueidentifier = NULL
						DECLARE @Operation int = NULL
						
						SELECT @SiteTagID=SiteTagID, @Operation=Operation
						FROM #Tags
						WHERE ID=@Tag_Cursor
						
						IF (@Operation=0)
						BEGIN
							DELETE FROM tbl_SiteTagObjects
							WHERE SiteTagID=@SiteTagID AND ObjectID=@ContactID
						END
						ELSE
						BEGIN
							IF (SELECT COUNT(*) FROM tbl_SiteTagObjects WHERE SiteTagID=@SiteTagID AND ObjectID=@ContactID) = 0
							BEGIN
								INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID) VALUES (@SiteTagID, @ContactID)
							END
						END
					
						FETCH NEXT FROM Tag_Cursor INTO @Tag_Cursor
					END
					CLOSE Tag_Cursor
					DEALLOCATE Tag_Cursor
				END
				
				IF (@CompanyID IS NOT NULL)
				BEGIN
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_Address'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET LocationAddressID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_CompanyType'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET CompanyTypeID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_CompanySector'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET CompanySectorID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''_Owner'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET OwnerID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
				END
				
				UPDATE #TableNames SET LeadForceID=NULL
		END
		
		FETCH NEXT FROM TmpImport_Cursor INTO @TmpImport_Cursor
	END
	CLOSE TmpImport_Cursor
	DEALLOCATE TmpImport_Cursor

	DROP TABLE #Rules
	DROP TABLE #TableNames
	DROP TABLE #Tags
	
	EXEC(''DROP TABLE TmpImport_'' + @IDString)
END'

commit
exec LBC_SetVersion 310
END

/*******************************************************************************
	2012-10-04
	Добавлен триггер для анонимных контактов
*******************************************************************************/
if ( dbo.LBC_Version() < 311 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'CREATE TRIGGER ContactCategory ON tbl_Contact
   FOR INSERT, UPDATE
AS 
BEGIN
	DECLARE @ContactID uniqueidentifier
	DECLARE @SiteID uniqueidentifier
	DECLARE @UserFullName nvarchar(255)
	DECLARE @Email nvarchar(255)
	DECLARE @Category int
	
	SELECT @ContactID=ID, @SiteID=SiteID, @UserFullName=UserFullName, @Email=Email, @Category=Category
	FROM inserted
	
	IF (@Category=4 AND ((@UserFullName IS NOT NULL AND @UserFullName<>'') OR (@Email IS NOT NULL AND @Email<>'')))
	BEGIN
		UPDATE tbl_Contact
		SET Category=0
		WHERE ID=@ContactID
	END
END'

commit
exec LBC_SetVersion 311
END

/*******************************************************************************
	2012-10-04
	Добавлена ссылка на форму шаблон
*******************************************************************************/
if ( dbo.LBC_Version() < 312 )
BEGIN
begin tran

ALTER TABLE [tbl_SiteActivityRules] ADD TemplateID uniqueidentifier NULL

ALTER TABLE [dbo].[tbl_SiteActivityRules]  WITH CHECK ADD  CONSTRAINT [FK_tbl_SiteActivityRules_tbl_SiteActivityRules_Template] FOREIGN KEY(TemplateID)
REFERENCES [dbo].[tbl_SiteActivityRules] ([ID])
ALTER TABLE [dbo].[tbl_SiteActivityRules] CHECK CONSTRAINT [FK_tbl_SiteActivityRules_tbl_SiteActivityRules_Template]

commit
exec LBC_SetVersion 312
END


/*******************************************************************************
	2012-10-09
	Добавлены типы мероприятий
*******************************************************************************/
if ( dbo.LBC_Version() < 313 )
BEGIN
begin tran

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[tbl_MassWorkflowType](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_tbl_MassWorkflowType] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

SET IDENTITY_INSERT [dbo].[tbl_MassWorkflowType] ON
INSERT [dbo].[tbl_MassWorkflowType] ([ID], [Title]) VALUES (1, N'Вебинар (online мероприятие)')
INSERT [dbo].[tbl_MassWorkflowType] ([ID], [Title]) VALUES (2, N'Семинар (offline мероприятие)')
INSERT [dbo].[tbl_MassWorkflowType] ([ID], [Title]) VALUES (3, N'Телемаркетинг')
INSERT [dbo].[tbl_MassWorkflowType] ([ID], [Title]) VALUES (4, N'Серия email сообщений')
INSERT [dbo].[tbl_MassWorkflowType] ([ID], [Title]) VALUES (5, N'Другое мероприятие')
SET IDENTITY_INSERT [dbo].[tbl_MassWorkflowType] OFF

ALTER TABLE [tbl_MassWorkflow] ADD MassWorkflowTypeID int NULL

ALTER TABLE [dbo].[tbl_MassWorkflow]  WITH CHECK ADD  CONSTRAINT [FK_tbl_MassWorkflow_tbl_MassWorkflowType] FOREIGN KEY(MassWorkflowTypeID)
REFERENCES [dbo].[tbl_MassWorkflowType] ([ID])
ALTER TABLE [dbo].[tbl_MassWorkflow] CHECK CONSTRAINT [FK_tbl_MassWorkflow_tbl_MassWorkflowType]

UPDATE tbl_Module 
SET Title = N'Мероприятия'
WHERE Name = 'MassWorkflows'

commit
exec LBC_SetVersion 313
END

/*******************************************************************************
	2012-10-09	
*******************************************************************************/
if ( dbo.LBC_Version() < 314 )
BEGIN
begin tran

DELETE FROM tbl_UserSettings WHERE ClassName = 'WebCounter.AdminPanel.MassWorkflows'

DECLARE @ModuleEditionId uniqueidentifier = NEWID()
INSERT INTO tbl_ModuleEdition (ID, ModuleID, Title)
VALUES (@ModuleEditionId, (SELECT ID FROM tbl_Module WHERE Name=N'MassWorkflows'), N'Основная редакция')
INSERT INTO tbl_ModuleEditionOption (ModuleEditionID, Title, SystemName, ModuleEditionOptionType)
VALUES (@ModuleEditionId, N'Отражать теги и фильтры', 'TagAndFiltersPanel', 0)

commit
exec LBC_SetVersion 314
END


/*******************************************************************************
	2012-10-12
*******************************************************************************/
if ( dbo.LBC_Version() < 315 )
BEGIN
begin tran

INSERT INTO tbl_CronJob (Name, [Assembly], [Type], Period)
VALUES (N'InvoiceNotification', N'Labitec.LeadForce.CronJobs.dll', N'Labitec.LeadForce.CronJobs.InvoiceNotificationJob', 1440)

commit
exec LBC_SetVersion 315
END

/*******************************************************************************
	2012-10-15
*******************************************************************************/
if ( dbo.LBC_Version() < 316 )
BEGIN
begin tran

CREATE TABLE [dbo].[tbl_InvoiceStatus](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_tbl_InvoiceStatus] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
SET IDENTITY_INSERT [dbo].[tbl_InvoiceStatus] ON
INSERT [dbo].[tbl_InvoiceStatus] ([ID], [Title]) VALUES (0, N'Не выставлен')
INSERT [dbo].[tbl_InvoiceStatus] ([ID], [Title]) VALUES (1, N'Ожидание оплаты')
INSERT [dbo].[tbl_InvoiceStatus] ([ID], [Title]) VALUES (2, N'Частично оплачен')
INSERT [dbo].[tbl_InvoiceStatus] ([ID], [Title]) VALUES (3, N'Оплачен')
INSERT [dbo].[tbl_InvoiceStatus] ([ID], [Title]) VALUES (4, N'Отменен')
SET IDENTITY_INSERT [dbo].[tbl_InvoiceStatus] OFF

ALTER TABLE [dbo].[tbl_Invoice]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Invoice_tbl_InvoiceStatus] FOREIGN KEY(InvoiceStatusID)
REFERENCES [dbo].[tbl_InvoiceStatus] ([ID])
ALTER TABLE [dbo].[tbl_Invoice] CHECK CONSTRAINT [FK_tbl_Invoice_tbl_InvoiceStatus]

commit
exec LBC_SetVersion 316
END

/*******************************************************************************
	2012-10-15
*******************************************************************************/
if ( dbo.LBC_Version() < 317 )
BEGIN
begin tran

ALTER TABLE [tbl_Invoice] ADD ModifiedAt datetime NULL
ALTER TABLE [tbl_Product] ADD ModifiedAt datetime NULL
ALTER TABLE [tbl_Product] ADD CreatedAt datetime NULL

commit
exec LBC_SetVersion 317
END

/*******************************************************************************
	2012-10-15
*******************************************************************************/
if ( dbo.LBC_Version() < 318 )
BEGIN
begin tran

CREATE TABLE [dbo].[tbl_ProductStatus](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_tbl_ProductStatus] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
SET IDENTITY_INSERT [dbo].[tbl_ProductStatus] ON
INSERT [dbo].[tbl_ProductStatus] ([ID], [Title]) VALUES (0, N'В планах')
INSERT [dbo].[tbl_ProductStatus] ([ID], [Title]) VALUES (1, N'Текущий')
INSERT [dbo].[tbl_ProductStatus] ([ID], [Title]) VALUES (2, N'Архив')
SET IDENTITY_INSERT [dbo].[tbl_ProductStatus] OFF

ALTER TABLE [dbo].[tbl_Product]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Product_tbl_ProductStatus] FOREIGN KEY(ProductStatusID)
REFERENCES [dbo].[tbl_ProductStatus] ([ID])
ALTER TABLE [dbo].[tbl_Product] CHECK CONSTRAINT [FK_tbl_Product_tbl_ProductStatus]

commit
exec LBC_SetVersion 318
END
/*******************************************************************************
	2012-10-16
*******************************************************************************/
if ( dbo.LBC_Version() < 319 )
BEGIN
begin tran

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[API_GetProducts]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[API_GetProducts]
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[API_UpdateProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[API_UpdateProduct]
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[API_GetInvoices]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[API_GetInvoices]
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[API_UpdateInvoice]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[API_UpdateInvoice]
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[API_GetUsers]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[API_GetUsers]
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[API_UpdateUser]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[API_UpdateUser]
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[API_UpdateUser]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[API_UpdateUser]
	(
		@SiteID uniqueidentifier, 		
	    @ParamsXml xml
	)
AS
BEGIN
	DECLARE @UserID uniqueidentifier = NULL
	SET @UserID = @ParamsXml.value(''(/LeadForceRequest/User/@UserID)[1]'',''uniqueidentifier'')
	
	IF @UserID IS NULL
	    RETURN 0
	    
	DECLARE @ContactID uniqueidentifier = NULL
	SET @ContactID = @ParamsXml.value(''(/LeadForceRequest/User/@ContactID)[1]'',''uniqueidentifier'')
	
	DECLARE @Login nvarchar(255) = NULL
	SET @Login = @ParamsXml.value(''(/LeadForceRequest/User/@Login)[1]'',''nvarchar(255)'')
	
	DECLARE @Password nvarchar(255) = NULL
	SET @Password = @ParamsXml.value(''(/LeadForceRequest/User/@Password)[1]'',''nvarchar(255)'')
	
	DECLARE @IsActive bit = NULL
	SET @IsActive = @ParamsXml.value(''(/LeadForceRequest/User/@IsActive)[1]'',''bit'')
	
	DECLARE @AccessProfile nvarchar(256) = NULL
	SET @AccessProfile = @ParamsXml.value(''(/LeadForceRequest/User/@AccessProfile)[1]'',''nvarchar(256)'')
	DECLARE @AccessProfileID uniqueidentifier = NULL	
	IF @AccessProfile IS NOT NULL AND @AccessProfile <> ''''
	    SELECT TOP 1 @AccessProfileID = ID FROM tbl_AccessProfile WHERE Title = @AccessProfile
	
	DECLARE @AccessLevelID int = NULL
	SET @AccessLevelID = @ParamsXml.value(''(/LeadForceRequest/User/@AccessLevelID)[1]'',''int'')
	
	IF @AccessLevelID = 2
		SET @AccessLevelID = 1
	
	IF EXISTS(SELECT * FROM tbl_User WHERE ID = @UserID AND SiteID = @SiteID)
    BEGIN
		UPDATE tbl_User
		SET ContactID = @ContactID, [Login] = @Login, [Password] = @Password, IsActive = @IsActive,
		AccessProfileID = @AccessProfileID, AccessLevelID = @AccessLevelID
		WHERE ID = @UserID AND SiteID = @SiteID		
    END
    ELSE IF NOT EXISTS(SELECT * FROM tbl_User WHERE [Login] = @Login)
    BEGIN
		INSERT INTO tbl_User([ID],[SiteID],[ContactID],[Login],[Password],[IsActive],[AccessProfileID],[AccessLevelID])	
		VALUES (@UserID, @SiteID, @ContactID, @Login, @Password, @IsActive, @AccessProfileID, @AccessLevelID)
    END
END
' 
END
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[API_GetUsers]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[API_GetUsers]
	(
	    @SiteID uniqueidentifier,
	    @ParamsXml xml
	)
AS
BEGIN
	
	DECLARE @UserID uniqueidentifier = NULL
	SET @UserID = @ParamsXml.value(''(/LeadForceRequest/User/Params/UserID/@value)[1]'',''uniqueidentifier'')
	
	DECLARE @ContactID uniqueidentifier = NULL
	SET @ContactID = @ParamsXml.value(''(/LeadForceRequest/User/Params/ContactID/@value)[1]'',''uniqueidentifier'')
	
	DECLARE @Login nvarchar(255) = NULL
	SET @Login = @ParamsXml.value(''(/LeadForceRequest/User/Params/Login/@value)[1]'',''nvarchar(255)'')
	
	DECLARE @IsActive bit = NULL
	SET @IsActive = @ParamsXml.value(''(/LeadForceRequest/User/Params/IsActive/@value)[1]'',''bit'')
	
	DECLARE @AccessProfile nvarchar(255) = NULL
	SET @AccessProfile = @ParamsXml.value(''(/LeadForceRequest/User/Params/AccessProfile/@value)[1]'',''nvarchar(255)'')
	
	DECLARE @AccessLevelID int = NULL
	SET @AccessLevelID = @ParamsXml.value(''(/LeadForceRequest/User/Params/AccessLevelID/@value)[1]'',''int'')
	
	SELECT U.ID as ''@UserID'',
	       U.ContactID AS ''@ContactID'',
	       U.[Login] AS ''@Login'',
	       U.IsActive AS ''@IsActive'',
	       AP.Title AS ''@AccessProfile'',
	       U.AccessLevelID AS ''@AccessLevelID''
	FROM tbl_User as U LEFT JOIN tbl_AccessProfile AS AP ON U.AccessProfileID = AP.ID
	WHERE U.SiteID = @SiteID
	      AND (@UserID IS NULL OR U.ID = @UserID)
	      AND (@ContactID IS NULL OR U.ContactID = @ContactID)
	      AND (@Login IS NULL OR U.[Login] LIKE N''%'' + @Login + ''%'')
	      AND (@IsActive IS NULL OR U.IsActive = @IsActive)
	      AND (@AccessLevelID IS NULL OR U.AccessLevelID = @AccessLevelID)
	      AND (@AccessProfile IS NULL OR AP.Title LIKE N''%'' + @AccessProfile + ''%'')	      
	FOR XML PATH(''User''), TYPE, ELEMENTS, ROOT(''Users'')
END' 
END
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[API_UpdateInvoice]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[API_UpdateInvoice]
	(
		@SiteID uniqueidentifier,
		@ContactID uniqueidentifier = NULL,	
	    @ParamsXml xml
	)
AS
BEGIN
	DECLARE @IsPendingPayment bit = 0
	DECLARE @IsNew bit = 0
	DECLARE @PreviousInvoiceStatusID int = NULL
	
	DECLARE @InvoiceID uniqueidentifier = NULL
	SET @InvoiceID = @ParamsXml.value(''(/LeadForceRequest/Invoice/@InvoiceID)[1]'',''uniqueidentifier'')
	
	IF @InvoiceID IS NULL
	    RETURN 0
	    
	DECLARE @Type nvarchar(256) = NULL
	SET @Type = @ParamsXml.value(''(/LeadForceRequest/Invoice/Type)[1]'',''nvarchar(256)'')
	DECLARE @InvoiceTypeID uniqueidentifier = NULL	
	IF @Type IS NOT NULL AND @Type <> ''''
	    SELECT TOP 1 @InvoiceTypeID = ID FROM tbl_InvoiceType WHERE Title = @Type AND SiteID = @SiteID
	    
	DECLARE @Status nvarchar(256) = NULL
	SET @Status = @ParamsXml.value(''(/LeadForceRequest/Invoice/Status)[1]'',''nvarchar(256)'')
	DECLARE @InvoiceStatusID int = NULL	
	IF @Status IS NOT NULL AND @Status <> ''''
	    SELECT TOP 1 @InvoiceStatusID = ID FROM tbl_InvoiceStatus WHERE Title = @Status
	    
	DECLARE @Note nvarchar(max) = NULL
	SET @Note = @ParamsXml.value(''(/LeadForceRequest/Invoice/Note)[1]'',''nvarchar(max)'')
	
	DECLARE @BuyerCompany nvarchar(255) = NULL
	SET @BuyerCompany = @ParamsXml.value(''(/LeadForceRequest/Invoice/Buyer/Company)[1]'',''nvarchar(255)'')
	DECLARE @BuyerCompanyID uniqueidentifier = NULL	
	IF @BuyerCompany IS NOT NULL AND @BuyerCompany <> ''''
	    SELECT TOP 1 @BuyerCompanyID = ID FROM tbl_Company WHERE Name = @BuyerCompany AND SiteID = @SiteID
	    
	DECLARE @BuyerCompanyLegalAccount nvarchar(256) = NULL
	SET @BuyerCompanyLegalAccount = @ParamsXml.value(''(/LeadForceRequest/Invoice/Buyer/LegalAccount)[1]'',''nvarchar(256)'')
	DECLARE @BuyerCompanyLegalAccountID uniqueidentifier = NULL	
	IF @BuyerCompanyLegalAccount IS NOT NULL AND @BuyerCompanyLegalAccount <> ''''
	    SELECT TOP 1 @BuyerCompanyLegalAccountID = ID FROM tbl_CompanyLegalAccount WHERE Title = @BuyerCompanyLegalAccount AND SiteID = @SiteID
	    
	DECLARE @BuyerContact nvarchar(255) = NULL
	SET @BuyerContact = @ParamsXml.value(''(/LeadForceRequest/Invoice/Buyer/Contact)[1]'',''nvarchar(255)'')
	DECLARE @BuyerContactID uniqueidentifier = NULL	
	IF @BuyerContact IS NOT NULL AND @BuyerContact <> ''''
	    SELECT TOP 1 @BuyerContactID = ID FROM tbl_Contact WHERE UserFullName = @BuyerContact AND SiteID = @SiteID
	    
	DECLARE @ExecutorCompany nvarchar(255) = NULL
	SET @ExecutorCompany = @ParamsXml.value(''(/LeadForceRequest/Invoice/Executor/Company)[1]'',''nvarchar(255)'')
	DECLARE @ExecutorCompanyID uniqueidentifier = NULL	
	IF @ExecutorCompany IS NOT NULL AND @ExecutorCompany <> ''''
	    SELECT TOP 1 @ExecutorCompanyID = ID FROM tbl_Company WHERE Name = @ExecutorCompany AND SiteID = @SiteID
	    
	DECLARE @ExecutorCompanyLegalAccount nvarchar(256) = NULL
	SET @ExecutorCompanyLegalAccount = @ParamsXml.value(''(/LeadForceRequest/Invoice/Executor/LegalAccount)[1]'',''nvarchar(256)'')
	DECLARE @ExecutorCompanyLegalAccountID uniqueidentifier = NULL	
	IF @ExecutorCompanyLegalAccount IS NOT NULL AND @ExecutorCompanyLegalAccount <> ''''
	    SELECT TOP 1 @ExecutorCompanyLegalAccountID = ID FROM tbl_CompanyLegalAccount WHERE Title = @ExecutorCompanyLegalAccount AND SiteID = @SiteID
	    
	DECLARE @ExecutorContact nvarchar(255) = NULL
	SET @ExecutorContact = @ParamsXml.value(''(/LeadForceRequest/Invoice/Executor/Contact)[1]'',''nvarchar(255)'')
	DECLARE @ExecutorContactID uniqueidentifier = NULL	
	IF @ExecutorContact IS NOT NULL AND @ExecutorContact <> ''''
	    SELECT TOP 1 @ExecutorContactID = ID FROM tbl_Contact WHERE UserFullName = @ExecutorContact AND SiteID = @SiteID	    		    
	    
	DECLARE @InvoiceAmount money = NULL
	SET @InvoiceAmount = @ParamsXml.value(''(/LeadForceRequest/Invoice/Finance/Amount)[1]'',''money'')
	
	DECLARE @Paid money = NULL
	SET @Paid = @ParamsXml.value(''(/LeadForceRequest/Invoice/Finance/Paid)[1]'',''money'')
	
	DECLARE @PaymentDatePlanned datetime = NULL
	SET @PaymentDatePlanned = @ParamsXml.value(''(/LeadForceRequest/Invoice/Finance/PaymentDatePlanned)[1]'',''datetime'')
	
	DECLARE @PaymentDateActual datetime = NULL
	SET @PaymentDateActual = @ParamsXml.value(''(/LeadForceRequest/Invoice/Finance/PaymentDateActual)[1]'',''datetime'')
	
	DECLARE @IsExistBuyerComplaint bit = NULL
	SET @IsExistBuyerComplaint = @ParamsXml.value(''(/LeadForceRequest/Invoice/Finance/IsExistBuyerComplaint)[1]'',''bit'')
	
	DECLARE @IsPaymentDateFixedByContract bit = NULL
	SET @IsPaymentDateFixedByContract = @ParamsXml.value(''(/LeadForceRequest/Invoice/Finance/IsPaymentDateFixedByContract)[1]'',''bit'')
	
	DECLARE @OrderNumber nvarchar(255) = NULL
	SET @OrderNumber = @ParamsXml.value(''(/LeadForceRequest/Invoice/OrderNumber)[1]'',''nvarchar(255)'')
	DECLARE @OrderID uniqueidentifier = NULL	
	IF @OrderNumber IS NOT NULL AND @OrderNumber <> ''''
	    SELECT TOP 1 @OrderID = ID FROM tbl_Order WHERE Number = @OrderNumber AND SiteID = @SiteID	    		    
	    
	DECLARE @PriceList nvarchar(250) = NULL
	SET @PriceList = @ParamsXml.value(''(/LeadForceRequest/Invoice/PriceList)[1]'',''nvarchar(250)'')
	DECLARE @PriceListID uniqueidentifier = NULL	
	IF @PriceListID IS NOT NULL AND @PriceListID <> ''''
	    SELECT TOP 1 @PriceListID = ID FROM tbl_PriceList WHERE Title = @PriceList AND SiteID = @SiteID
	
	IF EXISTS(SELECT * FROM tbl_Invoice WHERE ID = @InvoiceID AND SiteID = @SiteID)
    BEGIN
		SELECT @PreviousInvoiceStatusID = InvoiceStatusID
		FROM tbl_Invoice
		WHERE ID = @InvoiceID AND SiteID = @SiteID
    
		UPDATE tbl_Invoice
		SET InvoiceTypeID = @InvoiceTypeID, InvoiceStatusID = @InvoiceStatusID, Note = @Note, BuyerCompanyID = @BuyerCompanyID,
		BuyerCompanyLegalAccountID = @BuyerCompanyLegalAccountID, BuyerContactID = @BuyerContactID, ExecutorCompanyID = @ExecutorCompanyID,
		ExecutorCompanyLegalAccountID = @ExecutorCompanyLegalAccountID, ExecutorContactID = @ExecutorContactID, InvoiceAmount = @InvoiceAmount,
		Paid = @Paid, PaymentDatePlanned = @PaymentDatePlanned, PaymentDateActual = @PaymentDateActual, OrderID = @OrderID,
		PriceListID = @PriceListID, IsExistBuyerComplaint = @IsExistBuyerComplaint, IsPaymentDateFixedByContract = @IsPaymentDateFixedByContract, ModifiedAt = getdate()
		WHERE ID = @InvoiceID AND SiteID = @SiteID
		
		IF @PreviousInvoiceStatusID <> @InvoiceStatusID AND @InvoiceStatusID = 1
			SET @IsPendingPayment = 1	
    END
    ELSE
    BEGIN
		INSERT INTO tbl_Invoice(
			[ID],
			[SiteID],
			[Number],
			[SerialNumber],
			[CreatedAt],
			[InvoiceTypeID],
			[InvoiceStatusID],
			[Note],
			[BuyerCompanyID],
			[BuyerCompanyLegalAccountID],
			[BuyerContactID],
			[ExecutorCompanyID],
			[ExecutorCompanyLegalAccountID],
			[ExecutorContactID],
			[InvoiceAmount],
			[Paid],
			[PaymentDatePlanned],
			[PaymentDateActual],
			[OrderID],
			[PriceListID],
			[OwnerID],
			[IsExistBuyerComplaint],
			[IsPaymentDateFixedByContract]
		)	
		VALUES 
		(
			@InvoiceID,
			@SiteID,
			'''',
			0,
			getdate(),
			@InvoiceTypeID,
			@InvoiceStatusID,
			@Note,
			@BuyerCompanyID,
			@BuyerCompanyLegalAccountID,
			@BuyerContactID,
			@ExecutorCompanyID,
			@ExecutorCompanyLegalAccountID,
			@ExecutorContactID,
			@InvoiceAmount,
			@Paid,
			@PaymentDatePlanned,
			@PaymentDateActual,
			@OrderID,
			@PriceListID,
			@ContactID,
			@IsExistBuyerComplaint,
			@IsPaymentDateFixedByContract
		)
		SET @IsNew = 1
    END
	
	DECLARE @IPInvoiceProductID uniqueidentifier
	DECLARE @IPProductID uniqueidentifier
	DECLARE @IPAnyProductName nvarchar(255)
	DECLARE @IPSerialNumber nvarchar(255)
	DECLARE @IPPriceListID uniqueidentifier
	DECLARE @IPQuantity decimal(18,4)
	DECLARE @IPUnitID uniqueidentifier
	DECLARE @IPCurrencyID uniqueidentifier
	DECLARE @IPRate money
	DECLARE @IPCurrencyPrice money
	DECLARE @IPCurrencyAmount money
	DECLARE @IPPrice money
	DECLARE @IPAmount money
	DECLARE @IPSpecialOfferPriceListID uniqueidentifier
	DECLARE @IPDiscount decimal(18,4)
	DECLARE @IPCurrencyDiscountAmount money
	DECLARE @IPDiscountAmount money
	DECLARE @IPCurrencyTotalAmount money
	DECLARE @IPTotalAmount money
	DECLARE @IPTaskID uniqueidentifier
	
	DECLARE @InvoiceProducts_Cursor xml
	DECLARE InvoiceProducts_Cursor CURSOR FOR
	SELECT T.c.query(''.'') AS result
	FROM   @ParamsXml.nodes(''/LeadForceRequest/Invoice/InvoiceProducts/InvoiceProduct'') T(c)
	OPEN InvoiceProducts_Cursor
	FETCH NEXT FROM InvoiceProducts_Cursor INTO @InvoiceProducts_Cursor
	WHILE @@FETCH_STATUS = 0
	BEGIN	
		SET @IPInvoiceProductID = NULL
		SET @IPProductID = NULL
		SET @IPAnyProductName = NULL
		SET @IPSerialNumber = NULL
		SET @IPPriceListID = NULL
		SET @IPQuantity = NULL
		SET @IPUnitID = NULL
		SET @IPCurrencyID = NULL
		SET @IPRate = NULL
		SET @IPCurrencyPrice = NULL
		SET @IPCurrencyAmount = NULL
		SET @IPPrice = NULL
		SET @IPAmount = NULL
		SET @IPSpecialOfferPriceListID = NULL
		SET @IPDiscount = NULL
		SET @IPCurrencyDiscountAmount = NULL
		SET @IPDiscountAmount = NULL
		SET @IPCurrencyTotalAmount = NULL
		SET @IPTotalAmount = NULL
		SET @IPTaskID = NULL
				
		SET @IPInvoiceProductID = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/@InvoiceProductID)[1]'',''uniqueidentifier'')
		SELECT TOP 1 @IPProductID = ID FROM tbl_Product WHERE Title = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/Product)[1]'',''nvarchar(250)'') AND SiteID = @SiteID
		SET @IPAnyProductName = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/AnyProductName)[1]'',''nvarchar(255)'')
		SET @IPSerialNumber = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/SerialNumber)[1]'',''nvarchar(255)'')
		SELECT TOP 1 @IPPriceListID = ID FROM tbl_PriceList WHERE Title = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/CostInOrder/PriceList)[1]'',''nvarchar(250)'') AND SiteID = @SiteID
		SET @IPQuantity = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/CostInOrder/Quantity)[1]'',''decimal(18,4)'')
		SELECT TOP 1 @IPUnitID = ID FROM tbl_Unit WHERE Title = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/CostInOrder/Unit)[1]'',''nvarchar(50)'') AND SiteID = @SiteID
		SELECT TOP 1 @IPCurrencyID = ID FROM tbl_Currency WHERE Name = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/CostInOrder/Currency)[1]'',''nvarchar(255)'') AND SiteID = @SiteID
		SET @IPRate = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/CostInOrder/Rate)[1]'',''money'')
		SET @IPCurrencyPrice = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/CostInOrder/CurrencyPrice)[1]'',''money'')
		SET @IPCurrencyAmount = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/CostInOrder/CurrencyAmount)[1]'',''money'')
		SET @IPPrice = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/CostInOrder/Price)[1]'',''money'')
		SET @IPAmount = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/CostInOrder/Amount)[1]'',''money'')
		SELECT TOP 1 @IPSpecialOfferPriceListID = ID FROM tbl_PriceList WHERE Title = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/Discount/PriceList)[1]'',''nvarchar(250)'') AND SiteID = @SiteID		
		SET @IPDiscount = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/Discount/Discount)[1]'',''decimal(18,4)'')
		SET @IPCurrencyDiscountAmount = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/Discount/CurrencyDiscountAmount)[1]'',''money'')
		SET @IPDiscountAmount = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/Discount/DiscountAmount)[1]'',''money'')
		SET @IPCurrencyTotalAmount = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/Total/CurrencyTotalAmount)[1]'',''money'')
		SET @IPTotalAmount = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/Total/TotalAmount)[1]'',''money'')
		SELECT TOP 1 @IPTaskID = ID FROM tbl_Task WHERE Title = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/Task)[1]'',''nvarchar(2000)'') AND SiteID = @SiteID
		
		IF EXISTS(SELECT * FROM tbl_InvoiceProducts WHERE ID = @IPInvoiceProductID AND InvoiceID = @InvoiceID)
		BEGIN
			UPDATE tbl_InvoiceProducts
			SET ProductID = @IPProductID, AnyProductName = @IPAnyProductName, SerialNumber = @IPSerialNumber,
			PriceListID = @IPPriceListID, Quantity = @IPQuantity, UnitID = @IPUnitID, CurrencyID = @IPCurrencyID,
			Rate = @IPRate, CurrencyPrice = @IPCurrencyPrice, CurrencyAmount = @IPCurrencyAmount, Price = @IPPrice,
			Amount = @IPAmount, SpecialOfferPriceListID = @IPSpecialOfferPriceListID,
			Discount = @IPDiscount, CurrencyDiscountAmount = @IPCurrencyDiscountAmount, DiscountAmount = @IPDiscountAmount,
			CurrencyTotalAmount = @IPCurrencyTotalAmount, TotalAmount = @IPTotalAmount, TaskID = @IPTaskID
			WHERE ID = @IPInvoiceProductID AND InvoiceID = @InvoiceID
		END
		ELSE
		BEGIN
			INSERT INTO tbl_InvoiceProducts
			(
				[ID],
				[InvoiceID],
				[ProductID],
				[AnyProductName],
				[SerialNumber],
				[PriceListID],
				[Quantity],
				[UnitID],
				[CurrencyID],
				[Rate],
				[CurrencyPrice],
				[CurrencyAmount],
				[Price],
				[Amount],
				[SpecialOfferPriceListID],
				[Discount],
				[CurrencyDiscountAmount],
				[DiscountAmount],
				[CurrencyTotalAmount],
				[TotalAmount],
				[TaskID]
			)
			VALUES
			(
				@IPInvoiceProductID,
				@InvoiceID,
				@IPProductID,
				@IPAnyProductName,
				@IPSerialNumber,
				@IPPriceListID,
				@IPQuantity,
				@IPUnitID,
				@IPCurrencyID,
				@IPRate,
				@IPCurrencyPrice,
				@IPCurrencyAmount,
				@IPPrice,
				@IPAmount,
				@IPSpecialOfferPriceListID,
				@IPDiscount,
				@IPCurrencyDiscountAmount,
				@IPDiscountAmount,
				@IPCurrencyTotalAmount,
				@IPTotalAmount,
				@IPTaskID)
		END
		
		
		FETCH NEXT FROM InvoiceProducts_Cursor INTO @InvoiceProducts_Cursor
	END
	CLOSE InvoiceProducts_Cursor
	DEALLOCATE InvoiceProducts_Cursor
	
    
    SELECT @IsPendingPayment AS IsPendingPayment, @IsNew AS IsNew, @InvoiceID AS InvoiceID
END
' 
END
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[API_GetInvoices]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[API_GetInvoices]
	(
	    @SiteID uniqueidentifier,
	    @ParamsXml xml
	)
AS
BEGIN
	DECLARE @InvoiceID uniqueidentifier = NULL
	SET @InvoiceID = @ParamsXml.value(''(/LeadForceRequest/Invoice/Params/InvoiceID/@value)[1]'',''uniqueidentifier'')
	
	DECLARE @CreatedAtStart DATETIME = NULL
    DECLARE @CreatedAtEnd DATETIME = NULL        
	SELECT @CreatedAtStart = CreateDate.Dates.value(''@start'',''datetime''), @CreatedAtEnd = CreateDate.Dates.value(''@end'',''datetime'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Invoice/Params/CreatedAt'') as CreateDate(Dates)
	
	DECLARE @ModifiedAtStart DATETIME = NULL
    DECLARE @ModifiedAtEnd DATETIME = NULL        
	SELECT @ModifiedAtStart = CreateDate.Dates.value(''@start'',''datetime''), @ModifiedAtEnd = CreateDate.Dates.value(''@end'',''datetime'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Invoice/Params/ModifiedAt'') as CreateDate(Dates)
	
	DECLARE @InvoiceType nvarchar(256) = NULL
	SET @InvoiceType = @ParamsXml.value(''(/LeadForceRequest/Invoice/Params/InvoiceType/@value)[1]'',''nvarchar(256)'')
	
	DECLARE @InvoiceStatus nvarchar(256) = NULL
	SET @InvoiceStatus = @ParamsXml.value(''(/LeadForceRequest/Invoice/Params/InvoiceStatus/@value)[1]'',''nvarchar(256)'')
	
	DECLARE @BuyerCompany nvarchar(255) = NULL
	SET @BuyerCompany = @ParamsXml.value(''(/LeadForceRequest/Invoice/Params/BuyerCompany/@value)[1]'',''nvarchar(255)'')
	
	DECLARE @BuyerCompanyLegalAccount nvarchar(256) = NULL
	SET @BuyerCompanyLegalAccount = @ParamsXml.value(''(/LeadForceRequest/Invoice/Params/BuyerCompanyLegalAccount/@value)[1]'',''nvarchar(256)'')
	
	DECLARE @ExecutorCompany nvarchar(255) = NULL
	SET @ExecutorCompany = @ParamsXml.value(''(/LeadForceRequest/Invoice/Params/ExecutorCompany/@value)[1]'',''nvarchar(255)'')
	
	DECLARE @ExecutorCompanyLegalAccount nvarchar(256) = NULL
	SET @ExecutorCompanyLegalAccount = @ParamsXml.value(''(/LeadForceRequest/Invoice/Params/ExecutorCompanyLegalAccount/@value)[1]'',''nvarchar(256)'')

	SELECT INV.ID as ''@InvoiceID'',
	       INV.CreatedAt AS ''@CreatedAt'',
	       INV.ModifiedAt AS ''@ModifiedAt'',
	       INV.Number AS ''@Number'',	       
	       INVSTS.Title AS ''Status'',
	       INVTYPE.Title AS ''Type'',
	       INV.Note AS ''Note'',
	       BUYERCMPNY.Name AS ''Buyer/Company'',
	       BUYERCMPNYLA.Title AS ''Buyer/LegalAccount'',
	       BUYERCONTACT.UserFullName AS ''Buyer/Contact'',
	       EXECCMPNY.Name AS ''Executor/Company'',
	       EXECCMPNYLA.Title AS ''Executor/LegalAccount'',
	       EXECCONTACT.UserFullName AS ''Executor/Contact'',
	       INV.InvoiceAmount AS ''Finance/Amount'',
	       INV.Paid AS ''Finance/Paid'',
	       INV.PaymentDatePlanned AS ''Finance/PaymentDatePlanned'',
	       INV.PaymentDateActual AS ''Finance/PaymentDateActual'',
	       INV.IsExistBuyerComplaint AS ''Finance/IsExistBuyerComplaint'',
	       INV.IsPaymentDateFixedByContract AS ''Finance/IsPaymentDateFixedByContract'',
	       ORDR.Number AS ''OrderNumber'',
	       PL.Title AS ''PriceList'',	       
	       (
				SELECT INVP.ID AS ''@InvoiceProductID'',
					   P.Title AS ''Product'',
					   T.Title AS ''Task'',
					   INVP.AnyProductName AS ''AnyProductName'',
					   INVP.SerialNumber AS ''SerialNumber'',
					   INVPPL.Title AS ''CostInOrder/PriceList'',
					   INVP.Quantity AS ''CostInOrder/Quantity'',
					   U.Title AS ''CostInOrder/Unit'',
					   C.Name AS ''CostInOrder/Currency'',
					   INVP.Rate AS ''CostInOrder/Rate'',
					   INVP.CurrencyPrice AS ''CostInOrder/CurrencyPrice'',
					   INVP.CurrencyAmount AS ''CostInOrder/CurrencyAmount'',
					   INVP.Price AS ''CostInOrder/Price'',
					   INVP.Amount AS ''CostInOrder/Amount'',
					   INVPSOPL.Title AS ''Discount/PriceList'',
					   INVP.Discount AS ''Discount/Discount'',
					   INVP.CurrencyDiscountAmount AS ''Discount/CurrencyDiscountAmount'',
					   INVP.DiscountAmount AS ''Discount/DiscountAmount'',
					   INVP.CurrencyTotalAmount AS ''Total/CurrencyTotalAmount'',
					   INVP.TotalAmount AS ''Total/TotalAmount''
				FROM tbl_InvoiceProducts AS INVP LEFT JOIN tbl_Product AS P ON INVP.ProductID = P.ID
				LEFT JOIN tbl_Task AS T ON INVP.TaskID = T.ID
				LEFT JOIN tbl_PriceList AS INVPPL ON INVP.PriceListID = INVPPL.ID
				LEFT JOIN tbl_Unit AS U ON INVP.UnitID = U.ID
				LEFT JOIN tbl_Currency AS C ON INVP.CurrencyID = C.ID
				LEFT JOIN tbl_PriceList AS INVPSOPL ON INVP.SpecialOfferPriceListID = INVPSOPL.ID
				WHERE INVP.InvoiceID = INV.ID				
				FOR XML PATH(''InvoiceProduct''), TYPE, ELEMENTS, ROOT(''InvoiceProducts'')
	       )
	FROM tbl_Invoice as INV LEFT JOIN tbl_InvoiceStatus AS INVSTS ON INV.InvoiceStatusID = INVSTS.ID
	LEFT JOIN tbl_InvoiceType AS INVTYPE ON INV.InvoiceTypeID = INVTYPE.ID
	LEFT JOIN tbl_Company AS BUYERCMPNY ON INV.BuyerCompanyID = BUYERCMPNY.ID
	LEFT JOIN tbl_CompanyLegalAccount AS BUYERCMPNYLA ON INV.BuyerCompanyLegalAccountID = BUYERCMPNYLA.ID
	LEFT JOIN tbl_Contact AS BUYERCONTACT ON INV.BuyerContactID = BUYERCONTACT.ID
	LEFT JOIN tbl_Company AS EXECCMPNY ON INV.ExecutorCompanyID = EXECCMPNY.ID
	LEFT JOIN tbl_CompanyLegalAccount AS EXECCMPNYLA ON INV.ExecutorCompanyLegalAccountID = EXECCMPNYLA.ID
	LEFT JOIN tbl_Contact AS EXECCONTACT ON INV.ExecutorContactID = EXECCONTACT.ID
	LEFT JOIN tbl_Order AS ORDR ON INV.OrderID = ORDR.ID
	LEFT JOIN tbl_PriceList AS PL ON INV.PriceListID = PL.ID
	WHERE INV.SiteID = @SiteID
	      AND (@InvoiceID IS NULL OR INV.ID = @InvoiceID)
	      AND (@CreatedAtStart IS NULL AND @CreatedAtEnd IS NULL OR (@CreatedAtStart IS NOT NULL AND @CreatedAtEnd IS NOT NULL AND INV.CreatedAt >= @CreatedAtStart AND INV.CreatedAt <= @CreatedAtEnd))
	      AND (@ModifiedAtStart IS NULL AND @ModifiedAtEnd IS NULL OR (@ModifiedAtStart IS NOT NULL AND @ModifiedAtEnd IS NOT NULL AND INV.ModifiedAt >= @ModifiedAtStart AND INV.ModifiedAt <= @ModifiedAtEnd))
	      AND (@InvoiceType IS NULL OR INVTYPE.Title LIKE N''%'' + @InvoiceType + ''%'')
	      AND (@InvoiceStatus IS NULL OR INVSTS.Title LIKE N''%'' + @InvoiceStatus + ''%'')
	      AND (@BuyerCompany IS NULL OR BUYERCMPNY.Name LIKE N''%'' + @BuyerCompany + ''%'')
	      AND (@BuyerCompanyLegalAccount IS NULL OR BUYERCMPNYLA.Title LIKE N''%'' + @BuyerCompanyLegalAccount + ''%'')
	      AND (@ExecutorCompany IS NULL OR EXECCMPNY.Name LIKE N''%'' + @ExecutorCompany + ''%'')
	      AND (@ExecutorCompanyLegalAccount IS NULL OR EXECCMPNYLA.Title LIKE N''%'' + @ExecutorCompanyLegalAccount + ''%'')
	FOR XML PATH(''Invoice''), TYPE, ELEMENTS, ROOT(''Invoices'')
END' 
END
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[API_UpdateProduct]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[API_UpdateProduct]
	(
		@SiteID uniqueidentifier,
		@ContactID uniqueidentifier = NULL,	
	    @ParamsXml xml
	)
AS
BEGIN
	DECLARE @ProductID uniqueidentifier = NULL
	SET @ProductID = @ParamsXml.value(''(/LeadForceRequest/Product/@ProductID)[1]'',''uniqueidentifier'')
	
	IF @ProductID IS NULL
	    RETURN 0
	    
	DECLARE @Title nvarchar(250) = NULL
	SET @Title = @ParamsXml.value(''(/LeadForceRequest/Product/Title)[1]'',''nvarchar(250)'')
	
	DECLARE @SKU nvarchar(250) = NULL
	SET @SKU = @ParamsXml.value(''(/LeadForceRequest/Product/SKU)[1]'',''nvarchar(250)'')
	
	DECLARE @Status nvarchar(256) = NULL
	SET @Status = @ParamsXml.value(''(/LeadForceRequest/Product/Status)[1]'',''nvarchar(256)'')
	DECLARE @ProductStatusID int = NULL	
	IF @Status IS NOT NULL AND @Status <> ''''
	    SELECT TOP 1 @ProductStatusID = ID FROM tbl_ProductStatus WHERE Title = @Status
	    
	DECLARE @Category nvarchar(250) = NULL
	SET @Category = @ParamsXml.value(''(/LeadForceRequest/Product/Category)[1]'',''nvarchar(250)'')
	DECLARE @ProductCategoryID uniqueidentifier = NULL
	IF @Category IS NOT NULL AND @Category <> ''''
		SELECT TOP 1 @ProductCategoryID = ID FROM tbl_ProductCategory WHERE Title = @Category AND SiteID = @SiteID
		
	DECLARE @Brand nvarchar(250) = NULL
	SET @Brand = @ParamsXml.value(''(/LeadForceRequest/Product/Brand)[1]'',''nvarchar(250)'')
	DECLARE @BrandID uniqueidentifier = NULL
	IF @Brand IS NOT NULL AND @Brand <> ''''
		SELECT TOP 1 @BrandID = ID FROM tbl_Brand WHERE Title = @Brand AND SiteID = @SiteID
	
	DECLARE @Type nvarchar(250) = NULL
	SET @Type = @ParamsXml.value(''(/LeadForceRequest/Product/Type)[1]'',''nvarchar(250)'')
	DECLARE @ProductTypeID uniqueidentifier = NULL
	IF @Type IS NOT NULL AND @Type <> ''''
		SELECT TOP 1 @ProductTypeID = ID FROM tbl_ProductType WHERE Title = @Type AND SiteID = @SiteID
		
	DECLARE @Unit nvarchar(50) = NULL
	SET @Unit = @ParamsXml.value(''(/LeadForceRequest/Product/Type)[1]'',''nvarchar(50)'')
	DECLARE @UnitID uniqueidentifier = NULL
	IF @Unit IS NOT NULL AND @Unit <> ''''
		SELECT TOP 1 @UnitID = ID FROM tbl_Unit WHERE Title = @Unit AND SiteID = @SiteID
		
	DECLARE @Price money = NULL
	SET @Price = @ParamsXml.value(''(/LeadForceRequest/Product/Price)[1]'',''money'')
	
	DECLARE @WholesalePrice money = NULL
	SET @WholesalePrice = @ParamsXml.value(''(/LeadForceRequest/Product/WholesalePrice)[1]'',''money'')
	
	DECLARE @CostPrice money = NULL
	SET @CostPrice = @ParamsXml.value(''(/LeadForceRequest/Product/CostPrice)[1]'',''money'')
	
	DECLARE @Supplier nvarchar(255) = NULL
	SET @Supplier = @ParamsXml.value(''(/LeadForceRequest/Product/Supplier)[1]'',''nvarchar(255)'')
	DECLARE @SupplierID uniqueidentifier = NULL
	IF @Supplier IS NOT NULL AND @Supplier <> ''''
		SELECT TOP 1 @SupplierID = ID FROM tbl_Company WHERE Name = @Supplier AND SiteID = @SiteID
		
	DECLARE @SupplierSKU nvarchar(250) = NULL
	SET @SupplierSKU = @ParamsXml.value(''(/LeadForceRequest/Product/SupplierSKU)[1]'',''nvarchar(250)'')
	
	DECLARE @Manufacturer nvarchar(255) = NULL
	SET @Manufacturer = @ParamsXml.value(''(/LeadForceRequest/Product/Manufacturer)[1]'',''nvarchar(255)'')
	DECLARE @ManufacturerID uniqueidentifier = NULL
	IF @Manufacturer IS NOT NULL AND @Manufacturer <> ''''
		SELECT TOP 1 @ManufacturerID = ID FROM tbl_Company WHERE Name = @Manufacturer AND SiteID = @SiteID
				
	DECLARE @Country nvarchar(255) = NULL
	SET @Country = @ParamsXml.value(''(/LeadForceRequest/Product/Country)[1]'',''nvarchar(255)'')
	DECLARE @CountryID uniqueidentifier = NULL
	IF @Country IS NOT NULL AND @Country <> ''''
		SELECT TOP 1 @CountryID = ID FROM tbl_Country WHERE Name = @Country
		
	DECLARE @Description nvarchar(max) = NULL
	SET @Description = @ParamsXml.value(''(/LeadForceRequest/Product/Description)[1]'',''nvarchar(max)'')
	
	IF EXISTS(SELECT * FROM tbl_Product WHERE ID = @ProductID AND SiteID = @SiteID)
    BEGIN
		UPDATE tbl_Product
		SET Title = @Title, SKU = @SKU, ProductStatusID = @ProductStatusID, ProductCategoryID = @ProductCategoryID,
		BrandID = @BrandID, ProductTypeID = @ProductTypeID, UnitID = @UnitID, Price = @Price, WholesalePrice = @WholesalePrice,
		CostPrice = @CostPrice, SupplierID = @SupplierID, SupplierSKU = @SupplierSKU, ManufacturerID = @ManufacturerID,
		CountryID = @CountryID, [Description] = @Description, ModifiedAt = getdate()
		WHERE ID = @ProductID AND SiteID = @SiteID		
    END
    ELSE
    BEGIN
		INSERT INTO tbl_Product([ID],[SiteID],[Title],[SKU],[ProductStatusID],[ProductCategoryID],[BrandID],[ProductTypeID],[UnitID],[Price],[WholesalePrice],[CostPrice],[SupplierID],[SupplierSKU],[ManufacturerID],[CountryID],[Description],[OwnerID],[CreatedAt])	
		VALUES (@ProductID,@SiteID,@Title,@SKU,@ProductStatusID,@ProductCategoryID,@BrandID,@ProductTypeID,@UnitID,@Price,@WholesalePrice,@CostPrice,@SupplierID,@SupplierSKU,@ManufacturerID,@CountryID,@Description,@ContactID,getdate())
    END
END
' 
END
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[API_GetProducts]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[API_GetProducts]
	(
	    @SiteID uniqueidentifier,
	    @ParamsXml xml
	)
AS
BEGIN
	DECLARE @ProductID uniqueidentifier = NULL
	SET @ProductID = @ParamsXml.value(''(/LeadForceRequest/Product/Params/ProductID/@value)[1]'',''uniqueidentifier'')
	
	DECLARE @CreatedAtStart DATETIME = NULL
    DECLARE @CreatedAtEnd DATETIME = NULL        
	SELECT @CreatedAtStart = CreateDate.Dates.value(''@start'',''datetime''), @CreatedAtEnd = CreateDate.Dates.value(''@end'',''datetime'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Product/Params/CreatedAt'') as CreateDate(Dates)
	
	DECLARE @ModifiedAtStart DATETIME = NULL
    DECLARE @ModifiedAtEnd DATETIME = NULL        
	SELECT @ModifiedAtStart = CreateDate.Dates.value(''@start'',''datetime''), @ModifiedAtEnd = CreateDate.Dates.value(''@end'',''datetime'')
	FROM @ParamsXml.nodes(''/LeadForceRequest/Product/Params/ModifiedAt'') as CreateDate(Dates)
	
	DECLARE @Title nvarchar(250) = NULL
	SET @Title = @ParamsXml.value(''(/LeadForceRequest/Product/Params/Title/@value)[1]'',''nvarchar(250)'')
	
	DECLARE @SKU nvarchar(250) = NULL
	SET @SKU = @ParamsXml.value(''(/LeadForceRequest/Product/Params/SKU/@value)[1]'',''nvarchar(250)'')
	
	DECLARE @Status nvarchar(256) = NULL
	SET @Status = @ParamsXml.value(''(/LeadForceRequest/Product/Params/Status/@value)[1]'',''nvarchar(256)'')
	
	DECLARE @Category nvarchar(250) = NULL
	SET @Category = @ParamsXml.value(''(/LeadForceRequest/Product/Params/Category/@value)[1]'',''nvarchar(250)'')
	
	DECLARE @Type nvarchar(250) = NULL
	SET @Type = @ParamsXml.value(''(/LeadForceRequest/Product/Params/Type/@value)[1]'',''nvarchar(250)'')
	
	SELECT P.ID as ''@ProductID'',
	       P.CreatedAt AS ''@CreatedAt'',
	       P.ModifiedAt AS ''@ModifiedAt'',
	       P.Title AS ''Title'',
	       P.SKU AS ''SKU'',
	       PSTS.Title AS ''Status'',
	       PC.Title AS ''Category'',
	       B.Title AS ''Brand'',
	       PT.Title AS ''Type'',
	       U.Title AS ''Unit'',
	       P.Price AS ''Price'',
	       P.WholesalePrice AS ''WholesalePrice'',
	       P.CostPrice AS ''CostPrice'',
	       SUPPLIER.Name AS ''Supplier'',
	       P.SupplierSKU AS ''SupplierSKU'',
	       MAN.Name AS ''Manufacturer'',
	       C.Name AS ''Country'',
	       P.[Description] AS ''Description''
	FROM tbl_Product as P LEFT JOIN tbl_ProductStatus AS PSTS ON P.ProductStatusID = PSTS.ID
	LEFT JOIN tbl_ProductCategory AS PC ON P.ProductCategoryID = PC.ID
	LEFT JOIN tbl_Brand AS B ON P.BrandID = B.ID
	LEFT JOIN tbl_ProductType AS PT ON P.ProductTypeID = PT.ID
	LEFT JOIN tbl_Unit AS U ON P.UnitID = U.ID
	LEFT JOIN tbl_Company AS SUPPLIER ON P.SupplierID = SUPPLIER.ID
	LEFT JOIN tbl_Company AS MAN ON P.ManufacturerID = MAN.ID
	LEFT JOIN tbl_Country AS C ON P.CountryID = C.ID
	WHERE P.SiteID = @SiteID
	      AND (@ProductID IS NULL OR P.ID = @ProductID)
	      AND (@CreatedAtStart IS NULL AND @CreatedAtEnd IS NULL OR (@CreatedAtStart IS NOT NULL AND @CreatedAtEnd IS NOT NULL AND P.CreatedAt >= @CreatedAtStart AND P.CreatedAt <= @CreatedAtEnd))
	      AND (@ModifiedAtStart IS NULL AND @ModifiedAtEnd IS NULL OR (@ModifiedAtStart IS NOT NULL AND @ModifiedAtEnd IS NOT NULL AND P.ModifiedAt >= @ModifiedAtStart AND P.ModifiedAt <= @ModifiedAtEnd))
	      AND (@Title IS NULL OR P.Title LIKE N''%'' + @Title + ''%'')
	      AND (@SKU IS NULL OR P.SKU LIKE N''%'' + @SKU + ''%'')
	      AND (@Status IS NULL OR PSTS.Title LIKE N''%'' + @Status + ''%'')
	      AND (@Category IS NULL OR PC.Title LIKE N''%'' + @Category + ''%'')
	      AND (@Type IS NULL OR PT.Title LIKE N''%'' + @Type + ''%'')
	FOR XML PATH(''Product''), TYPE, ELEMENTS, ROOT(''Products'')
	
END
' 
END

commit
exec LBC_SetVersion 319
END

/*******************************************************************************
	2012-10-16
*******************************************************************************/
if ( dbo.LBC_Version() < 320 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[API_UpdateProduct]
	(
		@SiteID uniqueidentifier,
		@ContactID uniqueidentifier = NULL,	
	    @ParamsXml xml
	)
AS
BEGIN
	DECLARE @ProductID uniqueidentifier = NULL
	SET @ProductID = @ParamsXml.value(''(/LeadForceRequest/Product/@ProductID)[1]'',''uniqueidentifier'')
	
	IF @ProductID IS NULL
	    RETURN 0
	    
	DECLARE @Title nvarchar(250) = NULL
	SET @Title = @ParamsXml.value(''(/LeadForceRequest/Product/Title)[1]'',''nvarchar(250)'')
	
	DECLARE @SKU nvarchar(250) = NULL
	SET @SKU = @ParamsXml.value(''(/LeadForceRequest/Product/SKU)[1]'',''nvarchar(250)'')
	
	DECLARE @Status nvarchar(256) = NULL
	SET @Status = @ParamsXml.value(''(/LeadForceRequest/Product/Status)[1]'',''nvarchar(256)'')
	DECLARE @ProductStatusID int = NULL	
	IF @Status IS NOT NULL AND @Status <> ''''
	    SELECT TOP 1 @ProductStatusID = ID FROM tbl_ProductStatus WHERE Title = @Status
	    
	DECLARE @Category nvarchar(250) = NULL
	SET @Category = @ParamsXml.value(''(/LeadForceRequest/Product/Category)[1]'',''nvarchar(250)'')
	DECLARE @ProductCategoryID uniqueidentifier = NULL
	IF @Category IS NOT NULL AND @Category <> ''''
		SELECT TOP 1 @ProductCategoryID = ID FROM tbl_ProductCategory WHERE Title = @Category AND SiteID = @SiteID
		
	DECLARE @Brand nvarchar(250) = NULL
	SET @Brand = @ParamsXml.value(''(/LeadForceRequest/Product/Brand)[1]'',''nvarchar(250)'')
	DECLARE @BrandID uniqueidentifier = NULL
	IF @Brand IS NOT NULL AND @Brand <> ''''
		SELECT TOP 1 @BrandID = ID FROM tbl_Brand WHERE Title = @Brand AND SiteID = @SiteID
	
	DECLARE @Type nvarchar(250) = NULL
	SET @Type = @ParamsXml.value(''(/LeadForceRequest/Product/Type)[1]'',''nvarchar(250)'')
	DECLARE @ProductTypeID uniqueidentifier = NULL
	IF @Type IS NOT NULL AND @Type <> ''''
		SELECT TOP 1 @ProductTypeID = ID FROM tbl_ProductType WHERE Title = @Type AND SiteID = @SiteID
		
	DECLARE @Unit nvarchar(50) = NULL
	SET @Unit = @ParamsXml.value(''(/LeadForceRequest/Product/Unit)[1]'',''nvarchar(50)'')
	DECLARE @UnitID uniqueidentifier = NULL
	IF @Unit IS NOT NULL AND @Unit <> ''''
		SELECT TOP 1 @UnitID = ID FROM tbl_Unit WHERE Title = @Unit AND SiteID = @SiteID
		
	DECLARE @Price money = NULL
	SET @Price = @ParamsXml.value(''(/LeadForceRequest/Product/Price)[1]'',''money'')
	
	DECLARE @WholesalePrice money = NULL
	SET @WholesalePrice = @ParamsXml.value(''(/LeadForceRequest/Product/WholesalePrice)[1]'',''money'')
	
	DECLARE @CostPrice money = NULL
	SET @CostPrice = @ParamsXml.value(''(/LeadForceRequest/Product/CostPrice)[1]'',''money'')
	
	DECLARE @Supplier nvarchar(255) = NULL
	SET @Supplier = @ParamsXml.value(''(/LeadForceRequest/Product/Supplier)[1]'',''nvarchar(255)'')
	DECLARE @SupplierID uniqueidentifier = NULL
	IF @Supplier IS NOT NULL AND @Supplier <> ''''
		SELECT TOP 1 @SupplierID = ID FROM tbl_Company WHERE Name = @Supplier AND SiteID = @SiteID
		
	DECLARE @SupplierSKU nvarchar(250) = NULL
	SET @SupplierSKU = @ParamsXml.value(''(/LeadForceRequest/Product/SupplierSKU)[1]'',''nvarchar(250)'')
	
	DECLARE @Manufacturer nvarchar(255) = NULL
	SET @Manufacturer = @ParamsXml.value(''(/LeadForceRequest/Product/Manufacturer)[1]'',''nvarchar(255)'')
	DECLARE @ManufacturerID uniqueidentifier = NULL
	IF @Manufacturer IS NOT NULL AND @Manufacturer <> ''''
		SELECT TOP 1 @ManufacturerID = ID FROM tbl_Company WHERE Name = @Manufacturer AND SiteID = @SiteID
				
	DECLARE @Country nvarchar(255) = NULL
	SET @Country = @ParamsXml.value(''(/LeadForceRequest/Product/Country)[1]'',''nvarchar(255)'')
	DECLARE @CountryID uniqueidentifier = NULL
	IF @Country IS NOT NULL AND @Country <> ''''
		SELECT TOP 1 @CountryID = ID FROM tbl_Country WHERE Name = @Country
		
	DECLARE @Description nvarchar(max) = NULL
	SET @Description = @ParamsXml.value(''(/LeadForceRequest/Product/Description)[1]'',''nvarchar(max)'')
	
	IF EXISTS(SELECT * FROM tbl_Product WHERE ID = @ProductID AND SiteID = @SiteID)
    BEGIN
		UPDATE tbl_Product
		SET Title = @Title, SKU = @SKU, ProductStatusID = @ProductStatusID, ProductCategoryID = @ProductCategoryID,
		BrandID = @BrandID, ProductTypeID = @ProductTypeID, UnitID = @UnitID, Price = @Price, WholesalePrice = @WholesalePrice,
		CostPrice = @CostPrice, SupplierID = @SupplierID, SupplierSKU = @SupplierSKU, ManufacturerID = @ManufacturerID,
		CountryID = @CountryID, [Description] = @Description, ModifiedAt = getdate()
		WHERE ID = @ProductID AND SiteID = @SiteID		
    END
    ELSE
    BEGIN
		INSERT INTO tbl_Product([ID],[SiteID],[Title],[SKU],[ProductStatusID],[ProductCategoryID],[BrandID],[ProductTypeID],[UnitID],[Price],[WholesalePrice],[CostPrice],[SupplierID],[SupplierSKU],[ManufacturerID],[CountryID],[Description],[OwnerID],[CreatedAt])	
		VALUES (@ProductID,@SiteID,@Title,@SKU,@ProductStatusID,@ProductCategoryID,@BrandID,@ProductTypeID,@UnitID,@Price,@WholesalePrice,@CostPrice,@SupplierID,@SupplierSKU,@ManufacturerID,@CountryID,@Description,@ContactID,getdate())
    END
END
'
EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[API_GetUsers]
	(
	    @SiteID uniqueidentifier,
	    @ParamsXml xml
	)
AS
BEGIN
	
	DECLARE @UserID uniqueidentifier = NULL
	SET @UserID = @ParamsXml.value(''(/LeadForceRequest/User/Params/UserID/@value)[1]'',''uniqueidentifier'')
	
	DECLARE @ContactID uniqueidentifier = NULL
	SET @ContactID = @ParamsXml.value(''(/LeadForceRequest/User/Params/ContactID/@value)[1]'',''uniqueidentifier'')
	
	DECLARE @Login nvarchar(255) = NULL
	SET @Login = @ParamsXml.value(''(/LeadForceRequest/User/Params/Login/@value)[1]'',''nvarchar(255)'')
	
	DECLARE @IsActive bit = NULL
	SET @IsActive = @ParamsXml.value(''(/LeadForceRequest/User/Params/IsActive/@value)[1]'',''bit'')
	
	DECLARE @AccessProfile nvarchar(255) = NULL
	SET @AccessProfile = @ParamsXml.value(''(/LeadForceRequest/User/Params/AccessProfile/@value)[1]'',''nvarchar(255)'')
	
	DECLARE @AccessLevelID int = NULL
	SET @AccessLevelID = @ParamsXml.value(''(/LeadForceRequest/User/Params/AccessLevelID/@value)[1]'',''int'')
	
	IF @AccessLevelID = 2
		SET @AccessLevelID = 1
	
	SELECT U.ID as ''@UserID'',
	       U.ContactID AS ''@ContactID'',
	       U.[Login] AS ''@Login'',
	       U.IsActive AS ''@IsActive'',
	       AP.Title AS ''@AccessProfile'',
	       U.AccessLevelID AS ''@AccessLevelID''
	FROM tbl_User as U LEFT JOIN tbl_AccessProfile AS AP ON U.AccessProfileID = AP.ID
	WHERE U.SiteID = @SiteID
	      AND (@UserID IS NULL OR U.ID = @UserID)
	      AND (@ContactID IS NULL OR U.ContactID = @ContactID)
	      AND (@Login IS NULL OR U.[Login] LIKE N''%'' + @Login + ''%'')
	      AND (@IsActive IS NULL OR U.IsActive = @IsActive)
	      AND (@AccessLevelID IS NULL OR U.AccessLevelID = @AccessLevelID)
	      AND (@AccessProfile IS NULL OR AP.Title LIKE N''%'' + @AccessProfile + ''%'')	      
	FOR XML PATH(''User''), TYPE, ELEMENTS, ROOT(''Users'')
END'

commit
exec LBC_SetVersion 320
END

/*******************************************************************************
	2012-10-16
*******************************************************************************/
if ( dbo.LBC_Version() < 321 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[API_UpdateInvoice]
	(
		@SiteID uniqueidentifier,
		@ContactID uniqueidentifier = NULL,	
	    @ParamsXml xml
	)
AS
BEGIN
	DECLARE @IsPendingPayment bit = 0
	DECLARE @IsNew bit = 0
		
	DECLARE @PreviousInvoiceStatusID int = NULL
	DECLARE @PreviousPaymentDatePlanned datetime = NULL
	DECLARE @PreviousPaymentDateActual datetime = NULL
	DECLARE @PreviousInvoiceAmount money = NULL
	DECLARE @PreviousIsExistBuyerComplaint bit = NULL
	DECLARE @PreviousNote nvarchar(1024) = NULL
	
	DECLARE @InvoiceID uniqueidentifier = NULL
	SET @InvoiceID = @ParamsXml.value(''(/LeadForceRequest/Invoice/@InvoiceID)[1]'',''uniqueidentifier'')
	
	IF @InvoiceID IS NULL
	    RETURN 0
	    
	DECLARE @Type nvarchar(256) = NULL
	SET @Type = @ParamsXml.value(''(/LeadForceRequest/Invoice/Type)[1]'',''nvarchar(256)'')
	DECLARE @InvoiceTypeID uniqueidentifier = NULL	
	IF @Type IS NOT NULL AND @Type <> ''''
	    SELECT TOP 1 @InvoiceTypeID = ID FROM tbl_InvoiceType WHERE Title = @Type AND SiteID = @SiteID
	    
	DECLARE @Status nvarchar(256) = NULL
	SET @Status = @ParamsXml.value(''(/LeadForceRequest/Invoice/Status)[1]'',''nvarchar(256)'')
	DECLARE @InvoiceStatusID int = NULL	
	IF @Status IS NOT NULL AND @Status <> ''''
	    SELECT TOP 1 @InvoiceStatusID = ID FROM tbl_InvoiceStatus WHERE Title = @Status
	    
	DECLARE @Note nvarchar(max) = NULL
	SET @Note = @ParamsXml.value(''(/LeadForceRequest/Invoice/Note)[1]'',''nvarchar(max)'')
	
	DECLARE @BuyerCompany nvarchar(255) = NULL
	SET @BuyerCompany = @ParamsXml.value(''(/LeadForceRequest/Invoice/Buyer/Company)[1]'',''nvarchar(255)'')
	DECLARE @BuyerCompanyID uniqueidentifier = NULL	
	IF @BuyerCompany IS NOT NULL AND @BuyerCompany <> ''''
	    SELECT TOP 1 @BuyerCompanyID = ID FROM tbl_Company WHERE Name = @BuyerCompany AND SiteID = @SiteID
	    
	DECLARE @BuyerCompanyLegalAccount nvarchar(256) = NULL
	SET @BuyerCompanyLegalAccount = @ParamsXml.value(''(/LeadForceRequest/Invoice/Buyer/LegalAccount)[1]'',''nvarchar(256)'')
	DECLARE @BuyerCompanyLegalAccountID uniqueidentifier = NULL	
	IF @BuyerCompanyLegalAccount IS NOT NULL AND @BuyerCompanyLegalAccount <> ''''
	    SELECT TOP 1 @BuyerCompanyLegalAccountID = ID FROM tbl_CompanyLegalAccount WHERE Title = @BuyerCompanyLegalAccount AND SiteID = @SiteID
	    
	DECLARE @BuyerContact nvarchar(255) = NULL
	SET @BuyerContact = @ParamsXml.value(''(/LeadForceRequest/Invoice/Buyer/Contact)[1]'',''nvarchar(255)'')
	DECLARE @BuyerContactID uniqueidentifier = NULL	
	IF @BuyerContact IS NOT NULL AND @BuyerContact <> ''''
	    SELECT TOP 1 @BuyerContactID = ID FROM tbl_Contact WHERE UserFullName = @BuyerContact AND SiteID = @SiteID
	    
	DECLARE @ExecutorCompany nvarchar(255) = NULL
	SET @ExecutorCompany = @ParamsXml.value(''(/LeadForceRequest/Invoice/Executor/Company)[1]'',''nvarchar(255)'')
	DECLARE @ExecutorCompanyID uniqueidentifier = NULL	
	IF @ExecutorCompany IS NOT NULL AND @ExecutorCompany <> ''''
	    SELECT TOP 1 @ExecutorCompanyID = ID FROM tbl_Company WHERE Name = @ExecutorCompany AND SiteID = @SiteID
	    
	DECLARE @ExecutorCompanyLegalAccount nvarchar(256) = NULL
	SET @ExecutorCompanyLegalAccount = @ParamsXml.value(''(/LeadForceRequest/Invoice/Executor/LegalAccount)[1]'',''nvarchar(256)'')
	DECLARE @ExecutorCompanyLegalAccountID uniqueidentifier = NULL	
	IF @ExecutorCompanyLegalAccount IS NOT NULL AND @ExecutorCompanyLegalAccount <> ''''
	    SELECT TOP 1 @ExecutorCompanyLegalAccountID = ID FROM tbl_CompanyLegalAccount WHERE Title = @ExecutorCompanyLegalAccount AND SiteID = @SiteID
	    
	DECLARE @ExecutorContact nvarchar(255) = NULL
	SET @ExecutorContact = @ParamsXml.value(''(/LeadForceRequest/Invoice/Executor/Contact)[1]'',''nvarchar(255)'')
	DECLARE @ExecutorContactID uniqueidentifier = NULL	
	IF @ExecutorContact IS NOT NULL AND @ExecutorContact <> ''''
	    SELECT TOP 1 @ExecutorContactID = ID FROM tbl_Contact WHERE UserFullName = @ExecutorContact AND SiteID = @SiteID	    		    
	    
	DECLARE @InvoiceAmount money = NULL
	SET @InvoiceAmount = @ParamsXml.value(''(/LeadForceRequest/Invoice/Finance/Amount)[1]'',''money'')
	
	DECLARE @Paid money = NULL
	SET @Paid = @ParamsXml.value(''(/LeadForceRequest/Invoice/Finance/Paid)[1]'',''money'')
	
	DECLARE @PaymentDatePlanned datetime = NULL
	SET @PaymentDatePlanned = @ParamsXml.value(''(/LeadForceRequest/Invoice/Finance/PaymentDatePlanned)[1]'',''datetime'')
	
	DECLARE @PaymentDateActual datetime = NULL
	SET @PaymentDateActual = @ParamsXml.value(''(/LeadForceRequest/Invoice/Finance/PaymentDateActual)[1]'',''datetime'')
	
	DECLARE @IsExistBuyerComplaint bit = NULL
	SET @IsExistBuyerComplaint = @ParamsXml.value(''(/LeadForceRequest/Invoice/Finance/IsExistBuyerComplaint)[1]'',''bit'')
	
	DECLARE @IsPaymentDateFixedByContract bit = NULL
	SET @IsPaymentDateFixedByContract = @ParamsXml.value(''(/LeadForceRequest/Invoice/Finance/IsPaymentDateFixedByContract)[1]'',''bit'')
	
	DECLARE @OrderNumber nvarchar(255) = NULL
	SET @OrderNumber = @ParamsXml.value(''(/LeadForceRequest/Invoice/OrderNumber)[1]'',''nvarchar(255)'')
	DECLARE @OrderID uniqueidentifier = NULL	
	IF @OrderNumber IS NOT NULL AND @OrderNumber <> ''''
	    SELECT TOP 1 @OrderID = ID FROM tbl_Order WHERE Number = @OrderNumber AND SiteID = @SiteID	    		    
	    
	DECLARE @PriceList nvarchar(250) = NULL
	SET @PriceList = @ParamsXml.value(''(/LeadForceRequest/Invoice/PriceList)[1]'',''nvarchar(250)'')
	DECLARE @PriceListID uniqueidentifier = NULL	
	IF @PriceListID IS NOT NULL AND @PriceListID <> ''''
	    SELECT TOP 1 @PriceListID = ID FROM tbl_PriceList WHERE Title = @PriceList AND SiteID = @SiteID
	
	IF EXISTS(SELECT * FROM tbl_Invoice WHERE ID = @InvoiceID AND SiteID = @SiteID)
    BEGIN    				
		SELECT @PreviousInvoiceStatusID = InvoiceStatusID, @PreviousPaymentDatePlanned = PaymentDatePlanned,
		@PreviousPaymentDateActual = PaymentDateActual, @PreviousInvoiceAmount = InvoiceAmount,
		@PreviousIsExistBuyerComplaint = IsExistBuyerComplaint, @PreviousNote = Note
		FROM tbl_Invoice
		WHERE ID = @InvoiceID AND SiteID = @SiteID
    
		UPDATE tbl_Invoice
		SET InvoiceTypeID = @InvoiceTypeID, InvoiceStatusID = @InvoiceStatusID, Note = @Note, BuyerCompanyID = @BuyerCompanyID,
		BuyerCompanyLegalAccountID = @BuyerCompanyLegalAccountID, BuyerContactID = @BuyerContactID, ExecutorCompanyID = @ExecutorCompanyID,
		ExecutorCompanyLegalAccountID = @ExecutorCompanyLegalAccountID, ExecutorContactID = @ExecutorContactID, InvoiceAmount = @InvoiceAmount,
		Paid = @Paid, PaymentDatePlanned = @PaymentDatePlanned, PaymentDateActual = @PaymentDateActual, OrderID = @OrderID,
		PriceListID = @PriceListID, IsExistBuyerComplaint = @IsExistBuyerComplaint, IsPaymentDateFixedByContract = @IsPaymentDateFixedByContract, ModifiedAt = getdate()
		WHERE ID = @InvoiceID AND SiteID = @SiteID
		
		IF @PreviousInvoiceStatusID <> @InvoiceStatusID AND @InvoiceStatusID = 1
			SET @IsPendingPayment = 1	
    END
    ELSE
    BEGIN
		INSERT INTO tbl_Invoice(
			[ID],
			[SiteID],
			[Number],
			[SerialNumber],
			[CreatedAt],
			[InvoiceTypeID],
			[InvoiceStatusID],
			[Note],
			[BuyerCompanyID],
			[BuyerCompanyLegalAccountID],
			[BuyerContactID],
			[ExecutorCompanyID],
			[ExecutorCompanyLegalAccountID],
			[ExecutorContactID],
			[InvoiceAmount],
			[Paid],
			[PaymentDatePlanned],
			[PaymentDateActual],
			[OrderID],
			[PriceListID],
			[OwnerID],
			[IsExistBuyerComplaint],
			[IsPaymentDateFixedByContract]
		)	
		VALUES 
		(
			@InvoiceID,
			@SiteID,
			'''',
			0,
			getdate(),
			@InvoiceTypeID,
			@InvoiceStatusID,
			@Note,
			@BuyerCompanyID,
			@BuyerCompanyLegalAccountID,
			@BuyerContactID,
			@ExecutorCompanyID,
			@ExecutorCompanyLegalAccountID,
			@ExecutorContactID,
			@InvoiceAmount,
			@Paid,
			@PaymentDatePlanned,
			@PaymentDateActual,
			@OrderID,
			@PriceListID,
			@ContactID,
			@IsExistBuyerComplaint,
			@IsPaymentDateFixedByContract
		)
		SET @IsNew = 1
    END
	
	DECLARE @IPInvoiceProductID uniqueidentifier
	DECLARE @IPProductID uniqueidentifier
	DECLARE @IPAnyProductName nvarchar(255)
	DECLARE @IPSerialNumber nvarchar(255)
	DECLARE @IPPriceListID uniqueidentifier
	DECLARE @IPQuantity decimal(18,4)
	DECLARE @IPUnitID uniqueidentifier
	DECLARE @IPCurrencyID uniqueidentifier
	DECLARE @IPRate money
	DECLARE @IPCurrencyPrice money
	DECLARE @IPCurrencyAmount money
	DECLARE @IPPrice money
	DECLARE @IPAmount money
	DECLARE @IPSpecialOfferPriceListID uniqueidentifier
	DECLARE @IPDiscount decimal(18,4)
	DECLARE @IPCurrencyDiscountAmount money
	DECLARE @IPDiscountAmount money
	DECLARE @IPCurrencyTotalAmount money
	DECLARE @IPTotalAmount money
	DECLARE @IPTaskID uniqueidentifier
	
	DECLARE @InvoiceProducts_Cursor xml
	DECLARE InvoiceProducts_Cursor CURSOR FOR
	SELECT T.c.query(''.'') AS result
	FROM   @ParamsXml.nodes(''/LeadForceRequest/Invoice/InvoiceProducts/InvoiceProduct'') T(c)
	OPEN InvoiceProducts_Cursor
	FETCH NEXT FROM InvoiceProducts_Cursor INTO @InvoiceProducts_Cursor
	WHILE @@FETCH_STATUS = 0
	BEGIN	
		SET @IPInvoiceProductID = NULL
		SET @IPProductID = NULL
		SET @IPAnyProductName = NULL
		SET @IPSerialNumber = NULL
		SET @IPPriceListID = NULL
		SET @IPQuantity = NULL
		SET @IPUnitID = NULL
		SET @IPCurrencyID = NULL
		SET @IPRate = NULL
		SET @IPCurrencyPrice = NULL
		SET @IPCurrencyAmount = NULL
		SET @IPPrice = NULL
		SET @IPAmount = NULL
		SET @IPSpecialOfferPriceListID = NULL
		SET @IPDiscount = NULL
		SET @IPCurrencyDiscountAmount = NULL
		SET @IPDiscountAmount = NULL
		SET @IPCurrencyTotalAmount = NULL
		SET @IPTotalAmount = NULL
		SET @IPTaskID = NULL
				
		SET @IPInvoiceProductID = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/@InvoiceProductID)[1]'',''uniqueidentifier'')
		SELECT TOP 1 @IPProductID = ID FROM tbl_Product WHERE Title = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/Product)[1]'',''nvarchar(250)'') AND SiteID = @SiteID
		SET @IPAnyProductName = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/AnyProductName)[1]'',''nvarchar(255)'')
		SET @IPSerialNumber = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/SerialNumber)[1]'',''nvarchar(255)'')
		SELECT TOP 1 @IPPriceListID = ID FROM tbl_PriceList WHERE Title = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/CostInOrder/PriceList)[1]'',''nvarchar(250)'') AND SiteID = @SiteID
		SET @IPQuantity = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/CostInOrder/Quantity)[1]'',''decimal(18,4)'')
		SELECT TOP 1 @IPUnitID = ID FROM tbl_Unit WHERE Title = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/CostInOrder/Unit)[1]'',''nvarchar(50)'') AND SiteID = @SiteID
		SELECT TOP 1 @IPCurrencyID = ID FROM tbl_Currency WHERE Name = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/CostInOrder/Currency)[1]'',''nvarchar(255)'') AND SiteID = @SiteID
		SET @IPRate = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/CostInOrder/Rate)[1]'',''money'')
		SET @IPCurrencyPrice = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/CostInOrder/CurrencyPrice)[1]'',''money'')
		SET @IPCurrencyAmount = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/CostInOrder/CurrencyAmount)[1]'',''money'')
		SET @IPPrice = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/CostInOrder/Price)[1]'',''money'')
		SET @IPAmount = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/CostInOrder/Amount)[1]'',''money'')
		SELECT TOP 1 @IPSpecialOfferPriceListID = ID FROM tbl_PriceList WHERE Title = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/Discount/PriceList)[1]'',''nvarchar(250)'') AND SiteID = @SiteID		
		SET @IPDiscount = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/Discount/Discount)[1]'',''decimal(18,4)'')
		SET @IPCurrencyDiscountAmount = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/Discount/CurrencyDiscountAmount)[1]'',''money'')
		SET @IPDiscountAmount = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/Discount/DiscountAmount)[1]'',''money'')
		SET @IPCurrencyTotalAmount = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/Total/CurrencyTotalAmount)[1]'',''money'')
		SET @IPTotalAmount = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/Total/TotalAmount)[1]'',''money'')
		SELECT TOP 1 @IPTaskID = ID FROM tbl_Task WHERE Title = @InvoiceProducts_Cursor.value(''(/InvoiceProduct/Task)[1]'',''nvarchar(2000)'') AND SiteID = @SiteID
		
		IF EXISTS(SELECT * FROM tbl_InvoiceProducts WHERE ID = @IPInvoiceProductID AND InvoiceID = @InvoiceID)
		BEGIN
			UPDATE tbl_InvoiceProducts
			SET ProductID = @IPProductID, AnyProductName = @IPAnyProductName, SerialNumber = @IPSerialNumber,
			PriceListID = @IPPriceListID, Quantity = @IPQuantity, UnitID = @IPUnitID, CurrencyID = @IPCurrencyID,
			Rate = @IPRate, CurrencyPrice = @IPCurrencyPrice, CurrencyAmount = @IPCurrencyAmount, Price = @IPPrice,
			Amount = @IPAmount, SpecialOfferPriceListID = @IPSpecialOfferPriceListID,
			Discount = @IPDiscount, CurrencyDiscountAmount = @IPCurrencyDiscountAmount, DiscountAmount = @IPDiscountAmount,
			CurrencyTotalAmount = @IPCurrencyTotalAmount, TotalAmount = @IPTotalAmount, TaskID = @IPTaskID
			WHERE ID = @IPInvoiceProductID AND InvoiceID = @InvoiceID
		END
		ELSE
		BEGIN
			INSERT INTO tbl_InvoiceProducts
			(
				[ID],
				[InvoiceID],
				[ProductID],
				[AnyProductName],
				[SerialNumber],
				[PriceListID],
				[Quantity],
				[UnitID],
				[CurrencyID],
				[Rate],
				[CurrencyPrice],
				[CurrencyAmount],
				[Price],
				[Amount],
				[SpecialOfferPriceListID],
				[Discount],
				[CurrencyDiscountAmount],
				[DiscountAmount],
				[CurrencyTotalAmount],
				[TotalAmount],
				[TaskID]
			)
			VALUES
			(
				@IPInvoiceProductID,
				@InvoiceID,
				@IPProductID,
				@IPAnyProductName,
				@IPSerialNumber,
				@IPPriceListID,
				@IPQuantity,
				@IPUnitID,
				@IPCurrencyID,
				@IPRate,
				@IPCurrencyPrice,
				@IPCurrencyAmount,
				@IPPrice,
				@IPAmount,
				@IPSpecialOfferPriceListID,
				@IPDiscount,
				@IPCurrencyDiscountAmount,
				@IPDiscountAmount,
				@IPCurrencyTotalAmount,
				@IPTotalAmount,
				@IPTaskID)
		END
		
		
		FETCH NEXT FROM InvoiceProducts_Cursor INTO @InvoiceProducts_Cursor
	END
	CLOSE InvoiceProducts_Cursor
	DEALLOCATE InvoiceProducts_Cursor
	
	IF @IsNew = 1 OR @PreviousInvoiceStatusID <> @InvoiceStatusID OR @PreviousPaymentDatePlanned <> @PaymentDatePlanned OR
		@PreviousPaymentDateActual <> @PaymentDateActual oR @PreviousInvoiceAmount <> @InvoiceAmount OR
		@PreviousIsExistBuyerComplaint <> @IsExistBuyerComplaint OR @PreviousNote <> @Note
	BEGIN
		INSERT INTO tbl_InvoiceHistory 
		([ID], 
		 [CreatedAt], 
		 [InvoiceID], 
		 [AuthorID], 
		 [PaymentDatePlanned],
		 [PaymentDateActual],
		 [InvoiceAmount],
		 [InvoiceStatusID],
		 [IsExistBuyerComplaint],
		 [Note])
		 VALUES 
		 (
			newid(),
			getdate(),
			@InvoiceID,
			@ContactID,
			@PaymentDatePlanned,
			@PaymentDateActual,
			@InvoiceAmount,
			@InvoiceStatusID,
			@IsExistBuyerComplaint,
			@Note
		 )
	END
    
    SELECT @IsPendingPayment AS IsPendingPayment, @IsNew AS IsNew, @InvoiceID AS InvoiceID
END'

commit
exec LBC_SetVersion 321
END
GO

/*******************************************************************************
	2012-10-16
*******************************************************************************/
if ( dbo.LBC_Version() < 322 )
BEGIN
begin tran

DELETE FROM tbl_UserSettings WHERE ClassName = 'WebCounter.AdminPanel.WorkflowTemplates'

DECLARE @ModuleEditionId uniqueidentifier = NEWID()
INSERT INTO tbl_ModuleEdition (ID, ModuleID, Title)
VALUES (@ModuleEditionId, (SELECT ID FROM tbl_Module WHERE Name=N'WorkflowTemplates'), N'Основная редакция')
INSERT INTO tbl_ModuleEditionOption (ModuleEditionID, Title, SystemName, ModuleEditionOptionType)
VALUES (@ModuleEditionId, N'Отражать теги и фильтры', 'TagAndFiltersPanel', 0)

commit
exec LBC_SetVersion 322
END

/*******************************************************************************
	2012-10-17
*******************************************************************************/
if ( dbo.LBC_Version() < 323 )
BEGIN
begin tran

ALTER TABLE [tbl_WorkflowTemplate] ADD DataBaseStatusID int NOT NULL DEFAULT((0))

commit
exec LBC_SetVersion 323
END

/*******************************************************************************
	2012-10-17
*******************************************************************************/
if ( dbo.LBC_Version() < 324 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[WorkflowInit]
(
	@Parameter uniqueidentifier,
	@SiteID uniqueidentifier,
	@ModuleID uniqueidentifier,
	@AutomaticMethod int,
	@Event int = NULL,
	@MassWorkflowID uniqueidentifier = NULL
)
AS
BEGIN
	DECLARE @sql nvarchar(max)
	DECLARE @ParmDefinition nvarchar(max)
	
	SELECT tbl_WorkflowTemplate.ID
	INTO #TmpWorkflowTemplate
	FROM tbl_WorkflowTemplate
	WHERE
		SiteID=@SiteID
		AND ModuleID=@ModuleID
		AND [Status]=1 -- Статус действующий
		AND (AutomaticMethod=@AutomaticMethod OR @AutomaticMethod IS NULL)
		AND (StartDate IS NULL OR (StartDate IS NOT NULL AND StartDate<=GETDATE())) -- Актуален по дате
		AND (EndDate IS NULL OR (EndDate IS NOT NULL AND EndDate>=GETDATE())) -- Актуален по дате
		AND ((@MassWorkflowID IS NULL) OR (tbl_WorkflowTemplate.ID IN (SELECT tbl_MassWorkflow.WorkflowTemplateID FROM tbl_MassWorkflow WHERE tbl_MassWorkflow.ID=@MassWorkflowID)))
		AND [DataBaseStatusID] = 0 -- Запись активна

		
	DECLARE @_WorkflowTemplateID uniqueidentifier
	DECLARE @_Event int
	
	-- Перебираем подходящие по условию шаблоны
	WHILE (SELECT COUNT(*) FROM #TmpWorkflowTemplate) > 0
	BEGIN
		SELECT TOP 1 @_WorkflowTemplateID=ID
		FROM #TmpWorkflowTemplate
		
		DECLARE @FLAG bit = 1
		
		DECLARE @_WorkflowID uniqueidentifier = NEWID()
		
		-- Берём параметр
		DECLARE @_WorkflowTemplateParameterID uniqueidentifier =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Контакт'' AND IsSystem=1)
		
		-- Проверка на вызов при активном процессе
		DECLARE @_Frequency int
		DECLARE @_DenyMultipleRun bit
		DECLARE @_Condition int
		DECLARE @_ActivityCount int
		SELECT @_Frequency=Frequency, @_DenyMultipleRun=DenyMultipleRun, @_Condition=Condition, @_ActivityCount=ActivityCount, @_Event=[Event]
		FROM tbl_WorkflowTemplate 
		WHERE ID=@_WorkflowTemplateID
		
		-- Есть ли активный процесс по заданному шаблону (нет даты окончания процесса)
		IF ((SELECT COUNT(*)
		FROM tbl_Workflow AS w
		LEFT JOIN tbl_WorkflowParameter AS wp ON wp.WorkflowID=w.ID
		WHERE w.WorkflowTemplateID=@_WorkflowTemplateID
			  AND wp.WorkflowTemplateParameterID=@_WorkflowTemplateParameterID
			  AND wp.Value=@Parameter
			  AND w.EndDate IS NULL) > 0 AND @_DenyMultipleRun = 1)
		BEGIN
			SET @FLAG = 0
		END
			
		-- Проверка на частоту вызова в днях
		DECLARE @_StartDate datetime = (SELECT TOP 1 w.StartDate
									   FROM tbl_Workflow AS w
									   LEFT JOIN tbl_WorkflowParameter AS wp ON wp.WorkflowID=w.ID
									   WHERE w.WorkflowTemplateID=@_WorkflowTemplateID
											 AND wp.WorkflowTemplateParameterID=@_WorkflowTemplateParameterID
									   ORDER BY w.StartDate DESC)
		--SET @_StartDate = DATEADD(day, @_Frequency, @_StartDate)
		IF (@_Frequency <> 0 AND DATEADD(day, @_Frequency, @_StartDate) > GETDATE())
		BEGIN
			SET @FLAG = 0
		END
		
		-- Проверка условий запуска
		IF (@AutomaticMethod=1 AND @FLAG = 1) -- Создание/Изменение записи
		BEGIN
			IF (@_Event<>@Event)
			BEGIN
				SET @FLAG = 0
			END
		END
		
		
		IF (@AutomaticMethod=2 AND @FLAG = 1) -- По действию пользователя
		BEGIN
			SET @FLAG = 0
			
			SELECT ID
			INTO #TmpConditionEvent
			FROM tbl_WorkflowTemplateConditionEvent
			WHERE WorkflowTemplateID=@_WorkflowTemplateID
			
			DECLARE @TotalRowsReturned int
			DECLARE @Count int = 0
			
			DECLARE @CountConditionEvent int = (SELECT COUNT(*) FROM #TmpConditionEvent)
			DECLARE @_ConditionEventID uniqueidentifier
			DECLARE @_Category int
			DECLARE @_ActivityType int
			DECLARE @_Code nvarchar(max)
			DECLARE @_ActualPeriod int
			DECLARE @_Requisite nvarchar(2000)
			DECLARE @_Formula int
			DECLARE @_Value nvarchar(255)
			WHILE (SELECT COUNT(*) FROM #TmpConditionEvent) > 0
			BEGIN
				SELECT TOP 1 @_ConditionEventID=ID
				FROM #TmpConditionEvent
				
				SELECT @_Category=Category,
					   @_ActivityType=ActivityType,
					   @_Code=Code,
					   @_ActualPeriod=ActualPeriod,
					   @_Requisite=Requisite,
					   @_Formula=Formula,
					   @_Value=Value
				FROM tbl_WorkflowTemplateConditionEvent
				WHERE ID=@_ConditionEventID
				
				SET @_Code = REPLACE(@_Code, '''''''', '''''''''''')
				
				IF (@_Category=0) -- Действие
				BEGIN
					SET @sql = ''SELECT @TotalRowsReturnedOUT=COUNT(*)
								FROM tbl_ContactActivity
								WHERE ContactID=@ContactID
									  AND ActivityTypeID=@ActivityType''
									  
					IF (@_ActivityType=1 OR @_ActivityType=11 OR @_ActivityType=6)
					BEGIN
						IF (@_ActivityType=1 OR @_ActivityType=11)
						BEGIN
							SET @sql = @sql + '' AND ActivityCode LIKE N''''%'''' + @Code+ ''''%'''' ''
						END
						IF (@_ActivityType=6)
						BEGIN
							SET @sql = @sql + '' AND ActivityCode LIKE N'''''''' + @Code + '''''''' ''
						END
					END
					ELSE
					BEGIN
						SET @sql = @sql + '' AND ActivityCode=@Code ''
					END
					
					IF (@_ActualPeriod <> 0)
					BEGIN
						SET @sql = @sql + '' AND CreatedAt > DATEADD(day, (-1 * @ActualPeriod), GETDATE()) ''
					END
					
					-- Исключаем из выборки активность которая была до вызова предыдущего процесса
					IF (@_StartDate IS NOT NULL)
					BEGIN
						SET @sql = @sql + '' AND CreatedAt > @StartDate ''
					END
										
					SET @ParmDefinition = ''@TotalRowsReturnedOUT int OUTPUT, @ContactID uniqueidentifier, @ActivityType int, @Code nvarchar(max), @ActualPeriod int, @StartDate datetime''
					EXECUTE sp_executesql @sql,
							@ParmDefinition,
							@TotalRowsReturnedOUT=@TotalRowsReturned OUTPUT,
							@ContactID=@Parameter,
							@ActivityType=@_ActivityType,
							@Code=@_Code,
							@ActualPeriod=@_ActualPeriod,
							@StartDate=@_StartDate
				END
				print @TotalRowsReturned
				
				IF (@TotalRowsReturned > 0)
				BEGIN
					SET @Count = @Count + 1
				END
				
				IF (@_Category=1) -- Значение реквизита
				BEGIN
					DECLARE @_ColumnTypeID int
					DECLARE @_StringValue nvarchar(512)
					DECLARE @_DateValue datetime
					DECLARE @_SiteColumnValueID uniqueidentifier
					SELECT
						@_ColumnTypeID=tbl_SiteColumns.TypeID,
						@_StringValue=tbl_ContactColumnValues.StringValue,
						@_DateValue=tbl_ContactColumnValues.DateValue,
						@_SiteColumnValueID=tbl_ContactColumnValues.SiteColumnValueID
					FROM tbl_ContactColumnValues
					LEFT JOIN tbl_SiteColumns ON tbl_SiteColumns.ID=tbl_ContactColumnValues.SiteColumnID
					WHERE ContactID=@Parameter AND SiteColumnID=CAST(@_Requisite AS uniqueidentifier)
					
					-- Строка/Число/Текст
					IF ((@_ColumnTypeID=1 OR @_ColumnTypeID=4 OR @_ColumnTypeID=5)
						AND ((@_Formula=4 AND @_StringValue LIKE ''%''+@_Value)
							  OR (@_Formula=5 AND @_StringValue LIKE @_Value)
							)
						)
					BEGIN
						SET @Count = @Count + 1
					END
					-- Дата
					IF (@_ColumnTypeID=2
						AND ((@_Formula=7 AND @_DateValue < CAST(@_Value AS datetime))
							  OR (@_Formula=9 AND @_DateValue <= CAST(@_Value AS datetime))
							  OR (@_Formula=6 AND @_DateValue > CAST(@_Value AS datetime))
							  OR (@_Formula=8 AND @_DateValue >= CAST(@_Value AS datetime))
							)
					   )
					   BEGIN
							SET @Count = @Count + 1
					   END
					--Справочник
					IF (@_ColumnTypeID=3
						AND ((@_Formula=2 AND (@_SiteColumnValueID IS NULL OR @_SiteColumnValueID = N''00000000-0000-0000-0000-000000000000''))
							OR (@_Formula=1 AND (@_SiteColumnValueID IS NOT NULL AND @_SiteColumnValueID <> N''00000000-0000-0000-0000-000000000000''))
							OR (@_Formula=3 AND @_SiteColumnValueID = CAST(@_Value AS uniqueidentifier))
							)
					   )
					   BEGIN
							SET @Count = @Count + 1
					   END
				END
				
				DECLARE @_Scores int
				IF (@_Category=2) -- Балл по поведению
				BEGIN
					SET @_Scores = (SELECT Score FROM tbl_ContactActivityScore WHERE ID=@Parameter AND ScoreCategory=0 AND SiteActivityScoreTypeID=CAST(@_Requisite AS uniqueidentifier))
					IF ((@_Formula = 7 AND @_Scores < @_Value)
						OR (@_Formula = 9 AND @_Scores <= @_Value)
						OR (@_Formula = 6 AND @_Scores > @_Value)
						OR (@_Formula = 8 AND @_Scores >= @_Value))
					BEGIN
						SET @Count = @Count + 1
					END
				END
				
				IF (@_Category=3) -- Балл по характеристикам
				BEGIN
					SET @_Scores = (SELECT Score FROM tbl_ContactActivityScore WHERE ID=@Parameter AND ScoreCategory=1 AND SiteActivityScoreTypeID=CAST(@_Requisite AS uniqueidentifier))
					IF ((@_Formula = 7 AND @_Scores < @_Value)
						OR (@_Formula = 9 AND @_Scores <= @_Value)
						OR (@_Formula = 6 AND @_Scores > @_Value)
						OR (@_Formula = 8 AND @_Scores >= @_Value))
					BEGIN
						SET @Count = @Count + 1
					END
				END
				
				DELETE #TmpConditionEvent WHERE ID=@_ConditionEventID
			END
			DROP TABLE #TmpConditionEvent
			
			IF (@CountConditionEvent<>0
				AND ((@_Condition=0 AND @CountConditionEvent=@Count)
				OR (@_Condition=1 AND @Count>0)
				OR (@_Condition=2 AND @Count>=@_ActivityCount)
				))
			BEGIN
				SET @FLAG = 1
			END
		END
		
		
		IF (@FLAG = 1)
		BEGIN
			DECLARE @_WorkflowTemplateElementID uniqueidentifier = 
			(SELECT tbl_WorkflowTemplateElement.ID FROM tbl_WorkflowTemplate
			LEFT JOIN tbl_WorkflowTemplateElement ON tbl_WorkflowTemplateElement.WorkflowTemplateID=tbl_WorkflowTemplate.ID
			WHERE tbl_WorkflowTemplate.ID=@_WorkflowTemplateID AND tbl_WorkflowTemplateElement.ElementType=5) -- Начало процесса
			
			-- Найден элемент с типом "Начало процесса"
			IF (@_WorkflowTemplateElementID IS NOT NULL)
			BEGIN
				INSERT INTO tbl_Workflow (ID, SiteID, WorkflowTemplateID, StartDate, MassWorkflowID)
				VALUES (@_WorkflowID, @SiteID, @_WorkflowTemplateID, GETDATE(), @MassWorkflowID)
				
				INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
				VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, @Parameter)


		SET @_WorkflowTemplateParameterID =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Компания'' AND IsSystem=1)
		INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
		VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, (SELECT CompanyID FROM tbl_Contact WHERE ID=@Parameter))
		
		SET @_WorkflowTemplateParameterID =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Автор (роль)'' AND IsSystem=1)
		INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
		VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, NULL)
		
		SET @_WorkflowTemplateParameterID =
		(SELECT ID FROM tbl_WorkflowTemplateParameter
		WHERE WorkflowTemplateID=@_WorkflowTemplateID AND Name=N''Ответственный по компании (роль)'' AND IsSystem=1)
		INSERT INTO tbl_WorkflowParameter (WorkflowID, WorkflowTemplateParameterID, [Value])
		VALUES (@_WorkflowID, @_WorkflowTemplateParameterID, (SELECT tbl_Company.OwnerID FROM tbl_Contact LEFT JOIN tbl_Company ON tbl_Company.ID=tbl_Contact.CompanyID WHERE tbl_Contact.ID=@Parameter))

				
				DECLARE @WorkflowElementID uniqueidentifier = NEWID()
				INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
				VALUES (@WorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 1)
				
				EXEC WorkflowProcessing @WorkflowElementID
			END
		END
	    
		DELETE #TmpWorkflowTemplate WHERE ID=@_WorkflowTemplateID
	END
	DROP TABLE #TmpWorkflowTemplate
END'

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[WorkflowProcessing]
(
	@_WorkflowElementID uniqueidentifier, -- Входящий элемент
	@_StartElementResult nvarchar(255) = NULL -- Результат выполнения элемента процесса
)
AS
BEGIN
	DECLARE @_SiteID uniqueidentifier
	DECLARE @_WorkflowStartDate datetime
	DECLARE @_WorkflowID uniqueidentifier
	DECLARE @_WorkflowTemplateContactID uniqueidentifier
	DECLARE @_WorkflowTemplateElementID uniqueidentifier
	DECLARE @_WorkflowParameterID uniqueidentifier
	DECLARE @_ControlDate datetime
	DECLARE @_WorkflowElementStatus int = 0
	DECLARE @_WorkflowStatus int = 0
	DECLARE @_WorkflowResult nvarchar(255)
	DECLARE @_MassWorkflowID uniqueidentifier = NULL
	DECLARE @_ElementType int
	DECLARE @_EndDateElement datetime = GETDATE()
	
	DECLARE @_StartAfter int
	DECLARE @_StartPeriod int
	DECLARE @_DurationHours int
	DECLARE @_DurationMinutes int
	DECLARE @_ControlAfter int
	DECLARE @_ControlPeriod int
	DECLARE @_ControlFromBeginProccess bit
	
	DECLARE @_CountWaitingElement int
	
	SELECT @_WorkflowID=w.WorkflowID,
		   @_WorkflowTemplateElementID=w.WorkflowTemplateElementID,
		   @_ControlDate=w.ControlDate,
		   @_WorkflowTemplateContactID=wt.ContactID,
		   @_WorkflowStatus=wf.[Status],
		   @_ElementType=t.ElementType,
		   @_StartAfter=t.StartAfter,
		   @_StartPeriod=t.StartPeriod
		   --@_ControlAfter=t.ControlAfter,
		   --@_ControlPeriod=t.ControlPeriod,
		   --@_ControlFromBeginProccess=t.ControlFromBeginProccess
	FROM tbl_WorkflowElement AS w
	LEFT JOIN tbl_WorkflowTemplateElement AS t ON t.ID=w.WorkflowTemplateElementID
	LEFT JOIN tbl_WorkflowTemplate AS wt ON wt.ID=t.WorkflowTemplateID
	LEFT JOIN tbl_Workflow AS wf ON wf.ID=w.WorkflowID
	WHERE w.ID=@_WorkflowElementID AND (t.ElementType<>1 OR (t.ElementType=1 AND w.[Status]=0))
		  AND wt.[DataBaseStatusID] = 0 -- Запись активна
	
	SELECT @_SiteID=SiteID, @_WorkflowStartDate=StartDate, @_MassWorkflowID=MassWorkflowID
	FROM tbl_Workflow
	WHERE ID=@_WorkflowID
	
IF (@_WorkflowStatus=0)
BEGIN
	
	-- Выбираем все элементы по связям, где входящий элемент является начальным
	-- и с выходящим результатом
	SELECT EndElementID
	INTO #WorkflowTemplateElementRelation
	FROM tbl_WorkflowTemplateElementRelation
	WHERE StartElementID=@_WorkflowTemplateElementID AND (StartElementResult=@_StartElementResult OR @_StartElementResult IS NULL)
	
	-- Если выходы с элемента есть
	IF ((SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0)
	BEGIN
		SET @_WorkflowElementStatus = 1
		
		IF (@_StartElementResult=0 AND @_ElementType=2) -- Событие не произошло (просрочен)
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
		
		-- Входящий элемент не просрочен
		IF (
			((@_ControlDate IS NULL) OR (@_ControlDate > GETDATE()))
			OR (@_ElementType = 2) -- Ожидание события
			)
		BEGIN
					WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementRelation) > 0
					BEGIN
						SELECT TOP 1 @_WorkflowTemplateElementID=EndElementID
						FROM #WorkflowTemplateElementRelation
						
						IF ((SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND WorkflowTemplateElementID=@_WorkflowTemplateElementID) = 0)
						BEGIN
							DECLARE @_WorkflowTemplateElementType int
							DECLARE @_WorkflowTemplateElementName nvarchar(255)
							DECLARE @_IsActive bit
							SELECT @_WorkflowTemplateElementType=ElementType, @_WorkflowTemplateElementName=Name, @_IsActive=IsActive
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							DECLARE @_InsertedWorkflowElementID uniqueidentifier = NEWID()
							
							SELECT --@_StartAfter=StartAfter,
								   --@_StartPeriod=StartPeriod,
								   @_DurationHours=DurationHours,
								   @_DurationMinutes=DurationMinutes,
								   @_ControlAfter=ControlAfter,
								   @_ControlPeriod=ControlPeriod,
								   @_ControlFromBeginProccess=ControlFromBeginProccess
							FROM tbl_WorkflowTemplateElement
							WHERE ID=@_WorkflowTemplateElementID
							
							-- Тип элемента "Окончание процесса"
							IF (@_WorkflowTemplateElementType=6)
							BEGIN
								-- Если нет больше элементов со статусов в Ожидании (кроме текущего), завершаем процесс
								SET @_CountWaitingElement = (SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND [Status]=0)
								IF (@_CountWaitingElement = 0 OR @_CountWaitingElement = 1)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 1)
									
									UPDATE tbl_Workflow
									SET EndDate=GETDATE(), [Status]=1
									WHERE ID=@_WorkflowID
									
									-- Программа развития "Завершена"
									IF (@_MassWorkflowID IS NOT NULL)
									BEGIN
										IF (SELECT COUNT(*)
										FROM tbl_Workflow
										WHERE MassWorkflowID=@_MassWorkflowID AND [Status]=0) = 0
										BEGIN
											UPDATE tbl_MassWorkflow
											SET [Status]=2
											WHERE ID=@_MassWorkflowID
										END
									END
								END
							END
							
							-- определяем параметер
							SET @_WorkflowParameterID =
							(SELECT tbl_WorkflowParameter.[Value]
							FROM tbl_WorkflowParameter
							LEFT JOIN tbl_WorkflowTemplateParameter ON tbl_WorkflowTemplateParameter.ID=tbl_WorkflowParameter.WorkflowTemplateParameterID
							WHERE tbl_WorkflowParameter.WorkflowID=@_WorkflowID
								  AND tbl_WorkflowTemplateParameter.Name=N''Контакт''
								  AND tbl_WorkflowTemplateParameter.IsSystem=1)
								  
							-- определяем через сколько запускать элемент, если 0 то сразу
							DECLARE @_ActionDate datetime = GETDATE()
							IF (@_StartAfter <> 0)
							BEGIN
								SET @_ActionDate = CASE
									WHEN @_StartPeriod = 0 THEN DATEADD(minute, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 1 THEN DATEADD(hour, @_StartAfter, @_ActionDate)
									WHEN @_StartPeriod = 2 THEN DATEADD(day, @_StartAfter, @_ActionDate)
								END
							END
							
							-- дата контроля
							SET @_ControlDate = GETDATE()
							IF (@_ControlFromBeginProccess=1) -- От начала процесса
							BEGIN
								SET @_ControlDate = @_WorkflowStartDate
							END
							
							SET @_ControlDate = CASE
								WHEN @_ControlPeriod = 0 THEN DATEADD(minute, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 1 THEN DATEADD(hour, @_ControlAfter, @_ControlDate)
								WHEN @_ControlPeriod = 2 THEN DATEADD(day, @_ControlAfter, @_ControlDate)
							END
							
							
							-- Тип элемента "Сообщение"
							IF (@_WorkflowTemplateElementType = 0)
							BEGIN
								-- Начало добавления сообщения в очередь
								DECLARE @_SiteActionTemplateID uniqueidentifier = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActionTemplateID'')
								
								DECLARE @_NotBeforeDate datetime = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''NotBeforeDate'')
								
								DECLARE @_NotLaterDate datetime = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''NotLaterDate'')
								
								DECLARE @_AddSiteAction bit = 1
								
								IF ((@_NotBeforeDate IS NOT NULL) AND (@_ActionDate < @_NotBeforeDate))
								BEGIN
									SET @_ActionDate = @_NotBeforeDate
								END
								
								IF ((@_NotLaterDate IS NOT NULL) AND (@_ActionDate > @_NotLaterDate))
								BEGIN
									SET @_AddSiteAction = 0
								END
								
								IF (@_AddSiteAction = 1)
								BEGIN
									EXEC @_ActionDate = GetSiteActionPlannedDate @_WorkflowTemplateElementID, @_ActionDate
									IF (@_ActionDate IS NULL OR ((@_NotLaterDate IS NOT NULL) AND (@_ActionDate > @_NotLaterDate)))
									BEGIN
										SET @_AddSiteAction = 0
									END
								END
								
								
								IF (@_AddSiteAction = 1)
								BEGIN
									DECLARE @MessageTitle nvarchar(255)
									DECLARE @MessageText nvarchar(max)
									SELECT @MessageTitle=MessageCaption, @MessageText=MessageBody
									FROM tbl_SiteActionTemplate
									WHERE ID=@_SiteActionTemplateID
									
									DECLARE @_SiteActionID uniqueidentifier = NEWID()
									INSERT INTO tbl_SiteAction (ID, SiteID, SiteActionTemplateID, ContactID, ActionStatusID, ActionDate, MessageTitle, MessageText)
									VALUES (@_SiteActionID, @_SiteID, @_SiteActionTemplateID, @_WorkflowParameterID, 1, @_ActionDate, @MessageTitle, @MessageText)
								END
								-- Конец добавления сообщения в очередь
								
								IF (@_AddSiteAction = 1)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_SiteActionID)
								END
								ELSE
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, EndDate, [Status])
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), GETDATE(), 2)
									
									EXEC WorkflowProcessing @_InsertedWorkflowElementID, 4
								END
							END
							
							-- Тип элемента "Ожидание события"
							IF (@_WorkflowTemplateElementType = 2)
							BEGIN
								IF (@_ControlAfter<>0)
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], ControlDate)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, @_ControlDate)
								END
								ELSE
								BEGIN
									INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], ControlDate)
									VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 0, GETDATE())
								END
							END
							
							-- Тип элемента "Действие"
							IF (@_WorkflowTemplateElementType = 3)
							BEGIN
								-- Начало добавления действия
								DECLARE @_ContactActivityDescription nvarchar(255) = 
								(SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ContactActivityDescription'')
								
								DECLARE @_ContactActivityID uniqueidentifier = NEWID()
								INSERT INTO tbl_ContactActivity (ID, SiteID, ContactID, CreatedAt, ActivityTypeID, ActivityCode)
								VALUES (@_ContactActivityID, @_SiteID, @_WorkflowParameterID, GETDATE(), 6, @_ContactActivityDescription)
								-- Конец добавления действия
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1, @_ContactActivityID)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Задача"
							IF (@_WorkflowTemplateElementType = 1)
							BEGIN
								-- Начало добавления задачи
								DECLARE @_TaskID uniqueidentifier = NEWID()
								DECLARE @_TaskTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskType'') AS uniqueidentifier)
								
								DECLARE @_IsImportantTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsImportantTask'') AS bit)
								
								DECLARE @_IsUrgentTask bit = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''TaskIsUrgentTask'') AS bit)
								
								DECLARE @_TaskEndDate datetime = @_ActionDate
								SET @_TaskEndDate = DATEADD(hour, @_DurationHours, @_TaskEndDate)
								SET @_TaskEndDate = DATEADD(minute, @_DurationMinutes, @_TaskEndDate)
								INSERT INTO tbl_Task (ID, SiteID, Title, TaskTypeID, StartDate, EndDate, DateOfControl, IsImportantTask, PlanDurationMinutes, PlanDurationHours, ResponsibleID, CreatorID, IsUrgentTask, TaskStatusID)
								VALUES (@_TaskID, @_SiteID, @_WorkflowTemplateElementName, @_TaskTypeID, @_ActionDate, @_TaskEndDate, @_ControlDate, @_IsImportantTask, @_DurationMinutes, @_DurationHours, @_WorkflowTemplateContactID, @_WorkflowTemplateContactID, @_IsUrgentTask, 1)
								-- Конец добавления задачи
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, ControlDate, [Status], Value)
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), @_ControlDate, 0, @_TaskID)
							END
							
							-- Тип элемента "Сегментация"
							IF (@_WorkflowTemplateElementType = 7)
							BEGIN
								SELECT ID
								INTO #WorkflowTemplateElementTag
								FROM tbl_WorkflowTemplateElementTag
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID
								
								DECLARE @_WorkflowTemplateElementTagID uniqueidentifier
								DECLARE @_SiteTagID uniqueidentifier
								DECLARE @_Operation int
								WHILE (SELECT COUNT(*) FROM #WorkflowTemplateElementTag) > 0
								BEGIN
									SELECT TOP 1 @_WorkflowTemplateElementTagID=ID
									FROM #WorkflowTemplateElementTag
									
									SELECT @_SiteTagID=SiteTagID, @_Operation=Operation
									FROM tbl_WorkflowTemplateElementTag
									WHERE ID=@_WorkflowTemplateElementTagID
									
									IF (@_Operation = 0)
									BEGIN
										DELETE FROM tbl_SiteTagObjects
										WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID
									END
									ELSE
									BEGIN
										IF (SELECT COUNT(*) FROM tbl_SiteTagObjects WHERE SiteTagID=@_SiteTagID AND ObjectID=@_WorkflowParameterID) = 0
										BEGIN
											INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID)
											VALUES (@_SiteTagID, @_WorkflowParameterID)
										END
									END
									
									DELETE #WorkflowTemplateElementTag WHERE ID=@_WorkflowTemplateElementTagID
								END
								DROP TABLE #WorkflowTemplateElementTag

								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							-- Тип элемента "Скорринг"
							IF (@_WorkflowTemplateElementType = 8)
							BEGIN
								-- Начало добавления баллов
								--DECLARE @_SiteActivityScoreTypeID uniqueidentifier = NEWID()
								DECLARE @_SiteActivityScoreTypeID uniqueidentifier = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''SiteActivityScoreType'') AS uniqueidentifier)
								
								DECLARE @_ScoreCategory int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreCategory'') AS int)
								
								DECLARE @_ScoreOperation int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''ScoreOperation'') AS int)
								
								DECLARE @_AddedScore int = CAST((SELECT Value
								FROM tbl_WorkflowTemplateElementParameter
								WHERE WorkflowTemplateElementID=@_WorkflowTemplateElementID AND Name=N''AddedScore'') AS int)
								
								-- есть балл такого типа и такой категории
								DECLARE @_ContactActivityScoreID uniqueidentifier
								DECLARE @_oldScore int
								
								SELECT @_ContactActivityScoreID=ID, @_oldScore=Score
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								
								IF (@_ContactActivityScoreID IS NOT NULL)
								BEGIN
									DECLARE @_newScore int = CASE @_ScoreOperation
															 WHEN 0 THEN @_AddedScore -- (=)
															 WHEN 1 THEN @_oldScore + @_AddedScore -- (+)
															 WHEN 2 THEN @_oldScore - @_AddedScore -- (-)
															 WHEN 3 THEN @_oldScore * @_AddedScore -- (*)
															 END
									UPDATE tbl_ContactActivityScore
									SET Score=@_newScore
									WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID AND SiteActivityScoreTypeID=@_SiteActivityScoreTypeID AND ScoreCategory=@_ScoreCategory
								END
								ELSE
								BEGIN
									SET @_ContactActivityScoreID = NEWID()
									
									INSERT INTO tbl_ContactActivityScore (ID, SiteID, SiteActivityScoreTypeID, ContactID, Score, ScoreCategory)
									VALUES (@_ContactActivityScoreID, @_SiteID, @_SiteActivityScoreTypeID, @_WorkflowParameterID, @_AddedScore, @_ScoreCategory)
								END
								
								INSERT INTO tbl_ContactActivityScoreHistory (ContactActivityScoreID, Operation, Score, ActivityDate, Comment)
								VALUES (@_ContactActivityScoreID, @_ScoreOperation, @_AddedScore, GETDATE(), @_InsertedWorkflowElementID)
								-- Конец добавления баллов
								
								-- Начало обновления баллов контакта
								DECLARE @maxScoreTable TABLE
								(
									Score int,
									ScoreTypeID uniqueidentifier
								)

								INSERT INTO @maxScoreTable (Score, ScoreTypeID)
								SELECT TOP 1 SUM(Score) AS scoresum, SiteActivityScoreTypeID
								FROM tbl_ContactActivityScore
								WHERE SiteID=@_SiteID AND ContactID=@_WorkflowParameterID
								GROUP BY SiteActivityScoreTypeID
								ORDER BY scoresum DESC

								DECLARE @_BehaviorScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=0 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								DECLARE @_CharacteristicsScore int = (SELECT Score
								FROM tbl_ContactActivityScore
								WHERE SiteActivityScoreTypeID=(SELECT TOP 1 ScoreTypeID FROM @maxScoreTable) AND ScoreCategory=1 AND SiteID=@_SiteID AND ContactID=@_WorkflowParameterID)

								IF (@_BehaviorScore IS NOT NULL)
								BEGIN
									DECLARE @_minScoreReadyToSell int = (SELECT MIN(MinScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									DECLARE @_maxScoreReadyToSell int = (SELECT MAX(MaxScore) FROM tbl_ReadyToSell WHERE SiteID=@_SiteID)
									
									IF (@_BehaviorScore < @_minScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_minScoreReadyToSell
									END
									IF (@_BehaviorScore > @_maxScoreReadyToSell)
									BEGIN
										SET @_BehaviorScore = @_maxScoreReadyToSell
									END

									UPDATE tbl_Contact
									SET BehaviorScore=@_BehaviorScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET ReadyToSellID=(SELECT TOP 1 ID FROM tbl_ReadyToSell WHERE SiteID=@_SiteID AND (@_BehaviorScore >= MinScore AND @_BehaviorScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								IF (@_CharacteristicsScore IS NOT NULL)
								BEGIN
									DECLARE @_minScorePriority int = (SELECT MIN(MinScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									DECLARE @_maxScorePriority int = (SELECT MAX(MaxScore) FROM tbl_Priorities WHERE SiteID=@_SiteID)
									
									IF (@_CharacteristicsScore < @_minScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_minScorePriority
									END
									IF (@_CharacteristicsScore > @_maxScorePriority)
									BEGIN
										SET @_CharacteristicsScore = @_maxScorePriority
									END

									UPDATE tbl_Contact
									SET CharacteristicsScore=@_CharacteristicsScore
									WHERE ID=@_WorkflowParameterID
									
									UPDATE tbl_Contact
									SET PriorityID=(SELECT TOP 1 ID FROM tbl_Priorities WHERE SiteID=@_SiteID AND (@_CharacteristicsScore >= MinScore AND @_CharacteristicsScore <= MaxScore))
									WHERE ID=@_WorkflowParameterID
								END

								UPDATE tbl_Contact
								SET Score= BehaviorScore + CharacteristicsScore
								WHERE ID=@_WorkflowParameterID
								-- Конец обновления баллов контакта
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), 1)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, NULL
							END
							
							IF (@_WorkflowTemplateElementType = 9)
							BEGIN
								DECLARE @_ExternalRequestResult nvarchar(1)
								EXEC @_ExternalRequestResult = DoExternalRequestFunc @_WorkflowTemplateElementID, @_WorkflowParameterID
								
								INSERT INTO tbl_WorkflowElement (ID, WorkflowID, WorkflowTemplateElementID, StartDate, [Status])
								VALUES (@_InsertedWorkflowElementID, @_WorkflowID, @_WorkflowTemplateElementID, GETDATE(), @_ExternalRequestResult)
								
								EXEC WorkflowProcessing @_InsertedWorkflowElementID, @_ExternalRequestResult
							END
						END
						
						DELETE #WorkflowTemplateElementRelation WHERE EndElementID=@_WorkflowTemplateElementID
					END
					DROP TABLE #WorkflowTemplateElementRelation
		END
		-- Входящие элемент просрочен
		ELSE
		BEGIN
			SET @_WorkflowElementStatus = 3
		END
	END
	-- Если нет выходов с элемента
	ELSE
	BEGIN
		SET @_WorkflowElementStatus = 2
		
		-- Если ошибка элемента и нет больше элементов в ожидании
		SET @_CountWaitingElement = (SELECT COUNT(*) FROM tbl_WorkflowElement WHERE WorkflowID=@_WorkflowID AND [Status]=0)
		IF (@_CountWaitingElement = 0 OR @_CountWaitingElement = 1)
		BEGIN
			UPDATE tbl_Workflow
			SET EndDate=GETDATE(), [Status]=3
			WHERE ID=@_WorkflowID
		END
	END
	
	
	-- Обновление статуса элемента процесса
	UPDATE tbl_WorkflowElement
	SET EndDate=@_EndDateElement,
		[Status]=@_WorkflowElementStatus,
		Result=@_StartElementResult
	WHERE ID=@_WorkflowElementID
	
END	
END'

commit
exec LBC_SetVersion 324
END

/*******************************************************************************
	2012-10-18
*******************************************************************************/
if ( dbo.LBC_Version() < 325 )
BEGIN
begin tran

ALTER TABLE [tbl_CronJob] ADD ExecutionTime int NOT NULL DEFAULT((0))

commit
exec LBC_SetVersion 325
END

/*******************************************************************************
	2012-10-18
*******************************************************************************/
if ( dbo.LBC_Version() < 326 )
BEGIN
begin tran
EXEC dbo.sp_executesql @statement = N'ALTER TRIGGER [dbo].[UpdateStatisticData] ON  [dbo].[tbl_Contact] FOR INSERT, UPDATE
AS 
BEGIN
	DECLARE @SiteID uniqueidentifier
	DECLARE @AdvertisingPlatformID uniqueidentifier
			
	DECLARE @SiteIDs table(
		SiteID uniqueidentifier
	)
	
	DECLARE @AdvertisingPlatformIDs table(
		AdvertisingPlatformID uniqueidentifier
	)
	
	INSERT INTO @SiteIDs (SiteID)	
	SELECT DISTINCT SiteID
	FROM inserted
		
	/* --- Категории контактов --- */
	DECLARE @ContactCategoryKnownCountIncrement int = 0
	DECLARE @ContactCategoryKnownCountDecrement int = 0
	DECLARE @ContactCategoryActiveCountIncrement int = 0
	DECLARE @ContactCategoryActiveCountDecrement int = 0
	DECLARE @ContactCategoryAnonymousCountIncrement int = 0
	DECLARE @ContactCategoryAnonymousCountDecrement int = 0
	DECLARE @ContactCategoryTotalCountIncrement int = 0
	DECLARE @ContactCategoryTotalCountDecrement int = 0
	DECLARE @ContactCategoryDeletedCountIncrement int = 0
	DECLARE @ContactCategoryDeletedCountDecrement int = 0
	
	/* --- Источники посетителей --- */
	DECLARE @VisitorSourceNewAnonymousTotal int = 0	
	DECLARE @VisitorSourceNewAnonymousAdvertisingPlatform int = 0
	DECLARE @VisitorSourceNewAnonymousAdvertisingPlatformKey varchar(256)
	DECLARE @VisitorSourceNewAnonymousReffer int = 0
	DECLARE @VisitorSourceNewAnonymousDirect int = 0
	
	/* --- Статистика клиентской базы --- */
	DECLARE @ClientBaseStatisticCountInBase int = 0
	
	/* --- Рост клиентской базы --- */	
	DECLARE @ClientBaseGrowthNewTotal int = 0
	DECLARE @ClientBaseGrowthNewRegistered int = 0
	DECLARE @ClientBaseGrowthNewImported int = 0	
	
	DECLARE @Action as char(1);
    SET @Action = ''I''; -- Set Action to Insert by default.
    IF EXISTS(SELECT * FROM DELETED)
    BEGIN
        SET @Action = 
            CASE
                WHEN EXISTS(SELECT * FROM INSERTED) THEN ''U'' -- Set Action to Updated.
                ELSE ''D'' -- Set Action to Deleted.       
            END
    END    
    
    WHILE EXISTS(SELECT * FROM @SiteIDs)
    BEGIN
		SELECT TOP 1 @SiteID = SiteID FROM @SiteIDs
		
		INSERT INTO @AdvertisingPlatformIDs(AdvertisingPlatformID)
		SELECT AdvertisingPlatformID
		FROM inserted
		WHERE AdvertisingPlatformID IS NOT NULL AND SiteID = @SiteID
		
		IF @Action = ''I''
		BEGIN
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID AND Category = 4)
			BEGIN
				SET @ContactCategoryAnonymousCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND Category = 4)
				EXEC Statistic_Update @SiteID, N''ContactCategoryAnonymousCount'', @ContactCategoryAnonymousCountIncrement, 0
			END
			
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID AND Category <> 3)
			BEGIN
				SET @ContactCategoryTotalCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND Category <> 3)
				EXEC Statistic_Update @SiteID, N''ContactCategoryTotalCount'', @ContactCategoryTotalCountIncrement, 0
			END
			
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID)
			BEGIN
				SET @ClientBaseStatisticCountInBase = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID)
				EXEC Statistic_Update @SiteID, N''ClientBaseStatisticCountInBase'', @ClientBaseStatisticCountInBase, 0
				
				SET @VisitorSourceNewAnonymousTotal = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID)
				EXEC Statistic_Update @SiteID, N''VisitorSourceNewAnonymousTotal'', @VisitorSourceNewAnonymousTotal, 0						
				
				SET @ClientBaseGrowthNewTotal = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID)
				EXEC Statistic_Update @SiteID, N''ClientBaseGrowthNewTotal'', @ClientBaseGrowthNewTotal, 0
			END
			
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID AND RefferID IS NOT NULL)
			BEGIN
				SET @VisitorSourceNewAnonymousReffer = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND RefferID IS NOT NULL)
				EXEC Statistic_Update @SiteID, N''VisitorSourceNewAnonymousReffer'', @VisitorSourceNewAnonymousReffer, 0
			END
			
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID AND RefferURL IS NOT NULL AND RefferURL <> '''')
			BEGIN
				SET @VisitorSourceNewAnonymousDirect = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND RefferURL IS NOT NULL AND RefferURL <> '''')
				EXEC Statistic_Update @SiteID, N''VisitorSourceNewAnonymousDirect'', @VisitorSourceNewAnonymousDirect, 0
			END
			
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID AND RegistrationSourceID = 0)
			BEGIN
				SET @ClientBaseGrowthNewRegistered = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND RegistrationSourceID = 0)
				EXEC Statistic_Update @SiteID, N''ClientBaseGrowthNewRegistered'', @ClientBaseGrowthNewRegistered, 0
			END
			
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID AND RegistrationSourceID = 3)
			BEGIN
				SET @ClientBaseGrowthNewImported = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND RegistrationSourceID = 3)
				EXEC Statistic_Update @SiteID, N''ClientBaseGrowthNewImported'', @ClientBaseGrowthNewImported, 0
			END
		END
		ELSE
		BEGIN
			IF (UPDATE(Category))
			BEGIN
				SET @ContactCategoryKnownCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND (Category = 0 OR Category = 1 OR Category = 2))
				SET @ContactCategoryKnownCountDecrement = (SELECT COUNT(*) FROM deleted WHERE SiteID = @SiteID AND (Category = 0 OR Category = 1 OR Category = 2))
				EXEC Statistic_Update @SiteID, N''ContactCategoryKnownCount'', @ContactCategoryKnownCountIncrement, @ContactCategoryKnownCountDecrement
				
				SET @ContactCategoryActiveCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND (Category = 1 OR Category = 2))
				SET @ContactCategoryActiveCountDecrement = (SELECT COUNT(*) FROM deleted WHERE SiteID = @SiteID AND (Category = 1 OR Category = 2))
				EXEC Statistic_Update @SiteID, N''ContactCategoryActiveCount'', @ContactCategoryActiveCountIncrement, @ContactCategoryActiveCountDecrement
				EXEC Statistic_Update @SiteID, N''ClientBaseStatisticActiveCount'', @ContactCategoryActiveCountIncrement, 0
				
				SET @ContactCategoryAnonymousCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND Category = 4)
				SET @ContactCategoryAnonymousCountDecrement = (SELECT COUNT(*) FROM deleted WHERE SiteID = @SiteID AND Category = 4)
				EXEC Statistic_Update @SiteID, N''ContactCategoryAnonymousCount'', @ContactCategoryAnonymousCountIncrement, @ContactCategoryAnonymousCountDecrement
				
				SET @ContactCategoryTotalCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND Category <> 3)
				SET @ContactCategoryTotalCountDecrement = (SELECT COUNT(*) FROM deleted WHERE SiteID = @SiteID AND Category <> 3)
				EXEC Statistic_Update @SiteID, N''ContactCategoryTotalCount'', @ContactCategoryTotalCountIncrement, @ContactCategoryTotalCountDecrement
				
				SET @ContactCategoryDeletedCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND Category = 3)
				SET @ContactCategoryDeletedCountDecrement = (SELECT COUNT(*) FROM deleted WHERE SiteID = @SiteID AND Category = 3)
				EXEC Statistic_Update @SiteID, N''ContactCategoryDeletedCount'', @ContactCategoryDeletedCountIncrement, @ContactCategoryDeletedCountDecrement								
			END
			IF (UPDATE(RefferID))
			BEGIN
				SET @VisitorSourceNewAnonymousReffer = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND RefferID IS NOT NULL)
				EXEC Statistic_Update @SiteID, N''VisitorSourceNewAnonymousReffer'', @VisitorSourceNewAnonymousReffer, 0
			END
			IF (UPDATE(RefferURL))
			BEGIN
				SET @VisitorSourceNewAnonymousDirect = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND RefferURL IS NOT NULL AND RefferURL <> '''')
				EXEC Statistic_Update @SiteID, N''VisitorSourceNewAnonymousDirect'', @VisitorSourceNewAnonymousDirect, 0
			END
		END
		
		IF @Action = ''I'' OR UPDATE(AdvertisingPlatformID)
		BEGIN
			WHILE EXISTS(SELECT * FROM @AdvertisingPlatformIDs)
			BEGIN
				SELECT TOP 1 @AdvertisingPlatformID = AdvertisingPlatformID FROM @AdvertisingPlatformIDs
				
				SET @VisitorSourceNewAnonymousAdvertisingPlatform = (SELECT COUNT(*) FROM inserted WHERE AdvertisingPlatformID = @AdvertisingPlatformID)
				SET @VisitorSourceNewAnonymousAdvertisingPlatformKey = N''VisitorSourceNewAnonymousAdvertisingPlatform_'' + CAST(@AdvertisingPlatformID AS varchar(50))
				EXEC Statistic_Update @SiteID, @VisitorSourceNewAnonymousAdvertisingPlatformKey, @VisitorSourceNewAnonymousAdvertisingPlatform, 0				
				
				DELETE FROM @AdvertisingPlatformIDs
				WHERE AdvertisingPlatformID = @AdvertisingPlatformID
			END
		END
		
		DELETE FROM @AdvertisingPlatformIDs
		
		DELETE FROM @SiteIDs
		WHERE SiteID = @SiteID
    END    
END'

commit
exec LBC_SetVersion 326
END

/*******************************************************************************
	2012-10-19
*******************************************************************************/
if ( dbo.LBC_Version() < 327 )
BEGIN
begin tran

DELETE FROM tbl_UserSettings WHERE ClassName = 'WebCounter.AdminPanel.Contacts' OR ClassName = 'WebCounter.AdminPanel.MassWorkflowContacts'
OR ClassName = 'WebCounter.AdminPanel.SegmentContacts' OR ClassName = 'WebCounter.AdminPanel.MassMailContacts'

ALTER TABLE [tbl_Contact] ADD Comment nvarchar(2048) NULL

commit
exec LBC_SetVersion 327
END


/*******************************************************************************
	2012-10-18
*******************************************************************************/
if ( dbo.LBC_Version() < 328 )
BEGIN
begin tran

ALTER TABLE [dbo].[tbl_InvoiceProducts] ALTER COLUMN [PriceListID] uniqueidentifier NULL

commit
exec LBC_SetVersion 328
END

/*******************************************************************************
	2012-10-2
*******************************************************************************/
if ( dbo.LBC_Version() < 329 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER TRIGGER [dbo].[UpdateStatisticData] ON  [dbo].[tbl_Contact] FOR INSERT, UPDATE
AS 
BEGIN
	DECLARE @SiteID uniqueidentifier
	DECLARE @AdvertisingPlatformID uniqueidentifier
			
	DECLARE @SiteIDs table(
		SiteID uniqueidentifier
	)
	
	DECLARE @AdvertisingPlatformIDs table(
		AdvertisingPlatformID uniqueidentifier
	)
	
	INSERT INTO @SiteIDs (SiteID)	
	SELECT DISTINCT SiteID
	FROM inserted
		
	/* --- Категории контактов --- */
	DECLARE @ContactCategoryKnownCountIncrement int = 0
	DECLARE @ContactCategoryKnownCountDecrement int = 0
	DECLARE @ContactCategoryActiveCountIncrement int = 0
	DECLARE @ContactCategoryActiveCountDecrement int = 0
	DECLARE @ContactCategoryAnonymousCountIncrement int = 0
	DECLARE @ContactCategoryAnonymousCountDecrement int = 0
	DECLARE @ContactCategoryTotalCountIncrement int = 0
	DECLARE @ContactCategoryTotalCountDecrement int = 0
	DECLARE @ContactCategoryDeletedCountIncrement int = 0
	DECLARE @ContactCategoryDeletedCountDecrement int = 0
	
	/* --- Источники посетителей --- */
	DECLARE @VisitorSourceNewAnonymousTotal int = 0	
	DECLARE @VisitorSourceNewAnonymousAdvertisingPlatform int = 0
	DECLARE @VisitorSourceNewAnonymousAdvertisingPlatformKey varchar(256)
	DECLARE @VisitorSourceNewAnonymousReffer int = 0
	DECLARE @VisitorSourceNewAnonymousDirect int = 0
		
	/* --- Рост клиентской базы --- */	
	DECLARE @ClientBaseGrowthNewTotal int = 0
	DECLARE @ClientBaseGrowthNewRegistered int = 0
	DECLARE @ClientBaseGrowthNewImported int = 0	
	
	DECLARE @Action as char(1);
    SET @Action = ''I''; -- Set Action to Insert by default.
    IF EXISTS(SELECT * FROM DELETED)
    BEGIN
        SET @Action = 
            CASE
                WHEN EXISTS(SELECT * FROM INSERTED) THEN ''U'' -- Set Action to Updated.
                ELSE ''D'' -- Set Action to Deleted.       
            END
    END    
    
    WHILE EXISTS(SELECT * FROM @SiteIDs)
    BEGIN
		SELECT TOP 1 @SiteID = SiteID FROM @SiteIDs
		
		INSERT INTO @AdvertisingPlatformIDs(AdvertisingPlatformID)
		SELECT AdvertisingPlatformID
		FROM inserted
		WHERE AdvertisingPlatformID IS NOT NULL AND SiteID = @SiteID
		
		IF @Action = ''I''
		BEGIN
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID AND Category = 4)
			BEGIN
				SET @ContactCategoryAnonymousCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND Category = 4)
				EXEC Statistic_Update @SiteID, N''ContactCategoryAnonymousCount'', @ContactCategoryAnonymousCountIncrement, 0
			END
			
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID AND Category <> 3)
			BEGIN
				SET @ContactCategoryTotalCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND Category <> 3)
				EXEC Statistic_Update @SiteID, N''ContactCategoryTotalCount'', @ContactCategoryTotalCountIncrement, 0
			END
			
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID)
			BEGIN				
				SET @VisitorSourceNewAnonymousTotal = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID)
				EXEC Statistic_Update @SiteID, N''VisitorSourceNewAnonymousTotal'', @VisitorSourceNewAnonymousTotal, 0						
				
				SET @ClientBaseGrowthNewTotal = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID)
				EXEC Statistic_Update @SiteID, N''ClientBaseGrowthNewTotal'', @ClientBaseGrowthNewTotal, 0
			END
			
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID AND RefferID IS NOT NULL)
			BEGIN
				SET @VisitorSourceNewAnonymousReffer = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND RefferID IS NOT NULL)
				EXEC Statistic_Update @SiteID, N''VisitorSourceNewAnonymousReffer'', @VisitorSourceNewAnonymousReffer, 0
			END
			
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID AND RefferURL IS NOT NULL AND RefferURL <> '''')
			BEGIN
				SET @VisitorSourceNewAnonymousDirect = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND RefferURL IS NOT NULL AND RefferURL <> '''')
				EXEC Statistic_Update @SiteID, N''VisitorSourceNewAnonymousDirect'', @VisitorSourceNewAnonymousDirect, 0
			END
			
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID AND RegistrationSourceID = 0)
			BEGIN
				SET @ClientBaseGrowthNewRegistered = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND RegistrationSourceID = 0)
				EXEC Statistic_Update @SiteID, N''ClientBaseGrowthNewRegistered'', @ClientBaseGrowthNewRegistered, 0
			END
			
			IF EXISTS(SELECT * FROM inserted WHERE SiteID = @SiteID AND RegistrationSourceID = 3)
			BEGIN
				SET @ClientBaseGrowthNewImported = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND RegistrationSourceID = 3)
				EXEC Statistic_Update @SiteID, N''ClientBaseGrowthNewImported'', @ClientBaseGrowthNewImported, 0
			END
		END
		ELSE
		BEGIN
			IF (UPDATE(Category))
			BEGIN
				SET @ContactCategoryKnownCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND (Category = 0 OR Category = 1 OR Category = 2))
				SET @ContactCategoryKnownCountDecrement = (SELECT COUNT(*) FROM deleted WHERE SiteID = @SiteID AND (Category = 0 OR Category = 1 OR Category = 2))
				EXEC Statistic_Update @SiteID, N''ContactCategoryKnownCount'', @ContactCategoryKnownCountIncrement, @ContactCategoryKnownCountDecrement								
				EXEC Statistic_Update @SiteID, N''ClientBaseStatisticCountInBase'', @ContactCategoryKnownCountIncrement, @ContactCategoryKnownCountDecrement
				
				SET @ContactCategoryActiveCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND (Category = 1 OR Category = 2))
				SET @ContactCategoryActiveCountDecrement = (SELECT COUNT(*) FROM deleted WHERE SiteID = @SiteID AND (Category = 1 OR Category = 2))
				EXEC Statistic_Update @SiteID, N''ContactCategoryActiveCount'', @ContactCategoryActiveCountIncrement, @ContactCategoryActiveCountDecrement
				EXEC Statistic_Update @SiteID, N''ClientBaseStatisticActiveCount'', @ContactCategoryActiveCountIncrement, 0
				
				SET @ContactCategoryAnonymousCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND Category = 4)
				SET @ContactCategoryAnonymousCountDecrement = (SELECT COUNT(*) FROM deleted WHERE SiteID = @SiteID AND Category = 4)
				EXEC Statistic_Update @SiteID, N''ContactCategoryAnonymousCount'', @ContactCategoryAnonymousCountIncrement, @ContactCategoryAnonymousCountDecrement
				
				SET @ContactCategoryTotalCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND Category <> 3)
				SET @ContactCategoryTotalCountDecrement = (SELECT COUNT(*) FROM deleted WHERE SiteID = @SiteID AND Category <> 3)
				EXEC Statistic_Update @SiteID, N''ContactCategoryTotalCount'', @ContactCategoryTotalCountIncrement, @ContactCategoryTotalCountDecrement
				
				SET @ContactCategoryDeletedCountIncrement = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND Category = 3)
				SET @ContactCategoryDeletedCountDecrement = (SELECT COUNT(*) FROM deleted WHERE SiteID = @SiteID AND Category = 3)
				EXEC Statistic_Update @SiteID, N''ContactCategoryDeletedCount'', @ContactCategoryDeletedCountIncrement, @ContactCategoryDeletedCountDecrement								
			END
			IF (UPDATE(RefferID))
			BEGIN
				SET @VisitorSourceNewAnonymousReffer = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND RefferID IS NOT NULL)
				EXEC Statistic_Update @SiteID, N''VisitorSourceNewAnonymousReffer'', @VisitorSourceNewAnonymousReffer, 0
			END
			IF (UPDATE(RefferURL))
			BEGIN
				SET @VisitorSourceNewAnonymousDirect = (SELECT COUNT(*) FROM inserted WHERE SiteID = @SiteID AND RefferURL IS NOT NULL AND RefferURL <> '''')
				EXEC Statistic_Update @SiteID, N''VisitorSourceNewAnonymousDirect'', @VisitorSourceNewAnonymousDirect, 0
			END
		END
		
		IF @Action = ''I'' OR UPDATE(AdvertisingPlatformID)
		BEGIN
			WHILE EXISTS(SELECT * FROM @AdvertisingPlatformIDs)
			BEGIN
				SELECT TOP 1 @AdvertisingPlatformID = AdvertisingPlatformID FROM @AdvertisingPlatformIDs
				
				SET @VisitorSourceNewAnonymousAdvertisingPlatform = (SELECT COUNT(*) FROM inserted WHERE AdvertisingPlatformID = @AdvertisingPlatformID)
				SET @VisitorSourceNewAnonymousAdvertisingPlatformKey = N''VisitorSourceNewAnonymousAdvertisingPlatform_'' + CAST(@AdvertisingPlatformID AS varchar(50))
				EXEC Statistic_Update @SiteID, @VisitorSourceNewAnonymousAdvertisingPlatformKey, @VisitorSourceNewAnonymousAdvertisingPlatform, 0				
				
				DELETE FROM @AdvertisingPlatformIDs
				WHERE AdvertisingPlatformID = @AdvertisingPlatformID
			END
		END
		
		DELETE FROM @AdvertisingPlatformIDs
		
		DELETE FROM @SiteIDs
		WHERE SiteID = @SiteID
    END    
END'

commit
exec LBC_SetVersion 329
END

/*******************************************************************************
	2012-10-22
*******************************************************************************/
if ( dbo.LBC_Version() < 330 )
BEGIN
begin tran

CREATE TABLE [dbo].[tbl_AdvertisingTypeCategory](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_tbl_AdvertisingTypeCategory] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

SET IDENTITY_INSERT [dbo].[tbl_AdvertisingTypeCategory] ON
INSERT [dbo].[tbl_AdvertisingTypeCategory] ([ID], [Title]) VALUES (1, N'Сайт')
INSERT [dbo].[tbl_AdvertisingTypeCategory] ([ID], [Title]) VALUES (2, N'Поисковая система')
INSERT [dbo].[tbl_AdvertisingTypeCategory] ([ID], [Title]) VALUES (3, N'Рекламная система')
SET IDENTITY_INSERT [dbo].[tbl_AdvertisingTypeCategory] OFF

ALTER TABLE [tbl_AdvertisingType] ADD AdvertisingTypeCategoryID int NOT NULL DEFAULT((1))

ALTER TABLE [dbo].[tbl_AdvertisingType]  WITH CHECK ADD  CONSTRAINT [FK_tbl_AdvertisingType_tbl_AdvertisingTypeCategory] FOREIGN KEY(AdvertisingTypeCategoryID)
REFERENCES [dbo].[tbl_AdvertisingTypeCategory] ([ID])
ALTER TABLE [dbo].[tbl_AdvertisingType] CHECK CONSTRAINT [FK_tbl_AdvertisingType_tbl_AdvertisingTypeCategory]

commit
exec LBC_SetVersion 330
END


/*******************************************************************************
	2012-10-22
*******************************************************************************/
if ( dbo.LBC_Version() < 331 )
BEGIN
begin tran

INSERT INTO tbl_SessionSourceRule ([Title], [SessionRuleTypeID], [Pattern])
VALUES (N'Google', 1, N'http://(www\.)?google\.[a-z]{2,3}\/.*[&|?]q=(?<keywords>[^&]+)')

commit
exec LBC_SetVersion 331
END


/*******************************************************************************
	2012-10-22
*******************************************************************************/
if ( dbo.LBC_Version() < 332 )
BEGIN
begin tran

UPDATE tbl_SessionSourceRule 
SET Pattern = N'http://(www\.)?google\.[a-z\.]+\/.*[&|?]q=(?<keywords>[^&]+)'
WHERE Pattern = N'http://(www\.)?google\.[a-z]{2,3}\/.*[&|?]q=(?<keywords>[^&]+)'

commit
exec LBC_SetVersion 332
END

/*******************************************************************************
	2012-10-23
*******************************************************************************/
if ( dbo.LBC_Version() < 333 )
BEGIN
begin tran

ALTER TABLE [tbl_Contact] ADD CameFromURL nvarchar(2000) NULL
ALTER TABLE [tbl_ContactSessions] ADD CameFromURL nvarchar(2000) NULL

commit
exec LBC_SetVersion 333
END

/*******************************************************************************
	2012-10-23
*******************************************************************************/
if ( dbo.LBC_Version() < 334 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[ContactActivity_Add]
(
 @ID uniqueidentifier,
 @SiteID uniqueidentifier,
 @RefferURL nvarchar(2000) = NULL,
 @UserIP varchar(15) = NULL,
 @UserAgent nvarchar(500) = NULL,
 @BrowserName nvarchar(255) = NULL,
 @BrowserVersion nvarchar(255) = NULL,
 @OperatingSystemName nvarchar(255) = NULL,
 @OperatingSystemVersion nvarchar(255) = NULL,
 @Resolution nvarchar(15) = NULL,
 @MobileDevice nvarchar(255) = NULL,
 @ActivityTypeID int,
 @ActivityCode nvarchar(255) = NULL,
 @EnterPointURL nvarchar(2000) = NULL,
 @AdvertisingPlatform nvarchar(255) = NULL,
 @AdvertisingType nvarchar(255) = NULL,
 @Keywords nvarchar(2000) = NULL,
 @AdvertisingCampaign nvarchar(255) = NULL,
 @Content nvarchar(2000) = NULL,
 @CountryID uniqueidentifier = NULL,
 @CityID uniqueidentifier = NULL,
 @RefferID uniqueidentifier = NULL,
 @CurrentDate datetime = NULL,
 @CameFromURL nvarchar(2000) = NULL
)
AS
BEGIN
 -- BEGIN ADD SESSION
 DECLARE @SessionID uniqueidentifier = NEWID()
 DECLARE @CreatedAt datetime = @CurrentDate
 
 DECLARE @LastActivityAt datetime = (SELECT LastActivityAt FROM tbl_Contact WHERE ID = @ID)
 DECLARE @SessionTimeout int = (SELECT SessionTimeout FROM tbl_Sites WHERE ID = @SiteID)
 DECLARE @SessionCount int = (SELECT COUNT(*) FROM tbl_ContactSessions WHERE SiteID = @SiteID AND ContactID = @ID)
 
 IF ( (@SessionCount = 0) OR (@LastActivityAt IS NULL) OR (DATEADD(minute, @SessionTimeout, @LastActivityAt) < @CurrentDate) OR (@RefferID IS NOT NULL) )
 BEGIN 
	 IF (@UserAgent IS NOT NULL)
	 BEGIN
        DECLARE @BrowserID uniqueidentifier = NULL
        DECLARE @OperatingSystemID uniqueidentifier = NULL
        DECLARE @ResolutionID uniqueidentifier = NULL
        DECLARE @MobileDeviceID uniqueidentifier = NULL
        DECLARE @AdvertisingPlatformID uniqueidentifier = NULL
        DECLARE @AdvertisingTypeID uniqueidentifier = NULL
        DECLARE @AdvertisingCampaignID uniqueidentifier = NULL  
	  
        IF ((@BrowserName IS NOT NULL) OR (@BrowserVersion IS NOT NULL))
        BEGIN
            SET @BrowserID = (SELECT ID FROM tbl_Browsers WHERE SiteID = @SiteID AND Name = @BrowserName AND [Version] = @BrowserVersion)
            IF (@BrowserID IS NULL)
            BEGIN
                SET @BrowserID = NEWID()
                INSERT INTO tbl_Browsers (ID, SiteID, Name, [Version])
                VALUES (@BrowserID, @SiteID, @BrowserName, @BrowserVersion)
            END
        END
	  
        IF ((@OperatingSystemName IS NOT NULL) OR (@OperatingSystemVersion IS NOT NULL))
        BEGIN
            SET @OperatingSystemID = (SELECT ID FROM tbl_OperatingSystems WHERE SiteID = @SiteID AND Name = @OperatingSystemName AND [Version] = @OperatingSystemVersion)
            IF (@OperatingSystemID IS NULL)
            BEGIN
                SET @OperatingSystemID = NEWID()
                INSERT INTO tbl_OperatingSystems (ID, SiteID, Name, [Version])
                VALUES (@OperatingSystemID, @SiteID, @OperatingSystemName, @OperatingSystemVersion)
            END
        END
	  
        IF (@Resolution IS NOT NULL)
        BEGIN
            SET @ResolutionID = (SELECT ID FROM tbl_Resolutions WHERE SiteID = @SiteID AND [Value] = @Resolution)
            IF (@ResolutionID IS NULL)
            BEGIN
                SET @ResolutionID = NEWID()
                INSERT INTO tbl_Resolutions (ID, SiteID, [Value])
                VALUES (@ResolutionID, @SiteID, @Resolution)
            END
        END
	  
        IF (@MobileDevice IS NOT NULL)
        BEGIN
            SET @MobileDeviceID = (SELECT ID FROM tbl_MobileDevices WHERE SiteID = @SiteID AND Name = @MobileDevice)
            IF (@MobileDeviceID IS NULL)
            BEGIN
                SET @MobileDeviceID = NEWID()
                INSERT INTO tbl_MobileDevices (ID, SiteID, Name)
                VALUES (@MobileDeviceID, @SiteID, @MobileDevice)
            END
        END
	  
        IF (@AdvertisingPlatform IS NOT NULL) 
        BEGIN
            SET @AdvertisingPlatformID = (SELECT ID FROM tbl_AdvertisingPlatform WHERE Title = @AdvertisingPlatform AND SiteID = @SiteID)
            IF (@AdvertisingPlatformID IS NULL)
            BEGIN
	            SET @AdvertisingPlatformID = NEWID()
	            INSERT INTO tbl_AdvertisingPlatform (ID, SiteID, Title, Code)
	            VALUES (@AdvertisingPlatformID, @SiteID, @AdvertisingPlatform, @AdvertisingPlatform)
            END
        END

        IF (@AdvertisingType IS NOT NULL) 
        BEGIN
            SET @AdvertisingTypeID = (SELECT ID FROM tbl_AdvertisingType WHERE Code = @AdvertisingType AND SiteID = @SiteID)
            IF (@AdvertisingTypeID IS NULL)
            BEGIN
	            SET @AdvertisingTypeID = NEWID()
	            INSERT INTO tbl_AdvertisingType (ID, SiteID, Title, Code)
	            VALUES (@AdvertisingTypeID, @SiteID, @AdvertisingType, @AdvertisingType)
            END
        END

        IF (@AdvertisingCampaign IS NOT NULL) 
        BEGIN
            SET @AdvertisingCampaignID = (SELECT ID FROM tbl_AdvertisingCampaign WHERE Code = @AdvertisingCampaign AND SiteID = @SiteID)
            IF (@AdvertisingCampaignID IS NULL)
            BEGIN
	            SET @AdvertisingCampaignID = NEWID()
	            INSERT INTO tbl_AdvertisingCampaign (ID, SiteID, Title, Code)
	            VALUES (@AdvertisingCampaignID, @SiteID, @AdvertisingCampaign, @AdvertisingCampaign)
            END
        END
	   
        DECLARE @SessionSourceSiteActionLinkID uniqueidentifier = NULL

        IF @Content IS NOT NULL		
        BEGIN
           BEGIN TRY
	          SET @SessionSourceSiteActionLinkID = CAST(@Content as uniqueidentifier)
           END TRY
           BEGIN CATCH    
           END CATCH
        END
	   
	   IF (@SessionSourceSiteActionLinkID IS NOT NULL)
	   BEGIN
	       SELECT @RefferID = ContactID FROM tbl_SiteActionLink WHERE ID = @SessionSourceSiteActionLinkID AND ContactID <> @ID	       
	       EXEC LinkProcessing @SessionSourceSiteActionLinkID, @CurrentDate
	   END
	  
	   INSERT INTO tbl_ContactSessions (ID, SiteID, ContactID, SessionDate, RefferURL, UserIP, BrowserID, OperatingSystemID, ResolutionID, MobileDeviceID, UserAgent, EnterPointURL, AdvertisingPlatformID, AdvertisingTypeID, Keywords, AdvertisingCampaignID, Content, CountryID, CityID, RefferID, CameFromURL)
	   VALUES (@SessionID, @SiteID, @ID, @CreatedAt, @RefferURL, @UserIP, @BrowserID, @OperatingSystemID, @ResolutionID, @MobileDeviceID, @UserAgent, @EnterPointURL, @AdvertisingPlatformID, @AdvertisingTypeID, @Keywords, @AdvertisingCampaignID, @Content, @CountryID, @CityID, @RefferID, @CameFromURL)
	   
	   UPDATE tbl_Contact
	   SET AdvertisingTypeID = CASE WHEN AdvertisingTypeID IS NULL THEN @AdvertisingTypeID ELSE AdvertisingTypeID END,
	       AdvertisingPlatformID = CASE WHEN AdvertisingPlatformID IS NULL THEN @AdvertisingPlatformID ELSE AdvertisingPlatformID END,
		   AdvertisingCampaignID = CASE WHEN AdvertisingCampaignID IS NULL THEN @AdvertisingCampaignID ELSE AdvertisingCampaignID END,
		   RefferID = CASE WHEN RefferID IS NULL THEN @RefferID ELSE RefferID END
	   WHERE ID = @ID
	 END
	 ELSE
	 BEGIN
	    SET @SessionID = NULL
	 END
 END
 ELSE
 BEGIN
	DECLARE @LastSessionID uniqueidentifier
	SELECT TOP 1 @LastSessionID = ID
	FROM tbl_ContactSessions
	WHERE SiteID = @SiteID AND ContactID = @ID
	ORDER BY SessionDate DESC
	
	SET @SessionID = @LastSessionID
 END
 -- END ADD SESSION
 
 -- BEGIN ADD Address
 IF ((SELECT AddressID FROM tbl_Contact WHERE ID = @ID) IS NULL AND @CountryID IS NOT NULL)
 BEGIN
	DECLARE @AddressID uniqueidentifier	 
	SET @AddressID = NEWID()	 
	DECLARE @DistrictID uniqueidentifier
	DECLARE @District nvarchar(255)
	DECLARE @RegionID uniqueidentifier
	DECLARE @Region nvarchar(255)
	DECLARE @City nvarchar(255)
	DECLARE @Address nvarchar(max)

	SELECT @RegionID = RegionID, @DistrictID = DistrictID FROM tbl_City WHERE ID = @CityID

	SELECT @Region = Name FROM tbl_Region WHERE ID = @RegionID
	SELECT @District = Name FROM tbl_District WHERE ID = @DistrictID
	SELECT @City = Name FROM tbl_City WHERE ID = @CityID

	SET @Address = (SELECT Name FROM tbl_Country WHERE ID = @CountryID) + 
					CASE WHEN @Region IS NOT NULL THEN '', '' + @Region ELSE '''' END +
					CASE WHEN @District IS NOT NULL THEN '', '' + @District ELSE '''' END +
					CASE WHEN @City IS NOT NULL THEN '', '' + @City ELSE '''' END				   
	 
	 INSERT INTO tbl_Address (ID, CountryID, RegionID, DistrictID, CityID, [Address])
	 VALUES (@AddressID, @CountryID, @RegionID, @DistrictID, @CityID, @Address) 
	 
	 UPDATE tbl_Contact SET AddressID = @AddressID WHERE ID = @ID
 END
 -- END ADD ADDRESS
 
 -- BEGIN ADD ACTIVITY
 INSERT INTO tbl_ContactActivity (SiteID, ContactID, CreatedAt, ActivityTypeID, ActivityCode, ContactSessionID)
 VALUES (@SiteID, @ID, @CreatedAt, @ActivityTypeID, @ActivityCode, @SessionID)
 -- END ADD ACTIVITY
END'

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[Contact_Add]
(
 @ID uniqueidentifier,
 @SiteID uniqueidentifier,
 @RefferURL nvarchar(2000) = NULL,
 @UserIP varchar(15) = NULL,
 @UserAgent nvarchar(500) = NULL,
 @BrowserName nvarchar(255) = NULL,
 @BrowserVersion nvarchar(255) = NULL,
 @OperatingSystemName nvarchar(255) = NULL,
 @OperatingSystemVersion nvarchar(255) = NULL,
 @Resolution nvarchar(15) = NULL,
 @MobileDevice nvarchar(255) = NULL,
 @ActivityTypeID int,
 @ActivityCode nvarchar(255) = NULL,
 @EnterPointURL nvarchar(2000) = NULL,
 @AdvertisingPlatform nvarchar(255) = NULL,
 @AdvertisingType nvarchar(255) = NULL,
 @Keywords nvarchar(2000) = NULL,
 @AdvertisingCampaign nvarchar(255) = NULL,
 @CameFromURL nvarchar(2000) = NULL,
 @Content nvarchar(2000) = NULL,
 @CountryID uniqueidentifier = NULL,
 @CityID uniqueidentifier = NULL,
 @RefferID uniqueidentifier = NULL,
 @CurrentDate datetime = NULL
)
AS
BEGIN
 -- BEGIN ADD/UPDATE USER
 DECLARE @StatusID uniqueidentifier
 DECLARE @ReadyToSellID uniqueidentifier
 DECLARE @PriorityID uniqueidentifier
 DECLARE @CreatedAt datetime = @CurrentDate
 
 IF ((SELECT COUNT(*) FROM tbl_Contact WHERE ID = @ID) = 0) 
 BEGIN
  SET @StatusID = (SELECT TOP 1 ID FROM tbl_Status WHERE SiteID = @SiteID AND IsDefault = 1)
  SET @ReadyToSellID = (SELECT TOP 1 ID FROM tbl_ReadyToSell WHERE SiteID = @SiteID AND MinScore = 0)
  SET @PriorityID = (SELECT TOP 1 ID FROM tbl_Priorities WHERE SiteID = @SiteID AND MinScore = 0)
 
  INSERT INTO tbl_Contact (ID, SiteID, CreatedAt, LastActivityAt, RefferURL, UserIP, StatusID, ReadyToSellID, PriorityID, RefferID, CameFromURL)
  VALUES (@ID, @SiteID, @CreatedAt, @CreatedAt, @RefferURL, @UserIP, @StatusID, @ReadyToSellID, @PriorityID, @RefferID, @CameFromURL)
  
  exec ContactActivity_Add @ID, @SiteID, @RefferURL, @UserIP, @UserAgent, @BrowserName, @BrowserVersion, @OperatingSystemName, @OperatingSystemVersion, @Resolution, @MobileDevice, @ActivityTypeID, @ActivityCode, @EnterPointURL, @AdvertisingPlatform, @AdvertisingType, @Keywords, @AdvertisingCampaign, @Content, @CountryID, @CityID, @RefferID, @CurrentDate, @CameFromURL
 END
 ELSE
 BEGIN
  DECLARE @_minScoreReadyToSell int = (SELECT MIN(MinScore) FROM tbl_ReadyToSell WHERE SiteID=@SiteID)
  DECLARE @_minScorePriority int = (SELECT MIN(MinScore) FROM tbl_Priorities WHERE SiteID=@SiteID)
 
  DECLARE @CharacteristicsScore int = @_minScorePriority
  DECLARE @BehaviorScore int = @_minScoreReadyToSell
  
  SET @ReadyToSellID = (SELECT TOP 1 ID FROM tbl_ReadyToSell WHERE SiteID = @SiteID AND (@BehaviorScore >= MinScore AND @BehaviorScore <= MaxScore))
  SET @PriorityID = (SELECT TOP 1 ID FROM tbl_Priorities WHERE SiteID = @SiteID AND (@CharacteristicsScore >= MinScore AND @CharacteristicsScore <= MaxScore))
 
  exec ContactActivity_Add @ID, @SiteID, @RefferURL, @UserIP, @UserAgent, @BrowserName, @BrowserVersion, @OperatingSystemName, @OperatingSystemVersion, @Resolution, @MobileDevice, @ActivityTypeID, @ActivityCode, @EnterPointURL, @AdvertisingPlatform, @AdvertisingType, @Keywords, @AdvertisingCampaign, @Content, @CountryID, @CityID, @RefferID, @CurrentDate, @CameFromURL
 
  UPDATE tbl_Contact SET
   LastActivityAt = @CreatedAt,
   CharacteristicsScore = @CharacteristicsScore,
   Score = @BehaviorScore + @CharacteristicsScore,
   ReadyToSellID = @ReadyToSellID,
   PriorityID = @PriorityID
  WHERE ID = @ID AND SiteID = @SiteID
 END
 -- END ADD/UPDATE USER
END'

INSERT INTO tbl_SessionSourceRule ([ID], [Title], [SessionRuleTypeID], [Pattern])
VALUES (N'5378869a-d289-48ca-bc85-d4660e3ac17a', N'Google Adwords', 1, N'http\:\/\/googleads\.g\.doubleclick\.net\/.*[&|?]url=(?<camefrom>[^&]+)')

commit
exec LBC_SetVersion 334
END

/*******************************************************************************
	2012-10-23
*******************************************************************************/
if ( dbo.LBC_Version() < 335 )
BEGIN
begin tran

INSERT INTO tbl_SessionSourceRule ([ID], [Title], [SessionRuleTypeID], [Pattern])
VALUES (N'02a31222-3627-4971-8251-eaaa22225e4c', N'Rambler', 1, N'http://nova\.rambler\.[a-z]{2}\/search.*[&|?]query=(?<keywords>[^&]+)')

INSERT INTO tbl_SessionSourceRule ([ID], [Title], [SessionRuleTypeID], [Pattern])
VALUES (N'e776f713-71e2-4058-abab-5fc1920fe462', N'Conduit', 1, N'http://search\.conduit\.com\/.*[&|?]q=(?<keywords>[^&]+)')

INSERT INTO tbl_SessionSourceRule ([ID], [Title], [SessionRuleTypeID], [Pattern])
VALUES (N'c9438510-a278-4eaf-850c-d39e86651d5a', N'Ask', 1, N'http://(www\.|[a-z]{2}\.)?ask\.com\/.*[&|?]q=(?<keywords>[^&]+)')

INSERT INTO tbl_SessionSourceRule ([ID], [Title], [SessionRuleTypeID], [Pattern])
VALUES (N'd91c53aa-298a-4620-992a-57fa1cc814f9', N'Babylon', 1, N'http://[i]?search\.babylon\.com\/.*[&|?]q=(?<keywords>[^&]+)')

INSERT INTO tbl_SessionSourceRule ([ID], [Title], [SessionRuleTypeID], [Pattern])
VALUES (N'b241d7b8-82c8-440b-b70f-3115ab010796', N'Bing', 1, N'http://(www\.)?bing\.com\/search.*[&|?]q=(?<keywords>[^&]+)')

INSERT INTO tbl_SessionSourceRule ([ID], [Title], [SessionRuleTypeID], [Pattern])
VALUES (N'46332133-5bb6-4d3a-a76c-60ec3068fb08', N'Webalta', 1, N'http://webalta\.ru\/search.*[&|?]q=(?<keywords>[^&]+)')

INSERT INTO tbl_SessionSourceRule ([ID], [Title], [SessionRuleTypeID], [Pattern])
VALUES (N'fa6f25fb-a6cb-4e12-939a-307da4b615c6', N'Nigma', 1, N'http://(www\.)?nigma\.ru\/.*[&|?]s=(?<keywords>[^&]+)')

commit
exec LBC_SetVersion 335
END

/*******************************************************************************
	2012-10-23
*******************************************************************************/
if ( dbo.LBC_Version() < 336 )
BEGIN
begin tran

INSERT INTO tbl_SessionSourceRule ([ID], [Title], [SessionRuleTypeID], [Pattern])
VALUES (N'6e7b9f6f-65d8-40f2-bca3-8af83a863f3b', N'Yandex Direct', 1, N'http\:\/\/direct\.yandex\.ru.*([&|?]from=(?<camefrom>[^&]+).*[&|?]text=(?<keywords>[^&]*))|([&|?]text=(?<keywords>[^&]*).*[&|?]from=(?<camefrom>[^&]+))')

INSERT INTO tbl_SessionSourceRule ([ID], [Title], [SessionRuleTypeID], [Pattern])
VALUES (N'4dc637c0-bb64-4e1b-b2c3-b0cf731b33d4', N'Yandex Services', 1, N'http\:\/\/[news|rabota|images]+\.yandex\.[a-z]{2}\/.*[&|?]text=(?<keywords>[^&]+)')

commit
exec LBC_SetVersion 336
END

/*******************************************************************************
	2012-10-25
*******************************************************************************/
if ( dbo.LBC_Version() < 337 )
BEGIN
begin tran

DECLARE @DictionaryGroupID uniqueidentifier = (SELECT ID FROM tbl_DictionaryGroup WHERE Title=N'Общее')
INSERT INTO tbl_Dictionary (Title, DataSet, AccessLevelID, DictionaryGroupID, EditFormUserControl)
VALUES (N'Роли контактов', N'tbl_ContactRole', 0, @DictionaryGroupID, N'~/UserControls/DictionaryEditForm/ContactRoleEdit.ascx')

ALTER TABLE tbl_SiteActionTemplate ADD [FromContactRoleID] uniqueidentifier NULL
ALTER TABLE tbl_SiteActionTemplate ALTER COLUMN [FromEmail] nvarchar(255) NULL


CREATE TABLE [dbo].[tbl_ContactRoleType](
	[ID] [int] IDENTITY(0,1) NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_tbl_ContactRoleType] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]


CREATE TABLE [dbo].[tbl_ContactRole](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](255) NOT NULL,
	[RoleTypeID] [int] NOT NULL,
	[Description] [ntext] NULL,
	[Email] [nvarchar](255) NULL,
	[DisplayName] [nvarchar](255) NULL,
	[SiteTagID] [uniqueidentifier] NULL,
	[MethodAssigningResponsible] [int] NULL,
	[LastAssignmentResponsible] [uniqueidentifier] NULL,
 CONSTRAINT [PK_tbl_ContactRole] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
ALTER TABLE [dbo].[tbl_ContactRole]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ContactRole_tbl_ContactRoleType] FOREIGN KEY([RoleTypeID])
REFERENCES [dbo].[tbl_ContactRoleType] ([ID])
ALTER TABLE [dbo].[tbl_ContactRole] CHECK CONSTRAINT [FK_tbl_ContactRole_tbl_ContactRoleType]
ALTER TABLE [dbo].[tbl_ContactRole]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ContactRole_tbl_Sites] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_Sites] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_ContactRole] CHECK CONSTRAINT [FK_tbl_ContactRole_tbl_Sites]
ALTER TABLE [dbo].[tbl_ContactRole] ADD  CONSTRAINT [DF_tbl_ContactRole_ID]  DEFAULT (newid()) FOR [ID]


CREATE TABLE [dbo].[tbl_ContactToContactRole](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteID] [uniqueidentifier] NOT NULL,
	[ContactRoleID] [uniqueidentifier] NOT NULL,
	[ContactID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_ContactToContactRole] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[tbl_ContactToContactRole]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ContactToContactRole_tbl_Contact] FOREIGN KEY([ContactID])
REFERENCES [dbo].[tbl_Contact] ([ID])
ALTER TABLE [dbo].[tbl_ContactToContactRole] CHECK CONSTRAINT [FK_tbl_ContactToContactRole_tbl_Contact]
ALTER TABLE [dbo].[tbl_ContactToContactRole]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ContactToContactRole_tbl_ContactRole] FOREIGN KEY([ContactRoleID])
REFERENCES [dbo].[tbl_ContactRole] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_ContactToContactRole] CHECK CONSTRAINT [FK_tbl_ContactToContactRole_tbl_ContactRole]
ALTER TABLE [dbo].[tbl_ContactToContactRole]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ContactToContactRole_tbl_Sites] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_Sites] ([ID])
ALTER TABLE [dbo].[tbl_ContactToContactRole] CHECK CONSTRAINT [FK_tbl_ContactToContactRole_tbl_Sites]
ALTER TABLE [dbo].[tbl_ContactToContactRole] ADD  CONSTRAINT [DF_ContactToContactRole_ID]  DEFAULT (newid()) FOR [ID]


CREATE TABLE [dbo].[tbl_SiteActionTemplateRecipient](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteActionTemplateID] [uniqueidentifier] NOT NULL,
	[ContactID] [uniqueidentifier] NULL,
	[ContactRoleID] [uniqueidentifier] NULL,
	[Email] [nvarchar](255) NULL,
	[DisplayName] [nvarchar](255) NULL,
 CONSTRAINT [PK_tbl_SiteActionTemplateRecipient] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[tbl_SiteActionTemplateRecipient]  WITH CHECK ADD  CONSTRAINT [FK_tbl_SiteActionTemplateRecipient_tbl_Contact] FOREIGN KEY([ContactID])
REFERENCES [dbo].[tbl_Contact] ([ID])
ALTER TABLE [dbo].[tbl_SiteActionTemplateRecipient] CHECK CONSTRAINT [FK_tbl_SiteActionTemplateRecipient_tbl_Contact]
ALTER TABLE [dbo].[tbl_SiteActionTemplateRecipient]  WITH CHECK ADD  CONSTRAINT [FK_tbl_SiteActionTemplateRecipient_tbl_SiteActionTemplate] FOREIGN KEY([SiteActionTemplateID])
REFERENCES [dbo].[tbl_SiteActionTemplate] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_SiteActionTemplateRecipient] CHECK CONSTRAINT [FK_tbl_SiteActionTemplateRecipient_tbl_SiteActionTemplate]
ALTER TABLE [dbo].[tbl_SiteActionTemplateRecipient] ADD  CONSTRAINT [DF_tbl_SiteActionTemplateRecipient_ID]  DEFAULT (newid()) FOR [ID]


CREATE TABLE [dbo].[tbl_Responsible](
	[ID] [uniqueidentifier] NOT NULL,
	[ContactRoleID] [uniqueidentifier] NOT NULL,
	[ContactID] [uniqueidentifier] NOT NULL,
	[WorkflowID] [uniqueidentifier] NULL,
	[ResponsibleID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_tbl_Responsible] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[tbl_Responsible]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Responsible_tbl_Contact] FOREIGN KEY([ContactID])
REFERENCES [dbo].[tbl_Contact] ([ID])
ALTER TABLE [dbo].[tbl_Responsible] CHECK CONSTRAINT [FK_tbl_Responsible_tbl_Contact]
ALTER TABLE [dbo].[tbl_Responsible]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Responsible_tbl_Contact1] FOREIGN KEY([ResponsibleID])
REFERENCES [dbo].[tbl_Contact] ([ID])
ALTER TABLE [dbo].[tbl_Responsible] CHECK CONSTRAINT [FK_tbl_Responsible_tbl_Contact1]
ALTER TABLE [dbo].[tbl_Responsible]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Responsible_tbl_ContactRole] FOREIGN KEY([ContactRoleID])
REFERENCES [dbo].[tbl_ContactRole] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_Responsible] CHECK CONSTRAINT [FK_tbl_Responsible_tbl_ContactRole]
ALTER TABLE [dbo].[tbl_Responsible]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Responsible_tbl_Workflow] FOREIGN KEY([WorkflowID])
REFERENCES [dbo].[tbl_Workflow] ([ID])
ALTER TABLE [dbo].[tbl_Responsible] CHECK CONSTRAINT [FK_tbl_Responsible_tbl_Workflow]
ALTER TABLE [dbo].[tbl_Responsible] ADD  CONSTRAINT [DF_tbl_Responsible_ID]  DEFAULT (newid()) FOR [ID]


DECLARE @ID uniqueidentifier
DECLARE @Email nvarchar(255)

SELECT ID, ToEmail
INTO #Temp
FROM tbl_SiteActionTemplate
WHERE ActionTypeID=2

WHILE (SELECT COUNT(*) FROM #Temp) > 0
BEGIN
	SELECT TOP 1 @ID=ID, @Email=ToEmail FROM #Temp
	
	INSERT INTO tbl_SiteActionTemplateRecipient (SiteActionTemplateID, Email)
	VALUES (@ID, @Email)

	DELETE #Temp WHERE ID = @ID
END
DROP TABLE #Temp

commit
exec LBC_SetVersion 337
END

/*******************************************************************************
	2012-10-25
*******************************************************************************/
if ( dbo.LBC_Version() < 338 )
BEGIN
begin tran

INSERT [dbo].[tbl_ContactRoleType] ([Title]) VALUES (N'Общий адрес')
INSERT [dbo].[tbl_ContactRoleType] ([Title]) VALUES (N'Роль для контакта')
INSERT [dbo].[tbl_ContactRoleType] ([Title]) VALUES (N'Роль для процесса')

commit
exec LBC_SetVersion 338
END

/*******************************************************************************
	2012-10-26
*******************************************************************************/
if ( dbo.LBC_Version() < 339 )
BEGIN
begin tran

ALTER TABLE [tbl_Bank] ADD CityID uniqueidentifier NULL

ALTER TABLE [dbo].[tbl_Bank]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Bank_tbl_City] FOREIGN KEY(CityID)
REFERENCES [dbo].[tbl_City] ([ID])
ALTER TABLE [dbo].[tbl_Bank] CHECK CONSTRAINT [FK_tbl_Bank_tbl_City]

ALTER TABLE [tbl_CompanyLegalAccount] ADD AccountantID uniqueidentifier NULL
ALTER TABLE [dbo].[tbl_CompanyLegalAccount]  WITH CHECK ADD  CONSTRAINT [FK_tbl_CompanyLegalAccount_tbl_Contact_Accountant] FOREIGN KEY(AccountantID)
REFERENCES [dbo].[tbl_Contact] ([ID])
ALTER TABLE [dbo].[tbl_CompanyLegalAccount] CHECK CONSTRAINT [FK_tbl_CompanyLegalAccount_tbl_Contact_Accountant]

ALTER TABLE [tbl_CompanyLegalAccount] ADD AccountantStampFileName nvarchar(512) NULL

ALTER TABLE [tbl_CompanyLegalAccount] ADD HeadID uniqueidentifier NULL
ALTER TABLE [dbo].[tbl_CompanyLegalAccount]  WITH CHECK ADD  CONSTRAINT [FK_tbl_CompanyLegalAccount_tbl_Contact_Head] FOREIGN KEY(HeadID)
REFERENCES [dbo].[tbl_Contact] ([ID])
ALTER TABLE [dbo].[tbl_CompanyLegalAccount] CHECK CONSTRAINT [FK_tbl_CompanyLegalAccount_tbl_Contact_Head]

exec sp_rename '[tbl_CompanyLegalAccount].[StampFileName]', 'HeadStampFileName', 'COLUMN'
 

commit
exec LBC_SetVersion 339
END

/*******************************************************************************
	2012-10-29
*******************************************************************************/
if ( dbo.LBC_Version() < 340 )
BEGIN
begin tran

UPDATE tbl_SessionSourceRule 
SET Pattern = N'http://yandex\.[a-z]{2}\/.*[&|?]text=(?<keywords>[^&]+)'
WHERE Pattern = N'http://yandex\.[a-z]{2}\/yandsearch.*[&|?]text=(?<keywords>[^&]+)'

commit
exec LBC_SetVersion 340
END

/*******************************************************************************
	2012-10-29
*******************************************************************************/
if ( dbo.LBC_Version() < 341 )
BEGIN
begin tran

UPDATE tbl_Dictionary
SET Title=N'Адресная книга'
WHERE Title=N'Роли контактов'
  
UPDATE tbl_ContactRoleType
SET Title=N'Адрес для контакта'
WHERE Title=N'Роль для контакта'
  
UPDATE tbl_ContactRoleType
SET Title=N'Адрес для процесса'
WHERE Title=N'Роль для процесса'

commit
exec LBC_SetVersion 341
END

/*******************************************************************************
	2012-11-01
*******************************************************************************/
if ( dbo.LBC_Version() < 342 )
BEGIN
begin tran

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[tbl_WebSite](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](512) NOT NULL,
	[Description] [nvarchar](2048) NULL,
	[SiteDomainID] [uniqueidentifier] NULL,
	[FavIcon] [nvarchar](50) NULL,
 CONSTRAINT [PK_tbl_WebSite] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[tbl_WebSiteStructure](
	[ID] [uniqueidentifier] NOT NULL,
	[ParentID] [uniqueidentifier] NULL,
	[WebSiteID] [uniqueidentifier] NOT NULL,
	[WebSiteStructureTypeID] [int] NOT NULL,
	[WebSiteElementStatusID] [int] NOT NULL,
 CONSTRAINT [PK_tbl_WebSiteStructure] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[tbl_WebSitePage](
	[ID] [uniqueidentifier] NOT NULL,
	[WebSiteStructureID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
	[Image] [nvarchar](256) NULL,
	[Url] [nvarchar](1024) NULL,
	[WebSiteElementStatusID] [int] NOT NULL,
	[MetaTitle] [nvarchar](256) NOT NULL,
	[MetaKeywords] [nvarchar](2048) NULL,
	[MetaDescription] [nvarchar](2048) NULL,
	[Body] [nvarchar](max) NULL,
 CONSTRAINT [PK_tbl_WebSitePage] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[tbl_WebSite] ADD  CONSTRAINT [DF_tbl_WebSite_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_WebSitePage] ADD  CONSTRAINT [DF_tbl_WebSitePage_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_WebSiteStructure] ADD  CONSTRAINT [DF_tbl_WebSiteStructure_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_WebSite]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WebSite_tbl_SiteDomain] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_SiteDomain] ([ID])
ALTER TABLE [dbo].[tbl_WebSite] CHECK CONSTRAINT [FK_tbl_WebSite_tbl_SiteDomain]
ALTER TABLE [dbo].[tbl_WebSite]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WebSite_tbl_Sites] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_Sites] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_WebSite] CHECK CONSTRAINT [FK_tbl_WebSite_tbl_Sites]
ALTER TABLE [dbo].[tbl_WebSitePage]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WebSitePage_tbl_WebSiteStructure] FOREIGN KEY([WebSiteStructureID])
REFERENCES [dbo].[tbl_WebSiteStructure] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_WebSitePage] CHECK CONSTRAINT [FK_tbl_WebSitePage_tbl_WebSiteStructure]
ALTER TABLE [dbo].[tbl_WebSiteStructure]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WebSiteStructure_tbl_WebSite] FOREIGN KEY([WebSiteID])
REFERENCES [dbo].[tbl_WebSite] ([ID])
ALTER TABLE [dbo].[tbl_WebSiteStructure] CHECK CONSTRAINT [FK_tbl_WebSiteStructure_tbl_WebSite]
ALTER TABLE [dbo].[tbl_WebSiteStructure]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WebSiteStructure_tbl_WebSiteStructure] FOREIGN KEY([ParentID])
REFERENCES [dbo].[tbl_WebSiteStructure] ([ID])
ALTER TABLE [dbo].[tbl_WebSiteStructure] CHECK CONSTRAINT [FK_tbl_WebSiteStructure_tbl_WebSiteStructure]


INSERT INTO tbl_Module (Title, Name, TableName) VALUES (N'Мини сайты', N'WebSites', N'tbl_WebSite')
INSERT INTO tbl_ObjectTypes (Name) VALUES (N'tbl_WebSite')

commit
exec LBC_SetVersion 342
END

/*******************************************************************************
	2012-11-01
*******************************************************************************/
if ( dbo.LBC_Version() < 343 )
BEGIN
begin tran

ALTER TABLE tbl_WebSite DROP CONSTRAINT FK_tbl_WebSite_tbl_SiteDomain 

ALTER TABLE [dbo].[tbl_WebSite]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WebSite_tbl_SiteDomain] FOREIGN KEY([SiteDomainID])
REFERENCES [dbo].[tbl_SiteDomain] ([ID])
ALTER TABLE [dbo].[tbl_WebSite] CHECK CONSTRAINT [FK_tbl_WebSite_tbl_SiteDomain]

commit
exec LBC_SetVersion 343
END

/*******************************************************************************
	2012-11-06
*******************************************************************************/
if ( dbo.LBC_Version() < 344 )
BEGIN
begin tran

ALTER TABLE [tbl_WebSiteStructure] ADD Title nvarchar(512) NOT NULL

commit
exec LBC_SetVersion 344
END

/*******************************************************************************
	2012-11-06
*******************************************************************************/
if ( dbo.LBC_Version() < 345 )
BEGIN
begin tran

ALTER TABLE tbl_WebSiteStructure DROP CONSTRAINT FK_tbl_WebSiteStructure_tbl_WebSite 

ALTER TABLE [dbo].[tbl_WebSiteStructure]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WebSiteStructure_tbl_WebSite] FOREIGN KEY([WebSiteID])
REFERENCES [dbo].[tbl_WebSite] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_WebSiteStructure] CHECK CONSTRAINT [FK_tbl_WebSiteStructure_tbl_WebSite]

commit
exec LBC_SetVersion 345
END

/*******************************************************************************
	2012-11-08
*******************************************************************************/
if ( dbo.LBC_Version() < 346 )
BEGIN
begin tran

INSERT INTO tbl_RuleTypes ([Title]) VALUES (N'Форма Wufoo')
ALTER TABLE [tbl_SiteActivityRules] ADD WufooName nvarchar(512) NULL
ALTER TABLE [tbl_SiteActivityRules] ADD WufooAPIKey nvarchar(512) NULL

DECLARE  @FormID uniqueidentifier 
SET @FormID = (SELECT ID FROM tbl_Module WHERE [Name]='Form')
INSERT INTO tbl_ModuleEditionOption (ModuleEditionID, Title, SystemName, ModuleEditionOptionType)
VALUES ((SELECT TOP 1 ID FROM tbl_ModuleEdition WHERE ModuleID=@FormID), N'Поддерживать формы Wufoo', 'AllowWufooForm', 0)

ALTER TABLE [tbl_SiteActivityRules] ADD WufooRevisionDate datetime NULL
ALTER TABLE [tbl_SiteActivityRules] ADD WufooUpdatePeriod int NULL

commit
exec LBC_SetVersion 346
END

/*******************************************************************************
	2012-11-09
*******************************************************************************/
if ( dbo.LBC_Version() < 347 )
BEGIN
begin tran

INSERT INTO tbl_CronJob (Name, Assembly, Type, Period)
VALUES (N'WufooForm', N'Labitec.LeadForce.CronJobs.dll', N'Labitec.LeadForce.CronJobs.WufooFormJob', 5)

commit
exec LBC_SetVersion 347
END

/*******************************************************************************
	2012-11-09
*******************************************************************************/
if ( dbo.LBC_Version() < 348 )
BEGIN
begin tran

EXEC sp_rename '[tbl_CompanyLegalAccount].[HeadStampFileName]','HeadSignatureFileName','COLUMN'
EXEC sp_rename '[tbl_CompanyLegalAccount].[AccountantStampFileName]','AccountantSignatureFileName','COLUMN'

ALTER TABLE [tbl_CompanyLegalAccount] ADD StampFileName nvarchar(512) NULL

commit
exec LBC_SetVersion 348
END

/*******************************************************************************
	2012-11-13
*******************************************************************************/
if ( dbo.LBC_Version() < 349 )
BEGIN
begin tran

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[tbl_EmailStats](
	[ID] [uniqueidentifier] NOT NULL,
	[Email] [nvarchar](256) NOT NULL,
	[ReturnCount] [int] NOT NULL,
 CONSTRAINT [PK_tbl_EmailStats] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[tbl_EmailStatsUnsubscribe](
	[EmailStatsID] [uniqueidentifier] NOT NULL,
	[SiteID] [uniqueidentifier] NOT NULL,
	[CreatedAt] [datetime] NOT NULL,
 CONSTRAINT [PK_tbl_EmailStatsUnsubscribe] PRIMARY KEY CLUSTERED 
(
	[EmailStatsID] ASC,
	[SiteID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[tbl_EmailStats] ADD  CONSTRAINT [DF_tbl_EmailStats_ID]  DEFAULT (newid()) FOR [ID]
ALTER TABLE [dbo].[tbl_EmailStats] ADD  CONSTRAINT [DF_tbl_EmailStats_ReturnCount]  DEFAULT ((0)) FOR [ReturnCount]
ALTER TABLE [dbo].[tbl_EmailStatsUnsubscribe] ADD  CONSTRAINT [DF_tbl_EmailStatsUnsubscribe_CreatedAt]  DEFAULT (getdate()) FOR [CreatedAt]
ALTER TABLE [dbo].[tbl_EmailStatsUnsubscribe]  WITH CHECK ADD  CONSTRAINT [FK_tbl_EmailStatsUnsubscribe_tbl_EmailStats] FOREIGN KEY([EmailStatsID])
REFERENCES [dbo].[tbl_EmailStats] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_EmailStatsUnsubscribe] CHECK CONSTRAINT [FK_tbl_EmailStatsUnsubscribe_tbl_EmailStats]
ALTER TABLE [dbo].[tbl_EmailStatsUnsubscribe]  WITH CHECK ADD  CONSTRAINT [FK_tbl_EmailStatsUnsubscribe_tbl_Sites] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_Sites] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_EmailStatsUnsubscribe] CHECK CONSTRAINT [FK_tbl_EmailStatsUnsubscribe_tbl_Sites]

commit
exec LBC_SetVersion 349
END


/*******************************************************************************
	2012-11-15
*******************************************************************************/
if ( dbo.LBC_Version() < 350 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[Statistic_Recalculate]
	(
		@SiteID uniqueidentifier,
		@Code varchar(256),
		@CurrentValue decimal(18,2) = NULL,
		@PreviousValue decimal(18,2) = NULL
	)
AS
BEGIN
	DECLARE @Value decimal(18,2) = NULL
	SELECT @Value = Value FROM tbl_StatisticData WHERE SiteID = @SiteID AND Code = @Code
	IF @Value IS NULL
	BEGIN
		INSERT INTO tbl_StatisticData ([SiteID], [Code], [Value], [PreviousValue])
		VALUES (@SiteID, @Code, CASE WHEN @CurrentValue IS NULL THEN 0 ELSE @CurrentValue END, CASE WHEN @PreviousValue IS NULL THEN 0 ELSE @PreviousValue END)
	END
		
	UPDATE tbl_StatisticData
	SET Value = CASE WHEN @CurrentValue IS NULL THEN Value ELSE @CurrentValue END, 
	PreviousValue = CASE WHEN @PreviousValue IS NULL THEN PreviousValue ELSE @PreviousValue END,
	RecalculateDate = getdate()
	WHERE SiteID = @SiteID AND Code = @Code	
	
END'

commit
exec LBC_SetVersion 350
END

/*******************************************************************************
	2012-11-20	
*******************************************************************************/
if ( dbo.LBC_Version() < 351 )
BEGIN
begin tran

ALTER TABLE tbl_Requirement ALTER COLUMN EstimationComment nvarchar(2048) NULL

EXEC dbo.sp_executesql @statement = N'ALTER TRIGGER [dbo].[CreateSite] ON [dbo].[tbl_Sites]
	FOR INSERT
AS
BEGIN
	DECLARE @_siteID uniqueidentifier
	SELECT @_siteID = ID FROM inserted
	
	DECLARE @_columnCategory1 uniqueidentifier = NEWID() --Демографические данные
	DECLARE @_columnCategory2 uniqueidentifier = NEWID() --Фирмографические данные
	DECLARE @_columnCategory3 uniqueidentifier = NEWID() --Готовность сделки
	INSERT INTO [dbo].[tbl_ColumnCategories] (ID, SiteID, Title) VALUES (@_columnCategory1, @_siteID, N''Демографические данные'')
	INSERT INTO [dbo].[tbl_ColumnCategories] (ID, SiteID, Title) VALUES (@_columnCategory2, @_siteID, N''Фирмографические данные'')
	INSERT INTO [dbo].[tbl_ColumnCategories] (ID, SiteID, Title) VALUES (@_columnCategory3, @_siteID, N''Готовность сделки'')
	
	INSERT INTO [dbo].[tbl_Status] (SiteID, Title, [Order], IsDefault) VALUES (@_siteID, N''Активна'', 0, 1)
	INSERT INTO [dbo].[tbl_Status] (SiteID, Title, [Order], IsDefault) VALUES (@_siteID, N''Активна (Возврат)'', 1, 0)
	INSERT INTO [dbo].[tbl_Status] (SiteID, Title, [Order], IsDefault) VALUES (@_siteID, N''Передана в продажи'', 2, 0)
	INSERT INTO [dbo].[tbl_Status] (SiteID, Title, [Order], IsDefault) VALUES (@_siteID, N''Закрыта продажей'', 3, 0)
	INSERT INTO [dbo].[tbl_Status] (SiteID, Title, [Order], IsDefault) VALUES (@_siteID, N''Отказ в продаже'', 4, 0)
	INSERT INTO [dbo].[tbl_Status] (SiteID, Title, [Order], IsDefault) VALUES (@_siteID, N''Отменена'', 5, 0)
	
	INSERT INTO [dbo].[tbl_ReadyToSell] (SiteID, Title, IsDefault, MinScore, MaxScore) VALUES (@_siteID, N''Нет информации'', 1, 0, 14)
	INSERT INTO [dbo].[tbl_ReadyToSell] (SiteID, Title, IsDefault, MinScore, MaxScore) VALUES (@_siteID, N''Холодный'', 0, 15, 59)
	INSERT INTO [dbo].[tbl_ReadyToSell] (SiteID, Title, IsDefault, MinScore, MaxScore) VALUES (@_siteID, N''Теплый'', 0, 60, 79)
	INSERT INTO [dbo].[tbl_ReadyToSell] (SiteID, Title, IsDefault, MinScore, MaxScore) VALUES (@_siteID, N''Горячий'', 0, 80, 100)
		
	INSERT INTO [dbo].[tbl_Priorities] (SiteID, Title, MinScore, MaxScore) VALUES (@_siteID, N''A'', 80, 100)
	INSERT INTO [dbo].[tbl_Priorities] (SiteID, Title, MinScore, MaxScore) VALUES (@_siteID, N''B'', 50, 79)
	INSERT INTO [dbo].[tbl_Priorities] (SiteID, Title, MinScore, MaxScore) VALUES (@_siteID, N''C'', 20, 49)
	INSERT INTO [dbo].[tbl_Priorities] (SiteID, Title, MinScore, MaxScore) VALUES (@_siteID, N''D'', 0, 19)		

	INSERT INTO tbl_CompanyType (Name, SiteID) VALUES (N''Клиент'', @_siteID)
	INSERT INTO tbl_CompanyType (Name, SiteID) VALUES (N''Партнер'', @_siteID)
	INSERT INTO tbl_CompanyType (Name, SiteID) VALUES (N''Поставщик'', @_siteID)
	INSERT INTO tbl_CompanyType (Name, SiteID) VALUES (N''Другая компания'', @_siteID)
	INSERT INTO tbl_CompanyType (Name, SiteID) VALUES (N''Наша компания'', @_siteID)

	INSERT INTO tbl_ContactType (Name, SiteID) VALUES (N''Бот'', @_siteID)
	INSERT INTO tbl_ContactType (Name, SiteID) VALUES (N''Потенциальный клиент'', @_siteID)
	INSERT INTO tbl_ContactType (Name, SiteID) VALUES (N''Клиент'', @_siteID)
	INSERT INTO tbl_ContactType (Name, SiteID) VALUES (N''Сотрудник'', @_siteID)

	INSERT INTO tbl_ContactFunctionInCompany (Name, SiteID) VALUES (N''Управление'', @_siteID)
	INSERT INTO tbl_ContactFunctionInCompany (Name, SiteID) VALUES (N''Финансы'', @_siteID)
	INSERT INTO tbl_ContactFunctionInCompany (Name, SiteID) VALUES (N''ИТ'', @_siteID)
	INSERT INTO tbl_ContactFunctionInCompany (Name, SiteID) VALUES (N''Производство'', @_siteID)
	INSERT INTO tbl_ContactFunctionInCompany (Name, SiteID) VALUES (N''Другое'', @_siteID)

	INSERT INTO tbl_ContactJobLevel (Name, SiteID) VALUES (N''Собственник/учредитель'', @_siteID)
	INSERT INTO tbl_ContactJobLevel (Name, SiteID) VALUES (N''Директор'', @_siteID)
	INSERT INTO tbl_ContactJobLevel (Name, SiteID) VALUES (N''Руководитель отдела'', @_siteID)
	INSERT INTO tbl_ContactJobLevel (Name, SiteID) VALUES (N''Сотрудник'', @_siteID)

END'

commit
exec LBC_SetVersion 351
END

/*******************************************************************************
	2012-11-22	
*******************************************************************************/
if ( dbo.LBC_Version() < 352 )
BEGIN
begin tran

CREATE TABLE [dbo].[tbl_Material](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteID] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](255) NOT NULL,
	[Type] [int] NOT NULL,
	[Description] [ntext] NULL,
	[Value] [nvarchar](2000) NULL,
	[WorkflowTemplateID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_tbl_Materials] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
ALTER TABLE [dbo].[tbl_Material]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Material_tbl_Sites] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_Sites] ([ID])
ALTER TABLE [dbo].[tbl_Material] CHECK CONSTRAINT [FK_tbl_Material_tbl_Sites]
ALTER TABLE [dbo].[tbl_Material] ADD  CONSTRAINT [DF_tbl_Materials_ID]  DEFAULT (newid()) FOR [ID]

commit
exec LBC_SetVersion 352
END

/*******************************************************************************
	2012-11-23
*******************************************************************************/
if ( dbo.LBC_Version() < 353 )
BEGIN
begin tran

ALTER TABLE [tbl_InvoiceComment] DROP CONSTRAINT [FK_tbl_InvoiceComment_tbl_Invoice] 
ALTER TABLE [tbl_InvoiceComment]  WITH CHECK ADD CONSTRAINT [FK_tbl_InvoiceComment_tbl_Invoice] FOREIGN KEY([ContentID])
REFERENCES [dbo].[tbl_Invoice] ([ID])  ON DELETE CASCADE

ALTER TABLE [tbl_InvoiceHistory] DROP CONSTRAINT [FK_tbl_InvoiceHistory_tbl_Invoice] 
ALTER TABLE [dbo].[tbl_InvoiceHistory]  WITH CHECK ADD  CONSTRAINT [FK_tbl_InvoiceHistory_tbl_Invoice] FOREIGN KEY([InvoiceID])
REFERENCES [dbo].[tbl_Invoice] ([ID])  ON DELETE CASCADE

ALTER TABLE [tbl_InvoiceProducts] DROP CONSTRAINT FK_tbl_InvoiceProducts_tbl_Invoice 
ALTER TABLE [dbo].[tbl_InvoiceProducts]  WITH CHECK ADD  CONSTRAINT FK_tbl_InvoiceProducts_tbl_Invoice FOREIGN KEY([InvoiceID])
REFERENCES [dbo].[tbl_Invoice] ([ID])  ON DELETE CASCADE

commit
exec LBC_SetVersion 353
END

GO

/*******************************************************************************
	2012-11-27
*******************************************************************************/
if ( dbo.LBC_Version() < 354 )
BEGIN
begin tran

DECLARE @ModuleID uniqueidentifier = (SELECT ID FROM tbl_Module WHERE Name=N'WorkflowTemplates')
DECLARE @ModuleEditionID uniqueidentifier = (SELECT ID FROM tbl_ModuleEdition WHERE Title=N'Основная редакция' AND ModuleID=@ModuleID)

INSERT INTO tbl_ModuleEditionOption (ModuleEditionID, [Title], [SystemName], [ModuleEditionOptionType])
VALUES (@ModuleEditionID, N'Поддержка редактора процессов', N'AllowWorkflowDesigner', 0)

INSERT INTO tbl_ModuleEditionOption (ModuleEditionID, [Title], [SystemName], [ModuleEditionOptionType])
VALUES (@ModuleEditionID, N'Простой режим', N'SimpleMode', 0)

commit
exec LBC_SetVersion 354
END

/*******************************************************************************
	2012-12-19
*******************************************************************************/
if ( dbo.LBC_Version() < 355 )
BEGIN
begin tran

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[tbl_Links](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteID] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](255) NOT NULL,
	[RuleTypeID] [int] NOT NULL,
	[Code] [nvarchar](50) NULL,
	[URL] [nvarchar](255) NULL,
	[OwnerID] [uniqueidentifier] NULL,
	[FileSize] [bigint] NULL,
	[Description] [nvarchar](500) NULL,
 CONSTRAINT [PK_tbl_Links] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[tbl_Links]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Links_tbl_RuleTypes] FOREIGN KEY([RuleTypeID])
REFERENCES [dbo].[tbl_RuleTypes] ([ID])
ALTER TABLE [dbo].[tbl_Links] CHECK CONSTRAINT [FK_tbl_Links_tbl_RuleTypes]
ALTER TABLE [dbo].[tbl_Links]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Links_tbl_Sites] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_Sites] ([ID])
ALTER TABLE [dbo].[tbl_Links] CHECK CONSTRAINT [FK_tbl_Links_tbl_Sites]
ALTER TABLE [dbo].[tbl_Links] ADD  CONSTRAINT [DF_tbl_Links_ID]  DEFAULT (newid()) FOR [ID]

INSERT INTO tbl_Links ([ID], [SiteID], [Name], [RuleTypeID], [Code], [URL], [OwnerID], [FileSize], [Description])
SELECT [ID], [SiteID], [Name], [RuleTypeID], [Code], [URL], [OwnerID], [FileSize], [Description]
FROM tbl_SiteActivityRules
WHERE (RuleTypeID = 1) OR (RuleTypeID = 5)

ALTER TABLE [tbl_SiteActionLink] DROP CONSTRAINT FK_tbl_SiteActionLink_tbl_SiteActivityRules 

ALTER TABLE [dbo].[tbl_SiteActionLink]  WITH CHECK ADD  CONSTRAINT [FK_tbl_SiteActionLink_tbl_Links] FOREIGN KEY([SiteActivityRuleID])
REFERENCES [dbo].[tbl_Links] ([ID])

commit
exec LBC_SetVersion 355
END

/*******************************************************************************
	2012-12-20
*******************************************************************************/
if ( dbo.LBC_Version() < 356 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[LinkProcessing]
(
	@SiteActionLinkID uniqueidentifier,
	@CurrentDate datetime = NULL
)
AS
BEGIN
	DECLARE @SiteActionID uniqueidentifier
	
	SELECT @SiteActionID=SiteActionID
	FROM tbl_SiteActionLink
	WHERE ID=@SiteActionLinkID

	UPDATE tbl_SiteActionLink
	SET ActionLinkDate=@CurrentDate
	WHERE ID=@SiteActionLinkID AND ActionLinkDate IS NULL
	
	UPDATE tbl_SiteAction
	SET ResponseDate=@CurrentDate
	WHERE ID=@SiteActionID AND ResponseDate IS NULL
	
	SELECT acl.*, c.SiteID, lnk.RuleTypeID AS SiteActivityRuleTypeID, lnk.Code AS SiteActivityRuleCode, lnk.URL AS SiteActivityRuleURL
	FROM tbl_SiteActionLink AS acl
	LEFT JOIN tbl_Contact AS c ON c.ID=acl.ContactID
	LEFT JOIN tbl_Links AS lnk ON lnk.ID=acl.SiteActivityRuleID
	WHERE acl.ID=@SiteActionLinkID
END'

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[LinkService_Update]
(
	@SiteActionLinkID uniqueidentifier,
	@CurrentDate datetime = NULL
)
AS
BEGIN
	DECLARE @SiteActionID uniqueidentifier
	DECLARE @SiteActivityRuleID uniqueidentifier
	DECLARE @Code nvarchar(255)
	
	SELECT @SiteActionID=SiteActionID, @SiteActivityRuleID=SiteActivityRuleID, @Code=LinkURL
	FROM tbl_SiteActionLink
	WHERE ID=@SiteActionLinkID
	
	IF (@SiteActivityRuleID IS NOT NULL)
	BEGIN
		SELECT @Code=Code
		FROM tbl_Links
		WHERE ID=@SiteActivityRuleID AND RuleTypeID=1
	END

	UPDATE tbl_SiteActionLink
	SET ActionLinkDate=@CurrentDate
	WHERE ID=@SiteActionLinkID AND ActionLinkDate IS NULL
	
	UPDATE tbl_SiteAction
	SET ResponseDate=@CurrentDate
	WHERE ID=@SiteActionID AND ResponseDate IS NULL
	
	SELECT @Code
END'

commit
exec LBC_SetVersion 356
END

/*******************************************************************************
	2012-12-21
*******************************************************************************/
if ( dbo.LBC_Version() < 357 )
BEGIN
begin tran

INSERT INTO tbl_RuleTypes ([Title]) VALUES (N'Форма LPgenerator')

commit
exec LBC_SetVersion 357
END

/*******************************************************************************
	2012-12-24
*******************************************************************************/
if ( dbo.LBC_Version() < 358 )
BEGIN
begin tran

ALTER TABLE [dbo].[tbl_SiteActivityRules] ADD [ErrorMessage] nvarchar(256) NULL

commit
exec LBC_SetVersion 358
END


/*******************************************************************************
	2012-12-26
*******************************************************************************/
if ( dbo.LBC_Version() < 359 )
BEGIN
begin tran

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON

CREATE TABLE [dbo].[tbl_ColumnTypesExpression](
	[ID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
	[ColumnTypesID] [int] NOT NULL,
	[Expression] [nvarchar](512) NOT NULL,
 CONSTRAINT [PK_tbl_ColumnTypesExpression] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[tbl_ColumnTypesExpression]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ColumnTypesExpression_tbl_ColumnTypes] FOREIGN KEY([ColumnTypesID])
REFERENCES [dbo].[tbl_ColumnTypes] ([ID])
ALTER TABLE [dbo].[tbl_ColumnTypesExpression] CHECK CONSTRAINT [FK_tbl_ColumnTypesExpression_tbl_ColumnTypes]
ALTER TABLE [dbo].[tbl_ColumnTypesExpression]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ColumnTypesExpression_tbl_ColumnTypesExpression] FOREIGN KEY([ID])
REFERENCES [dbo].[tbl_ColumnTypesExpression] ([ID])
ALTER TABLE [dbo].[tbl_ColumnTypesExpression] CHECK CONSTRAINT [FK_tbl_ColumnTypesExpression_tbl_ColumnTypesExpression]
ALTER TABLE [dbo].[tbl_ColumnTypesExpression] ADD  CONSTRAINT [DF_tbl_ColumnTypesExpression_ID]  DEFAULT (newid()) FOR [ID]

DECLARE @DictionaryGroupID uniqueidentifier = (SELECT ID FROM tbl_DictionaryGroup WHERE Title=N'Общее')
INSERT INTO tbl_Dictionary (Title, DataSet, AccessLevelID, DictionaryGroupID, EditFormUserControl)
VALUES (N'Формат ввода/вывода', N'tbl_ColumnTypesExpression', 2, @DictionaryGroupID, NULL)

commit
exec LBC_SetVersion 359
END

/*******************************************************************************
	2012-12-26
*******************************************************************************/
if ( dbo.LBC_Version() < 360 )
BEGIN
begin tran

ALTER TABLE [tbl_Import] ADD [Type] int NOT NULL DEFAULT ((0))

commit
exec LBC_SetVersion 360
END

/*******************************************************************************
	2012-12-26
*******************************************************************************/
if ( dbo.LBC_Version() < 361 )
BEGIN
begin tran

ALTER TABLE [tbl_Import] ADD [CsvSeparator] nvarchar(10) NULL

commit
exec LBC_SetVersion 361
END

/*******************************************************************************
	2013-01-02
*******************************************************************************/
if ( dbo.LBC_Version() < 362 )
BEGIN
begin tran

ALTER TABLE tbl_WebSitePage DROP COLUMN [Image]

commit
exec LBC_SetVersion 362
END

/*******************************************************************************
	2013-01-09
*******************************************************************************/
if ( dbo.LBC_Version() < 363 )
BEGIN
begin tran

ALTER TABLE [tbl_WebSitePage] ADD [IsHomePage] bit NOT NULL DEFAULT((0))

commit
exec LBC_SetVersion 363
END

/*******************************************************************************
	2013-01-11
*******************************************************************************/
if ( dbo.LBC_Version() < 364 )
BEGIN
begin tran

ALTER TABLE tbl_SiteActivityRuleLayout ADD [SysField] nvarchar(50) NULL
ALTER TABLE tbl_SiteActivityRuleLayout ADD [LayoutTypeBackup] int NULL

commit
exec LBC_SetVersion 364
END
GO

/*******************************************************************************
	2013-01-11
*******************************************************************************/
if ( dbo.LBC_Version() < 365 )
BEGIN
begin tran

UPDATE tbl_SiteActivityRuleLayout
SET LayoutTypeBackup=LayoutType, LayoutType=2, SysField=N'sys_fullname'
WHERE LayoutType=5

UPDATE tbl_SiteActivityRuleLayout
SET LayoutTypeBackup=LayoutType, LayoutType=2, SysField=N'sys_email'
WHERE LayoutType=6

UPDATE tbl_SiteActivityRuleLayout
SET LayoutTypeBackup=LayoutType, LayoutType=2, SysField=N'sys_phone'
WHERE LayoutType=7

UPDATE tbl_SiteActivityRuleLayout
SET LayoutTypeBackup=LayoutType, LayoutType=2, SysField=N'sys_surname'
WHERE LayoutType=8

UPDATE tbl_SiteActivityRuleLayout
SET LayoutTypeBackup=LayoutType, LayoutType=2, SysField=N'sys_name'
WHERE LayoutType=9

UPDATE tbl_SiteActivityRuleLayout
SET LayoutTypeBackup=LayoutType, LayoutType=2, SysField=N'sys_patronymic'
WHERE LayoutType=10

commit
exec LBC_SetVersion 365
END

/*******************************************************************************
	2013-01-14
*******************************************************************************/
if ( dbo.LBC_Version() < 366 )
BEGIN
begin tran

INSERT [dbo].[tbl_ColumnTypesExpression] ([ID], [Title], [ColumnTypesID], [Expression]) VALUES (N'e2e09267-dd25-4ca8-b8f4-60389bd8bc09', N'Дата+время (dd/mm/yyyy hh:mm)', 2, N'^(?:0[1-9]|[12][0-9]|3[01])\/(?:0[1-9]|1[0-2])\/(?:19|20\d{2})\s([01]?[0-9]|2[0-3]):[0-5][0-9]$')
INSERT [dbo].[tbl_ColumnTypesExpression] ([ID], [Title], [ColumnTypesID], [Expression]) VALUES (N'a89143f9-2eed-40e8-958a-73e7a0d2b05a', N'Дата (dd/mm/yyyy)', 2, N'^(?:0[1-9]|[12][0-9]|3[01])\/(?:0[1-9]|1[0-2])\/(?:19|20\d{2})$')
INSERT [dbo].[tbl_ColumnTypesExpression] ([ID], [Title], [ColumnTypesID], [Expression]) VALUES (N'b0326af7-6be9-4611-bf03-a7d22f414c8e', N'Телефон', 1, N'^[01]?[- .]?(\([2-9]\d{2}\)|[2-9]\d{2})[- .]?\d{3}[- .]?\d{4}$')
INSERT [dbo].[tbl_ColumnTypesExpression] ([ID], [Title], [ColumnTypesID], [Expression]) VALUES (N'2f84d085-4ded-47a5-9ee3-b0588c88381c', N'Время (hh:mm)', 2, N'^([01]?[0-9]|2[0-3]):[0-5][0-9]$')
INSERT [dbo].[tbl_ColumnTypesExpression] ([ID], [Title], [ColumnTypesID], [Expression]) VALUES (N'4f9b4ba6-a0ea-46ac-8bbd-ff433920108d', N'Email', 1, N'^(?("")("".+?""@)|(([0-9a-zA-Z]((\.(?!\.))|[-!#\$%&''\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-zA-Z])@))(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,6}))$')

commit
exec LBC_SetVersion 366
END

/*******************************************************************************
	2013-01-14
*******************************************************************************/
if ( dbo.LBC_Version() < 367 )
BEGIN
begin tran

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON

CREATE TABLE [dbo].[tbl_WebSiteExternalResource](
	[ID] [uniqueidentifier] NOT NULL,
	[WebSiteID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
	[WebSiteResourcePlaceID] [int] NOT NULL,
	[ExternalResourceTypeID] [int] NOT NULL,
	[File] [nvarchar](256) NULL,
	[Text] [ntext] NULL,
	[Url] [nvarchar](1024) NULL,
 CONSTRAINT [PK_tbl_WebSiteExternalResource] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

ALTER TABLE [dbo].[tbl_WebSiteExternalResource]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WebSiteExternalResource_tbl_WebSite] FOREIGN KEY([WebSiteID])
REFERENCES [dbo].[tbl_WebSite] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_WebSiteExternalResource] CHECK CONSTRAINT [FK_tbl_WebSiteExternalResource_tbl_WebSite]
ALTER TABLE [dbo].[tbl_WebSiteExternalResource] ADD  CONSTRAINT [DF_tbl_WebSiteExternalResource_ID]  DEFAULT (newid()) FOR [ID]

commit
exec LBC_SetVersion 367
END

/*******************************************************************************
	2013-01-17
*******************************************************************************/
if ( dbo.LBC_Version() < 368 )
BEGIN
begin tran

ALTER TABLE tbl_WebSitePage ADD WebSiteID uniqueidentifier NULL

ALTER TABLE [dbo].[tbl_WebSitePage]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WebSitePage_tbl_WebSite] FOREIGN KEY([WebSiteID])
REFERENCES [dbo].[tbl_WebSite] ([ID])
ALTER TABLE [dbo].[tbl_WebSitePage] CHECK CONSTRAINT [FK_tbl_WebSitePage_tbl_WebSite]

commit
exec LBC_SetVersion 368
END

GO

/*******************************************************************************
	2013-01-17
*******************************************************************************/
if ( dbo.LBC_Version() < 369 )
BEGIN
begin tran


UPDATE [tbl_WebSitePage]
SET WebSiteID = WSS.WebSiteID
FROM [tbl_WebSitePage] AS WSP, [tbl_WebSiteStructure] AS WSS
WHERE WSP.WebSiteStructureID = WSS.ID

ALTER TABLE tbl_WebSitePage ALTER COLUMN WebSiteID uniqueidentifier not null

ALTER TABLE tbl_WebSitePage DROP CONSTRAINT FK_tbl_WebSitePage_tbl_WebSiteStructure

ALTER TABLE tbl_WebSitePage DROP COLUMN WebSiteStructureID

DROP TABLE tbl_WebSiteStructure

commit
exec LBC_SetVersion 369
END

/*******************************************************************************
	2013-01-18
*******************************************************************************/
if ( dbo.LBC_Version() < 370 )
BEGIN
begin tran

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE TABLE [dbo].[tbl_WebSitePageExternalResource](
	[WebSitePageID] [uniqueidentifier] NOT NULL,
	[WebSiteExternalResourceID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_tbl_WebSitePageExternalResource] PRIMARY KEY CLUSTERED 
(
	[WebSitePageID] ASC,
	[WebSiteExternalResourceID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[tbl_WebSitePageExternalResource]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WebSitePageExternalResource_tbl_WebSiteExternalResource] FOREIGN KEY([WebSiteExternalResourceID])
REFERENCES [dbo].[tbl_WebSiteExternalResource] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_WebSitePageExternalResource] CHECK CONSTRAINT [FK_tbl_WebSitePageExternalResource_tbl_WebSiteExternalResource]
ALTER TABLE [dbo].[tbl_WebSitePageExternalResource]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WebSitePageExternalResource_tbl_WebSitePage] FOREIGN KEY([WebSitePageID])
REFERENCES [dbo].[tbl_WebSitePage] ([ID])
ON DELETE CASCADE
ALTER TABLE [dbo].[tbl_WebSitePageExternalResource] CHECK CONSTRAINT [FK_tbl_WebSitePageExternalResource_tbl_WebSitePage]

commit
exec LBC_SetVersion 370
END

/*******************************************************************************
	2013-01-21
*******************************************************************************/
if ( dbo.LBC_Version() < 371 )
BEGIN
begin tran

ALTER TABLE tbl_SiteActivityRuleLayout ADD [ColumnTypeExpressionID] uniqueidentifier NULL

commit
exec LBC_SetVersion 371
END

/*******************************************************************************
	2013-02-06
*******************************************************************************/
if ( dbo.LBC_Version() < 372 )
BEGIN
begin tran

UPDATE tbl_ColumnTypesExpression SET Expression=N'dd/MM/yyyy hh:mm' WHERE [Title]=N'Дата+время (dd/mm/yyyy hh:mm)'
UPDATE tbl_ColumnTypesExpression SET Expression=N'dd/MM/yyyy' WHERE [Title]=N'Дата (dd/mm/yyyy)'
UPDATE tbl_ColumnTypesExpression SET Expression=N'hh:mm' WHERE [Title]=N'Время (hh:mm)'

commit
exec LBC_SetVersion 372
END

/*******************************************************************************
	2013-02-13
*******************************************************************************/
if ( dbo.LBC_Version() < 373 )
BEGIN
begin tran

ALTER TABLE tbl_SiteActivityRules ADD [Skin] int NOT NULL DEFAULT ((0))

EXEC sp_rename 'tbl_WebSiteExternalResource.WebSiteID', 'DestinationID', 'COLUMN'
EXEC sp_rename 'tbl_WebSiteExternalResource.WebSiteResourcePlaceID', 'ResourcePlaceID', 'COLUMN'
EXEC sp_rename 'tbl_WebSiteExternalResource', 'tbl_ExternalResource'
ALTER TABLE tbl_ExternalResource DROP FK_tbl_WebSiteExternalResource_tbl_WebSite
EXEC sp_rename 'tbl_ExternalResource.PK_tbl_WebSiteExternalResource', 'PK_tbl_ExternalResource'
ALTER TABLE tbl_ExternalResource DROP CONSTRAINT DF_tbl_WebSiteExternalResource_ID
ALTER TABLE [dbo].[tbl_ExternalResource] ADD  CONSTRAINT [DF_tbl_ExternalResource_ID]  DEFAULT (newid()) FOR [ID]

EXEC sp_rename 'tbl_WebSitePageExternalResource.WebSiteExternalResourceID', 'ExternalResourceID', 'COLUMN'
ALTER TABLE tbl_WebSitePageExternalResource DROP CONSTRAINT FK_tbl_WebSitePageExternalResource_tbl_WebSiteExternalResource
ALTER TABLE [dbo].[tbl_WebSitePageExternalResource]  WITH CHECK ADD  CONSTRAINT [FK_tbl_WebSitePageExternalResource_tbl_ExternalResource] FOREIGN KEY([ExternalResourceID])
REFERENCES [dbo].[tbl_ExternalResource] ([ID])
ON DELETE CASCADE

commit
exec LBC_SetVersion 373
END

/*******************************************************************************
	2013-02-14
*******************************************************************************/
if ( dbo.LBC_Version() < 374 )
BEGIN
begin tran

SET ANSI_NULLS ON

SET QUOTED_IDENTIFIER ON

CREATE TABLE [dbo].[tbl_ShipmentStatus](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_tbl_ShipmentStatus] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

SET ANSI_NULLS ON

SET QUOTED_IDENTIFIER ON

CREATE TABLE [dbo].[tbl_ShipmentType](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](256) NOT NULL,
	[NumeratorID] [uniqueidentifier] NOT NULL,
	[IsDefault] [bit] NOT NULL,
 CONSTRAINT [PK_tbl_ShipmentType] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

SET ANSI_NULLS ON

SET QUOTED_IDENTIFIER ON

CREATE TABLE [dbo].[tbl_Shipment](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteID] [uniqueidentifier] NOT NULL,
	[Number] [nvarchar](256) NOT NULL,
	[SerialNumber] [int] NOT NULL,
	[CreatedAt] [datetime] NOT NULL,
	[ShipmentTypeID] [uniqueidentifier] NOT NULL,
	[ShipmentStatusID] [int] NOT NULL,
	[Note] [nvarchar](1024) NULL,
	[BuyerCompanyID] [uniqueidentifier] NULL,
	[BuyerCompanyLegalAccountID] [uniqueidentifier] NULL,
	[BuyerContactID] [uniqueidentifier] NULL,
	[ExecutorCompanyID] [uniqueidentifier] NULL,
	[ExecutorCompanyLegalAccountID] [uniqueidentifier] NULL,
	[ExecutorContactID] [uniqueidentifier] NULL,
	[ShipmentAmount] [money] NOT NULL,
	[SendDate] [datetime] NULL,
	[OrderID] [uniqueidentifier] NULL,
	[PriceListID] [uniqueidentifier] NULL,
	[OwnerID] [uniqueidentifier] NULL,
	[ModifiedAt] [datetime] NULL,
 CONSTRAINT [PK_tbl_Shipment] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

SET ANSI_NULLS ON

SET QUOTED_IDENTIFIER ON

CREATE TABLE [dbo].[tbl_ShipmentComment](
	[ID] [uniqueidentifier] NOT NULL,
	[SiteID] [uniqueidentifier] NOT NULL,
	[CreatedAt] [datetime] NOT NULL,
	[ContentID] [uniqueidentifier] NOT NULL,
	[UserID] [uniqueidentifier] NOT NULL,
	[Comment] [ntext] NOT NULL,
	[FileName] [nvarchar](256) NULL,
	[IsOfficialAnswer] [bit] NULL,
	[DestinationUserID] [uniqueidentifier] NULL,
	[ReplyToID] [uniqueidentifier] NULL,
	[IsInternal] [bit] NOT NULL,
 CONSTRAINT [PK_tbl_ShipmentComment] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

SET ANSI_NULLS ON

SET QUOTED_IDENTIFIER ON

CREATE TABLE [dbo].[tbl_ShipmentCommentMark](
	[ID] [uniqueidentifier] NOT NULL,
	[CreatedAt] [datetime] NOT NULL,
	[ContentCommentID] [uniqueidentifier] NOT NULL,
	[UserID] [uniqueidentifier] NOT NULL,
	[TypeID] [int] NOT NULL,
	[Rank] [int] NOT NULL,
 CONSTRAINT [PK_tbl_ShipmentCommentMark] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

SET ANSI_NULLS ON

SET QUOTED_IDENTIFIER ON

CREATE TABLE [dbo].[tbl_InvoiceToShipment](
	[InvoiceID] [uniqueidentifier] NOT NULL,
	[ShipmentID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_tbl_InvoiceToShipment] PRIMARY KEY CLUSTERED 
(
	[InvoiceID] ASC,
	[ShipmentID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

SET ANSI_NULLS ON

SET QUOTED_IDENTIFIER ON

CREATE TABLE [dbo].[tbl_ShipmentHistory](
	[ID] [uniqueidentifier] NOT NULL,
	[CreatedAt] [datetime] NOT NULL,
	[ShipmentID] [uniqueidentifier] NOT NULL,
	[AuthorID] [uniqueidentifier] NOT NULL,
	[SendDate] [datetime] NULL,
	[ShipmentAmount] [money] NOT NULL,
	[ShipmentStatusID] [int] NOT NULL,
	[Note] [nvarchar](1024) NULL,
 CONSTRAINT [PK_tbl_ShipmentHistory] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

SET ANSI_NULLS ON

SET QUOTED_IDENTIFIER ON

CREATE TABLE [dbo].[tbl_ShipmentProducts](
	[ID] [uniqueidentifier] NOT NULL,
	[ShipmentID] [uniqueidentifier] NOT NULL,
	[ProductID] [uniqueidentifier] NOT NULL,
	[AnyProductName] [nvarchar](255) NULL,
	[SerialNumber] [nvarchar](255) NULL,
	[PriceListID] [uniqueidentifier] NULL,
	[Quantity] [decimal](18, 4) NOT NULL,
	[UnitID] [uniqueidentifier] NOT NULL,
	[CurrencyID] [uniqueidentifier] NOT NULL,
	[Rate] [money] NOT NULL,
	[CurrencyPrice] [money] NOT NULL,
	[CurrencyAmount] [money] NOT NULL,
	[Price] [money] NOT NULL,
	[Amount] [money] NOT NULL,
	[SpecialOfferPriceListID] [uniqueidentifier] NULL,
	[Discount] [decimal](18, 4) NULL,
	[CurrencyDiscountAmount] [money] NULL,
	[DiscountAmount] [money] NULL,
	[CurrencyTotalAmount] [money] NOT NULL,
	[TotalAmount] [money] NOT NULL,
	[TaskID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_tbl_ShipmentProducts] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[tbl_Shipment] ADD  CONSTRAINT [DF_tbl_Shipment_ID]  DEFAULT (newid()) FOR [ID]

ALTER TABLE [dbo].[tbl_Shipment] ADD  CONSTRAINT [DF_tbl_Shipment_CreatedAt]  DEFAULT (getdate()) FOR [CreatedAt]

ALTER TABLE [dbo].[tbl_Shipment] ADD  CONSTRAINT [DF_tbl_Shipment_ShipmentAmount]  DEFAULT ((0)) FOR [ShipmentAmount]

ALTER TABLE [dbo].[tbl_ShipmentComment] ADD  CONSTRAINT [DF_tbl_ShipmentComment_ID]  DEFAULT (newid()) FOR [ID]

ALTER TABLE [dbo].[tbl_ShipmentComment] ADD  CONSTRAINT [DF_tbl_ShipmentComment_CreatedAt]  DEFAULT (getdate()) FOR [CreatedAt]

ALTER TABLE [dbo].[tbl_ShipmentComment] ADD  CONSTRAINT [DF_tbl_ShipmentComment_IsOfficialAnswer]  DEFAULT ((0)) FOR [IsOfficialAnswer]

ALTER TABLE [dbo].[tbl_ShipmentComment] ADD  DEFAULT ((0)) FOR [IsInternal]

ALTER TABLE [dbo].[tbl_ShipmentCommentMark] ADD  CONSTRAINT [DF_tbl_ShipmentCommentMark_ID]  DEFAULT (newid()) FOR [ID]

ALTER TABLE [dbo].[tbl_ShipmentCommentMark] ADD  CONSTRAINT [DF_tbl_ShipmentCommentMark_CreatedAt]  DEFAULT (getdate()) FOR [CreatedAt]

ALTER TABLE [dbo].[tbl_ShipmentHistory] ADD  CONSTRAINT [DF_tbl_ShipmentHistory_ID]  DEFAULT (newid()) FOR [ID]

ALTER TABLE [dbo].[tbl_ShipmentHistory] ADD  CONSTRAINT [DF_tbl_ShipmentHistory_CreatedAt]  DEFAULT (getdate()) FOR [CreatedAt]

ALTER TABLE [dbo].[tbl_ShipmentHistory] ADD  CONSTRAINT [DF_tbl_ShipmentHistory_ShipmentAmount]  DEFAULT ((0)) FOR [ShipmentAmount]

ALTER TABLE [dbo].[tbl_ShipmentProducts] ADD  CONSTRAINT [DF_tbl_ShipmentProducts_ID]  DEFAULT (newid()) FOR [ID]

ALTER TABLE [dbo].[tbl_ShipmentType] ADD  CONSTRAINT [DF_tbl_ShipmentType_IsDefault]  DEFAULT ((0)) FOR [IsDefault]

ALTER TABLE [dbo].[tbl_InvoiceToShipment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_InvoiceToShipment_tbl_Invoice] FOREIGN KEY([InvoiceID])
REFERENCES [dbo].[tbl_Invoice] ([ID])
ON DELETE CASCADE

ALTER TABLE [dbo].[tbl_InvoiceToShipment] CHECK CONSTRAINT [FK_tbl_InvoiceToShipment_tbl_Invoice]

ALTER TABLE [dbo].[tbl_InvoiceToShipment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_InvoiceToShipment_tbl_Shipment] FOREIGN KEY([ShipmentID])
REFERENCES [dbo].[tbl_Shipment] ([ID])
ON DELETE CASCADE

ALTER TABLE [dbo].[tbl_InvoiceToShipment] CHECK CONSTRAINT [FK_tbl_InvoiceToShipment_tbl_Shipment]

ALTER TABLE [dbo].[tbl_Shipment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Shipment_tbl_Company_Buyer] FOREIGN KEY([BuyerCompanyID])
REFERENCES [dbo].[tbl_Company] ([ID])

ALTER TABLE [dbo].[tbl_Shipment] CHECK CONSTRAINT [FK_tbl_Shipment_tbl_Company_Buyer]

ALTER TABLE [dbo].[tbl_Shipment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Shipment_tbl_Company_Executor] FOREIGN KEY([ExecutorCompanyID])
REFERENCES [dbo].[tbl_Company] ([ID])

ALTER TABLE [dbo].[tbl_Shipment] CHECK CONSTRAINT [FK_tbl_Shipment_tbl_Company_Executor]

ALTER TABLE [dbo].[tbl_Shipment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Shipment_tbl_CompanyLegalAccountBuyer] FOREIGN KEY([BuyerCompanyLegalAccountID])
REFERENCES [dbo].[tbl_CompanyLegalAccount] ([ID])

ALTER TABLE [dbo].[tbl_Shipment] CHECK CONSTRAINT [FK_tbl_Shipment_tbl_CompanyLegalAccountBuyer]

ALTER TABLE [dbo].[tbl_Shipment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Shipment_tbl_CompanyLegalAccountExecutor] FOREIGN KEY([ExecutorCompanyLegalAccountID])
REFERENCES [dbo].[tbl_CompanyLegalAccount] ([ID])

ALTER TABLE [dbo].[tbl_Shipment] CHECK CONSTRAINT [FK_tbl_Shipment_tbl_CompanyLegalAccountExecutor]

ALTER TABLE [dbo].[tbl_Shipment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Shipment_tbl_Contact] FOREIGN KEY([OwnerID])
REFERENCES [dbo].[tbl_Contact] ([ID])

ALTER TABLE [dbo].[tbl_Shipment] CHECK CONSTRAINT [FK_tbl_Shipment_tbl_Contact]

ALTER TABLE [dbo].[tbl_Shipment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Shipment_tbl_Contact_Buyer] FOREIGN KEY([BuyerContactID])
REFERENCES [dbo].[tbl_Contact] ([ID])

ALTER TABLE [dbo].[tbl_Shipment] CHECK CONSTRAINT [FK_tbl_Shipment_tbl_Contact_Buyer]

ALTER TABLE [dbo].[tbl_Shipment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Shipment_tbl_Contact_Executor] FOREIGN KEY([ExecutorContactID])
REFERENCES [dbo].[tbl_Contact] ([ID])

ALTER TABLE [dbo].[tbl_Shipment] CHECK CONSTRAINT [FK_tbl_Shipment_tbl_Contact_Executor]

ALTER TABLE [dbo].[tbl_Shipment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Shipment_tbl_Order] FOREIGN KEY([OrderID])
REFERENCES [dbo].[tbl_Order] ([ID])

ALTER TABLE [dbo].[tbl_Shipment] CHECK CONSTRAINT [FK_tbl_Shipment_tbl_Order]

ALTER TABLE [dbo].[tbl_Shipment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Shipment_tbl_PriceList] FOREIGN KEY([PriceListID])
REFERENCES [dbo].[tbl_PriceList] ([ID])

ALTER TABLE [dbo].[tbl_Shipment] CHECK CONSTRAINT [FK_tbl_Shipment_tbl_PriceList]

ALTER TABLE [dbo].[tbl_Shipment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Shipment_tbl_ShipmentStatus] FOREIGN KEY([ShipmentStatusID])
REFERENCES [dbo].[tbl_ShipmentStatus] ([ID])

ALTER TABLE [dbo].[tbl_Shipment] CHECK CONSTRAINT [FK_tbl_Shipment_tbl_ShipmentStatus]

ALTER TABLE [dbo].[tbl_Shipment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Shipment_tbl_ShipmentType] FOREIGN KEY([ShipmentTypeID])
REFERENCES [dbo].[tbl_ShipmentType] ([ID])

ALTER TABLE [dbo].[tbl_Shipment] CHECK CONSTRAINT [FK_tbl_Shipment_tbl_ShipmentType]

ALTER TABLE [dbo].[tbl_Shipment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_Shipment_tbl_Sites] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_Sites] ([ID])

ALTER TABLE [dbo].[tbl_Shipment] CHECK CONSTRAINT [FK_tbl_Shipment_tbl_Sites]

ALTER TABLE [dbo].[tbl_ShipmentComment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentComment_tbl_Shipment] FOREIGN KEY([ContentID])
REFERENCES [dbo].[tbl_Shipment] ([ID])
ON DELETE CASCADE

ALTER TABLE [dbo].[tbl_ShipmentComment] CHECK CONSTRAINT [FK_tbl_ShipmentComment_tbl_Shipment]

ALTER TABLE [dbo].[tbl_ShipmentComment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentComment_tbl_ShipmentComment] FOREIGN KEY([ReplyToID])
REFERENCES [dbo].[tbl_ShipmentComment] ([ID])

ALTER TABLE [dbo].[tbl_ShipmentComment] CHECK CONSTRAINT [FK_tbl_ShipmentComment_tbl_ShipmentComment]

ALTER TABLE [dbo].[tbl_ShipmentComment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentComment_tbl_Sites] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_Sites] ([ID])

ALTER TABLE [dbo].[tbl_ShipmentComment] CHECK CONSTRAINT [FK_tbl_ShipmentComment_tbl_Sites]

ALTER TABLE [dbo].[tbl_ShipmentComment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentComment_tbl_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[tbl_User] ([ID])

ALTER TABLE [dbo].[tbl_ShipmentComment] CHECK CONSTRAINT [FK_tbl_ShipmentComment_tbl_User]

ALTER TABLE [dbo].[tbl_ShipmentComment]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentComment_tbl_User_Destination] FOREIGN KEY([DestinationUserID])
REFERENCES [dbo].[tbl_User] ([ID])

ALTER TABLE [dbo].[tbl_ShipmentComment] CHECK CONSTRAINT [FK_tbl_ShipmentComment_tbl_User_Destination]

ALTER TABLE [dbo].[tbl_ShipmentCommentMark]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentCommentMark_tbl_ShipmentComment] FOREIGN KEY([ContentCommentID])
REFERENCES [dbo].[tbl_ShipmentComment] ([ID])
ON DELETE CASCADE

ALTER TABLE [dbo].[tbl_ShipmentCommentMark] CHECK CONSTRAINT [FK_tbl_ShipmentCommentMark_tbl_ShipmentComment]

ALTER TABLE [dbo].[tbl_ShipmentCommentMark]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentCommentMark_tbl_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[tbl_User] ([ID])

ALTER TABLE [dbo].[tbl_ShipmentCommentMark] CHECK CONSTRAINT [FK_tbl_ShipmentCommentMark_tbl_User]

ALTER TABLE [dbo].[tbl_ShipmentHistory]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentHistory_tbl_Contact] FOREIGN KEY([AuthorID])
REFERENCES [dbo].[tbl_Contact] ([ID])

ALTER TABLE [dbo].[tbl_ShipmentHistory] CHECK CONSTRAINT [FK_tbl_ShipmentHistory_tbl_Contact]

ALTER TABLE [dbo].[tbl_ShipmentHistory]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentHistory_tbl_Shipment] FOREIGN KEY([ShipmentID])
REFERENCES [dbo].[tbl_Shipment] ([ID])
ON DELETE CASCADE

ALTER TABLE [dbo].[tbl_ShipmentHistory] CHECK CONSTRAINT [FK_tbl_ShipmentHistory_tbl_Shipment]

ALTER TABLE [dbo].[tbl_ShipmentHistory]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentHistory_tbl_ShipmentStatus] FOREIGN KEY([ShipmentStatusID])
REFERENCES [dbo].[tbl_ShipmentStatus] ([ID])

ALTER TABLE [dbo].[tbl_ShipmentHistory] CHECK CONSTRAINT [FK_tbl_ShipmentHistory_tbl_ShipmentStatus]

ALTER TABLE [dbo].[tbl_ShipmentProducts]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentProducts_tbl_Currency] FOREIGN KEY([CurrencyID])
REFERENCES [dbo].[tbl_Currency] ([ID])

ALTER TABLE [dbo].[tbl_ShipmentProducts] CHECK CONSTRAINT [FK_tbl_ShipmentProducts_tbl_Currency]

ALTER TABLE [dbo].[tbl_ShipmentProducts]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentProducts_tbl_PriceList] FOREIGN KEY([PriceListID])
REFERENCES [dbo].[tbl_PriceList] ([ID])

ALTER TABLE [dbo].[tbl_ShipmentProducts] CHECK CONSTRAINT [FK_tbl_ShipmentProducts_tbl_PriceList]

ALTER TABLE [dbo].[tbl_ShipmentProducts]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentProducts_tbl_PriceListSpecialOffer] FOREIGN KEY([SpecialOfferPriceListID])
REFERENCES [dbo].[tbl_PriceList] ([ID])

ALTER TABLE [dbo].[tbl_ShipmentProducts] CHECK CONSTRAINT [FK_tbl_ShipmentProducts_tbl_PriceListSpecialOffer]

ALTER TABLE [dbo].[tbl_ShipmentProducts]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentProducts_tbl_Product] FOREIGN KEY([ProductID])
REFERENCES [dbo].[tbl_Product] ([ID])

ALTER TABLE [dbo].[tbl_ShipmentProducts] CHECK CONSTRAINT [FK_tbl_ShipmentProducts_tbl_Product]

ALTER TABLE [dbo].[tbl_ShipmentProducts]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentProducts_tbl_Shipment] FOREIGN KEY([ShipmentID])
REFERENCES [dbo].[tbl_Shipment] ([ID])
ON DELETE CASCADE

ALTER TABLE [dbo].[tbl_ShipmentProducts] CHECK CONSTRAINT [FK_tbl_ShipmentProducts_tbl_Shipment]

ALTER TABLE [dbo].[tbl_ShipmentProducts]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentProducts_tbl_Task] FOREIGN KEY([TaskID])
REFERENCES [dbo].[tbl_Task] ([ID])

ALTER TABLE [dbo].[tbl_ShipmentProducts] CHECK CONSTRAINT [FK_tbl_ShipmentProducts_tbl_Task]

ALTER TABLE [dbo].[tbl_ShipmentProducts]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentProducts_tbl_Unit] FOREIGN KEY([UnitID])
REFERENCES [dbo].[tbl_Unit] ([ID])

ALTER TABLE [dbo].[tbl_ShipmentProducts] CHECK CONSTRAINT [FK_tbl_ShipmentProducts_tbl_Unit]
ALTER TABLE [dbo].[tbl_ShipmentType]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentType_tbl_Numerator] FOREIGN KEY([NumeratorID])
REFERENCES [dbo].[tbl_Numerator] ([ID])

ALTER TABLE [dbo].[tbl_ShipmentType] CHECK CONSTRAINT [FK_tbl_ShipmentType_tbl_Numerator]
ALTER TABLE [dbo].[tbl_ShipmentType]  WITH CHECK ADD  CONSTRAINT [FK_tbl_ShipmentType_tbl_Sites] FOREIGN KEY([SiteID])
REFERENCES [dbo].[tbl_Sites] ([ID])
ALTER TABLE [dbo].[tbl_ShipmentType] CHECK CONSTRAINT [FK_tbl_ShipmentType_tbl_Sites]

commit
exec LBC_SetVersion 374
END

GO

/*******************************************************************************
	2013-02-14
*******************************************************************************/
if ( dbo.LBC_Version() < 375 )
BEGIN
begin tran

INSERT INTO tbl_Module (Title, Name, TableName)
VALUES (N'Отгрузки', 'Shipments','tbl_Shipment')
INSERT INTO tbl_ObjectTypes (Name) VALUES (N'tbl_Shipment')


INSERT INTO [dbo].[tbl_DictionaryGroup] ([ID], [Title], [ModuleID]) VALUES (N'8c3bb1a4-dc3f-45f2-b497-13b7542b21f2', N'Отгрузки', NULL)
INSERT INTO [dbo].[tbl_Dictionary] ([Title], [DataSet], [AccessLevelID], [DictionaryGroupID], [EditFormUserControl]) VALUES (N'Типы отгрузок', N'tbl_ShipmentType', 0, N'8c3bb1a4-dc3f-45f2-b497-13b7542b21f2', NULL)

SET IDENTITY_INSERT [dbo].[tbl_ShipmentStatus] ON
INSERT [dbo].[tbl_ShipmentStatus] ([ID], [Title]) VALUES (1, N'Подготовлен')
INSERT [dbo].[tbl_ShipmentStatus] ([ID], [Title]) VALUES (2, N'Подписан')
INSERT [dbo].[tbl_ShipmentStatus] ([ID], [Title]) VALUES (3, N'Отменен')
SET IDENTITY_INSERT [dbo].[tbl_ShipmentStatus] OFF

commit
exec LBC_SetVersion 375
END

/*******************************************************************************
	2013-02-20
*******************************************************************************/
if ( dbo.LBC_Version() < 376 )
BEGIN
begin tran

INSERT INTO tbl_ColumnTypes (Title) VALUES (N'Логическое')
ALTER TABLE tbl_ContactColumnValues ADD LogicalValue bit NULL

commit
exec LBC_SetVersion 376
END

/*******************************************************************************
	2013-02-20
*******************************************************************************/
if ( dbo.LBC_Version() < 377 )
BEGIN
begin tran

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[Import] 
(
	@ImportID uniqueidentifier = NULL
)
AS
BEGIN
	SET ANSI_WARNINGS OFF
	
	DECLARE @IDString varchar(50) = REPLACE(@ImportID, ''-'', '''')

	DECLARE @SiteID uniqueidentifier = (SELECT TOP 1 SiteID FROM tbl_Import WHERE ID=@ImportID)
	DECLARE @StatusID uniqueidentifier = (SELECT TOP 1 ID FROM tbl_Status WHERE SiteID=@SiteID AND IsDefault=1)

	DECLARE @SQLString nvarchar(max)
	DECLARE @ParmDefinition nvarchar(max) = NULL

	-- Выбор правил и внесение в общую таблицу
	DECLARE @ValueNull nvarchar(max) = NULL

	SELECT tbl_ImportField.TableName,
		   tbl_ImportField.ParentTableName,
		   tbl_ImportField.FieldTitle,
		   tbl_ImportField.FieldName,
		   tbl_ImportColumn.Name,
		   tbl_ImportColumn.SystemName,
		   tbl_ImportColumn.PrimaryKey,
		   tbl_ImportColumn.SecondaryKey,
		   tbl_ImportColumnRule.IsRequired,
		   @ValueNull AS Value
	INTO #Rules
	FROM tbl_ImportColumnRule
	LEFT JOIN tbl_ImportColumn ON tbl_ImportColumn.ID=tbl_ImportColumnRule.ImportColumnID
	LEFT JOIN tbl_ImportField ON tbl_ImportField.ID=tbl_ImportColumnRule.ImportFieldID
	WHERE tbl_ImportColumnRule.ImportID=@ImportID

	-- Выбор таблиц для обработки
	DECLARE @LeadForceIDNull uniqueidentifier = NULL
	SELECT DISTINCT TableName, ParentTableName, @LeadForceIDNull AS LeadForceID
	INTO #TableNames
	FROM #Rules
	
	-- Выбор тегов
	SELECT *
	INTO #Tags
	FROM tbl_ImportTag
	WHERE ImportID=@ImportID


	-- Перебираем все записи в Tmp таблице
	DECLARE @TmpImport_Cursor int
	EXEC(''DECLARE TmpImport_Cursor CURSOR FOR SELECT ID FROM TmpImport_'' + @IDString)
	OPEN TmpImport_Cursor
	FETCH NEXT FROM TmpImport_Cursor INTO @TmpImport_Cursor
	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- Добавление в общую таблицу значения
		DECLARE @Rules_Cursor nvarchar(255)
		EXEC(''DECLARE Rules_Cursor CURSOR FOR SELECT SystemName FROM #Rules'')
		OPEN Rules_Cursor
		FETCH NEXT FROM Rules_Cursor INTO @Rules_Cursor
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE @Value nvarchar(max) = NULL
			SET @SQLString = N''SELECT @ValueOUT='' + @Rules_Cursor + '' FROM TmpImport_'' + @IDString + '' WHERE ID='' + CAST(@TmpImport_Cursor AS nvarchar(max))
			SET @ParmDefinition = N''@ValueOUT nvarchar(max) OUTPUT''
			EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @ValueOUT=@Value OUTPUT
		
			UPDATE #Rules
			SET Value=ISNULL(LTRIM(RTRIM(@Value)), '''')
			WHERE SystemName=@Rules_Cursor
		
			FETCH NEXT FROM Rules_Cursor INTO @Rules_Cursor
		END
		CLOSE Rules_Cursor
		DEALLOCATE Rules_Cursor
		
		-- Проверка на обязательность всех полей в общей таблице
		IF (SELECT COUNT(*) FROM #Rules WHERE IsRequired=1 AND (Value IS NULL OR Value='''')) = 0
		BEGIN
				-- Обработка таблиц по родительским таблицам
				DECLARE @ParentTableName_Cursor nvarchar(255)
				EXEC(''DECLARE ParentTableName_Cursor CURSOR FOR SELECT DISTINCT ParentTableName FROM #TableNames'')
				OPEN ParentTableName_Cursor
				FETCH NEXT FROM ParentTableName_Cursor INTO @ParentTableName_Cursor
				WHILE @@FETCH_STATUS = 0
				BEGIN
						-- Обработка таблиц
						DECLARE @TableName_Cursor nvarchar(255)
						EXEC(''DECLARE TableName_Cursor CURSOR FOR SELECT TableName FROM #TableNames WHERE ParentTableName='''''' + @ParentTableName_Cursor + '''''''')
						OPEN TableName_Cursor
						FETCH NEXT FROM TableName_Cursor INTO @TableName_Cursor
						WHILE @@FETCH_STATUS = 0
						BEGIN
							DECLARE @LeadForceID uniqueidentifier = NULL
							
							IF (@TableName_Cursor<>''_Owner'')
							BEGIN
									DECLARE @Key nvarchar(max) = CAST(@SiteID AS nvarchar(50))
									DECLARE @PrimaryKey nvarchar(max) = NULL
									DECLARE @InsertPrimaryKey bit = 0
									DECLARE @SecondaryKey nvarchar(max) = NULL
								
									SELECT @Key = COALESCE(@Key + '';'', '''') + Value,
										   @PrimaryKey = COALESCE(@PrimaryKey + '' AND '', '''') + FieldName + ''='''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
									FROM #Rules
									WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor AND PrimaryKey=1
									ORDER BY TableName, FieldName ASC
									
									SET @Key = LOWER(@Key)
									
									IF (@PrimaryKey IS NOT NULL)
									BEGIN
										SET @InsertPrimaryKey = 1
										IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'' OR @TableName_Cursor=''tbl_CompanyType'' OR @TableName_Cursor=''tbl_CompanySector'' OR @TableName_Cursor=''tbl_ContactType'')
										BEGIN
											SET @PrimaryKey = COALESCE(@PrimaryKey + '' AND '', '''') + ''SiteID='''''' + CAST(@SiteID AS nvarchar(50)) + ''''''''
										END
										-- Поиск первичного ключа в таблице ключей
										SET @LeadForceID = (SELECT TOP 1 LeadForceID FROM tbl_ImportKey WHERE ImportID=@ImportID AND TableName=@TableName_Cursor AND [Key]=@Key)
										
										-- Поиск первичного ключа в таблице LeadForce
										IF (@LeadForceID IS NULL)
										BEGIN
											SET @SQLString = N''SELECT TOP 1 @LeadForceIDOUT=ID FROM '' + @TableName_Cursor + '' WHERE '' + @PrimaryKey
											SET @ParmDefinition = N''@LeadForceIDOUT nvarchar(50) OUTPUT''
											EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @LeadForceIDOUT=@LeadForceID OUTPUT
										END
									END
									
									-- Поиск вторичного ключа в таблице LeadForce
									SELECT @SecondaryKey = COALESCE(@SecondaryKey + '' AND '', '''') + FieldName + ''='''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
									FROM #Rules
									WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor AND SecondaryKey=1
									ORDER BY TableName, FieldName ASC
									
									IF ((@LeadForceID IS NULL) AND (@SecondaryKey IS NOT NULL))
									BEGIN
										IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'' OR @TableName_Cursor=''tbl_CompanyType'' OR @TableName_Cursor=''tbl_CompanySector'' OR @TableName_Cursor=''tbl_ContactType'')
										BEGIN
											SET @SecondaryKey = COALESCE(@SecondaryKey + '' AND '', '''') + ''SiteID='''''' + CAST(@SiteID AS nvarchar(50)) + ''''''''
										END

										SET @SQLString = N''SELECT TOP 1 @LeadForceIDOUT=ID FROM '' + @TableName_Cursor + '' WHERE '' + @SecondaryKey
										SET @ParmDefinition = N''@LeadForceIDOUT nvarchar(50) OUTPUT''
										EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @LeadForceIDOUT=@LeadForceID OUTPUT
									END
									
									IF (@LeadForceID IS NULL)
									BEGIN
										-- Добавление записи
										DECLARE @Fields nvarchar(max) = NULL
										DECLARE @Values nvarchar(max) = NULL
										
										SELECT @Fields = COALESCE(@Fields + '', '', '''') + ''['' + FieldName + '']'',
											   @Values = COALESCE(@Values + '', '', '''') + ''N'''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
										FROM #Rules
										WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor
										ORDER BY TableName, FieldName ASC
										
										IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'' OR @TableName_Cursor=''tbl_CompanyType'' OR @TableName_Cursor=''tbl_CompanySector'' OR @TableName_Cursor=''tbl_ContactType'')
										BEGIN
											SET @Fields = COALESCE(@Fields + '', '', '''') + ''[SiteID]''
											SET @Values = COALESCE(@Values + '', '', '''') + '''''''' + CAST(@SiteID AS varchar(50)) + ''''''''
										END
										
										IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'')
										BEGIN
											SET @Fields = COALESCE(@Fields + '', '', '''') + ''[StatusID]''
											SET @Values = COALESCE(@Values + '', '', '''') + '''''''' + CAST(@StatusID AS varchar(50)) + ''''''''
										END
										
										IF (@TableName_Cursor=''tbl_Contact'')
										BEGIN
											SET @Fields = COALESCE(@Fields + '', '', '''') + ''[RefferURL], [UserIP], [RegistrationSourceID]''
											SET @Values = COALESCE(@Values + '', '', '''') + '''''''''', '''''''', 3''
										END
									
										SET @LeadForceID = NEWID()
										SET @SQLString = ''INSERT INTO '' + @TableName_Cursor + '' (ID, '' + @Fields + '') VALUES ('''''' + CAST(@LeadForceID AS nvarchar(50)) + '''''', '' + @Values + '')''
										EXEC(@SQLString)
										
										-- Добавление записи в таблицу ключей, если есть первичный
										IF (@InsertPrimaryKey=1)
										BEGIN
											INSERT INTO tbl_ImportKey (ImportID, TableName, [Key], LeadForceID) VALUES (@ImportID, @TableName_Cursor, @Key, @LeadForceID)
										END
									END
									ELSE
									BEGIN
										-- Обновление записи
										DECLARE @FieldValues nvarchar(max) = NULL
										
										SELECT @FieldValues = COALESCE(@FieldValues + '', '', '''') + FieldName + ''=N'''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
										FROM #Rules
										WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor
										ORDER BY TableName, FieldName ASC

										SET @SQLString = ''UPDATE '' + @TableName_Cursor + '' SET '' + @FieldValues + '' WHERE ID=N'''''' + CAST(@LeadForceID AS nvarchar(50)) + ''''''''
										EXEC(@SQLString)
									END
							END
							ELSE
							BEGIN
									-- Поиск ответственных
									DECLARE @OwnerUserFullName nvarchar(255) = (SELECT ISNULL(Value, '''')
									FROM #Rules
									WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor)
									
									IF (@OwnerUserFullName <> '''')
									BEGIN
										DECLARE @OwnerID uniqueidentifier = NULL
										
										SET @SQLString = N''SELECT TOP 1 @LeadForceIDOUT=ID FROM tbl_Contact WHERE UserFullName=N'''''' + @OwnerUserFullName + ''''''''
										SET @ParmDefinition = N''@LeadForceIDOUT nvarchar(50) OUTPUT''
										EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @LeadForceIDOUT=@LeadForceID OUTPUT
										
										IF (@LeadForceID IS NULL)
										BEGIN
											SET @LeadForceID = NEWID()
											INSERT INTO tbl_Contact(ID, SiteID, UserFullName, RefferURL, UserIP, StatusID)
											VALUES (@LeadForceID, @SiteID, @OwnerUserFullName, '''', '''', @StatusID)
										END
									END
							END
							
							-- Обновление LeadForceID в таблицу #TableNames
							UPDATE #TableNames
							SET LeadForceID=@LeadForceID
							WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor
						
							FETCH NEXT FROM TableName_Cursor INTO @TableName_Cursor
						END
						CLOSE TableName_Cursor
						DEALLOCATE TableName_Cursor
				
					FETCH NEXT FROM ParentTableName_Cursor INTO @ParentTableName_Cursor
				END
				CLOSE ParentTableName_Cursor
				DEALLOCATE ParentTableName_Cursor
				
				-- Создание связей между записями таблиц
				DECLARE @ContactID uniqueidentifier = (SELECT LeadForceID FROM #TableNames WHERE TableName=''tbl_Contact'')
				DECLARE @CompanyID uniqueidentifier = (SELECT LeadForceID FROM #TableNames WHERE TableName=''tbl_Company'')
				DECLARE @FKID uniqueidentifier = NULL
				
				IF (@ContactID IS NOT NULL)
				BEGIN
					IF (@CompanyID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET CompanyID=@CompanyID WHERE ID=@ContactID
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_Address'' AND ParentTableName=''tbl_Contact''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET AddressID=@FKID WHERE ID=@ContactID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_ContactType'' AND ParentTableName=''tbl_Contact''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET ContactTypeID=@FKID WHERE ID=@ContactID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''_Owner'' AND ParentTableName=''tbl_Contact''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET OwnerID=@FKID WHERE ID=@ContactID
						SET @FKID = NULL
					END
					
					-- Обновление тегов
					DECLARE @Tag_Cursor uniqueidentifier
					EXEC(''DECLARE Tag_Cursor CURSOR FOR SELECT ID FROM #Tags'')
					OPEN Tag_Cursor
					FETCH NEXT FROM Tag_Cursor INTO @Tag_Cursor
					WHILE @@FETCH_STATUS = 0
					BEGIN
						DECLARE @SiteTagID uniqueidentifier = NULL
						DECLARE @Operation int = NULL
						
						SELECT @SiteTagID=SiteTagID, @Operation=Operation
						FROM #Tags
						WHERE ID=@Tag_Cursor
						
						IF (@Operation=0)
						BEGIN
							DELETE FROM tbl_SiteTagObjects
							WHERE SiteTagID=@SiteTagID AND ObjectID=@ContactID
						END
						ELSE
						BEGIN
							IF (SELECT COUNT(*) FROM tbl_SiteTagObjects WHERE SiteTagID=@SiteTagID AND ObjectID=@ContactID) = 0
							BEGIN
								INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID) VALUES (@SiteTagID, @ContactID)
							END
						END
					
						FETCH NEXT FROM Tag_Cursor INTO @Tag_Cursor
					END
					CLOSE Tag_Cursor
					DEALLOCATE Tag_Cursor
				END
				
				IF (@CompanyID IS NOT NULL)
				BEGIN
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_Address'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET LocationAddressID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_CompanyType'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET CompanyTypeID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_CompanySector'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET CompanySectorID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''_Owner'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET OwnerID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
				END
				
				UPDATE #TableNames SET LeadForceID=NULL
		END
		
		FETCH NEXT FROM TmpImport_Cursor INTO @TmpImport_Cursor
	END
	CLOSE TmpImport_Cursor
	DEALLOCATE TmpImport_Cursor

	DROP TABLE #Rules
	DROP TABLE #TableNames
	DROP TABLE #Tags
	
	EXEC(''DROP TABLE TmpImport_'' + @IDString)
	
	SET ANSI_WARNINGS ON
END'

commit
exec LBC_SetVersion 377
END

/*******************************************************************************
	2013-07-29
*******************************************************************************/
if ( dbo.LBC_Version() < 378 )
BEGIN
begin tran

ALTER TABLE tbl_SiteActivityRules ADD [ActionOnFillForm] int NOT NULL DEFAULT ((0))
ALTER TABLE tbl_SiteActivityRules ADD [SendFields] bit NOT NULL DEFAULT ((0))
ALTER TABLE tbl_SiteActivityRules ADD [SuccessMessage] ntext NULL

commit
exec LBC_SetVersion 378
END

/*******************************************************************************
	2013-07-29
*******************************************************************************/
if ( dbo.LBC_Version() < 379 )
BEGIN
begin tran

ALTER TABLE [tbl_SiteActivityRules] ADD YandexGoals ntext NULL

commit
exec LBC_SetVersion 379
END

/*******************************************************************************
	2013-07-29
*******************************************************************************/
if ( dbo.LBC_Version() < 380 )
BEGIN
begin tran

UPDATE tbl_ImportField
SET [Order] = [Order] + 3
WHERE [Order] >= 15

INSERT INTO tbl_ImportField (ImportTable, FieldTitle, TableName, FieldName, IsDictionary, IsAddress, [Order], ParentTableName)
VALUES (2, N'Фамилия', N'tbl_Contact', N'Surname', 0, 0, 15, N'tbl_Contact')

INSERT INTO tbl_ImportField (ImportTable, FieldTitle, TableName, FieldName, IsDictionary, IsAddress, [Order], ParentTableName)
VALUES (2, N'Имя', N'tbl_Contact', N'Name', 0, 0, 16, N'tbl_Contact')

INSERT INTO tbl_ImportField (ImportTable, FieldTitle, TableName, FieldName, IsDictionary, IsAddress, [Order], ParentTableName)
VALUES (2, N'Отчество', N'tbl_Contact', N'Patronymic', 0, 0, 17, N'tbl_Contact')

EXEC dbo.sp_executesql @statement = N'ALTER PROCEDURE [dbo].[Import] 
(
	@ImportID uniqueidentifier = NULL
)
AS
BEGIN
	SET ANSI_WARNINGS OFF
	
	DECLARE @IDString varchar(50) = REPLACE(@ImportID, ''-'', '''')

	DECLARE @SiteID uniqueidentifier = (SELECT TOP 1 SiteID FROM tbl_Import WHERE ID=@ImportID)
	DECLARE @StatusID uniqueidentifier = (SELECT TOP 1 ID FROM tbl_Status WHERE SiteID=@SiteID AND IsDefault=1)

	DECLARE @SQLString nvarchar(max)
	DECLARE @ParmDefinition nvarchar(max) = NULL

	-- Выбор правил и внесение в общую таблицу
	DECLARE @ValueNull nvarchar(max) = NULL

	SELECT tbl_ImportField.TableName,
		   tbl_ImportField.ParentTableName,
		   tbl_ImportField.FieldTitle,
		   tbl_ImportField.FieldName,
		   tbl_ImportColumn.Name,
		   tbl_ImportColumn.SystemName,
		   tbl_ImportColumn.PrimaryKey,
		   tbl_ImportColumn.SecondaryKey,
		   tbl_ImportColumnRule.IsRequired,
		   @ValueNull AS Value
	INTO #Rules
	FROM tbl_ImportColumnRule
	LEFT JOIN tbl_ImportColumn ON tbl_ImportColumn.ID=tbl_ImportColumnRule.ImportColumnID
	LEFT JOIN tbl_ImportField ON tbl_ImportField.ID=tbl_ImportColumnRule.ImportFieldID
	WHERE tbl_ImportColumnRule.ImportID=@ImportID

	-- Выбор таблиц для обработки
	DECLARE @LeadForceIDNull uniqueidentifier = NULL
	SELECT DISTINCT TableName, ParentTableName, @LeadForceIDNull AS LeadForceID
	INTO #TableNames
	FROM #Rules
	
	-- Выбор тегов
	SELECT *
	INTO #Tags
	FROM tbl_ImportTag
	WHERE ImportID=@ImportID


	-- Перебираем все записи в Tmp таблице
	DECLARE @TmpImport_Cursor int
	EXEC(''DECLARE TmpImport_Cursor CURSOR FOR SELECT ID FROM TmpImport_'' + @IDString)
	OPEN TmpImport_Cursor
	FETCH NEXT FROM TmpImport_Cursor INTO @TmpImport_Cursor
	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- Добавление в общую таблицу значения
		DECLARE @Rules_Cursor nvarchar(255)
		EXEC(''DECLARE Rules_Cursor CURSOR FOR SELECT SystemName FROM #Rules'')
		OPEN Rules_Cursor
		FETCH NEXT FROM Rules_Cursor INTO @Rules_Cursor
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE @Value nvarchar(max) = NULL
			SET @SQLString = N''SELECT @ValueOUT='' + @Rules_Cursor + '' FROM TmpImport_'' + @IDString + '' WHERE ID='' + CAST(@TmpImport_Cursor AS nvarchar(max))
			SET @ParmDefinition = N''@ValueOUT nvarchar(max) OUTPUT''
			EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @ValueOUT=@Value OUTPUT
		
			UPDATE #Rules
			SET Value=ISNULL(LTRIM(RTRIM(@Value)), '''')
			WHERE SystemName=@Rules_Cursor
		
			FETCH NEXT FROM Rules_Cursor INTO @Rules_Cursor
		END
		CLOSE Rules_Cursor
		DEALLOCATE Rules_Cursor
		
		-- Проверка на обязательность всех полей в общей таблице
		IF (SELECT COUNT(*) FROM #Rules WHERE IsRequired=1 AND (Value IS NULL OR Value='''')) = 0
		BEGIN
				-- Обработка таблиц по родительским таблицам
				DECLARE @ParentTableName_Cursor nvarchar(255)
				EXEC(''DECLARE ParentTableName_Cursor CURSOR FOR SELECT DISTINCT ParentTableName FROM #TableNames'')
				OPEN ParentTableName_Cursor
				FETCH NEXT FROM ParentTableName_Cursor INTO @ParentTableName_Cursor
				WHILE @@FETCH_STATUS = 0
				BEGIN
						-- Обработка таблиц
						DECLARE @TableName_Cursor nvarchar(255)
						EXEC(''DECLARE TableName_Cursor CURSOR FOR SELECT TableName FROM #TableNames WHERE ParentTableName='''''' + @ParentTableName_Cursor + '''''''')
						OPEN TableName_Cursor
						FETCH NEXT FROM TableName_Cursor INTO @TableName_Cursor
						WHILE @@FETCH_STATUS = 0
						BEGIN
							DECLARE @LeadForceID uniqueidentifier = NULL
							DECLARE @UserFullName nvarchar(255) = NULL
							DECLARE @Surname nvarchar(255) = NULL
							DECLARE @Name nvarchar(255) = NULL
							DECLARE @Patronymic nvarchar(255) = NULL
							
							IF (@TableName_Cursor<>''_Owner'')
							BEGIN
									DECLARE @Key nvarchar(max) = CAST(@SiteID AS nvarchar(50))
									DECLARE @PrimaryKey nvarchar(max) = NULL
									DECLARE @InsertPrimaryKey bit = 0
									DECLARE @SecondaryKey nvarchar(max) = NULL
								
									SELECT @Key = COALESCE(@Key + '';'', '''') + Value,
										   @PrimaryKey = COALESCE(@PrimaryKey + '' AND '', '''') + FieldName + ''='''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
									FROM #Rules
									WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor AND PrimaryKey=1
									ORDER BY TableName, FieldName ASC
									
									SET @Key = LOWER(@Key)
									
									IF (@PrimaryKey IS NOT NULL)
									BEGIN
										SET @InsertPrimaryKey = 1
										IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'' OR @TableName_Cursor=''tbl_CompanyType'' OR @TableName_Cursor=''tbl_CompanySector'' OR @TableName_Cursor=''tbl_ContactType'')
										BEGIN
											SET @PrimaryKey = COALESCE(@PrimaryKey + '' AND '', '''') + ''SiteID='''''' + CAST(@SiteID AS nvarchar(50)) + ''''''''
										END
										-- Поиск первичного ключа в таблице ключей
										SET @LeadForceID = (SELECT TOP 1 LeadForceID FROM tbl_ImportKey WHERE ImportID=@ImportID AND TableName=@TableName_Cursor AND [Key]=@Key)
										
										-- Поиск первичного ключа в таблице LeadForce
										IF (@LeadForceID IS NULL)
										BEGIN
											SET @SQLString = N''SELECT TOP 1 @LeadForceIDOUT=ID FROM '' + @TableName_Cursor + '' WHERE '' + @PrimaryKey
											SET @ParmDefinition = N''@LeadForceIDOUT nvarchar(50) OUTPUT''
											EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @LeadForceIDOUT=@LeadForceID OUTPUT
										END
									END
									
									-- Поиск вторичного ключа в таблице LeadForce
									SELECT @SecondaryKey = COALESCE(@SecondaryKey + '' AND '', '''') + FieldName + ''='''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
									FROM #Rules
									WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor AND SecondaryKey=1
									ORDER BY TableName, FieldName ASC
									
									IF ((@LeadForceID IS NULL) AND (@SecondaryKey IS NOT NULL))
									BEGIN
										IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'' OR @TableName_Cursor=''tbl_CompanyType'' OR @TableName_Cursor=''tbl_CompanySector'' OR @TableName_Cursor=''tbl_ContactType'')
										BEGIN
											SET @SecondaryKey = COALESCE(@SecondaryKey + '' AND '', '''') + ''SiteID='''''' + CAST(@SiteID AS nvarchar(50)) + ''''''''
										END

										SET @SQLString = N''SELECT TOP 1 @LeadForceIDOUT=ID FROM '' + @TableName_Cursor + '' WHERE '' + @SecondaryKey
										SET @ParmDefinition = N''@LeadForceIDOUT nvarchar(50) OUTPUT''
										EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @LeadForceIDOUT=@LeadForceID OUTPUT
									END
									
									IF (@LeadForceID IS NULL)
									BEGIN
										-- Добавление записи
										DECLARE @Fields nvarchar(max) = NULL
										DECLARE @Values nvarchar(max) = NULL
										DECLARE @_FieldName nvarchar(max) = NULL
										DECLARE @_Value nvarchar(max) = NULL
										
										SELECT @Fields = COALESCE(@Fields + '', '', '''') + ''['' + FieldName + '']'',
											   @Values = COALESCE(@Values + '', '', '''') + ''N'''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
										FROM #Rules
										WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor
										ORDER BY TableName, FieldName ASC
										
										IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'' OR @TableName_Cursor=''tbl_CompanyType'' OR @TableName_Cursor=''tbl_CompanySector'' OR @TableName_Cursor=''tbl_ContactType'')
										BEGIN
											SET @Fields = COALESCE(@Fields + '', '', '''') + ''[SiteID]''
											SET @Values = COALESCE(@Values + '', '', '''') + '''''''' + CAST(@SiteID AS varchar(50)) + ''''''''
										END
										
										IF (@TableName_Cursor=''tbl_Contact'' OR @TableName_Cursor=''tbl_Company'')
										BEGIN
											SET @Fields = COALESCE(@Fields + '', '', '''') + ''[StatusID]''
											SET @Values = COALESCE(@Values + '', '', '''') + '''''''' + CAST(@StatusID AS varchar(50)) + ''''''''
										END
										
										IF (@TableName_Cursor=''tbl_Contact'')
										BEGIN
											SET @Fields = COALESCE(@Fields + '', '', '''') + ''[RefferURL], [UserIP], [RegistrationSourceID]''
											SET @Values = COALESCE(@Values + '', '', '''') + '''''''''', '''''''', 3''
											
											-- Добавление полного имени из Фамилии, имени, отчества по отдельности
											SET @Surname = (SELECT Value FROM #Rules WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor AND FieldName = ''Surname'')
											SET @Name = (SELECT Value FROM #Rules WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor AND FieldName = ''Name'')
											SET @Patronymic = (SELECT Value FROM #Rules WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor AND FieldName = ''Patronymic'')
											
											IF (@Surname IS NOT NULL)
											BEGIN
												SET @UserFullName = COALESCE(@UserFullName + '' '', '''') + @Surname
											END
											IF (@Name IS NOT NULL)
											BEGIN
												SET @UserFullName = COALESCE(@UserFullName + '' '', '''') + @Name
											END
											IF (@Patronymic IS NOT NULL)
											BEGIN
												SET @UserFullName = COALESCE(@UserFullName + '' '', '''') + @Patronymic
											END
											IF (@UserFullName IS NOT NULL)
											BEGIN
												SET @Fields = COALESCE(@Fields + '', '', '''') + ''[UserFullName]''
												SET @Values = COALESCE(@Values + '', '', '''') + '''''''' + CAST(@UserFullName AS varchar(255)) + ''''''''
											END
										END									
									
										SET @LeadForceID = NEWID()
										SET @SQLString = ''INSERT INTO '' + @TableName_Cursor + '' (ID, '' + @Fields + '') VALUES ('''''' + CAST(@LeadForceID AS nvarchar(50)) + '''''', '' + @Values + '')''
										EXEC(@SQLString)
										
										-- Добавление записи в таблицу ключей, если есть первичный
										IF (@InsertPrimaryKey=1)
										BEGIN
											INSERT INTO tbl_ImportKey (ImportID, TableName, [Key], LeadForceID) VALUES (@ImportID, @TableName_Cursor, @Key, @LeadForceID)
										END
									END
									ELSE
									BEGIN
										-- Обновление записи
										DECLARE @FieldValues nvarchar(max) = NULL
										
										SELECT @FieldValues = COALESCE(@FieldValues + '', '', '''') + FieldName + ''=N'''''' + REPLACE(Value, '''''''', '''''''''''') + ''''''''
										FROM #Rules
										WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor
										ORDER BY TableName, FieldName ASC
										
										IF (@TableName_Cursor=''tbl_Contact'')
										BEGIN
											-- Добавление полного имени из Фамилии, имени, отчества по отдельности
											SET @Surname = (SELECT Value FROM #Rules WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor AND FieldName = ''Surname'')
											SET @Name = (SELECT Value FROM #Rules WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor AND FieldName = ''Name'')
											SET @Patronymic = (SELECT Value FROM #Rules WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor AND FieldName = ''Patronymic'')
											
											IF (@Surname IS NOT NULL)
											BEGIN
												SET @UserFullName = COALESCE(@UserFullName + '' '', '''') + @Surname
											END
											IF (@Name IS NOT NULL)
											BEGIN
												SET @UserFullName = COALESCE(@UserFullName + '' '', '''') + @Name
											END
											IF (@Patronymic IS NOT NULL)
											BEGIN
												SET @UserFullName = COALESCE(@UserFullName + '' '', '''') + @Patronymic
											END
											IF (@UserFullName IS NOT NULL)
											BEGIN
												SET @FieldValues = COALESCE(@FieldValues + '', '', '''') + ''UserFullName=N'''''' + CAST(@UserFullName AS varchar(255)) + ''''''''
											END
										END

										SET @SQLString = ''UPDATE '' + @TableName_Cursor + '' SET '' + @FieldValues + '' WHERE ID=N'''''' + CAST(@LeadForceID AS nvarchar(50)) + ''''''''
										EXEC(@SQLString)
									END
							END
							ELSE
							BEGIN
									-- Поиск ответственных
									DECLARE @OwnerUserFullName nvarchar(255) = (SELECT ISNULL(Value, '''')
									FROM #Rules
									WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor)
									
									IF (@OwnerUserFullName <> '''')
									BEGIN
										DECLARE @OwnerID uniqueidentifier = NULL
										
										SET @SQLString = N''SELECT TOP 1 @LeadForceIDOUT=ID FROM tbl_Contact WHERE UserFullName=N'''''' + @OwnerUserFullName + ''''''''
										SET @ParmDefinition = N''@LeadForceIDOUT nvarchar(50) OUTPUT''
										EXECUTE dbo.sp_executesql @SQLString, @ParmDefinition, @LeadForceIDOUT=@LeadForceID OUTPUT
										
										IF (@LeadForceID IS NULL)
										BEGIN
											SET @LeadForceID = NEWID()
											INSERT INTO tbl_Contact(ID, SiteID, UserFullName, RefferURL, UserIP, StatusID)
											VALUES (@LeadForceID, @SiteID, @OwnerUserFullName, '''', '''', @StatusID)
										END
									END
							END
							
							-- Обновление LeadForceID в таблицу #TableNames
							UPDATE #TableNames
							SET LeadForceID=@LeadForceID
							WHERE TableName=@TableName_Cursor AND ParentTableName=@ParentTableName_Cursor
						
							FETCH NEXT FROM TableName_Cursor INTO @TableName_Cursor
						END
						CLOSE TableName_Cursor
						DEALLOCATE TableName_Cursor
				
					FETCH NEXT FROM ParentTableName_Cursor INTO @ParentTableName_Cursor
				END
				CLOSE ParentTableName_Cursor
				DEALLOCATE ParentTableName_Cursor
				
				-- Создание связей между записями таблиц
				DECLARE @ContactID uniqueidentifier = (SELECT LeadForceID FROM #TableNames WHERE TableName=''tbl_Contact'')
				DECLARE @CompanyID uniqueidentifier = (SELECT LeadForceID FROM #TableNames WHERE TableName=''tbl_Company'')
				DECLARE @FKID uniqueidentifier = NULL
				
				IF (@ContactID IS NOT NULL)
				BEGIN
					IF (@CompanyID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET CompanyID=@CompanyID WHERE ID=@ContactID
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_Address'' AND ParentTableName=''tbl_Contact''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET AddressID=@FKID WHERE ID=@ContactID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_ContactType'' AND ParentTableName=''tbl_Contact''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET ContactTypeID=@FKID WHERE ID=@ContactID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''_Owner'' AND ParentTableName=''tbl_Contact''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Contact SET OwnerID=@FKID WHERE ID=@ContactID
						SET @FKID = NULL
					END
					
					-- Обновление тегов
					DECLARE @Tag_Cursor uniqueidentifier
					EXEC(''DECLARE Tag_Cursor CURSOR FOR SELECT ID FROM #Tags'')
					OPEN Tag_Cursor
					FETCH NEXT FROM Tag_Cursor INTO @Tag_Cursor
					WHILE @@FETCH_STATUS = 0
					BEGIN
						DECLARE @SiteTagID uniqueidentifier = NULL
						DECLARE @Operation int = NULL
						
						SELECT @SiteTagID=SiteTagID, @Operation=Operation
						FROM #Tags
						WHERE ID=@Tag_Cursor
						
						IF (@Operation=0)
						BEGIN
							DELETE FROM tbl_SiteTagObjects
							WHERE SiteTagID=@SiteTagID AND ObjectID=@ContactID
						END
						ELSE
						BEGIN
							IF (SELECT COUNT(*) FROM tbl_SiteTagObjects WHERE SiteTagID=@SiteTagID AND ObjectID=@ContactID) = 0
							BEGIN
								INSERT INTO tbl_SiteTagObjects (SiteTagID, ObjectID) VALUES (@SiteTagID, @ContactID)
							END
						END
					
						FETCH NEXT FROM Tag_Cursor INTO @Tag_Cursor
					END
					CLOSE Tag_Cursor
					DEALLOCATE Tag_Cursor
				END
				
				IF (@CompanyID IS NOT NULL)
				BEGIN
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_Address'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET LocationAddressID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_CompanyType'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET CompanyTypeID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''tbl_CompanySector'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET CompanySectorID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
					
					SELECT @FKID=LeadForceID FROM #TableNames WHERE TableName=''_Owner'' AND ParentTableName=''tbl_Company''
					IF (@FKID IS NOT NULL)
					BEGIN
						UPDATE tbl_Company SET OwnerID=@FKID WHERE ID=@CompanyID
						SET @FKID = NULL
					END
				END
				
				UPDATE #TableNames SET LeadForceID=NULL
		END
		
		FETCH NEXT FROM TmpImport_Cursor INTO @TmpImport_Cursor
	END
	CLOSE TmpImport_Cursor
	DEALLOCATE TmpImport_Cursor

	DROP TABLE #Rules
	DROP TABLE #TableNames
	DROP TABLE #Tags
	
	EXEC(''DROP TABLE TmpImport_'' + @IDString)
	
	SET ANSI_WARNINGS ON
END'

commit
exec LBC_SetVersion 380
END